<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="lms_8h" kind="file" language="C++">
    <compoundname>lms.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <incdepgraph>
      <node id="1">
        <label>lms.h</label>
        <link refid="lms_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="18">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="20">
        <label>limits.h</label>
      </node>
      <node id="5">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="19">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="8">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="9">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="structmbedtls__lmots__parameters__t" prot="public">mbedtls_lmots_parameters_t</innerclass>
    <innerclass refid="structmbedtls__lmots__public__t" prot="public">mbedtls_lmots_public_t</innerclass>
    <innerclass refid="structmbedtls__lmots__private__t" prot="public">mbedtls_lmots_private_t</innerclass>
    <innerclass refid="structmbedtls__lms__parameters__t" prot="public">mbedtls_lms_parameters_t</innerclass>
    <innerclass refid="structmbedtls__lms__public__t" prot="public">mbedtls_lms_public_t</innerclass>
    <innerclass refid="structmbedtls__lms__private__t" prot="public">mbedtls_lms_private_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="lms_8h_1a063ae2c142f8df468e8881fd6e4bcc23" prot="public" static="no">
        <name>MBEDTLS_ERR_LMS_BAD_INPUT_DATA</name>
        <initializer>-0x0011</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad data has been input to an LMS function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="24" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1afd1a714b0514dfdc0de6fd3eabb0f4d9" prot="public" static="no">
        <name>MBEDTLS_ERR_LMS_OUT_OF_PRIVATE_KEYS</name>
        <initializer>-0x0013</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specified LMS key has utilised all of its private keys </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="25" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1ad4efc93a94c61c17767981116eed99ed" prot="public" static="no">
        <name>MBEDTLS_ERR_LMS_VERIFY_FAILED</name>
        <initializer>-0x0015</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LMS signature verification failed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="26" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1aac24ceb4b7ad08865865f2eec1ab00e0" prot="public" static="no">
        <name>MBEDTLS_ERR_LMS_ALLOC_FAILED</name>
        <initializer>-0x0017</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LMS failed to allocate space for a private key </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="27" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1ac7df6c4c1a203de831ced3968b75b621" prot="public" static="no">
        <name>MBEDTLS_ERR_LMS_BUFFER_TOO_SMALL</name>
        <initializer>-0x0019</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input/output buffer is too small to contain requited data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="28" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a82f1dc4f2f52b1fcb3aa9094fc166fcd" prot="public" static="no">
        <name>MBEDTLS_LMOTS_N_HASH_LEN_MAX</name>
        <initializer>(32u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="31" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a28e24c0635c784771f726229d56ab3e0" prot="public" static="no">
        <name>MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT_MAX</name>
        <initializer>(34u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="32" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1abb3252e4e951769e0260b2ca6184da15" prot="public" static="no">
        <name>MBEDTLS_LMOTS_N_HASH_LEN</name>
        <param><defname>type</defname></param>
        <initializer>((type) == <ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671a20cff467920d727631bb673e347948ce" kindref="member">MBEDTLS_LMOTS_SHA256_N32_W8</ref> ? 32u : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="33" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a17c08588f26a9dc4c3d524e9c787299e" prot="public" static="no">
        <name>MBEDTLS_LMOTS_I_KEY_ID_LEN</name>
        <initializer>(16u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="34" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1ad6063fb226b417b764f7151961faa516" prot="public" static="no">
        <name>MBEDTLS_LMOTS_Q_LEAF_ID_LEN</name>
        <initializer>(4u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="35" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a20f20581d13ef39a4cc21e9432ea237e" prot="public" static="no">
        <name>MBEDTLS_LMOTS_TYPE_LEN</name>
        <initializer>(4u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="36" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a7fa18a930135f63d241dfe7161ac6a12" prot="public" static="no">
        <name>MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT</name>
        <param><defname>type</defname></param>
        <initializer>((type) == <ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671a20cff467920d727631bb673e347948ce" kindref="member">MBEDTLS_LMOTS_SHA256_N32_W8</ref> ? 34u : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="37" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1afb525db7c24d3a9fdd6075ac25a7c41f" prot="public" static="no">
        <name>MBEDTLS_LMOTS_C_RANDOM_VALUE_LEN</name>
        <param><defname>type</defname></param>
        <initializer>(<ref refid="lms_8h_1abb3252e4e951769e0260b2ca6184da15" kindref="member">MBEDTLS_LMOTS_N_HASH_LEN</ref>(type))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="38" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a3e42e26ff48ba3121d398df765a0d417" prot="public" static="no">
        <name>MBEDTLS_LMOTS_SIG_LEN</name>
        <param><defname>type</defname></param>
        <initializer>                                     (<ref refid="lms_8h_1a20f20581d13ef39a4cc21e9432ea237e" kindref="member">MBEDTLS_LMOTS_TYPE_LEN</ref> + \
                                     <ref refid="lms_8h_1afb525db7c24d3a9fdd6075ac25a7c41f" kindref="member">MBEDTLS_LMOTS_C_RANDOM_VALUE_LEN</ref>(type) + \
                                     (<ref refid="lms_8h_1a7fa18a930135f63d241dfe7161ac6a12" kindref="member">MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT</ref>(type) * \
                                      <ref refid="lms_8h_1abb3252e4e951769e0260b2ca6184da15" kindref="member">MBEDTLS_LMOTS_N_HASH_LEN</ref>(type)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="40" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1ae68ef371b917b00e9fe6efa1b9f45458" prot="public" static="no">
        <name>MBEDTLS_LMS_TYPE_LEN</name>
        <initializer>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="46" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a1cf4a8db282f598b1fb23da2c68cf7db" prot="public" static="no">
        <name>MBEDTLS_LMS_H_TREE_HEIGHT</name>
        <param><defname>type</defname></param>
        <initializer>((type) == <ref refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77a174ccfd9613e84b8522502ec0dbb670a" kindref="member">MBEDTLS_LMS_SHA256_M32_H10</ref> ? 10u : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="47" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a86700cf615a14118079d0cd6388be6cb" prot="public" static="no">
        <name>MBEDTLS_LMS_M_NODE_BYTES</name>
        <param><defname>type</defname></param>
        <initializer>((type) == <ref refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77a174ccfd9613e84b8522502ec0dbb670a" kindref="member">MBEDTLS_LMS_SHA256_M32_H10</ref> ? 32 : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="52" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1ad029ec2241cee8c150ea90b10de9186b" prot="public" static="no">
        <name>MBEDTLS_LMS_M_NODE_BYTES_MAX</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="53" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a954a0b45967f3683c3513bec356a2aec" prot="public" static="no">
        <name>MBEDTLS_LMS_SIG_LEN</name>
        <param><defname>type</defname></param>
        <param><defname>otstype</defname></param>
        <initializer>                                            (<ref refid="lms_8h_1ad6063fb226b417b764f7151961faa516" kindref="member">MBEDTLS_LMOTS_Q_LEAF_ID_LEN</ref> + \
                                            <ref refid="lms_8h_1a3e42e26ff48ba3121d398df765a0d417" kindref="member">MBEDTLS_LMOTS_SIG_LEN</ref>(otstype) + \
                                            <ref refid="lms_8h_1ae68ef371b917b00e9fe6efa1b9f45458" kindref="member">MBEDTLS_LMS_TYPE_LEN</ref> + \
                                            (<ref refid="lms_8h_1a1cf4a8db282f598b1fb23da2c68cf7db" kindref="member">MBEDTLS_LMS_H_TREE_HEIGHT</ref>(type) * \
                                             <ref refid="lms_8h_1a86700cf615a14118079d0cd6388be6cb" kindref="member">MBEDTLS_LMS_M_NODE_BYTES</ref>(type)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="55" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lms_8h_1a296d111d0ce01862289e6ba154d1fc34" prot="public" static="no">
        <name>MBEDTLS_LMS_PUBLIC_KEY_LEN</name>
        <param><defname>type</defname></param>
        <initializer>                                          (<ref refid="lms_8h_1ae68ef371b917b00e9fe6efa1b9f45458" kindref="member">MBEDTLS_LMS_TYPE_LEN</ref> + \
                                          <ref refid="lms_8h_1a20f20581d13ef39a4cc21e9432ea237e" kindref="member">MBEDTLS_LMOTS_TYPE_LEN</ref> + \
                                          <ref refid="lms_8h_1a17c08588f26a9dc4c3d524e9c787299e" kindref="member">MBEDTLS_LMOTS_I_KEY_ID_LEN</ref> + \
                                          <ref refid="lms_8h_1a86700cf615a14118079d0cd6388be6cb" kindref="member">MBEDTLS_LMS_M_NODE_BYTES</ref>(type))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="61" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_lms_algorithm_type_t</name>
        <enumvalue id="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77a174ccfd9613e84b8522502ec0dbb670a" prot="public">
          <name>MBEDTLS_LMS_SHA256_M32_H10</name>
          <initializer>= 0x6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Identifier of the LMS parameter set, as per <ulink url="https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml">https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml</ulink> We are only implementing a subset of the types, particularly H10, for the sake of simplicity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="75" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="enum" id="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_lmots_algorithm_type_t</name>
        <enumvalue id="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671a20cff467920d727631bb673e347948ce" prot="public">
          <name>MBEDTLS_LMOTS_SHA256_N32_W8</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Identifier of the LMOTS parameter set, as per <ulink url="https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml">https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml</ulink>. We are only implementing a subset of the types, particularly N32_W8, for the sake of simplicity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="83" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" bodystart="83" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lms_8h_1a7acf78ea5b2d35bfd6cd65d0ecdb7235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_lms_public_init</definition>
        <argsstring>(mbedtls_lms_public_t *ctx)</argsstring>
        <name>mbedtls_lms_public_init</name>
        <param>
          <type><ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes an LMS public context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The uninitialized LMS context that will then be initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="241" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="241" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1a5f9aa8c4ad94badd603689a029356ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_lms_public_free</definition>
        <argsstring>(mbedtls_lms_public_t *ctx)</argsstring>
        <name>mbedtls_lms_public_free</name>
        <param>
          <type><ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function uninitializes an LMS public context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMS context that will then be uninitialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="249" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="249" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1abc5a2aa47e07e775449fde5173d8304a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_lms_import_public_key</definition>
        <argsstring>(mbedtls_lms_public_t *ctx, const unsigned char *key, size_t key_size)</argsstring>
        <name>mbedtls_lms_import_public_key</name>
        <param>
          <type><ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_size</declname>
        </param>
        <briefdescription>
<para>This function imports an LMS public key into a public LMS context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Before this function is called, the context must have been initialized.</para>
</simplesect>
<simplesect kind="note"><para>See IETF RFC8554 for details of the encoding of this public key.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMS context store the key in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer from which the key will be read. <ref refid="lms_8h_1a296d111d0ce01862289e6ba154d1fc34" kindref="member">MBEDTLS_LMS_PUBLIC_KEY_LEN</ref> bytes will be read from this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key being imported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="270" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="270" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1a0e3dc0479e306d63b6f35da7bff670a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_lms_export_public_key</definition>
        <argsstring>(const mbedtls_lms_public_t *ctx, unsigned char *key, size_t key_size, size_t *key_len)</argsstring>
        <name>mbedtls_lms_export_public_key</name>
        <param>
          <type>const <ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>key_len</declname>
        </param>
        <briefdescription>
<para>This function exports an LMS public key from a LMS public context that already contains a public key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Before this function is called, the context must have been initialized and the context must contain a public key.</para>
</simplesect>
<simplesect kind="note"><para>See IETF RFC8554 for details of the encoding of this public key.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMS public context that contains the public key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer into which the key will be output. Must be at least <ref refid="lms_8h_1a296d111d0ce01862289e6ba154d1fc34" kindref="member">MBEDTLS_LMS_PUBLIC_KEY_LEN</ref> in size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_len</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, will be written with the size of the key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="296" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="296" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1a6749e9c75eb6956fda850d51c70da070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_lms_verify</definition>
        <argsstring>(const mbedtls_lms_public_t *ctx, const unsigned char *msg, size_t msg_size, const unsigned char *sig, size_t sig_size)</argsstring>
        <name>mbedtls_lms_verify</name>
        <param>
          <type>const <ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_size</declname>
        </param>
        <briefdescription>
<para>This function verifies a LMS signature, using a LMS context that contains a public key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Before this function is called, the context must have been initialized and must contain a public key (either by import or generation).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMS public context from which the public key will be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer from which the message will be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the message that will be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buf from which the signature will be read. <ref refid="lms_8h_1a954a0b45967f3683c3513bec356a2aec" kindref="member">MBEDTLS_LMS_SIG_LEN</ref> bytes will be read from this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the signature to be verified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on successful verification. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="320" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="320" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1a578ed722d9830f0cb7a3b80090ca941a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_lms_private_init</definition>
        <argsstring>(mbedtls_lms_private_t *ctx)</argsstring>
        <name>mbedtls_lms_private_init</name>
        <param>
          <type><ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes an LMS private context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The uninitialized LMS private context that will then be initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="330" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="330" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1ad07c4536f1a021cccfd050761c56606e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_lms_private_free</definition>
        <argsstring>(mbedtls_lms_private_t *ctx)</argsstring>
        <name>mbedtls_lms_private_free</name>
        <param>
          <type><ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function uninitializes an LMS private context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMS private context that will then be uninitialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="338" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="338" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1a2c409573acb70e2ea4ac3ce6c171f42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_lms_generate_private_key</definition>
        <argsstring>(mbedtls_lms_private_t *ctx, mbedtls_lms_algorithm_type_t type, mbedtls_lmots_algorithm_type_t otstype, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, const unsigned char *seed, size_t seed_size)</argsstring>
        <name>mbedtls_lms_generate_private_key</name>
        <param>
          <type><ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77" kindref="member">mbedtls_lms_algorithm_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671" kindref="member">mbedtls_lmots_algorithm_type_t</ref></type>
          <declname>otstype</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>seed_size</declname>
        </param>
        <briefdescription>
<para>This function generates an LMS private key, and stores in into an LMS private context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function is <bold>not intended for use in production</bold>, due to as-yet unsolved problems with handling stateful keys. The API for this function may change considerably in future versions.</para>
</simplesect>
<simplesect kind="note"><para>The seed must have at least 256 bits of entropy.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMOTS context to generate the key into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The LMS parameter set identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>otstype</parametername>
</parameternamelist>
<parameterdescription>
<para>The LMOTS parameter set identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to be used to generate the key ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to f_rng </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed used to deterministically generate the key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the seed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="364" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="364" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1ad8906c1cede12be5669e571b1cc06aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_lms_calculate_public_key</definition>
        <argsstring>(mbedtls_lms_public_t *ctx, const mbedtls_lms_private_t *priv_ctx)</argsstring>
        <name>mbedtls_lms_calculate_public_key</name>
        <param>
          <type><ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref> *</type>
          <declname>priv_ctx</declname>
        </param>
        <briefdescription>
<para>This function calculates an LMS public key from a LMS context that already contains a private key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Before this function is called, the context must have been initialized and the context must contain a private key.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMS public context to calculate the key from and store it into.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priv_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The LMS private context to read the private key from. This must have been initialized and contain a private key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="389" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="389" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="lms_8h_1a268d4b5467b825b6f3cc9b3775e56e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_lms_sign</definition>
        <argsstring>(mbedtls_lms_private_t *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, const unsigned char *msg, unsigned int msg_size, unsigned char *sig, size_t sig_size, size_t *sig_len)</argsstring>
        <name>mbedtls_lms_sign</name>
        <param>
          <type><ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sig_len</declname>
        </param>
        <briefdescription>
<para>This function creates a LMS signature, using a LMS context that contains unused private keys. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function is <bold>not intended for use in production</bold>, due to as-yet unsolved problems with handling stateful keys. The API for this function may change considerably in future versions.</para>
</simplesect>
<simplesect kind="note"><para>Before this function is called, the context must have been initialized and must contain a private key.</para>
</simplesect>
<simplesect kind="note"><para>Each of the LMOTS private keys inside a LMS private key can only be used once. If they are reused, then attackers may be able to forge signatures with that key. This is all handled transparently, but it is important to not perform copy operations on LMS contexts that contain private key material.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized LMS private context from which the private key will be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to be used for signature generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to f_rng </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer from which the message will be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the message that will be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buf into which the signature will be stored. Must be at least <ref refid="lms_8h_1a954a0b45967f3683c3513bec356a2aec" kindref="member">MBEDTLS_LMS_SIG_LEN</ref> in size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer the signature will be written into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, will be written with the size of the signature.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" line="429" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h" declline="429" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides an API for the LMS post-quantum-safe stateful-hash public-key signature scheme as defined in RFC8554 and NIST.SP.200-208. This implementation currently only supports a single parameter set MBEDTLS_LMS_SHA256_M32_H10 in order to reduce complexity. This is one of the signature schemes recommended by the IETF draft SUIT standard for IOT firmware upgrades (RFC9019). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_LMS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="lms_8h_1a063ae2c142f8df468e8881fd6e4bcc23" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_LMS_BAD_INPUT_DATA<sp/><sp/><sp/>-0x0011<sp/></highlight></codeline>
<codeline lineno="25" refid="lms_8h_1afd1a714b0514dfdc0de6fd3eabb0f4d9" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_LMS_OUT_OF_PRIVATE_KEYS<sp/>-0x0013<sp/></highlight></codeline>
<codeline lineno="26" refid="lms_8h_1ad4efc93a94c61c17767981116eed99ed" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_LMS_VERIFY_FAILED<sp/><sp/><sp/><sp/>-0x0015<sp/></highlight></codeline>
<codeline lineno="27" refid="lms_8h_1aac24ceb4b7ad08865865f2eec1ab00e0" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_LMS_ALLOC_FAILED<sp/><sp/><sp/><sp/><sp/>-0x0017<sp/></highlight></codeline>
<codeline lineno="28" refid="lms_8h_1ac7df6c4c1a203de831ced3968b75b621" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_LMS_BUFFER_TOO_SMALL<sp/>-0x0019<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Currently<sp/>only<sp/>defined<sp/>for<sp/>SHA256,<sp/>32<sp/>is<sp/>the<sp/>max<sp/>hash<sp/>output<sp/>size<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="lms_8h_1a82f1dc4f2f52b1fcb3aa9094fc166fcd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_N_HASH_LEN_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="lms_8h_1a28e24c0635c784771f726229d56ab3e0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT_MAX<sp/><sp/><sp/><sp/>(34u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="lms_8h_1abb3252e4e951769e0260b2ca6184da15" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_N_HASH_LEN(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type)<sp/>==<sp/>MBEDTLS_LMOTS_SHA256_N32_W8<sp/>?<sp/>32u<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="lms_8h_1a17c08588f26a9dc4c3d524e9c787299e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_I_KEY_ID_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(16u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="lms_8h_1ad6063fb226b417b764f7151961faa516" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_Q_LEAF_ID_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(4u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="lms_8h_1a20f20581d13ef39a4cc21e9432ea237e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_TYPE_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(4u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="lms_8h_1a7fa18a930135f63d241dfe7161ac6a12" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT(type)<sp/><sp/>((type)<sp/>==<sp/>MBEDTLS_LMOTS_SHA256_N32_W8<sp/>?<sp/>34u<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="lms_8h_1afb525db7c24d3a9fdd6075ac25a7c41f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_C_RANDOM_VALUE_LEN(type)<sp/>(MBEDTLS_LMOTS_N_HASH_LEN(type))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="lms_8h_1a3e42e26ff48ba3121d398df765a0d417" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMOTS_SIG_LEN(type)<sp/>(MBEDTLS_LMOTS_TYPE_LEN<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMOTS_C_RANDOM_VALUE_LEN(type)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT(type)<sp/>*<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMOTS_N_HASH_LEN(type)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="lms_8h_1ae68ef371b917b00e9fe6efa1b9f45458" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMS_TYPE_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="lms_8h_1a1cf4a8db282f598b1fb23da2c68cf7db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMS_H_TREE_HEIGHT(type)<sp/>((type)<sp/>==<sp/>MBEDTLS_LMS_SHA256_M32_H10<sp/>?<sp/>10u<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>length<sp/>of<sp/>a<sp/>hash<sp/>output,<sp/>Currently<sp/>only<sp/>implemented<sp/>for<sp/>SHA256.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>Max<sp/>is<sp/>32<sp/>bytes.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="lms_8h_1a86700cf615a14118079d0cd6388be6cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMS_M_NODE_BYTES(type)<sp/>((type)<sp/>==<sp/>MBEDTLS_LMS_SHA256_M32_H10<sp/>?<sp/>32<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="lms_8h_1ad029ec2241cee8c150ea90b10de9186b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMS_M_NODE_BYTES_MAX<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="lms_8h_1a954a0b45967f3683c3513bec356a2aec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMS_SIG_LEN(type,<sp/>otstype)<sp/>(MBEDTLS_LMOTS_Q_LEAF_ID_LEN<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMOTS_SIG_LEN(otstype)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMS_TYPE_LEN<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MBEDTLS_LMS_H_TREE_HEIGHT(type)<sp/>*<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMS_M_NODE_BYTES(type)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="lms_8h_1a296d111d0ce01862289e6ba154d1fc34" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LMS_PUBLIC_KEY_LEN(type)<sp/>(MBEDTLS_LMS_TYPE_LEN<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMOTS_TYPE_LEN<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMOTS_I_KEY_ID_LEN<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LMS_M_NODE_BYTES(type))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76" refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77a174ccfd9613e84b8522502ec0dbb670a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77a174ccfd9613e84b8522502ec0dbb670a" kindref="member">MBEDTLS_LMS_SHA256_M32_H10</ref><sp/>=<sp/>0x6,</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/><ref refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77" kindref="member">mbedtls_lms_algorithm_type_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84" refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671a20cff467920d727631bb673e347948ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671a20cff467920d727631bb673e347948ce" kindref="member">MBEDTLS_LMOTS_SHA256_N32_W8</ref><sp/>=<sp/>4</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/><ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671" kindref="member">mbedtls_lmots_algorithm_type_t</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structmbedtls__lmots__parameters__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94" refid="structmbedtls__lmots__parameters__t_1acb07f9fdc53838f6b08b603d217b50ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(I_key_identifier[<ref refid="lms_8h_1a17c08588f26a9dc4c3d524e9c787299e" kindref="member">MBEDTLS_LMOTS_I_KEY_ID_LEN</ref>]);<sp/></highlight></codeline>
<codeline lineno="96" refid="structmbedtls__lmots__parameters__t_1adaf583f6fde1b34464c70cd731b45a4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(q_leaf_identifier[<ref refid="lms_8h_1ad6063fb226b417b764f7151961faa516" kindref="member">MBEDTLS_LMOTS_Q_LEAF_ID_LEN</ref>]);<sp/></highlight></codeline>
<codeline lineno="99" refid="structmbedtls__lmots__parameters__t_1a01c5dbecc9b57764303fcc959d69e773" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671" kindref="member">mbedtls_lmots_algorithm_type_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(type);<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/><ref refid="structmbedtls__lmots__parameters__t" kindref="compound">mbedtls_lmots_parameters_t</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structmbedtls__lmots__public__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122" refid="structmbedtls__lmots__public__t_1ac3bd58a773ef7b091636e992cd83eba8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__lmots__parameters__t" kindref="compound">mbedtls_lmots_parameters_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(params);</highlight></codeline>
<codeline lineno="123" refid="structmbedtls__lmots__public__t_1a9e34118eeb3e4fc32f03cb6b63c5a03d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(public_key)[<ref refid="lms_8h_1a82f1dc4f2f52b1fcb3aa9094fc166fcd" kindref="member">MBEDTLS_LMOTS_N_HASH_LEN_MAX</ref>];</highlight></codeline>
<codeline lineno="124" refid="structmbedtls__lmots__public__t_1a647d386e95c76dcc2e48d214b9d56cab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(have_public_key);<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}<sp/><ref refid="structmbedtls__lmots__public__t" kindref="compound">mbedtls_lmots_public_t</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_LMS_PRIVATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structmbedtls__lmots__private__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147" refid="structmbedtls__lmots__private__t_1ae69cc80e71eaf81cbee2418af888d9f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__lmots__parameters__t" kindref="compound">mbedtls_lmots_parameters_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(params);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(private_key)[<ref refid="lms_8h_1a28e24c0635c784771f726229d56ab3e0" kindref="member">MBEDTLS_LMOTS_P_SIG_DIGIT_COUNT_MAX</ref>][</highlight></codeline>
<codeline lineno="149" refid="structmbedtls__lmots__private__t_1ab227ada7f0467c8af4aee559f6528528" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a82f1dc4f2f52b1fcb3aa9094fc166fcd" kindref="member">MBEDTLS_LMOTS_N_HASH_LEN_MAX</ref>];</highlight></codeline>
<codeline lineno="150" refid="structmbedtls__lmots__private__t_1ac3dab7da222a47fe8757197c352f89e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(have_private_key);<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}<sp/><ref refid="structmbedtls__lmots__private__t" kindref="compound">mbedtls_lmots_private_t</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(MBEDTLS_LMS_PRIVATE)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="structmbedtls__lms__parameters__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="162" refid="structmbedtls__lms__parameters__t_1aa2e8b48ddea1f4578b36d2ef5527f4cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(I_key_identifier[<ref refid="lms_8h_1a17c08588f26a9dc4c3d524e9c787299e" kindref="member">MBEDTLS_LMOTS_I_KEY_ID_LEN</ref>]);<sp/></highlight></codeline>
<codeline lineno="164" refid="structmbedtls__lms__parameters__t_1a52601282ba604e1cbfd903878ece8eb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671" kindref="member">mbedtls_lmots_algorithm_type_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(otstype);<sp/></highlight></codeline>
<codeline lineno="167" refid="structmbedtls__lms__parameters__t_1afc735e054a716fc28481fb110428cdff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77" kindref="member">mbedtls_lms_algorithm_type_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(type);<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal">}<sp/><ref refid="structmbedtls__lms__parameters__t" kindref="compound">mbedtls_lms_parameters_t</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="structmbedtls__lms__public__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="191" refid="structmbedtls__lms__public__t_1afb990a825181732d6c4e403effeb3a05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__lms__parameters__t" kindref="compound">mbedtls_lms_parameters_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(params);</highlight></codeline>
<codeline lineno="192" refid="structmbedtls__lms__public__t_1a7dece7a47c08a3376db1aa9cec70c9df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(T_1_pub_key)[<ref refid="lms_8h_1ad029ec2241cee8c150ea90b10de9186b" kindref="member">MBEDTLS_LMS_M_NODE_BYTES_MAX</ref>];<sp/></highlight></codeline>
<codeline lineno="194" refid="structmbedtls__lms__public__t_1ae6892b8f3c6a04b3ea04c92a602668cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(have_public_key);<sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal">}<sp/><ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_LMS_PRIVATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="structmbedtls__lms__private__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="217" refid="structmbedtls__lms__private__t_1af451a8492ae95dce0b6b70a2df739ec1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__lms__parameters__t" kindref="compound">mbedtls_lms_parameters_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(params);</highlight></codeline>
<codeline lineno="218" refid="structmbedtls__lms__private__t_1a306b1b5d9300d260a81aca282d8d1cf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(q_next_usable_key);<sp/></highlight></codeline>
<codeline lineno="220" refid="structmbedtls__lms__private__t_1ae400fb57820ee5eae8daa7ec62e19af6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__lmots__private__t" kindref="compound">mbedtls_lmots_private_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ots_private_keys);<sp/></highlight></codeline>
<codeline lineno="224" refid="structmbedtls__lms__private__t_1a2d5ac1ca205d5a45eaab26afbce6fbd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__lmots__public__t" kindref="compound">mbedtls_lmots_public_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ots_public_keys);<sp/></highlight></codeline>
<codeline lineno="230" refid="structmbedtls__lms__private__t_1a9521b022c2d9cf36d89395914e2a8375" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(have_private_key);<sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal">}<sp/><ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(MBEDTLS_LMS_PRIVATE)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1a7acf78ea5b2d35bfd6cd65d0ecdb7235" kindref="member">mbedtls_lms_public_init</ref>(<ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1a5f9aa8c4ad94badd603689a029356ef6" kindref="member">mbedtls_lms_public_free</ref>(<ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1abc5a2aa47e07e775449fde5173d8304a" kindref="member">mbedtls_lms_import_public_key</ref>(<ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_size);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1a0e3dc0479e306d63b6f35da7bff670a1" kindref="member">mbedtls_lms_export_public_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_size,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*key_len);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1a6749e9c75eb6956fda850d51c70da070" kindref="member">mbedtls_lms_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msg_size,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_size);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_LMS_PRIVATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1a578ed722d9830f0cb7a3b80090ca941a" kindref="member">mbedtls_lms_private_init</ref>(<ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1ad07c4536f1a021cccfd050761c56606e" kindref="member">mbedtls_lms_private_free</ref>(<ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1a2c409573acb70e2ea4ac3ce6c171f42b" kindref="member">mbedtls_lms_generate_private_key</ref>(<ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a94374525b9a22d24a240b31ae1f2ba77" kindref="member">mbedtls_lms_algorithm_type_t</ref><sp/>type,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lms_8h_1a45cdaf82c1d105b436e624d7bf2a6671" kindref="member">mbedtls_lmots_algorithm_type_t</ref><sp/>otstype,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seed,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>seed_size);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1ad8906c1cede12be5669e571b1cc06aac" kindref="member">mbedtls_lms_calculate_public_key</ref>(<ref refid="structmbedtls__lms__public__t" kindref="compound">mbedtls_lms_public_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref><sp/>*priv_ctx);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lms_8h_1a268d4b5467b825b6f3cc9b3775e56e01" kindref="member">mbedtls_lms_sign</ref>(<ref refid="structmbedtls__lms__private__t" kindref="compound">mbedtls_lms_private_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msg_size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_size,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sig_len);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(MBEDTLS_LMS_PRIVATE)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_LMS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/lms.h"/>
  </compounddef>
</doxygen>
