<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="platform_8h" kind="file" language="C++">
    <compoundname>platform.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="platform__time_8h" local="yes">mbedtls/platform_time.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdarg.h</includes>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="26">
        <label>stdarg.h</label>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="1">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="24">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="20">
        <label>mbedtls/platform_time.h</label>
        <link refid="platform__time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="25">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="21">
        <label>time.h</label>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="23">
        <label>stdio.h</label>
      </node>
      <node id="22">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmbedtls__platform__context" prot="public">mbedtls_platform_context</innerclass>
      <sectiondef kind="user-defined">
      <header>SECTION: Module settings</header>
      <description><para>The configuration options you can set for this module are in this section. Either change them in <ref refid="mbedtls__config_8h" kindref="compound">mbedtls_config.h</ref> or define them on the compiler command line. </para>
</description>
      <memberdef kind="define" id="platform_8h_1ac128e71af8e5de1edc7a6d43f4633de9" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_SNPRINTF</name>
        <initializer>snprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>snprintf</computeroutput> function to use. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="67" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a0cc9b7a2eebc04cc258daee9bf993668" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_VSNPRINTF</name>
        <initializer>vsnprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>vsnprintf</computeroutput> function to use. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="74" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a7f558b4383b398ef4c9901fe8952c603" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_PRINTF</name>
        <initializer>printf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>printf</computeroutput> function to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="78" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1acfb169577d838484539f5b17be8ab034" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_FPRINTF</name>
        <initializer>fprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>fprintf</computeroutput> function to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="81" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a9e7b93e4a92624d51bc7cbdc04723a05" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_CALLOC</name>
        <initializer>calloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default allocator to use, can be undefined. It must initialize the allocated buffer memory to zeroes. The size of the buffer is the product of the two parameters. The calloc function returns either a null pointer or a pointer to the allocated space. If the product is 0, the function may either return NULL or a valid pointer to an array of size 0 which is a valid input to the deallocation function. An uninitialized <ref refid="platform_8h_1a9e7b93e4a92624d51bc7cbdc04723a05" kindref="member">MBEDTLS_PLATFORM_STD_CALLOC</ref> always fails, returning a null pointer. See the description of <ref refid="mbedtls__config_8h_1ae58dba1b4a4c30f8c4d2f0e6080351af" kindref="member">MBEDTLS_PLATFORM_MEMORY</ref> for more details. The corresponding deallocation function is <ref refid="platform_8h_1a2abc88498566e351dc97660f5aecf46c" kindref="member">MBEDTLS_PLATFORM_STD_FREE</ref>.</para>
<para>The default <computeroutput>calloc</computeroutput> function to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="84" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a2abc88498566e351dc97660f5aecf46c" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_FREE</name>
        <initializer>free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default free to use, can be undefined. NULL is a valid parameter, and the function must do nothing. A non-null parameter will always be a pointer previously returned by <ref refid="platform_8h_1a9e7b93e4a92624d51bc7cbdc04723a05" kindref="member">MBEDTLS_PLATFORM_STD_CALLOC</ref> and not yet freed. An uninitialized <ref refid="platform_8h_1a2abc88498566e351dc97660f5aecf46c" kindref="member">MBEDTLS_PLATFORM_STD_FREE</ref> does not do anything. See the description of <ref refid="mbedtls__config_8h_1ae58dba1b4a4c30f8c4d2f0e6080351af" kindref="member">MBEDTLS_PLATFORM_MEMORY</ref> for more details (same principles as for MBEDTLS_PLATFORM_STD_CALLOC apply).</para>
<para>The default <computeroutput>free</computeroutput> function to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="87" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1ab2bded8dd9c612ff6d8996385718cec6" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_SETBUF</name>
        <initializer>setbuf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>setbuf</computeroutput> function to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="90" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a38913959323b25e00cdaf606647ef398" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_EXIT</name>
        <initializer>exit</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>exit</computeroutput> function to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="93" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a617cd0d84bb5dd4d1fc44d4975873b6c" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_TIME</name>
        <initializer>time</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>time</computeroutput> function to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="96" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1ad9a994f168868af54652a992937df5d0" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_EXIT_SUCCESS</name>
        <initializer>EXIT_SUCCESS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default exit value to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="99" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a04892f78f480255957e858fd6f82053a" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_EXIT_FAILURE</name>
        <initializer>EXIT_FAILURE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default exit value to use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="102" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1aa48a4c49a3bf3d0d41b7142270d752d4" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_NV_SEED_READ</name>
        <initializer><ref refid="platform_8h_1aa6df3289d15fde110a5b3a13d6269055" kindref="member">mbedtls_platform_std_nv_seed_read</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="106" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a53ddd1e4f60566c81a83d45026a643c8" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_NV_SEED_WRITE</name>
        <initializer><ref refid="platform_8h_1ad764d18ab4fb676f34599b19be97da99" kindref="member">mbedtls_platform_std_nv_seed_write</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="109" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a0edd4a9b0e9ba51ea85c74780101b7cd" prot="public" static="no">
        <name>MBEDTLS_PLATFORM_STD_NV_SEED_FILE</name>
        <initializer>&quot;seedfile&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="112" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="platform_8h_1ae0beaef88e29bfd432cb2543ac79f109" prot="public" static="no">
        <name>MBEDTLS_EXIT_SUCCESS</name>
        <initializer><ref refid="platform_8h_1ad9a994f168868af54652a992937df5d0" kindref="member">MBEDTLS_PLATFORM_STD_EXIT_SUCCESS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="378" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="platform_8h_1a416732ec24ebb55fb12969e849ba27c0" prot="public" static="no">
        <name>MBEDTLS_EXIT_FAILURE</name>
        <initializer><ref refid="platform_8h_1a04892f78f480255957e858fd6f82053a" kindref="member">MBEDTLS_PLATFORM_STD_EXIT_FAILURE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="383" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="platform_8h_1a6721103ba44e936b7d0d9a489f802923" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__platform__context" kindref="compound">mbedtls_platform_context</ref></type>
        <definition>typedef struct mbedtls_platform_context mbedtls_platform_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_platform_context</name>
        <briefdescription>
<para>The platform context structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This structure may be used to assist platform-specific setup or teardown operations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="443" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="platform_8h_1a21bbd0f94e7de627a5e7d86ca42a61e9" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* mbedtls_fprintf) (FILE *stream, const char *format,...)</definition>
        <argsstring>)(FILE *stream, const char *format,...)</argsstring>
        <name>mbedtls_fprintf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="176" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="176" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="platform_8h_1af666e8246c192983cbb2321ac680a8b8" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* mbedtls_printf) (const char *format,...)</definition>
        <argsstring>)(const char *format,...)</argsstring>
        <name>mbedtls_printf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="202" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="202" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="platform_8h_1adf4d9e98cd0bd6fa4468379e822be4ba" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* mbedtls_snprintf) (char *s, size_t n, const char *format,...)</definition>
        <argsstring>)(char *s, size_t n, const char *format,...)</argsstring>
        <name>mbedtls_snprintf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="238" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="238" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="platform_8h_1a6b4a3d46c23d5acec3533207b810279c" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* mbedtls_vsnprintf) (char *s, size_t n, const char *format, va_list arg)</definition>
        <argsstring>)(char *s, size_t n, const char *format, va_list arg)</argsstring>
        <name>mbedtls_vsnprintf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="276" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="276" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="platform_8h_1ae15799941a0d27eb32cac08652afb0cc" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* mbedtls_setbuf) (FILE *stream, char *buf)</definition>
        <argsstring>)(FILE *stream, char *buf)</argsstring>
        <name>mbedtls_setbuf</name>
        <briefdescription>
<para>Function pointer to call for <computeroutput>setbuf()</computeroutput> functionality (changing the internal buffering on stdio calls). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The library calls this function to disable buffering when reading or writing sensitive data, to avoid having extra copies of sensitive data remaining in stdio buffers after the file is closed. If this is not a concern, for example if your platform&apos;s stdio doesn&apos;t have any buffering, you can set mbedtls_setbuf to a function that does nothing.</para>
</simplesect>
The library always calls this function with <computeroutput>buf</computeroutput> equal to <computeroutput>NULL</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="317" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="317" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="platform_8h_1ada5e7b09e8e6b8f99612fafc268627ef" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* mbedtls_exit) (int status)</definition>
        <argsstring>)(int status)</argsstring>
        <name>mbedtls_exit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="353" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="353" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="platform_8h_1a1fcb782621c277af7d88b4ea45d900b8" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* mbedtls_nv_seed_read) (unsigned char *buf, size_t buf_len)</definition>
        <argsstring>)(unsigned char *buf, size_t buf_len)</argsstring>
        <name>mbedtls_nv_seed_read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="402" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="402" declcolumn="8"/>
      </memberdef>
      <memberdef kind="variable" id="platform_8h_1a4f7f4a67acd4e27255b86cf1a4b49dd6" prot="public" static="no" mutable="no">
        <type>int(*</type>
        <definition>int(* mbedtls_nv_seed_write) (unsigned char *buf, size_t buf_len)</definition>
        <argsstring>)(unsigned char *buf, size_t buf_len)</argsstring>
        <name>mbedtls_nv_seed_write</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="403" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="403" declcolumn="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="platform_8h_1a36a09500d93d29d1f4a81f6a3be8bbed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mbedtls_calloc</definition>
        <argsstring>(size_t n, size_t size)</argsstring>
        <name>mbedtls_calloc</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="148" column="13" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="148" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>mbedtls_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="149" column="13" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="149" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1a241f8a0d513d9f8d6bfcb69383ee65be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_calloc_free</definition>
        <argsstring>(void *(*calloc_func)(size_t, size_t), void(*free_func)(void *))</argsstring>
        <name>mbedtls_platform_set_calloc_free</name>
        <param>
          <type>void *(*)(size_t, size_t)</type>
          <declname>calloc_func</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>free_func</declname>
        </param>
        <briefdescription>
<para>This function dynamically sets the memory-management functions used by the library, during runtime. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calloc_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>calloc</computeroutput> function implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>free</computeroutput> function implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="160" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="160" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1af24ab1334235e3b41bf41e9cf56a9ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_fprintf</definition>
        <argsstring>(int(*fprintf_func)(FILE *stream, const char *,...))</argsstring>
        <name>mbedtls_platform_set_fprintf</name>
        <param>
          <type>int(*)(FILE *stream, const char *,...)</type>
          <declname>fprintf_func</declname>
        </param>
        <briefdescription>
<para>This function dynamically configures the fprintf function that is called when the <ref refid="platform_8h_1a21bbd0f94e7de627a5e7d86ca42a61e9" kindref="member">mbedtls_fprintf()</ref> function is invoked by the library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fprintf_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>fprintf</computeroutput> function implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="187" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="187" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1ad5514a1309870f4b297f6a45ed249ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_printf</definition>
        <argsstring>(int(*printf_func)(const char *,...))</argsstring>
        <name>mbedtls_platform_set_printf</name>
        <param>
          <type>int(*)(const char *,...)</type>
          <declname>printf_func</declname>
        </param>
        <briefdescription>
<para>This function dynamically configures the snprintf function that is called when the <ref refid="platform_8h_1adf4d9e98cd0bd6fa4468379e822be4ba" kindref="member">mbedtls_snprintf()</ref> function is invoked by the library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>printf_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>printf</computeroutput> function implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="213" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="213" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1a9291b1f986f9d901147fdff535e31a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_snprintf</definition>
        <argsstring>(int(*snprintf_func)(char *s, size_t n, const char *format,...))</argsstring>
        <name>mbedtls_platform_set_snprintf</name>
        <param>
          <type>int(*)(char *s, size_t n, const char *format,...)</type>
          <declname>snprintf_func</declname>
        </param>
        <briefdescription>
<para>This function allows configuring a custom <computeroutput>snprintf</computeroutput> function pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snprintf_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>snprintf</computeroutput> function implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="248" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="248" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1ada26e687a256ea9e43861ac98bbb691e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_vsnprintf</definition>
        <argsstring>(int(*vsnprintf_func)(char *s, size_t n, const char *format, va_list arg))</argsstring>
        <name>mbedtls_platform_set_vsnprintf</name>
        <param>
          <type>int(*)(char *s, size_t n, const char *format, va_list arg)</type>
          <declname>vsnprintf_func</declname>
        </param>
        <briefdescription>
<para>Set your own snprintf function pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vsnprintf_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>vsnprintf</computeroutput> function implementation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="285" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="285" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1a21a2b71df692dff5bff784d91db47b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_setbuf</definition>
        <argsstring>(void(*setbuf_func)(FILE *stream, char *buf))</argsstring>
        <name>mbedtls_platform_set_setbuf</name>
        <param>
          <type>void(*)(FILE *stream, char *buf)</type>
          <declname>setbuf_func</declname>
        </param>
        <briefdescription>
<para>Dynamically configure the function that is called when the <ref refid="platform_8h_1ae15799941a0d27eb32cac08652afb0cc" kindref="member">mbedtls_setbuf()</ref> function is called by the library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setbuf_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>setbuf</computeroutput> function implementation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="328" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="328" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1a05389824861deaa4ca30992bd7daca23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_exit</definition>
        <argsstring>(void(*exit_func)(int status))</argsstring>
        <name>mbedtls_platform_set_exit</name>
        <param>
          <type>void(*)(int status)</type>
          <declname>exit_func</declname>
        </param>
        <briefdescription>
<para>This function dynamically configures the exit function that is called when the <ref refid="platform_8h_1ada5e7b09e8e6b8f99612fafc268627ef" kindref="member">mbedtls_exit()</ref> function is invoked by the library. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exit_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>exit</computeroutput> function implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="364" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="364" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1aa6df3289d15fde110a5b3a13d6269055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_std_nv_seed_read</definition>
        <argsstring>(unsigned char *buf, size_t buf_len)</argsstring>
        <name>mbedtls_platform_std_nv_seed_read</name>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="397" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="397" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1ad764d18ab4fb676f34599b19be97da99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_std_nv_seed_write</definition>
        <argsstring>(unsigned char *buf, size_t buf_len)</argsstring>
        <name>mbedtls_platform_std_nv_seed_write</name>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="398" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="398" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1a047954a8d4960f8bc16081ac4b3c6460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_set_nv_seed</definition>
        <argsstring>(int(*nv_seed_read_func)(unsigned char *buf, size_t buf_len), int(*nv_seed_write_func)(unsigned char *buf, size_t buf_len))</argsstring>
        <name>mbedtls_platform_set_nv_seed</name>
        <param>
          <type>int(*)(unsigned char *buf, size_t buf_len)</type>
          <declname>nv_seed_read_func</declname>
        </param>
        <param>
          <type>int(*)(unsigned char *buf, size_t buf_len)</type>
          <declname>nv_seed_write_func</declname>
        </param>
        <briefdescription>
<para>This function allows configuring custom seed file writing and reading functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nv_seed_read_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed reading function implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nv_seed_write_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed writing function implementation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="414" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="414" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1af0f37c11be234650bec95ce37e9a4a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_platform_setup</definition>
        <argsstring>(mbedtls_platform_context *ctx)</argsstring>
        <name>mbedtls_platform_setup</name>
        <param>
          <type><ref refid="structmbedtls__platform__context" kindref="compound">mbedtls_platform_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function performs any platform-specific initialization operations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function should be called before any other library functions. <verbatim>     Its implementation is platform-specific, and unless
     platform-specific code is provided, it does nothing.
</verbatim></para>
</simplesect>
<simplesect kind="note"><para>The usage and necessity of this function is dependent on the platform.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="464" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="464" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="platform_8h_1a264d5dd442e32a262d331f8889a0997c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_platform_teardown</definition>
        <argsstring>(mbedtls_platform_context *ctx)</argsstring>
        <name>mbedtls_platform_teardown</name>
        <param>
          <type><ref refid="structmbedtls__platform__context" kindref="compound">mbedtls_platform_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function performs any platform teardown operations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function should be called after every other Mbed TLS module has been correctly freed using the appropriate free function.</para>
</simplesect>
Its implementation is platform-specific, and unless platform-specific code is provided, it does nothing.</para>
<para><simplesect kind="note"><para>The usage and necessity of this function is dependent on the platform.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" line="479" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h" declline="479" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains the definitions and functions of the Mbed TLS platform abstraction layer. </para>
    </briefdescription>
    <detaileddescription>
<para>The platform abstraction layer removes the need for the library to directly link to standard C library functions or operating system services, making the library easier to port and embed. Application developers and users of the library can provide their own implementations of these functions, or implementations specific to their platform, which can be statically linked to the library or dynamically configured at runtime.</para>
<para>When all compilation options related to platform abstraction are disabled, this header just defines <computeroutput>mbedtls_xxx</computeroutput> function names as aliases to the standard <computeroutput>xxx</computeroutput> function.</para>
<para>Most modules in the library and example programs are expected to include this header. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_PLATFORM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_HAVE_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="platform__time_8h" kindref="compound">mbedtls/platform_time.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">/*<sp/>The<sp/>older<sp/>Microsoft<sp/>Windows<sp/>common<sp/>runtime<sp/>provides<sp/>non-conforming</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>implementations<sp/>of<sp/>some<sp/>standard<sp/>library<sp/>functions,<sp/>including<sp/>snprintf</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>and<sp/>vsnprintf.<sp/>This<sp/>affects<sp/>MSVC<sp/>and<sp/>MinGW<sp/>builds.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__MINGW32__)<sp/>||<sp/>(defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;=<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_HAS_NON_CONFORMING_SNPRINTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_HAS_NON_CONFORMING_VSNPRINTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_NO_STD_FUNCTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_HAVE_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_SNPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_HAS_NON_CONFORMING_SNPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_SNPRINTF<sp/><sp/><sp/>mbedtls_platform_win32_snprintf<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="platform_8h_1ac128e71af8e5de1edc7a6d43f4633de9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_SNPRINTF<sp/><sp/><sp/>snprintf<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_VSNPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_HAS_NON_CONFORMING_VSNPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_VSNPRINTF<sp/><sp/><sp/>mbedtls_platform_win32_vsnprintf<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="platform_8h_1a0cc9b7a2eebc04cc258daee9bf993668" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_VSNPRINTF<sp/><sp/><sp/>vsnprintf<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_PRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="platform_8h_1a7f558b4383b398ef4c9901fe8952c603" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_PRINTF<sp/><sp/><sp/>printf<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_FPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="platform_8h_1acfb169577d838484539f5b17be8ab034" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_FPRINTF<sp/>fprintf<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_CALLOC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="platform_8h_1a9e7b93e4a92624d51bc7cbdc04723a05" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_CALLOC<sp/><sp/><sp/>calloc<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_FREE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="platform_8h_1a2abc88498566e351dc97660f5aecf46c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_FREE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_SETBUF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="platform_8h_1ab2bded8dd9c612ff6d8996385718cec6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_SETBUF<sp/><sp/><sp/>setbuf<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_EXIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="platform_8h_1a38913959323b25e00cdaf606647ef398" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_EXIT<sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="platform_8h_1a617cd0d84bb5dd4d1fc44d4975873b6c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_EXIT_SUCCESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="platform_8h_1ad9a994f168868af54652a992937df5d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_EXIT_SUCCESS<sp/><sp/>EXIT_SUCCESS<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_EXIT_FAILURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="platform_8h_1a04892f78f480255957e858fd6f82053a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_EXIT_FAILURE<sp/><sp/>EXIT_FAILURE<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_FS_IO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_NV_SEED_READ)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="platform_8h_1aa48a4c49a3bf3d0d41b7142270d752d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_NV_SEED_READ<sp/><sp/><sp/>mbedtls_platform_std_nv_seed_read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_NV_SEED_WRITE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="platform_8h_1a53ddd1e4f60566c81a83d45026a643c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_NV_SEED_WRITE<sp/><sp/>mbedtls_platform_std_nv_seed_write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_STD_NV_SEED_FILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="platform_8h_1a0edd4a9b0e9ba51ea85c74780101b7cd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_NV_SEED_FILE<sp/><sp/><sp/>&quot;seedfile&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_FS_IO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_NO_STD_FUNCTIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_STD_MEM_HDR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>MBEDTLS_PLATFORM_STD_MEM_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_NO_STD_FUNCTIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Enable<sp/>certain<sp/>documented<sp/>defines<sp/>only<sp/>when<sp/>generating<sp/>doxygen<sp/>to<sp/>avoid</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>an<sp/>&quot;unrecognized<sp/>define&quot;<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__DOXYGEN__)<sp/>&amp;&amp;<sp/>!defined(MBEDTLS_PLATFORM_STD_CALLOC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_CALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__DOXYGEN__)<sp/>&amp;&amp;<sp/>!defined(MBEDTLS_PLATFORM_STD_FREE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PLATFORM_STD_FREE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>calloc<sp/>and<sp/>free.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>Please<sp/>see<sp/>MBEDTLS_PLATFORM_STD_CALLOC<sp/>and<sp/>MBEDTLS_PLATFORM_STD_FREE</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>in<sp/>mbedtls_config.h<sp/>for<sp/>more<sp/>information<sp/>about<sp/>behaviour<sp/>and<sp/>requirements.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_MEMORY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_FREE_MACRO)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_PLATFORM_CALLOC_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_free<sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_PLATFORM_FREE_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_calloc<sp/><sp/><sp/><sp/><sp/>MBEDTLS_PLATFORM_CALLOC_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>size_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="platform_8h_1a36a09500d93d29d1f4a81f6a3be8bbed" kindref="member">mbedtls_calloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" kindref="member">mbedtls_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1a241f8a0d513d9f8d6bfcb69383ee65be" kindref="member">mbedtls_platform_set_calloc_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*calloc_func)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_FREE_MACRO<sp/>&amp;&amp;<sp/>MBEDTLS_PLATFORM_CALLOC_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_PLATFORM_MEMORY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_free<sp/><sp/><sp/><sp/><sp/><sp/><sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_calloc<sp/><sp/><sp/><sp/><sp/>calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_MEMORY<sp/>&amp;&amp;<sp/>!MBEDTLS_PLATFORM_{FREE,CALLOC}_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>fprintf</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_FPRINTF_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>FILE<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="platform_8h_1a21bbd0f94e7de627a5e7d86ca42a61e9" kindref="member">mbedtls_fprintf</ref>)(FILE<sp/>*stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1af24ab1334235e3b41bf41e9cf56a9ed1" kindref="member">mbedtls_platform_set_fprintf</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*fprintf_func)(FILE<sp/>*stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_fprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_FPRINTF_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_fprintf<sp/><sp/><sp/><sp/>MBEDTLS_PLATFORM_FPRINTF_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_fprintf<sp/><sp/><sp/><sp/>fprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_FPRINTF_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_FPRINTF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>printf</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_PRINTF_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="platform_8h_1af666e8246c192983cbb2321ac680a8b8" kindref="member">mbedtls_printf</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1ad5514a1309870f4b297f6a45ed249ae0" kindref="member">mbedtls_platform_set_printf</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*printf_func)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_PLATFORM_PRINTF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_PRINTF_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_printf<sp/><sp/><sp/><sp/><sp/>MBEDTLS_PLATFORM_PRINTF_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_printf<sp/><sp/><sp/><sp/><sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_PRINTF_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_PRINTF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>snprintf</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>The<sp/>snprintf<sp/>implementation<sp/>should<sp/>conform<sp/>to<sp/>C99:</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>-<sp/>it<sp/>*must*<sp/>always<sp/>correctly<sp/>zero-terminate<sp/>the<sp/>buffer</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(except<sp/>when<sp/>n<sp/>==<sp/>0,<sp/>then<sp/>it<sp/>must<sp/>leave<sp/>the<sp/>buffer<sp/>untouched)</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>-<sp/>however<sp/>it<sp/>is<sp/>acceptable<sp/>to<sp/>return<sp/>-1<sp/>instead<sp/>of<sp/>the<sp/>required<sp/>length<sp/>when</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>destination<sp/>buffer<sp/>is<sp/>too<sp/>short.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_HAS_NON_CONFORMING_SNPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>Windows<sp/>(inc.<sp/>MSYS2),<sp/>we<sp/>provide<sp/>our<sp/>own<sp/>fixed<sp/>implementation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbedtls_platform_win32_snprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_SNPRINTF_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="platform_8h_1adf4d9e98cd0bd6fa4468379e822be4ba" kindref="member">mbedtls_snprintf</ref>)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1a9291b1f986f9d901147fdff535e31a62" kindref="member">mbedtls_platform_set_snprintf</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*snprintf_func)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_SNPRINTF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_SNPRINTF_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_snprintf<sp/><sp/><sp/>MBEDTLS_PLATFORM_SNPRINTF_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_snprintf<sp/><sp/><sp/>MBEDTLS_PLATFORM_STD_SNPRINTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_SNPRINTF_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_SNPRINTF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>vsnprintf</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>The<sp/>vsnprintf<sp/>implementation<sp/>should<sp/>conform<sp/>to<sp/>C99:</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>-<sp/>it<sp/>*must*<sp/>always<sp/>correctly<sp/>zero-terminate<sp/>the<sp/>buffer</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(except<sp/>when<sp/>n<sp/>==<sp/>0,<sp/>then<sp/>it<sp/>must<sp/>leave<sp/>the<sp/>buffer<sp/>untouched)</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>-<sp/>however<sp/>it<sp/>is<sp/>acceptable<sp/>to<sp/>return<sp/>-1<sp/>instead<sp/>of<sp/>the<sp/>required<sp/>length<sp/>when</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>destination<sp/>buffer<sp/>is<sp/>too<sp/>short.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_HAS_NON_CONFORMING_VSNPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>Older<sp/>Windows<sp/>(inc.<sp/>MSYS2),<sp/>we<sp/>provide<sp/>our<sp/>own<sp/>fixed<sp/>implementation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbedtls_platform_win32_vsnprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>arg);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_VSNPRINTF_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="platform_8h_1a6b4a3d46c23d5acec3533207b810279c" kindref="member">mbedtls_vsnprintf</ref>)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>va_list<sp/>arg);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1ada26e687a256ea9e43861ac98bbb691e" kindref="member">mbedtls_platform_set_vsnprintf</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*vsnprintf_func)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>va_list<sp/>arg));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_VSNPRINTF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_vsnprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_VSNPRINTF_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_vsnprintf<sp/><sp/><sp/>MBEDTLS_PLATFORM_VSNPRINTF_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_vsnprintf<sp/><sp/><sp/>vsnprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_VSNPRINTF_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_VSNPRINTF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>setbuf</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_SETBUF_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline lineno="317"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="platform_8h_1ae15799941a0d27eb32cac08652afb0cc" kindref="member">mbedtls_setbuf</ref>)(FILE<sp/>*stream,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1a21a2b71df692dff5bff784d91db47b72" kindref="member">mbedtls_platform_set_setbuf</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*setbuf_func)(</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*stream,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_setbuf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_SETBUF_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor">#define<sp/>mbedtls_setbuf<sp/><sp/><sp/><sp/>MBEDTLS_PLATFORM_SETBUF_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_setbuf<sp/><sp/><sp/><sp/>setbuf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_SETBUF_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_SETBUF_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>exit</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_EXIT_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="platform_8h_1ada5e7b09e8e6b8f99612fafc268627ef" kindref="member">mbedtls_exit</ref>)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1a05389824861deaa4ca30992bd7daca23" kindref="member">mbedtls_platform_set_exit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*exit_func)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_EXIT_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_exit<sp/><sp/><sp/>MBEDTLS_PLATFORM_EXIT_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_exit<sp/><sp/><sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_EXIT_MACRO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_EXIT_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>The<sp/>default<sp/>exit<sp/>values</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_STD_EXIT_SUCCESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="platform_8h_1ae0beaef88e29bfd432cb2543ac79f109" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_EXIT_SUCCESS<sp/>MBEDTLS_PLATFORM_STD_EXIT_SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_EXIT_SUCCESS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_STD_EXIT_FAILURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="platform_8h_1a416732ec24ebb55fb12969e849ba27c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_EXIT_FAILURE<sp/>MBEDTLS_PLATFORM_STD_EXIT_FAILURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_EXIT_FAILURE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>pointers<sp/>for<sp/>reading<sp/>from<sp/>and<sp/>writing<sp/>a<sp/>seed<sp/>file<sp/>to</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>Non-Volatile<sp/>storage<sp/>(NV)<sp/>in<sp/>a<sp/>platform-independent<sp/>way</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>Only<sp/>enabled<sp/>when<sp/>the<sp/>NV<sp/>seed<sp/>entropy<sp/>source<sp/>is<sp/>enabled</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ENTROPY_NV_SEED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_NO_STD_FUNCTIONS)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_FS_IO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>standard<sp/>platform<sp/>definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1aa6df3289d15fde110a5b3a13d6269055" kindref="member">mbedtls_platform_std_nv_seed_read</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1ad764d18ab4fb676f34599b19be97da99" kindref="member">mbedtls_platform_std_nv_seed_write</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_NV_SEED_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="platform_8h_1a1fcb782621c277af7d88b4ea45d900b8" kindref="member">mbedtls_nv_seed_read</ref>)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="platform_8h_1a4f7f4a67acd4e27255b86cf1a4b49dd6" kindref="member">mbedtls_nv_seed_write</ref>)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1a047954a8d4960f8bc16081ac4b3c6460" kindref="member">mbedtls_platform_set_nv_seed</ref>(</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*nv_seed_read_func)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len),</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*nv_seed_write_func)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_nv_seed_read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>mbedtls_nv_seed_write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PLATFORM_NV_SEED_READ_MACRO)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_nv_seed_read<sp/><sp/><sp/><sp/>MBEDTLS_PLATFORM_NV_SEED_READ_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_nv_seed_write<sp/><sp/><sp/>MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_nv_seed_read<sp/><sp/><sp/><sp/>mbedtls_platform_std_nv_seed_read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mbedtls_nv_seed_write<sp/><sp/><sp/>mbedtls_platform_std_nv_seed_write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PLATFORM_NV_SEED_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ENTROPY_NV_SEED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="structmbedtls__platform__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__platform__context" kindref="compound">mbedtls_platform_context</ref><sp/>{</highlight></codeline>
<codeline lineno="441" refid="structmbedtls__platform__context_1a08f8fba33e27a5c6edbbc872970fadc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dummy);<sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><ref refid="platform_8h_1a6721103ba44e936b7d0d9a489f802923" kindref="member">mbedtls_platform_context</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;platform_alt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1af0f37c11be234650bec95ce37e9a4a6b" kindref="member">mbedtls_platform_setup</ref>(<ref refid="structmbedtls__platform__context" kindref="compound">mbedtls_platform_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="479"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="platform_8h_1a264d5dd442e32a262d331f8889a0997c" kindref="member">mbedtls_platform_teardown</ref>(<ref refid="structmbedtls__platform__context" kindref="compound">mbedtls_platform_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>platform.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/platform.h"/>
  </compounddef>
</doxygen>
