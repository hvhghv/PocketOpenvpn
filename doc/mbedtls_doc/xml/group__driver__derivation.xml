<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__driver__derivation" kind="group">
    <compoundname>driver_derivation</compoundname>
    <title>Secure Element Key Derivation and Agreement</title>
    <innerclass refid="structpsa__drv__se__key__derivation__t" prot="public">psa_drv_se_key_derivation_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__driver__derivation_1ga517b85e6c8f12f986de375a7e70028fe" prot="public" static="no">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref>(*</type>
        <definition>typedef psa_status_t(* psa_drv_se_key_derivation_setup_t) (psa_drv_se_context_t *drv_context, void *op_context, psa_algorithm_t kdf_alg, psa_key_slot_number_t source_key)</definition>
        <argsstring>)(psa_drv_se_context_t *drv_context, void *op_context, psa_algorithm_t kdf_alg, psa_key_slot_number_t source_key)</argsstring>
        <name>psa_drv_se_key_derivation_setup_t</name>
        <briefdescription>
<para>A function that Sets up a secure element key derivation operation by specifying the algorithm and the source key sot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">drv_context</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver context structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">op_context</parametername>
</parameternamelist>
<parameterdescription>
<para>A hardware-specific structure containing any context information for the implementation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kdf_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The algorithm to be used for the key derivation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to be used as the source material for the key derivation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" line="1189" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__driver__derivation_1ga3d730798a122772534887ea87e2f9c4e" prot="public" static="no">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref>(*</type>
        <definition>typedef psa_status_t(* psa_drv_se_key_derivation_collateral_t) (void *op_context, uint32_t collateral_id, const uint8_t *p_collateral, size_t collateral_size)</definition>
        <argsstring>)(void *op_context, uint32_t collateral_id, const uint8_t *p_collateral, size_t collateral_size)</argsstring>
        <name>psa_drv_se_key_derivation_collateral_t</name>
        <briefdescription>
<para>A function that provides collateral (parameters) needed for a secure element key derivation or key agreement operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Since many key derivation algorithms require multiple parameters, it is expected that this function may be called multiple times for the same operation, each with a different algorithm-specific <computeroutput>collateral_id</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">op_context</parametername>
</parameternamelist>
<parameterdescription>
<para>A hardware-specific structure containing any context information for the implementation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">collateral_id</parametername>
</parameternamelist>
<parameterdescription>
<para>An ID for the collateral being provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_collateral</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer containing the collateral data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">collateral_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of the collateral</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" line="1209" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" bodystart="1209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__driver__derivation_1ga27684e05d9af85548b26849302f4db8a" prot="public" static="no">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref>(*</type>
        <definition>typedef psa_status_t(* psa_drv_se_key_derivation_derive_t) (void *op_context, psa_key_slot_number_t dest_key)</definition>
        <argsstring>)(void *op_context, psa_key_slot_number_t dest_key)</argsstring>
        <name>psa_drv_se_key_derivation_derive_t</name>
        <briefdescription>
<para>A function that performs the final secure element key derivation step and place the generated key material in a slot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">op_context</parametername>
</parameternamelist>
<parameterdescription>
<para>A hardware-specific structure containing any context information for the implementation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot where the generated key material should be placed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" line="1224" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" bodystart="1224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__driver__derivation_1ga25d0d785a7acd6957891f3c1022f91b4" prot="public" static="no">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref>(*</type>
        <definition>typedef psa_status_t(* psa_drv_se_key_derivation_export_t) (void *op_context, uint8_t *p_output, size_t output_size, size_t *p_output_length)</definition>
        <argsstring>)(void *op_context, uint8_t *p_output, size_t output_size, size_t *p_output_length)</argsstring>
        <name>psa_drv_se_key_derivation_export_t</name>
        <briefdescription>
<para>A function that performs the final step of a secure element key agreement and place the generated key material in a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">p_output</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer in which to place the generated key material </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of <computeroutput>p_output</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_output_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Upon success, contains the number of bytes of key material placed in <computeroutput>p_output</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" line="1238" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_se_driver.h" bodystart="1238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Key derivation is the process of generating new key material using an existing key and additional parameters, iterating through a basic cryptographic function, such as a hash. Key agreement is a part of cryptographic protocols that allows two parties to agree on the same key value, but starting from different original key material. The flows are similar, and the PSA Crypto Driver Model uses the same functions for both of the flows. </para>
    </briefdescription>
    <detaileddescription>
<para>There are two different final functions for the flows, <computeroutput>psa_drv_se_key_derivation_derive</computeroutput> and <computeroutput>psa_drv_se_key_derivation_export</computeroutput>. <computeroutput>psa_drv_se_key_derivation_derive</computeroutput> is used when the key material should be placed in a slot on the hardware and not exposed to the caller. <computeroutput>psa_drv_se_key_derivation_export</computeroutput> is used when the key material should be returned to the PSA Cryptographic API implementation.</para>
<para>Different key derivation algorithms require a different number of inputs. Instead of having an API that takes as input variable length arrays, which can be problematic to manage on embedded platforms, the inputs are passed to the driver via a function, <computeroutput>psa_drv_se_key_derivation_collateral</computeroutput>, that is called multiple times with different <computeroutput>collateral_id</computeroutput>s. Thus, for a key derivation algorithm that required 3 parameter inputs, the flow would look something like: <programlisting filename=".c"><codeline><highlight class="normal">psa_drv_se_key_derivation_setup(kdf_algorithm,<sp/>source_key,<sp/>dest_key_size_bytes);</highlight></codeline>
<codeline><highlight class="normal">psa_drv_se_key_derivation_collateral(kdf_algorithm_collateral_id_0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_collateral_0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collateral_0_size);</highlight></codeline>
<codeline><highlight class="normal">psa_drv_se_key_derivation_collateral(kdf_algorithm_collateral_id_1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_collateral_1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collateral_1_size);</highlight></codeline>
<codeline><highlight class="normal">psa_drv_se_key_derivation_collateral(kdf_algorithm_collateral_id_2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_collateral_2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collateral_2_size);</highlight></codeline>
<codeline><highlight class="normal">psa_drv_se_key_derivation_derive();</highlight></codeline>
</programlisting></para>
<para>key agreement example: <programlisting filename=".c"><codeline><highlight class="normal">psa_drv_se_key_derivation_setup(alg,<sp/>source_key.<sp/>dest_key_size_bytes);</highlight></codeline>
<codeline><highlight class="normal">psa_drv_se_key_derivation_collateral(DHE_PUBKEY,<sp/>p_pubkey,<sp/>pubkey_size);</highlight></codeline>
<codeline><highlight class="normal">psa_drv_se_key_derivation_export(p_session_key,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>session_key_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;session_key_length);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
