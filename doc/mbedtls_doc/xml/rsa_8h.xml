<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="rsa_8h" kind="file" language="C++">
    <compoundname>rsa.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="bignum_8h" local="yes">mbedtls/bignum.h</includes>
    <includes refid="md_8h" local="yes">mbedtls/md.h</includes>
    <includes refid="threading_8h" local="yes">mbedtls/threading.h</includes>
    <includedby refid="pk_8h" local="yes">pk.h</includedby>
    <includedby refid="x509_8h" local="yes">x509.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="29">
        <label>stdlib.h</label>
      </node>
      <node id="28">
        <label>mbedtls/threading.h</label>
        <link refid="threading_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="25">
        <label>mbedtls/platform_time.h</label>
        <link refid="platform__time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="20">
        <label>mbedtls/bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>mbedtls/platform_util.h</label>
        <link refid="platform__util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="30">
        <label>pthread.h</label>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="26">
        <label>time.h</label>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="23">
        <label>mbedtls/md.h</label>
        <link refid="md_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="1">
        <label>rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
      <node id="27">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="14">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="8">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="10">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="7">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="2">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="15">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="6">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="13">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__rsa__context" prot="public">mbedtls_rsa_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="rsa_8h_1abf2997e01281b898fd4594af0b7bfbb4" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name>
        <initializer>-0x4080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad input parameters to function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="33" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1add099b8887e9e2942fcc3bf1673f703d" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_INVALID_PADDING</name>
        <initializer>-0x4100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input data contains invalid padding and is rejected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="35" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1ae334d56985d569186f5b5bb462cd6af2" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_KEY_GEN_FAILED</name>
        <initializer>-0x4180</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Something failed during generation of a key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="37" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1a75113c3b54138090c45a973b864200ad" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_KEY_CHECK_FAILED</name>
        <initializer>-0x4200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key failed to pass the validity check of the library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="39" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1ae9bffdb461c7e5803b4081ddd745afb5" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_PUBLIC_FAILED</name>
        <initializer>-0x4280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The public key operation failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="41" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1af7ddb312b48f8cd135150fc9bbb791d0" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_PRIVATE_FAILED</name>
        <initializer>-0x4300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The private key operation failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="43" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1a334c537fbd9e49eb37a2ff12a11392cd" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_VERIFY_FAILED</name>
        <initializer>-0x4380</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The PKCS#1 verification failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="45" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1a2d3d26a305009e5b26957e21b6b151c9" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE</name>
        <initializer>-0x4400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The output buffer for decryption is not large enough. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="47" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1a6aa8ac62f7c3079cba7da3250a2fb7af" prot="public" static="no">
        <name>MBEDTLS_ERR_RSA_RNG_FAILED</name>
        <initializer>-0x4480</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The random generator failed to generate non-zeros. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="49" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1a426a0d77233000f50dcce6f27d5ddd05" prot="public" static="no">
        <name>MBEDTLS_RSA_PKCS_V15</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use PKCS#1 v1.5 encoding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="55" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1a903f0c378a6303efdbc1f53b18603bb1" prot="public" static="no">
        <name>MBEDTLS_RSA_PKCS_V21</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use PKCS#1 v2.1 encoding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="56" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1ab2115255ea768cf9cef953f48ab24f53" prot="public" static="no">
        <name>MBEDTLS_RSA_SIGN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identifier for RSA signature operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="58" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1ad4bc17285be7e6ae4ccba4747de4ef76" prot="public" static="no">
        <name>MBEDTLS_RSA_CRYPT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identifier for RSA encryption and decryption operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="59" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1ab7aa2f548235465c0f384a13617f184f" prot="public" static="no">
        <name>MBEDTLS_RSA_SALT_LEN_ANY</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="61" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rsa_8h_1a01ab68ada11c64d02f5a5c879b519aef" prot="public" static="no">
        <name>MBEDTLS_RSA_GEN_KEY_MIN_BITS</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="77" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rsa_8h_1a597739934bbd12f31e1caed8e4803366" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref></type>
        <definition>typedef struct mbedtls_rsa_context mbedtls_rsa_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_rsa_context</name>
        <briefdescription>
<para>The RSA context structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="123" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rsa_8h_1ab444714b1e98b421ea9df6ce5725a824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_rsa_init</definition>
        <argsstring>(mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_init</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes an RSA context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function initializes the padding and the hash identifier to respectively <ref refid="rsa_8h_1a426a0d77233000f50dcce6f27d5ddd05" kindref="member">MBEDTLS_RSA_PKCS_V15</ref> and <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>. See <ref refid="rsa_8h_1a588778028aa0ebed16bc856a57841271" kindref="member">mbedtls_rsa_set_padding()</ref> for more information about those parameters.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The RSA context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="139" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a588778028aa0ebed16bc856a57841271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_set_padding</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int padding, mbedtls_md_type_t hash_id)</argsstring>
        <name>mbedtls_rsa_set_padding</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>hash_id</declname>
        </param>
        <briefdescription>
<para>This function sets padding for an already initialized RSA context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Set padding to <ref refid="rsa_8h_1a903f0c378a6303efdbc1f53b18603bb1" kindref="member">MBEDTLS_RSA_PKCS_V21</ref> for the RSAES-OAEP encryption scheme and the RSASSA-PSS signature scheme.</para>
</simplesect>
<simplesect kind="note"><para>The <computeroutput>hash_id</computeroutput> parameter is ignored when using <ref refid="rsa_8h_1a426a0d77233000f50dcce6f27d5ddd05" kindref="member">MBEDTLS_RSA_PKCS_V15</ref> padding.</para>
</simplesect>
<simplesect kind="note"><para>The choice of padding mode is strictly enforced for private key operations, since there might be security concerns in mixing padding modes. For public key operations it is a default value, which can be overridden by calling specific <computeroutput>mbedtls_rsa_rsaes_xxx</computeroutput> or <computeroutput>mbedtls_rsa_rsassa_xxx</computeroutput> functions.</para>
</simplesect>
<simplesect kind="note"><para>The hash selected in <computeroutput>hash_id</computeroutput> is always used for OEAP encryption. For PSS signatures, it is always used for making signatures, but can be overridden for verifying them. If set to <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, it is always overridden.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to be configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padding</parametername>
</parameternamelist>
<parameterdescription>
<para>The padding mode to use. This must be either <ref refid="rsa_8h_1a426a0d77233000f50dcce6f27d5ddd05" kindref="member">MBEDTLS_RSA_PKCS_V15</ref> or <ref refid="rsa_8h_1a903f0c378a6303efdbc1f53b18603bb1" kindref="member">MBEDTLS_RSA_PKCS_V21</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash identifier for PSS or OAEP, if <computeroutput>padding</computeroutput> is <ref refid="rsa_8h_1a903f0c378a6303efdbc1f53b18603bb1" kindref="member">MBEDTLS_RSA_PKCS_V21</ref>. <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> is accepted by this function but may be not suitable for some operations. Ignored if <computeroutput>padding</computeroutput> is <ref refid="rsa_8h_1a426a0d77233000f50dcce6f27d5ddd05" kindref="member">MBEDTLS_RSA_PKCS_V15</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="rsa_8h_1add099b8887e9e2942fcc3bf1673f703d" kindref="member">MBEDTLS_ERR_RSA_INVALID_PADDING</ref> failure: <computeroutput>padding</computeroutput> or <computeroutput>hash_id</computeroutput> is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="175" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="175" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a48eae6e8b2a6746799bd7b1ebdc4d656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_get_padding_mode</definition>
        <argsstring>(const mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_get_padding_mode</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function retrieves padding mode of initialized RSA context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RSA padding mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="187" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="187" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a60e6e35626ceabc367e52e56e10047e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_get_md_alg</definition>
        <argsstring>(const mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_get_md_alg</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function retrieves hash identifier of mbedtls_md_type_t type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hash identifier of mbedtls_md_type_t type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="198" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="198" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a2faa555349886b5c25923f27c23c3011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_import</definition>
        <argsstring>(mbedtls_rsa_context *ctx, const mbedtls_mpi *N, const mbedtls_mpi *P, const mbedtls_mpi *Q, const mbedtls_mpi *D, const mbedtls_mpi *E)</argsstring>
        <name>mbedtls_rsa_import</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>E</declname>
        </param>
        <briefdescription>
<para>This function imports a set of core parameters into an RSA context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can be called multiple times for successive imports, if the parameters are not simultaneously present.</para>
</simplesect>
Any sequence of calls to this function should be followed by a call to <ref refid="rsa_8h_1a09e4d51afc792bbb2ff9f4b411ab9158" kindref="member">mbedtls_rsa_complete()</ref>, which checks and completes the provided information to a ready-for-use public or private RSA key.</para>
<para><simplesect kind="note"><para>See <ref refid="rsa_8h_1a09e4d51afc792bbb2ff9f4b411ab9158" kindref="member">mbedtls_rsa_complete()</ref> for more information on which parameters are necessary to set up a private or public RSA key.</para>
</simplesect>
<simplesect kind="note"><para>The imported parameters are copied and need not be preserved for the lifetime of the RSA context being set up.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to store the parameters in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>The RSA modulus. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The first prime factor of <computeroutput>N</computeroutput>. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The second prime factor of <computeroutput>N</computeroutput>. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>The private exponent. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>The public exponent. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="229" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="229" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a3cbe89ebf7cab79bddb35459c56a3657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_import_raw</definition>
        <argsstring>(mbedtls_rsa_context *ctx, unsigned char const *N, size_t N_len, unsigned char const *P, size_t P_len, unsigned char const *Q, size_t Q_len, unsigned char const *D, size_t D_len, unsigned char const *E, size_t E_len)</argsstring>
        <name>mbedtls_rsa_import_raw</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N_len</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>P_len</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Q_len</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>D_len</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>E</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>E_len</declname>
        </param>
        <briefdescription>
<para>This function imports core RSA parameters, in raw big-endian binary format, into an RSA context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can be called multiple times for successive imports, if the parameters are not simultaneously present.</para>
</simplesect>
Any sequence of calls to this function should be followed by a call to <ref refid="rsa_8h_1a09e4d51afc792bbb2ff9f4b411ab9158" kindref="member">mbedtls_rsa_complete()</ref>, which checks and completes the provided information to a ready-for-use public or private RSA key.</para>
<para><simplesect kind="note"><para>See <ref refid="rsa_8h_1a09e4d51afc792bbb2ff9f4b411ab9158" kindref="member">mbedtls_rsa_complete()</ref> for more information on which parameters are necessary to set up a private or public RSA key.</para>
</simplesect>
<simplesect kind="note"><para>The imported parameters are copied and need not be preserved for the lifetime of the RSA context being set up.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to store the parameters in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>The RSA modulus. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte length of <computeroutput>N</computeroutput>; it is ignored if <computeroutput>N</computeroutput> == NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The first prime factor of <computeroutput>N</computeroutput>. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte length of <computeroutput>P</computeroutput>; it is ignored if <computeroutput>P</computeroutput> == NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The second prime factor of <computeroutput>N</computeroutput>. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte length of <computeroutput>Q</computeroutput>; it is ignored if <computeroutput>Q</computeroutput> == NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>The private exponent. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte length of <computeroutput>D</computeroutput>; it is ignored if <computeroutput>D</computeroutput> == NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>The public exponent. This may be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte length of <computeroutput>E</computeroutput>; it is ignored if <computeroutput>E</computeroutput> == NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="268" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="268" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a09e4d51afc792bbb2ff9f4b411ab9158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_complete</definition>
        <argsstring>(mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_complete</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function completes an RSA context from a set of imported core parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>To setup an RSA public key, precisely <computeroutput>N</computeroutput> and <computeroutput>E</computeroutput> must have been imported.</para>
<para>To setup an RSA private key, sufficient information must be present for the other parameters to be derivable.</para>
<para>The default implementation supports the following: <itemizedlist>
<listitem>
<para>Derive <computeroutput>P</computeroutput>, <computeroutput>Q</computeroutput> from <computeroutput>N</computeroutput>, <computeroutput>D</computeroutput>, <computeroutput>E</computeroutput>. </para>
</listitem>
<listitem>
<para>Derive <computeroutput>N</computeroutput>, <computeroutput>D</computeroutput> from <computeroutput>P</computeroutput>, <computeroutput>Q</computeroutput>, <computeroutput>E</computeroutput>.</para>
</listitem>
</itemizedlist>
Alternative implementations need not support these.</para>
<para>If this function runs successfully, it guarantees that the RSA context can be used for RSA operations without the risk of failure or crash.</para>
<para><simplesect kind="warning"><para>This function need not perform consistency checks for the imported parameters. In particular, parameters that are not needed by the implementation might be silently discarded and left unchecked. To check the consistency of the key material, see <ref refid="rsa_8h_1ab393f7a4d3882ac0b2afa51b641bf475" kindref="member">mbedtls_rsa_check_privkey()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context holding imported parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="rsa_8h_1abf2997e01281b898fd4594af0b7bfbb4" kindref="member">MBEDTLS_ERR_RSA_BAD_INPUT_DATA</ref> if the attempted derivations failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="307" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="307" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a67851948911cfb0c7923f7eb274eebd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_export</definition>
        <argsstring>(const mbedtls_rsa_context *ctx, mbedtls_mpi *N, mbedtls_mpi *P, mbedtls_mpi *Q, mbedtls_mpi *D, mbedtls_mpi *E)</argsstring>
        <name>mbedtls_rsa_export</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>N</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>D</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>E</declname>
        </param>
        <briefdescription>
<para>This function exports the core parameters of an RSA key. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            If this function runs successfully, the non-NULL buffers
            pointed to by \p N, \p P, \p Q, \p D, and \p E are fully
            written, with additional unused space filled leading by
            zero Bytes.

            Possible reasons for returning
            #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED:&lt;ul&gt;
            &lt;li&gt;An alternative RSA implementation is in use, which
            stores the key externally, and either cannot or should
            not export it into RAM.&lt;/li&gt;
            &lt;li&gt;A SW or HW implementation might not support a certain
            deduction. For example, \p P, \p Q from \p N, \p D,
            and \p E if the former are not part of the
            implementation.&lt;/li&gt;&lt;/ul&gt;

            If the function fails due to an unsupported operation,
            the RSA context stays intact and remains usable.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold the RSA modulus. This may be <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold the first prime factor of <computeroutput>N</computeroutput>. This may be <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold the second prime factor of <computeroutput>N</computeroutput>. This may be <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold the private exponent. This may be <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold the public exponent. This may be <computeroutput>NULL</computeroutput> if this field need not be exported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="error_8h_1a211074d4c5489c669078f1888ffee823" kindref="member">MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED</ref> if exporting the requested parameters cannot be done due to missing functionality or because of security policies. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero return code on any other failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="349" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="349" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a6888c6cbbf68a4dee39bd516d1edbcf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_export_raw</definition>
        <argsstring>(const mbedtls_rsa_context *ctx, unsigned char *N, size_t N_len, unsigned char *P, size_t P_len, unsigned char *Q, size_t Q_len, unsigned char *D, size_t D_len, unsigned char *E, size_t E_len)</argsstring>
        <name>mbedtls_rsa_export_raw</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>P_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Q_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>D_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>E</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>E_len</declname>
        </param>
        <briefdescription>
<para>This function exports core parameters of an RSA key in raw big-endian binary format. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function runs successfully, the non-NULL buffers pointed to by <computeroutput>N</computeroutput>, <computeroutput>P</computeroutput>, <computeroutput>Q</computeroutput>, <computeroutput>D</computeroutput>, and <computeroutput>E</computeroutput> are fully written, with additional unused space filled leading by zero Bytes.</para>
<para>Possible reasons for returning <ref refid="error_8h_1a211074d4c5489c669078f1888ffee823" kindref="member">MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED</ref>:<itemizedlist>
<listitem>
<para>An alternative RSA implementation is in use, which stores the key externally, and either cannot or should not export it into RAM. </para>
</listitem>
<listitem>
<para>A SW or HW implementation might not support a certain deduction. For example, <computeroutput>P</computeroutput>, <computeroutput>Q</computeroutput> from <computeroutput>N</computeroutput>, <computeroutput>D</computeroutput>, and <computeroutput>E</computeroutput> if the former are not part of the implementation.</para>
</listitem>
</itemizedlist>
If the function fails due to an unsupported operation, the RSA context stays intact and remains usable.</para>
<para><simplesect kind="note"><para>The length parameters are ignored if the corresponding buffer pointers are NULL.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte array to store the RSA modulus, or <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer for the modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte array to hold the first prime factor of <computeroutput>N</computeroutput>, or <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer for the first prime factor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte array to hold the second prime factor of <computeroutput>N</computeroutput>, or <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer for the second prime factor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte array to hold the private exponent, or <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer for the private exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>The Byte array to hold the public exponent, or <computeroutput>NULL</computeroutput> if this field need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer for the public exponent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="error_8h_1a211074d4c5489c669078f1888ffee823" kindref="member">MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED</ref> if exporting the requested parameters cannot be done due to missing functionality or because of security policies. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero return code on any other failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="400" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="400" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a93d68199c0747dabb345ef46b33f8952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_export_crt</definition>
        <argsstring>(const mbedtls_rsa_context *ctx, mbedtls_mpi *DP, mbedtls_mpi *DQ, mbedtls_mpi *QP)</argsstring>
        <name>mbedtls_rsa_export_crt</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>DP</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>DQ</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>QP</declname>
        </param>
        <briefdescription>
<para>This function exports CRT parameters of a private RSA key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Alternative RSA implementations not using CRT-parameters internally can implement this function based on mbedtls_rsa_deduce_opt().</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DP</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold <computeroutput>D</computeroutput> modulo <computeroutput>P-1</computeroutput>, or <computeroutput>NULL</computeroutput> if it need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DQ</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold <computeroutput>D</computeroutput> modulo <computeroutput>Q-1</computeroutput>, or <computeroutput>NULL</computeroutput> if it need not be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>QP</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to hold modular inverse of <computeroutput>Q</computeroutput> modulo <computeroutput>P</computeroutput>, or <computeroutput>NULL</computeroutput> if it need not be exported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="426" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="426" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a4d0b602b390e2349d420454f964ee430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mbedtls_rsa_get_len</definition>
        <argsstring>(const mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_get_len</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function retrieves the length of RSA modulus in Bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the RSA modulus in Bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="437" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="437" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a421fc8812e75698e33887aafacb0c829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_gen_key</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, unsigned int nbits, int exponent)</argsstring>
        <name>mbedtls_rsa_gen_key</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>This function generates an RSA keypair. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="rsa_8h_1ab444714b1e98b421ea9df6ce5725a824" kindref="member">mbedtls_rsa_init()</ref> must be called before this function, to set up the RSA context.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context used to hold the key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to be used for key generation. This is mandatory and must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the public key in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The public exponent to use. For example, <computeroutput>65537</computeroutput>. This must be odd and greater than <computeroutput>1</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="457" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="457" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1ad5da263d80db9ee27f084b68b0092546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_check_pubkey</definition>
        <argsstring>(const mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_check_pubkey</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function checks if a context contains at least an RSA public key. </para>
        </briefdescription>
        <detaileddescription>
<para>If the function runs successfully, it is guaranteed that enough information is present to perform an RSA public key operation using <ref refid="rsa_8h_1a9db0f76aff9a6ce179b6fbe329bf5569" kindref="member">mbedtls_rsa_public()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="476" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="476" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1ab393f7a4d3882ac0b2afa51b641bf475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_check_privkey</definition>
        <argsstring>(const mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_check_privkey</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function checks if a context contains an RSA private key and perform basic consistency checks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The consistency checks performed by this function not only ensure that <ref refid="rsa_8h_1a3e016741ddaa354916ade4d48e9a0965" kindref="member">mbedtls_rsa_private()</ref> can be called successfully on the given context, but that the various parameters are mutually consistent with high probability, in the sense that <ref refid="rsa_8h_1a9db0f76aff9a6ce179b6fbe329bf5569" kindref="member">mbedtls_rsa_public()</ref> and <ref refid="rsa_8h_1a3e016741ddaa354916ade4d48e9a0965" kindref="member">mbedtls_rsa_private()</ref> are inverses.</para>
</simplesect>
<simplesect kind="warning"><para>This function should catch accidental misconfigurations like swapping of parameters, but it cannot establish full trust in neither the quality nor the consistency of the key material that was used to setup the given RSA context: <itemizedlist>
<listitem>
<para>Consistency: Imported parameters that are irrelevant for the implementation might be silently dropped. If dropped, the current function does not have access to them, and therefore cannot check them. See <ref refid="rsa_8h_1a09e4d51afc792bbb2ff9f4b411ab9158" kindref="member">mbedtls_rsa_complete()</ref>. If you want to check the consistency of the entire content of a PKCS1-encoded RSA private key, for example, you should use mbedtls_rsa_validate_params() before setting up the RSA context. Additionally, if the implementation performs empirical checks, these checks substantiate but do not guarantee consistency. </para>
</listitem>
<listitem>
<para>Quality: This function is not expected to perform extended quality assessments like checking that the prime factors are safe. Additionally, it is the responsibility of the user to ensure the trustworthiness of the source of his RSA parameters, which goes beyond what is effectively checkable by the library.</para>
</listitem>
</itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="514" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="514" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a3204b1f8a0dafb33b4ccc16570a40999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_check_pub_priv</definition>
        <argsstring>(const mbedtls_rsa_context *pub, const mbedtls_rsa_context *prv)</argsstring>
        <name>mbedtls_rsa_check_pub_priv</name>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>prv</declname>
        </param>
        <briefdescription>
<para>This function checks a public-private RSA key pair. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            It checks each of the contexts, and makes sure they match.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context holding the public key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prv</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context holding the private key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="527" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="527" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a9db0f76aff9a6ce179b6fbe329bf5569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_public</definition>
        <argsstring>(mbedtls_rsa_context *ctx, const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_rsa_public</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an RSA public key operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function does not handle message padding.</para>
</simplesect>
<simplesect kind="note"><para>Make sure to set <computeroutput>input</computeroutput>[0] = 0 or ensure that input is smaller than <computeroutput>N</computeroutput>.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="549" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="549" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a3e016741ddaa354916ade4d48e9a0965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_private</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_rsa_private</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an RSA private key operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Blinding is used if and only if a PRNG is provided.</para>
</simplesect>
<simplesect kind="note"><para>If blinding is used, both the base of exponentiation and the exponent are blinded, providing protection against some side-channel attacks.</para>
</simplesect>
<simplesect kind="warning"><para>It is deprecated and a security risk to not provide a PRNG here and thereby prevent the use of blinding. Future versions of the library may enforce the presence of a PRNG.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function, used for blinding. It is mandatory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to pass to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="582" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="582" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a685bd304e2cec3da6e96a130f4fbff34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_pkcs1_encrypt</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, size_t ilen, const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_rsa_pkcs1_encrypt</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function adds the message padding, then performs an RSA operation. </para>
        </briefdescription>
        <detaileddescription>
<para>It is the generic wrapper for performing a PKCS#1 encryption operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG to use. It is used for padding generation and it is mandatory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. May be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the plaintext in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data to encrypt. This must be a readable buffer of size <computeroutput>ilen</computeroutput> Bytes. It may be <computeroutput>NULL</computeroutput> if <computeroutput>ilen == 0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="611" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="611" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1af28607d372357215169efe254ec59574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsaes_pkcs1_v15_encrypt</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, size_t ilen, const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v1.5 encryption operation (RSAES-PKCS1-v1_5-ENCRYPT). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. It is mandatory and used for padding generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the plaintext in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data to encrypt. This must be a readable buffer of size <computeroutput>ilen</computeroutput> Bytes. It may be <computeroutput>NULL</computeroutput> if <computeroutput>ilen == 0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="638" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="638" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1aa16af4e99dd20a256bd9ad23b22090fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsaes_oaep_encrypt</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, const unsigned char *label, size_t label_len, size_t ilen, const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_rsa_rsaes_oaep_encrypt</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>label_len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v2.1 OAEP encryption operation (RSAES-OAEP-ENCRYPT). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The output buffer must be as large as the size of ctx-&gt;N. For example, 128 Bytes if RSA-1024 is used.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. This is needed for padding generation and is mandatory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the custom label to use. This must be a readable buffer of length <computeroutput>label_len</computeroutput> Bytes. It may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the label in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the plaintext buffer <computeroutput>input</computeroutput> in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data to encrypt. This must be a readable buffer of size <computeroutput>ilen</computeroutput> Bytes. It may be <computeroutput>NULL</computeroutput> if <computeroutput>ilen == 0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="672" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="672" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a59628fab10ce8aaf67f808f6cbf40df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_pkcs1_decrypt</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, size_t *olen, const unsigned char *input, unsigned char *output, size_t output_max_len)</argsstring>
        <name>mbedtls_rsa_pkcs1_decrypt</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_max_len</declname>
        </param>
        <briefdescription>
<para>This function performs an RSA operation, then removes the message padding. </para>
        </briefdescription>
        <detaileddescription>
<para>It is the generic wrapper for performing a PKCS#1 decryption operation.</para>
<para><simplesect kind="note"><para>The output buffer length <computeroutput>output_max_len</computeroutput> should be as large as the size <computeroutput>ctx-&gt;len</computeroutput> of <computeroutput>ctx-&gt;N</computeroutput> (for example, 128 Bytes if RSA-1024 is used) to be able to hold an arbitrary decrypted message. If it is not large enough to hold the decryption of the particular ciphertext provided, the function returns <computeroutput>MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This is used for blinding and is mandatory; see <ref refid="rsa_8h_1a3e016741ddaa354916ade4d48e9a0965" kindref="member">mbedtls_rsa_private()</ref> for more. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the length of the plaintext. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The ciphertext buffer. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer used to hold the plaintext. This must be a writable buffer of length <computeroutput>output_max_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in Bytes of the output buffer <computeroutput>output</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="711" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="711" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a8b1af3b72b87e886e4424bacf8ca37d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsaes_pkcs1_v15_decrypt</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, size_t *olen, const unsigned char *input, unsigned char *output, size_t output_max_len)</argsstring>
        <name>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_max_len</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v1.5 decryption operation (RSAES-PKCS1-v1_5-DECRYPT). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The output buffer length <computeroutput>output_max_len</computeroutput> should be as large as the size <computeroutput>ctx-&gt;len</computeroutput> of <computeroutput>ctx-&gt;N</computeroutput>, for example, 128 Bytes if RSA-1024 is used, to be able to hold an arbitrary decrypted message. If it is not large enough to hold the decryption of the particular ciphertext provided, the function returns <ref refid="rsa_8h_1a2d3d26a305009e5b26957e21b6b151c9" kindref="member">MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This is used for blinding and is mandatory; see <ref refid="rsa_8h_1a3e016741ddaa354916ade4d48e9a0965" kindref="member">mbedtls_rsa_private()</ref> for more. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the length of the plaintext. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The ciphertext buffer. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer used to hold the plaintext. This must be a writable buffer of length <computeroutput>output_max_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in Bytes of the output buffer <computeroutput>output</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="748" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="748" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1ac60cc79eae39efaa1c04d57c928be727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsaes_oaep_decrypt</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, const unsigned char *label, size_t label_len, size_t *olen, const unsigned char *input, unsigned char *output, size_t output_max_len)</argsstring>
        <name>mbedtls_rsa_rsaes_oaep_decrypt</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>label_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_max_len</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v2.1 OAEP decryption operation (RSAES-OAEP-DECRYPT). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The output buffer length <computeroutput>output_max_len</computeroutput> should be as large as the size <computeroutput>ctx-&gt;len</computeroutput> of <computeroutput>ctx-&gt;N</computeroutput>, for example, 128 Bytes if RSA-1024 is used, to be able to hold an arbitrary decrypted message. If it is not large enough to hold the decryption of the particular ciphertext provided, the function returns <ref refid="rsa_8h_1a2d3d26a305009e5b26957e21b6b151c9" kindref="member">MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This is used for blinding and is mandatory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the custom label to use. This must be a readable buffer of length <computeroutput>label_len</computeroutput> Bytes. It may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the label in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the length of the plaintext. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The ciphertext buffer. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer used to hold the plaintext. This must be a writable buffer of length <computeroutput>output_max_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in Bytes of the output buffer <computeroutput>output</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="789" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="789" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1ab04f3ae401918c1ef2a573603b373376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_pkcs1_sign</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_pkcs1_sign</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a private RSA operation to sign a message digest using PKCS#1. </para>
        </briefdescription>
        <detaileddescription>
<para>It is the generic wrapper for performing a PKCS#1 signature.</para>
<para><simplesect kind="note"><para>The <computeroutput>sig</computeroutput> buffer must be as large as the size of <computeroutput>ctx-&gt;N</computeroutput>. For example, 128 Bytes if RSA-1024 is used.</para>
</simplesect>
<simplesect kind="note"><para>For PKCS#1 v2.1 encoding, see comments on <ref refid="rsa_8h_1a94463359ec6f57fc2a4e66f4a01ee415" kindref="member">mbedtls_rsa_rsassa_pss_sign()</ref> for details on <computeroutput>md_alg</computeroutput> and <computeroutput>hash_id</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. This is mandatory and must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to hold the signature. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. A buffer length of <ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref> is always safe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the signing operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="832" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="832" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a5673df1cf221af4084eb8b6e98783d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsassa_pkcs1_v15_sign</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_rsassa_pkcs1_v15_sign</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v1.5 signature operation (RSASSA-PKCS1-v1_5-SIGN). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This is used for blinding and is mandatory; see <ref refid="rsa_8h_1a3e016741ddaa354916ade4d48e9a0965" kindref="member">mbedtls_rsa_private()</ref> for more. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to hold the signature. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. A buffer length of <ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref> is always safe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the signing operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="864" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="864" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a871f4e4a85c4b878596a5f0d6852822c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsassa_pss_sign_ext</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, int saltlen, unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_rsassa_pss_sign_ext</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>int</type>
          <declname>saltlen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v2.1 PSS signature operation (RSASSA-PSS-SIGN). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The <computeroutput>hash_id</computeroutput> set in <computeroutput>ctx</computeroutput> by calling <ref refid="rsa_8h_1a588778028aa0ebed16bc856a57841271" kindref="member">mbedtls_rsa_set_padding()</ref> selects the hash used for the encoding operation and for the mask generation function (MGF1). For more details on the encoding operation and the mask generation function, consult <emphasis>RFC-3447: Public-Key Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography Specifications</emphasis>.</para>
</simplesect>
<simplesect kind="note"><para>This function enforces that the provided salt length complies with FIPS 186-4 §5.5 (e) and RFC 8017 (PKCS#1 v2.2) §9.1.1 step 3. The constraint is that the hash length plus the salt length plus 2 bytes must be at most the key length. If this constraint is not met, this function returns <ref refid="rsa_8h_1abf2997e01281b898fd4594af0b7bfbb4" kindref="member">MBEDTLS_ERR_RSA_BAD_INPUT_DATA</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. It is mandatory and must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saltlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the salt that should be used. If passed <ref refid="rsa_8h_1ab7aa2f548235465c0f384a13617f184f" kindref="member">MBEDTLS_RSA_SALT_LEN_ANY</ref>, the function will use the largest possible salt length up to the hash length, which is the largest permitted by some standards including FIPS 186-4 §5.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to hold the signature. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. A buffer length of <ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref> is always safe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the signing operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="915" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="915" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a94463359ec6f57fc2a4e66f4a01ee415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsassa_pss_sign</definition>
        <argsstring>(mbedtls_rsa_context *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_rsassa_pss_sign</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v2.1 PSS signature operation (RSASSA-PSS-SIGN). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The <computeroutput>hash_id</computeroutput> set in <computeroutput>ctx</computeroutput> by calling <ref refid="rsa_8h_1a588778028aa0ebed16bc856a57841271" kindref="member">mbedtls_rsa_set_padding()</ref> selects the hash used for the encoding operation and for the mask generation function (MGF1). For more details on the encoding operation and the mask generation function, consult <emphasis>RFC-3447: Public-Key Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography Specifications</emphasis>.</para>
</simplesect>
<simplesect kind="note"><para>This function always uses the maximum possible salt size, up to the length of the payload hash. This choice of salt size complies with FIPS 186-4 §5.5 (e) and RFC 8017 (PKCS#1 v2.2) §9.1.1 step 3. Furthermore this function enforces a minimum salt size which is the hash size minus 2 bytes. If this minimum size is too large given the key size (the salt size, plus the hash size, plus 2 bytes must be no more than the key size in bytes), this function returns <ref refid="rsa_8h_1abf2997e01281b898fd4594af0b7bfbb4" kindref="member">MBEDTLS_ERR_RSA_BAD_INPUT_DATA</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. It is mandatory and must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to hold the signature. This must be a writable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus. A buffer length of <ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref> is always safe.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the signing operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="965" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="965" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1ada463dfacc1b9623c1237163ca134c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_pkcs1_verify</definition>
        <argsstring>(mbedtls_rsa_context *ctx, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, const unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_pkcs1_verify</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a public RSA operation and checks the message digest. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the generic wrapper for performing a PKCS#1 verification.</para>
<para><simplesect kind="note"><para>For PKCS#1 v2.1 encoding, see comments on <ref refid="rsa_8h_1a74c94af52f04014c14addf3f4bd1bfd8" kindref="member">mbedtls_rsa_rsassa_pss_verify()</ref> about <computeroutput>md_alg</computeroutput> and <computeroutput>hash_id</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA public key context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the signature. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the verify operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="999" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="999" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a750fe179d33472a379c4b57dca3f6126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsassa_pkcs1_v15_verify</definition>
        <argsstring>(mbedtls_rsa_context *ctx, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, const unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_rsassa_pkcs1_v15_verify</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v1.5 verification operation (RSASSA-PKCS1-v1_5-VERIFY). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA public key context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the signature. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the verify operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="1024" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="1024" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a74c94af52f04014c14addf3f4bd1bfd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsassa_pss_verify</definition>
        <argsstring>(mbedtls_rsa_context *ctx, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, const unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_rsassa_pss_verify</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v2.1 PSS verification operation (RSASSA-PSS-VERIFY). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The <computeroutput>hash_id</computeroutput> set in <computeroutput>ctx</computeroutput> by calling <ref refid="rsa_8h_1a588778028aa0ebed16bc856a57841271" kindref="member">mbedtls_rsa_set_padding()</ref> selects the hash used for the encoding operation and for the mask generation function (MGF1). For more details on the encoding operation and the mask generation function, consult <emphasis>RFC-3447: Public-Key Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography Specifications</emphasis>. If the <computeroutput>hash_id</computeroutput> set in <computeroutput>ctx</computeroutput> by <ref refid="rsa_8h_1a588778028aa0ebed16bc856a57841271" kindref="member">mbedtls_rsa_set_padding()</ref> is <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, the <computeroutput>md_alg</computeroutput> parameter is used.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA public key context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the signature. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the verify operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="1059" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="1059" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a17fd9fadff17a5a69c6f2469e3ecda92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_rsassa_pss_verify_ext</definition>
        <argsstring>(mbedtls_rsa_context *ctx, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, mbedtls_md_type_t mgf1_hash_id, int expected_salt_len, const unsigned char *sig)</argsstring>
        <name>mbedtls_rsa_rsassa_pss_verify_ext</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>hashlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>mgf1_hash_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expected_salt_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>This function performs a PKCS#1 v2.1 PSS verification operation (RSASSA-PSS-VERIFY). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The <computeroutput>sig</computeroutput> buffer must be as large as the size of <computeroutput>ctx-&gt;N</computeroutput>. For example, 128 Bytes if RSA-1024 is used.</para>
</simplesect>
<simplesect kind="note"><para>The <computeroutput>hash_id</computeroutput> set in <computeroutput>ctx</computeroutput> by <ref refid="rsa_8h_1a588778028aa0ebed16bc856a57841271" kindref="member">mbedtls_rsa_set_padding()</ref> is ignored.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialized RSA public key context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message-digest algorithm used to hash the original data. Use <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> for signing raw data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the message digest or raw data in Bytes. If <computeroutput>md_alg</computeroutput> is not <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, this must match the output length of the corresponding hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the message digest or raw data. This must be a readable buffer of at least <computeroutput>hashlen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mgf1_hash_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The message digest algorithm used for the verification operation and the mask generation function (MGF1). For more details on the encoding operation and the mask generation function, consult <emphasis>RFC-3447: Public-Key Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography Specifications</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the salt used in padding. Use <ref refid="rsa_8h_1ab7aa2f548235465c0f384a13617f184f" kindref="member">MBEDTLS_RSA_SALT_LEN_ANY</ref> to accept any salt length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the signature. This must be a readable buffer of length <computeroutput>ctx-&gt;len</computeroutput> Bytes. For example, <computeroutput>256</computeroutput> Bytes for an 2048-bit RSA modulus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the verify operation was successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_RSA_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="1099" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="1099" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a6c88adae1a4e49c11d210c59dbc89f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_copy</definition>
        <argsstring>(mbedtls_rsa_context *dst, const mbedtls_rsa_context *src)</argsstring>
        <name>mbedtls_rsa_copy</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>This function copies the components of an RSA context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination context. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source context. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory allocation failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="1116" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="1116" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a74eb13ecac0de582b01b4332c1d66494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_rsa_free</definition>
        <argsstring>(mbedtls_rsa_context *ctx)</argsstring>
        <name>mbedtls_rsa_free</name>
        <param>
          <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function frees the components of an RSA key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The RSA context to free. May be <computeroutput>NULL</computeroutput>, in which case this function is a no-op. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized RSA context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="1125" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="1125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="rsa_8h_1a1e5352f846fbb0938fb757be5cde0262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_rsa_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_rsa_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>The RSA checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" line="1135" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h" declline="1135" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides an API for the RSA public-key cryptosystem. </para>
    </briefdescription>
    <detaileddescription>
<para>The RSA public-key cryptosystem is defined in <emphasis>Public-Key Cryptography Standards (PKCS) #1 v1.5: RSA Encryption</emphasis> and <emphasis>Public-Key Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography Specifications</emphasis>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_RSA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_RSA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bignum_8h" kindref="compound">mbedtls/bignum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="md_8h" kindref="compound">mbedtls/md.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_THREADING_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="threading_8h" kindref="compound">mbedtls/threading.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>RSA<sp/>Error<sp/>codes</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="33" refid="rsa_8h_1abf2997e01281b898fd4594af0b7bfbb4" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4080</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="rsa_8h_1add099b8887e9e2942fcc3bf1673f703d" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_INVALID_PADDING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="rsa_8h_1ae334d56985d569186f5b5bb462cd6af2" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_KEY_GEN_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="rsa_8h_1a75113c3b54138090c45a973b864200ad" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_KEY_CHECK_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="rsa_8h_1ae9bffdb461c7e5803b4081ddd745afb5" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_PUBLIC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4280</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="rsa_8h_1af7ddb312b48f8cd135150fc9bbb791d0" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_PRIVATE_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4300</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="rsa_8h_1a334c537fbd9e49eb37a2ff12a11392cd" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_VERIFY_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4380</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="rsa_8h_1a2d3d26a305009e5b26957e21b6b151c9" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="rsa_8h_1a6aa8ac62f7c3079cba7da3250a2fb7af" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_RSA_RNG_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4480</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>RSA<sp/>constants</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="rsa_8h_1a426a0d77233000f50dcce6f27d5ddd05" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_RSA_PKCS_V15<sp/><sp/><sp/><sp/>0<sp/></highlight></codeline>
<codeline lineno="56" refid="rsa_8h_1a903f0c378a6303efdbc1f53b18603bb1" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_RSA_PKCS_V21<sp/><sp/><sp/><sp/>1<sp/></highlight></codeline>
<codeline lineno="58" refid="rsa_8h_1ab2115255ea768cf9cef953f48ab24f53" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_RSA_SIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/></highlight></codeline>
<codeline lineno="59" refid="rsa_8h_1ad4bc17285be7e6ae4ccba4747de4ef76" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_RSA_CRYPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/></highlight></codeline>
<codeline lineno="61" refid="rsa_8h_1ab7aa2f548235465c0f384a13617f184f" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_RSA_SALT_LEN_ANY<sp/><sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>constants<sp/>may<sp/>be<sp/>used<sp/>even<sp/>if<sp/>the<sp/>RSA<sp/>module<sp/>is<sp/>compile<sp/>out,</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>eg<sp/>for<sp/>alternative<sp/>(PKCS#11)<sp/>RSA<sp/>implementations<sp/>in<sp/>the<sp/>PK<sp/>layers.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_RSA_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regular<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_RSA_GEN_KEY_MIN_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="rsa_8h_1a01ab68ada11c64d02f5a5c879b519aef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_RSA_GEN_KEY_MIN_BITS<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>MBEDTLS_RSA_GEN_KEY_MIN_BITS<sp/>&lt;<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;MBEDTLS_RSA_GEN_KEY_MIN_BITS<sp/>must<sp/>be<sp/>at<sp/>least<sp/>128<sp/>bits&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="structmbedtls__rsa__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>{</highlight></codeline>
<codeline lineno="86" refid="structmbedtls__rsa__context_1a70e2407beb0909aa80f48c3baa136805" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ver);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90" refid="structmbedtls__rsa__context_1a53fb5d508cfcf15118f2e81cd6a62813" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92" refid="structmbedtls__rsa__context_1afffbd9d680ca49a5ad69f61a8bbb0a44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(N);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93" refid="structmbedtls__rsa__context_1ac3560b76aa9fda7164850c5e0bf8ddb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(E);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="structmbedtls__rsa__context_1aeecb6175bc85db0ef7b7c5c01958caad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(D);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96" refid="structmbedtls__rsa__context_1a40d6857fed7e974189dc87bb435b12ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(P);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97" refid="structmbedtls__rsa__context_1abd11befa755eea49ead6f17c4daa4829" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(Q);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99" refid="structmbedtls__rsa__context_1ab9c941420782904d355f5a9621da8d79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(DP);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100" refid="structmbedtls__rsa__context_1a29809490ed6bf0058dd16f6e3031b196" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(DQ);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101" refid="structmbedtls__rsa__context_1a1c9c96f32efd84fd635a63532c235603" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(QP);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103" refid="structmbedtls__rsa__context_1a5cf94d11521c5e3df9ddd0a2ffd3388d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(RN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105" refid="structmbedtls__rsa__context_1a9db558d70d04128fbeb7406ce115f741" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(RP);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="structmbedtls__rsa__context_1adbf2218c648ced9076bee59a5bd66611" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(RQ);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108" refid="structmbedtls__rsa__context_1aa0ac9e059cfaf1966c04196d3c2ba710" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(Vi);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109" refid="structmbedtls__rsa__context_1a77445485729e94c6467c449eb2faac1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(Vf);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111" refid="structmbedtls__rsa__context_1a95482981a8945a1036e82e59d29016bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(padding);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114" refid="structmbedtls__rsa__context_1a0e921c39133ce8e2263600be285773b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(hash_id);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_THREADING_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invariant:<sp/>the<sp/>mutex<sp/>is<sp/>initialized<sp/>iff<sp/>ver<sp/>!=<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="structmbedtls__rsa__context_1a2a3656ee95ef11bffc81ce32cab72276" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mutex);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="rsa_8h_1a597739934bbd12f31e1caed8e4803366" kindref="member">mbedtls_rsa_context</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_RSA_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rsa_alt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_RSA_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1ab444714b1e98b421ea9df6ce5725a824" kindref="member">mbedtls_rsa_init</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a588778028aa0ebed16bc856a57841271" kindref="member">mbedtls_rsa_set_padding</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>padding,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>hash_id);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a48eae6e8b2a6746799bd7b1ebdc4d656" kindref="member">mbedtls_rsa_get_padding_mode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a60e6e35626ceabc367e52e56e10047e0" kindref="member">mbedtls_rsa_get_md_alg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a2faa555349886b5c25923f27c23c3011" kindref="member">mbedtls_rsa_import</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*N,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Q,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*D,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*E);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a3cbe89ebf7cab79bddb35459c56a3657" kindref="member">mbedtls_rsa_import_raw</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*N,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N_len,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*P,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>P_len,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*Q,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Q_len,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>D_len,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*E,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>E_len);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a09e4d51afc792bbb2ff9f4b411ab9158" kindref="member">mbedtls_rsa_complete</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a67851948911cfb0c7923f7eb274eebd7" kindref="member">mbedtls_rsa_export</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*N,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*P,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Q,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*D,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*E);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a6888c6cbbf68a4dee39bd516d1edbcf8" kindref="member">mbedtls_rsa_export_raw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*N,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N_len,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>P_len,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Q,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Q_len,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*D,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>D_len,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*E,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>E_len);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a93d68199c0747dabb345ef46b33f8952" kindref="member">mbedtls_rsa_export_crt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*DP,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*DQ,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*QP);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a4d0b602b390e2349d420454f964ee430" kindref="member">mbedtls_rsa_get_len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a421fc8812e75698e33887aafacb0c829" kindref="member">mbedtls_rsa_gen_key</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1ad5da263d80db9ee27f084b68b0092546" kindref="member">mbedtls_rsa_check_pubkey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1ab393f7a4d3882ac0b2afa51b641bf475" kindref="member">mbedtls_rsa_check_privkey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a3204b1f8a0dafb33b4ccc16570a40999" kindref="member">mbedtls_rsa_check_pub_priv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*pub,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*prv);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a9db0f76aff9a6ce179b6fbe329bf5569" kindref="member">mbedtls_rsa_public</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a3e016741ddaa354916ade4d48e9a0965" kindref="member">mbedtls_rsa_private</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a685bd304e2cec3da6e96a130f4fbff34" kindref="member">mbedtls_rsa_pkcs1_encrypt</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1af28607d372357215169efe254ec59574" kindref="member">mbedtls_rsa_rsaes_pkcs1_v15_encrypt</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1aa16af4e99dd20a256bd9ad23b22090fb" kindref="member">mbedtls_rsa_rsaes_oaep_encrypt</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a59628fab10ce8aaf67f808f6cbf40df6" kindref="member">mbedtls_rsa_pkcs1_decrypt</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_max_len);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a8b1af3b72b87e886e4424bacf8ca37d3" kindref="member">mbedtls_rsa_rsaes_pkcs1_v15_decrypt</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_max_len);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1ac60cc79eae39efaa1c04d57c928be727" kindref="member">mbedtls_rsa_rsaes_oaep_decrypt</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_max_len);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1ab04f3ae401918c1ef2a573603b373376" kindref="member">mbedtls_rsa_pkcs1_sign</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a5673df1cf221af4084eb8b6e98783d09" kindref="member">mbedtls_rsa_rsassa_pkcs1_v15_sign</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a871f4e4a85c4b878596a5f0d6852822c" kindref="member">mbedtls_rsa_rsassa_pss_sign_ext</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>saltlen,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a94463359ec6f57fc2a4e66f4a01ee415" kindref="member">mbedtls_rsa_rsassa_pss_sign</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1ada463dfacc1b9623c1237163ca134c0b" kindref="member">mbedtls_rsa_pkcs1_verify</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a750fe179d33472a379c4b57dca3f6126" kindref="member">mbedtls_rsa_rsassa_pkcs1_v15_verify</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a74c94af52f04014c14addf3f4bd1bfd8" kindref="member">mbedtls_rsa_rsassa_pss_verify</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a17fd9fadff17a5a69c6f2469e3ecda92" kindref="member">mbedtls_rsa_rsassa_pss_verify_ext</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>mgf1_hash_id,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_salt_len,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a6c88adae1a4e49c11d210c59dbc89f46" kindref="member">mbedtls_rsa_copy</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*src);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a74eb13ecac0de582b01b4332c1d66494" kindref="member">mbedtls_rsa_free</ref>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SELF_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rsa_8h_1a1e5352f846fbb0938fb757be5cde0262" kindref="member">mbedtls_rsa_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SELF_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>rsa.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/rsa.h"/>
  </compounddef>
</doxygen>
