<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__key__derivation" kind="group">
    <compoundname>key_derivation</compoundname>
    <title>Key derivation and pseudorandom generation</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" prot="public" static="no">
        <type>struct <ref refid="structpsa__key__derivation__s" kindref="compound">psa_key_derivation_s</ref></type>
        <definition>typedef struct psa_key_derivation_s psa_key_derivation_operation_t</definition>
        <argsstring></argsstring>
        <name>psa_key_derivation_operation_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of the state data structure for key derivation operations.</para>
<para>Before calling any function on a key derivation operation object, the application must initialize it by any of the following means:<itemizedlist>
<listitem><para>Set the structure to all-bits-zero, for example: <programlisting><codeline><highlight class="normal">psa_key_derivation_operation_t<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal">memset(&amp;operation,<sp/>0,<sp/>sizeof(operation));</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to logical zero values, for example: <programlisting><codeline><highlight class="normal">psa_key_derivation_operation_t<sp/>operation<sp/>=<sp/>{0};</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to the initializer <ref refid="group__key__derivation_1ga5bdec40d201551558579a635520ae85d" kindref="member">PSA_KEY_DERIVATION_OPERATION_INIT</ref>, for example: <programlisting><codeline><highlight class="normal">psa_key_derivation_operation_t<sp/>operation<sp/>=<sp/>PSA_KEY_DERIVATION_OPERATION_INIT;</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Assign the result of the function <ref refid="group__key__derivation_1ga8e06e993918a46032e92031f2a38bc52" kindref="member">psa_key_derivation_operation_init()</ref> to the structure, for example: <programlisting><codeline><highlight class="normal">psa_key_derivation_operation_t<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal">operation<sp/>=<sp/>psa_key_derivation_operation_init();</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>This is an implementation-defined <computeroutput>struct</computeroutput>. Applications should not make any assumptions about the content of this structure. Implementation details can change in future versions without notice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3154" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" bodystart="3199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__key__derivation_1ga8e06e993918a46032e92031f2a38bc52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref></type>
        <definition>static psa_key_derivation_operation_t psa_key_derivation_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_key_derivation_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an initial value for a key derivation operation object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3209" column="39" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3209" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_setup</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, psa_algorithm_t alg)</argsstring>
        <name>psa_key_derivation_setup</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up a key derivation operation.</para>
<para>A key derivation algorithm takes some inputs and uses them to generate a byte stream in a deterministic way. This byte stream can be used to produce keys and other cryptographic material.</para>
<para>To derive a key:<orderedlist>
<listitem><para>Start with an initialized object of type <ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref>.</para>
</listitem><listitem><para>Call <ref refid="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" kindref="member">psa_key_derivation_setup()</ref> to select the algorithm.</para>
</listitem><listitem><para>Provide the inputs for the key derivation by calling <ref refid="group__key__derivation_1ga8fd934dfb0ca45cbf89542ef2a5494c2" kindref="member">psa_key_derivation_input_bytes()</ref> or <ref refid="group__key__derivation_1gab2d7ce8705dd8e4a093f4b8a21a0c15a" kindref="member">psa_key_derivation_input_key()</ref> as appropriate. Which inputs are needed, in what order, and whether they may be keys and if so of what type depends on the algorithm.</para>
</listitem><listitem><para>Optionally set the operation&apos;s maximum capacity with <ref refid="group__key__derivation_1ga8c26178dc8e4581cb9fbce5650db3279" kindref="member">psa_key_derivation_set_capacity()</ref>. You may do this before, in the middle of or after providing inputs. For some algorithms, this step is mandatory because the output depends on the maximum capacity.</para>
</listitem><listitem><para>To derive a key, call <ref refid="group__key__derivation_1gada7a6e17222ea9e7a6be6864a00316e1" kindref="member">psa_key_derivation_output_key()</ref>. To derive a byte string for a different purpose, call <ref refid="group__key__derivation_1ga06b7eb34a2fa88965f68e3d023fa12b9" kindref="member">psa_key_derivation_output_bytes()</ref>. Successive calls to these functions use successive output bytes calculated by the key derivation algorithm.</para>
</listitem><listitem><para>Clean up the key derivation operation object with <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
</listitem></orderedlist>
</para>
<para>If this function returns an error, the key derivation operation object is not changed.</para>
<para>If an error occurs at any step after a call to <ref refid="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" kindref="member">psa_key_derivation_setup()</ref>, the operation will need to be reset by a call to <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para>Implementations must reject an attempt to derive a key of size 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to set up. It must have been initialized but not set up yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation algorithm to compute (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gaf8b90c648aa53dbd06c236695e300cd0" kindref="member">PSA_ALG_IS_KEY_DERIVATION</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not a key derivation algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not supported or is not a key derivation algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be inactive), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3269" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3269" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1ga9b0b6769491b25e0592fce0f1c96f842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_get_capacity</definition>
        <argsstring>(const psa_key_derivation_operation_t *operation, size_t *capacity)</argsstring>
        <name>psa_key_derivation_get_capacity</name>
        <param>
          <type>const <ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the current capacity of a key derivation operation.</para>
<para>The capacity of a key derivation is the maximum number of bytes that it can return. When you get <emphasis>N</emphasis> bytes of output from a key derivation operation, this reduces its capacity by <emphasis>N</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the capacity of the operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3292" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3292" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1ga8c26178dc8e4581cb9fbce5650db3279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_set_capacity</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, size_t capacity)</argsstring>
        <name>psa_key_derivation_set_capacity</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the maximum capacity of a key derivation operation.</para>
<para>The capacity of a key derivation operation is the maximum number of bytes that the key derivation operation can return from this point onwards.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new capacity of the operation. It must be less or equal to the operation&apos;s current capacity.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>capacity</computeroutput> is larger than the operation&apos;s current capacity. In this case, the operation object remains valid and its capacity remains unchanged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3320" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3320" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1ga8fd934dfb0ca45cbf89542ef2a5494c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_input_bytes</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, psa_key_derivation_step_t step, const uint8_t *data, size_t data_length)</argsstring>
        <name>psa_key_derivation_input_bytes</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" kindref="member">psa_key_derivation_step_t</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide an input for key derivation or key agreement.</para>
<para>Which inputs are required and in what order depends on the algorithm. Refer to the documentation of each key derivation or key agreement algorithm for information.</para>
<para>This function passes direct inputs, which is usually correct for non-secret inputs. To pass a secret input, which should be in a key object, call <ref refid="group__key__derivation_1gab2d7ce8705dd8e4a093f4b8a21a0c15a" kindref="member">psa_key_derivation_input_key()</ref> instead of this function. Refer to the documentation of individual step types (<computeroutput>PSA_KEY_DERIVATION_INPUT_xxx</computeroutput> values of type <ref refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" kindref="member">psa_key_derivation_step_t</ref>) for more information.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to use. It must have been set up with <ref refid="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" kindref="member">psa_key_derivation_setup()</ref> and must not have produced any output yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Which step the input data is for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>step</computeroutput> is not compatible with the operation&apos;s algorithm, or <computeroutput>step</computeroutput> does not allow direct inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid for this input <computeroutput>step</computeroutput>, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3373" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3373" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1gac14f4c2fa41c2c1f6154f8a9c7a5a0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_input_integer</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, psa_key_derivation_step_t step, uint64_t value)</argsstring>
        <name>psa_key_derivation_input_integer</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" kindref="member">psa_key_derivation_step_t</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide a numeric input for key derivation or key agreement.</para>
<para>Which inputs are required and in what order depends on the algorithm. However, when an algorithm requires a particular order, numeric inputs usually come first as they tend to be configuration parameters. Refer to the documentation of each key derivation or key agreement algorithm for information.</para>
<para>This function is used for inputs which are fixed-size non-negative integers.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to use. It must have been set up with <ref refid="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" kindref="member">psa_key_derivation_setup()</ref> and must not have produced any output yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Which step the input data is for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the numeric input.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>step</computeroutput> is not compatible with the operation&apos;s algorithm, or <computeroutput>step</computeroutput> does not allow numeric inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid for this input <computeroutput>step</computeroutput>, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3416" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3416" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1gab2d7ce8705dd8e4a093f4b8a21a0c15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_input_key</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, psa_key_derivation_step_t step, mbedtls_svc_key_id_t key)</argsstring>
        <name>psa_key_derivation_input_key</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" kindref="member">psa_key_derivation_step_t</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide an input for key derivation in the form of a key.</para>
<para>Which inputs are required and in what order depends on the algorithm. Refer to the documentation of each key derivation or key agreement algorithm for information.</para>
<para>This function obtains input from a key object, which is usually correct for secret inputs or for non-secret personalization strings kept in the key store. To pass a non-secret parameter which is not in the key store, call <ref refid="group__key__derivation_1ga8fd934dfb0ca45cbf89542ef2a5494c2" kindref="member">psa_key_derivation_input_bytes()</ref> instead of this function. Refer to the documentation of individual step types (<computeroutput>PSA_KEY_DERIVATION_INPUT_xxx</computeroutput> values of type <ref refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" kindref="member">psa_key_derivation_step_t</ref>) for more information.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to use. It must have been set up with <ref refid="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" kindref="member">psa_key_derivation_setup()</ref> and must not have produced any output yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Which step the input data is for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key. It must have an appropriate type for step and must allow the usage <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref> or <ref refid="group__policy_1ga25aece70be2b79afbdb4180f7c4e68ed" kindref="member">PSA_KEY_USAGE_VERIFY_DERIVATION</ref> (see note) and the algorithm used by the operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Once all inputs steps are completed, the operations will allow:<itemizedlist>
<listitem><para><ref refid="group__key__derivation_1ga06b7eb34a2fa88965f68e3d023fa12b9" kindref="member">psa_key_derivation_output_bytes()</ref> if each input was either a direct input or a key with <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref> set;</para>
</listitem><listitem><para><ref refid="group__key__derivation_1gada7a6e17222ea9e7a6be6864a00316e1" kindref="member">psa_key_derivation_output_key()</ref> if the input for step <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> or <ref refid="group__derivation_1gae19de2d7c74759878b4a6677b0acdda7" kindref="member">PSA_KEY_DERIVATION_INPUT_PASSWORD</ref> was from a key slot with <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref> and each other input was either a direct input or a key with <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref> set;</para>
</listitem><listitem><para><ref refid="group__key__derivation_1gaf01520beb7ba932143ffe733b0795b08" kindref="member">psa_key_derivation_verify_bytes()</ref> if each input was either a direct input or a key with <ref refid="group__policy_1ga25aece70be2b79afbdb4180f7c4e68ed" kindref="member">PSA_KEY_USAGE_VERIFY_DERIVATION</ref> set;</para>
</listitem><listitem><para><ref refid="group__key__derivation_1gac041714e34a94742e8ee006ac7dfea5a" kindref="member">psa_key_derivation_verify_key()</ref> under the same conditions as <ref refid="group__key__derivation_1gaf01520beb7ba932143ffe733b0795b08" kindref="member">psa_key_derivation_verify_bytes()</ref>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key allows neither <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref> nor <ref refid="group__policy_1ga25aece70be2b79afbdb4180f7c4e68ed" kindref="member">PSA_KEY_USAGE_VERIFY_DERIVATION</ref>, or it doesn&apos;t allow this algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>step</computeroutput> is not compatible with the operation&apos;s algorithm, or <computeroutput>step</computeroutput> does not allow key inputs of the given type or does not allow key inputs at all. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid for this input <computeroutput>step</computeroutput>, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3483" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3483" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1ga2cd5a8ac906747d3204ec442db78745f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_key_agreement</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, psa_key_derivation_step_t step, mbedtls_svc_key_id_t private_key, const uint8_t *peer_key, size_t peer_key_length)</argsstring>
        <name>psa_key_derivation_key_agreement</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" kindref="member">psa_key_derivation_step_t</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>private_key</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>peer_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>peer_key_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a key agreement and use the shared secret as input to a key derivation.</para>
<para>A key agreement algorithm takes two inputs: a private key <computeroutput>private_key</computeroutput> a public key <computeroutput>peer_key</computeroutput>. The result of this function is passed as input to a key derivation. The output of this key derivation can be extracted by reading from the resulting operation to produce keys and other cryptographic material.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to use. It must have been set up with <ref refid="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" kindref="member">psa_key_derivation_setup()</ref> with a key agreement and derivation algorithm <computeroutput>alg</computeroutput> (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga59753742cb06553bd22751bbef472b6f" kindref="member">PSA_ALG_IS_KEY_AGREEMENT</ref>(<computeroutput>alg</computeroutput>) is true and <ref refid="group__crypto__types_1gaa40ab362ce141ce541d69b2eb1f41438" kindref="member">PSA_ALG_IS_RAW_KEY_AGREEMENT</ref>(<computeroutput>alg</computeroutput>) is false). The operation must be ready for an input of the type given by <computeroutput>step</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Which step the input data is for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the private key to use. It must allow the usage <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peer_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Public key of the peer. The peer key must be in the same format that <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key()</ref> accepts for the public key type corresponding to the type of private_key. That is, this function performs the equivalent of <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key</ref>(..., <computeroutput>peer_key</computeroutput>, <computeroutput>peer_key_length</computeroutput>) where with key attributes indicating the public key type corresponding to the type of <computeroutput>private_key</computeroutput>. For example, for EC keys, this means that peer_key is interpreted as a point on the curve that the private key is on. The standard formats for public keys are documented in the documentation of <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>peer_key</computeroutput> in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>private_key</computeroutput> is not compatible with <computeroutput>alg</computeroutput>, or <computeroutput>peer_key</computeroutput> is not valid for <computeroutput>alg</computeroutput> or not compatible with <computeroutput>private_key</computeroutput>, or <computeroutput>step</computeroutput> does not allow an input resulting from a key agreement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not supported or is not a key derivation algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid for this key agreement <computeroutput>step</computeroutput>, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3551" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3551" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1ga06b7eb34a2fa88965f68e3d023fa12b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_output_bytes</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, uint8_t *output, size_t output_length)</argsstring>
        <name>psa_key_derivation_output_bytes</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read some data from a key derivation operation.</para>
<para>This function calculates output bytes from a key derivation algorithm and return those bytes. If you view the key derivation&apos;s output as a stream of bytes, this function destructively reads the requested number of bytes from the stream. The operation&apos;s capacity decreases by the number of bytes read.</para>
<para>If this function returns an error status other than <ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref>, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the output will be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>One of the inputs was a key whose policy didn&apos;t allow <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation&apos;s capacity was less than <computeroutput>output_length</computeroutput> bytes. Note that in this case, no output is written to the output buffer. The operation&apos;s capacity is set to 0, thus subsequent calls to this function will not succeed, even with a smaller output buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active and completed all required input steps), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3598" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3598" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1gada7a6e17222ea9e7a6be6864a00316e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_output_key</definition>
        <argsstring>(const psa_key_attributes_t *attributes, psa_key_derivation_operation_t *operation, mbedtls_svc_key_id_t *key)</argsstring>
        <name>psa_key_derivation_output_key</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derive a key from an ongoing key derivation operation.</para>
<para>This function calculates output bytes from a key derivation algorithm and uses those bytes to generate a key deterministically. The key&apos;s location, usage policy, type and size are taken from <computeroutput>attributes</computeroutput>.</para>
<para>If you view the key derivation&apos;s output as a stream of bytes, this function destructively reads as many bytes as required from the stream. The operation&apos;s capacity decreases by the number of bytes read.</para>
<para>If this function returns an error status other than <ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref>, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para>How much output is produced and consumed from the operation, and how the key is derived, depends on the key type and on the key size (denoted <computeroutput>bits</computeroutput> below):</para>
<para><itemizedlist>
<listitem><para>For key types for which the key is an arbitrary sequence of bytes of a given size, this function is functionally equivalent to calling <ref refid="group__key__derivation_1ga06b7eb34a2fa88965f68e3d023fa12b9" kindref="member">psa_key_derivation_output_bytes</ref> and passing the resulting output to <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key</ref>. However, this function has a security benefit: if the implementation provides an isolation boundary then the key material is not exposed outside the isolation boundary. As a consequence, for these key types, this function always consumes exactly (<computeroutput>bits</computeroutput> / 8) bytes from the operation. The following key types defined in this specification follow this scheme:<itemizedlist>
<listitem><para><ref refid="group__crypto__types_1ga6ee54579dcf278c677eda4bb1a29575e" kindref="member">PSA_KEY_TYPE_AES</ref>;</para>
</listitem><listitem><para><ref refid="group__crypto__types_1ga853d69f982740f4fd40cc964075c188f" kindref="member">PSA_KEY_TYPE_ARIA</ref>;</para>
</listitem><listitem><para><ref refid="group__crypto__types_1gad8e5da742343fd5519f9d8a630c2ed81" kindref="member">PSA_KEY_TYPE_CAMELLIA</ref>;</para>
</listitem><listitem><para><ref refid="group__crypto__types_1gae871b2357b8593f33bfd51abbf93ebb1" kindref="member">PSA_KEY_TYPE_DERIVE</ref>;</para>
</listitem><listitem><para><ref refid="group__crypto__types_1ga92d989f4ca64abd00f463defd773a6f8" kindref="member">PSA_KEY_TYPE_HMAC</ref>;</para>
</listitem><listitem><para><ref refid="group__crypto__types_1gac41a0d5fdafc1c19ae73313613142723" kindref="member">PSA_KEY_TYPE_PASSWORD_HASH</ref>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>For ECC keys on a Montgomery elliptic curve (<ref refid="group__crypto__types_1ga0b6f5d4d5037c54ffa850d8059c32df0" kindref="member">PSA_KEY_TYPE_ECC_KEY_PAIR</ref>(<computeroutput>curve</computeroutput>) where <computeroutput>curve</computeroutput> designates a Montgomery curve), this function always draws a byte string whose length is determined by the curve, and sets the mandatory bits accordingly. That is:<itemizedlist>
<listitem><para>Curve25519 (<ref refid="group__crypto__types_1ga1f624c5cdaf25b21287af33024e1aff8" kindref="member">PSA_ECC_FAMILY_MONTGOMERY</ref>, 255 bits): draw a 32-byte string and process it as specified in RFC 7748 <sect/>5.</para>
</listitem><listitem><para>Curve448 (<ref refid="group__crypto__types_1ga1f624c5cdaf25b21287af33024e1aff8" kindref="member">PSA_ECC_FAMILY_MONTGOMERY</ref>, 448 bits): draw a 56-byte string and process it as specified in RFC 7748 <sect/>5.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>For key types for which the key is represented by a single sequence of <computeroutput>bits</computeroutput> bits with constraints as to which bit sequences are acceptable, this function draws a byte string of length (<computeroutput>bits</computeroutput> / 8) bytes rounded up to the nearest whole number of bytes. If the resulting byte string is acceptable, it becomes the key, otherwise the drawn bytes are discarded. This process is repeated until an acceptable byte string is drawn. The byte string drawn from the operation is interpreted as specified for the output produced by <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref>. The following key types defined in this specification follow this scheme:<itemizedlist>
<listitem><para><ref refid="group__crypto__types_1ga577562bfbbc691c820d55ec308333138" kindref="member">PSA_KEY_TYPE_DES</ref>. Force-set the parity bits, but discard forbidden weak keys. For 2-key and 3-key triple-DES, the three keys are generated successively (for example, for 3-key triple-DES, if the first 8 bytes specify a weak key and the next 8 bytes do not, discard the first 8 bytes, use the next 8 bytes as the first key, and continue reading output from the operation to derive the other two keys).</para>
</listitem><listitem><para>Finite-field Diffie-Hellman keys (<ref refid="group__crypto__types_1gab4f857c4cd56f5fe65ded421e61bcc8c" kindref="member">PSA_KEY_TYPE_DH_KEY_PAIR</ref>(<computeroutput>group</computeroutput>) where <computeroutput>group</computeroutput> designates any Diffie-Hellman group) and ECC keys on a Weierstrass elliptic curve (<ref refid="group__crypto__types_1ga0b6f5d4d5037c54ffa850d8059c32df0" kindref="member">PSA_KEY_TYPE_ECC_KEY_PAIR</ref>(<computeroutput>curve</computeroutput>) where <computeroutput>curve</computeroutput> designates a Weierstrass curve). For these key types, interpret the byte string as integer in big-endian order. Discard it if it is not in the range [0, <emphasis>N</emphasis> - 2] where <emphasis>N</emphasis> is the boundary of the private key domain (the prime <emphasis>p</emphasis> for Diffie-Hellman, the subprime <emphasis>q</emphasis> for DSA, or the order of the curve&apos;s base point for ECC). Add 1 to the resulting integer and use this as the private key <emphasis>x</emphasis>. This method allows compliance to NIST standards, specifically the methods titled &quot;key-pair generation by testing candidates&quot; in NIST SP 800-56A <sect/>5.6.1.1.4 for Diffie-Hellman, in FIPS 186-4 <sect/>B.1.2 for DSA, and in NIST SP 800-56A <sect/>5.6.1.2.2 or FIPS 186-4 <sect/>B.4.2 for elliptic curve keys.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>For other key types, including <ref refid="group__crypto__types_1ga11745b110166e927e2abeabc7d532051" kindref="member">PSA_KEY_TYPE_RSA_KEY_PAIR</ref>, the way in which the operation output is consumed is implementation-defined.</para>
</listitem></itemizedlist>
</para>
<para>In all cases, the data that is read is discarded from the operation. The operation&apos;s capacity is decreased by the number of bytes read.</para>
<para>For algorithms that take an input step <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref>, the input to that step must be provided with <ref refid="group__key__derivation_1gab2d7ce8705dd8e4a093f4b8a21a0c15a" kindref="member">psa_key_derivation_input_key()</ref>. Future versions of this specification may include additional restrictions on the derived key based on the attributes and strength of the secret key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attributes for the new key. If the key type to be created is <ref refid="group__crypto__types_1gac41a0d5fdafc1c19ae73313613142723" kindref="member">PSA_KEY_TYPE_PASSWORD_HASH</ref> then the algorithm in the policy must be the same as in the current operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, an identifier for the newly created key. For persistent keys, this is the key identifier defined in <computeroutput>attributes</computeroutput>. <computeroutput>0</computeroutput> on failure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. If the key is persistent, the key material and the key&apos;s metadata have been saved to persistent storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gaf2b34cc87edc72f3ba90071a08210d20" kindref="member">PSA_ERROR_ALREADY_EXISTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is an attempt to create a persistent key, and there is already a persistent key with the given identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was not enough data to create the desired key. Note that in this case, no output is written to the output buffer. The operation&apos;s capacity is set to 0, thus subsequent calls to this function will not succeed, even with a smaller output buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key type or key size is not supported, either by the implementation in general or in this particular location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The provided key attributes are not valid for the operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> or <ref refid="group__derivation_1gae19de2d7c74759878b4a6677b0acdda7" kindref="member">PSA_KEY_DERIVATION_INPUT_PASSWORD</ref> input was not provided through a key; or one of the inputs was a key whose policy didn&apos;t allow <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga897a45eb206a6f6b7be7ffbe36f0d766" kindref="member">PSA_ERROR_INSUFFICIENT_STORAGE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active and completed all required input steps), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3748" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3748" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1gaf01520beb7ba932143ffe733b0795b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_verify_bytes</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, const uint8_t *expected_output, size_t output_length)</argsstring>
        <name>psa_key_derivation_verify_bytes</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>expected_output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare output data from a key derivation operation to an expected value.</para>
<para>This function calculates output bytes from a key derivation algorithm and compares those bytes to an expected value in constant time. If you view the key derivation&apos;s output as a stream of bytes, this function destructively reads the expected number of bytes from the stream before comparing them. The operation&apos;s capacity decreases by the number of bytes read.</para>
<para>This is functionally equivalent to the following code: <programlisting><codeline><highlight class="normal">psa_key_derivation_output_bytes(operation,<sp/>tmp,<sp/>output_length);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(memcmp(output,<sp/>tmp,<sp/>output_length)<sp/>!=<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>PSA_ERROR_INVALID_SIGNATURE;</highlight></codeline>
</programlisting> except (1) it works even if the key&apos;s policy does not allow outputting the bytes, and (2) the comparison will be done in constant time.</para>
<para>If this function returns an error status other than <ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref> or <ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref>, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">expected_output</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the expected derivation output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the expected output; this is also the number of bytes that will be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The output was read successfully, but it differs from the expected output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>One of the inputs was a key whose policy didn&apos;t allow <ref refid="group__policy_1ga25aece70be2b79afbdb4180f7c4e68ed" kindref="member">PSA_KEY_USAGE_VERIFY_DERIVATION</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation&apos;s capacity was less than <computeroutput>output_length</computeroutput> bytes. Note that in this case, the operation&apos;s capacity is set to 0, thus subsequent calls to this function will not succeed, even with a smaller expected output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active and completed all required input steps), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3806" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3806" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1gac041714e34a94742e8ee006ac7dfea5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_verify_key</definition>
        <argsstring>(psa_key_derivation_operation_t *operation, psa_key_id_t expected)</argsstring>
        <name>psa_key_derivation_verify_key</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref></type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare output data from a key derivation operation to an expected value stored in a key object.</para>
<para>This function calculates output bytes from a key derivation algorithm and compares those bytes to an expected value, provided as key of type <ref refid="group__crypto__types_1gac41a0d5fdafc1c19ae73313613142723" kindref="member">PSA_KEY_TYPE_PASSWORD_HASH</ref>. If you view the key derivation&apos;s output as a stream of bytes, this function destructively reads the number of bytes corresponding to the length of the expected value from the stream before comparing them. The operation&apos;s capacity decreases by the number of bytes read.</para>
<para>This is functionally equivalent to exporting the key and calling <ref refid="group__key__derivation_1gaf01520beb7ba932143ffe733b0795b08" kindref="member">psa_key_derivation_verify_bytes()</ref> on the result, except that it works even if the key cannot be exported.</para>
<para>If this function returns an error status other than <ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref> or <ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref>, the operation enters an error state and must be aborted by calling <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The key derivation operation object to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">expected</parametername>
</parameternamelist>
<parameterdescription>
<para>A key of type <ref refid="group__crypto__types_1gac41a0d5fdafc1c19ae73313613142723" kindref="member">PSA_KEY_TYPE_PASSWORD_HASH</ref> containing the expected output. Its policy must include the <ref refid="group__policy_1ga25aece70be2b79afbdb4180f7c4e68ed" kindref="member">PSA_KEY_USAGE_VERIFY_DERIVATION</ref> flag and the permitted algorithm must match the operation. The value of this key was likely computed by a previous call to <ref refid="group__key__derivation_1gada7a6e17222ea9e7a6be6864a00316e1" kindref="member">psa_key_derivation_output_key()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The output was read successfully, but if differs from the expected output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key passed as the expected value does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key passed as the expected value has an invalid type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key passed as the expected value does not allow this usage or this algorithm; or one of the inputs was a key whose policy didn&apos;t allow <ref refid="group__policy_1ga25aece70be2b79afbdb4180f7c4e68ed" kindref="member">PSA_KEY_USAGE_VERIFY_DERIVATION</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga086ac09f3a555f86e7997beb186f5eef" kindref="member">PSA_ERROR_INSUFFICIENT_DATA</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation&apos;s capacity was less than the length of the expected value. In this case, the operation&apos;s capacity is set to 0, thus subsequent calls to this function will not succeed, even with a smaller expected output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active and completed all required input steps), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3870" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3870" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_key_derivation_abort</definition>
        <argsstring>(psa_key_derivation_operation_t *operation)</argsstring>
        <name>psa_key_derivation_abort</name>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abort a key derivation operation.</para>
<para>Aborting an operation frees all associated resources except for the <computeroutput>operation</computeroutput> structure itself. Once aborted, the operation object can be reused for another operation by calling <ref refid="group__key__derivation_1gac0b6a76e45cceb1862752bf041701859" kindref="member">psa_key_derivation_setup()</ref> again.</para>
<para>This function may be called at any time after the operation object has been initialized as described in <ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref>.</para>
<para>In particular, it is valid to call <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref> twice, or to call <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref> on an operation that has not been set up.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation to abort.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3897" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3897" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__derivation_1ga165dda1ad80a10730cb538069d4cc7aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_raw_key_agreement</definition>
        <argsstring>(psa_algorithm_t alg, mbedtls_svc_key_id_t private_key, const uint8_t *peer_key, size_t peer_key_length, uint8_t *output, size_t output_size, size_t *output_length)</argsstring>
        <name>psa_raw_key_agreement</name>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>private_key</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>peer_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>peer_key_length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a key agreement and return the raw shared secret.</para>
<para><simplesect kind="warning"><para>The raw result of a key agreement algorithm such as finite-field Diffie-Hellman or elliptic curve Diffie-Hellman has biases and should not be used directly as key material. It should instead be passed as input to a key derivation algorithm. To chain a key agreement with a key derivation, use <ref refid="group__key__derivation_1ga2cd5a8ac906747d3204ec442db78745f" kindref="member">psa_key_derivation_key_agreement()</ref> and other functions from the key derivation interface.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The key agreement algorithm to compute (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gaa40ab362ce141ce541d69b2eb1f41438" kindref="member">PSA_ALG_IS_RAW_KEY_AGREEMENT</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the private key to use. It must allow the usage <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peer_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Public key of the peer. It must be in the same format that <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key()</ref> accepts. The standard formats for public keys are documented in the documentation of <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>peer_key</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the decrypted message is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>output</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the returned output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not a key agreement algorithm, or <computeroutput>private_key</computeroutput> is not compatible with <computeroutput>alg</computeroutput>, or <computeroutput>peer_key</computeroutput> is not valid for <computeroutput>alg</computeroutput> or not compatible with <computeroutput>private_key</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>output_size</computeroutput> is too small </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not a supported key agreement algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3950" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="3950" declcolumn="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__key__derivation_1ga5bdec40d201551558579a635520ae85d" prot="public" static="no">
        <name>PSA_KEY_DERIVATION_OPERATION_INIT</name>
        <initializer>{ 0, 0, 0, { 0 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for a key derivation operation object of type <ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="175" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__derivation_1gaf80e7d71949ec72039c163b33cc2154d" prot="public" static="no">
        <name>PSA_KEY_DERIVATION_UNLIMITED_CAPACITY</name>
        <initializer>((size_t) (-1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use the maximum possible capacity for a key derivation operation.</para>
<para>Use this value as the capacity argument when setting up a key derivation to indicate that the operation should have the maximum possible capacity. The value of the maximum possible capacity depends on the key derivation algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="3331" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" bodystart="3331" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
