<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="aes_8h" kind="file" language="C++">
    <compoundname>aes.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="platform__util_8h" local="yes">mbedtls/platform_util.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="ctr__drbg_8h" local="yes">ctr_drbg.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="22">
        <label>mbedtls/platform_time.h</label>
        <link refid="platform__time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>aes.h</label>
        <link refid="aes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="20">
        <label>mbedtls/platform_util.h</label>
        <link refid="platform__util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="23">
        <label>time.h</label>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="24">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>aes.h</label>
        <link refid="aes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ctr_drbg.h</label>
        <link refid="ctr__drbg_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>psa_util.h</label>
        <link refid="psa__util_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__aes__context" prot="public">mbedtls_aes_context</innerclass>
    <innerclass refid="structmbedtls__aes__xts__context" prot="public">mbedtls_aes_xts_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" prot="public" static="no">
        <name>MBEDTLS_AES_ENCRYPT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AES encryption. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="39" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" prot="public" static="no">
        <name>MBEDTLS_AES_DECRYPT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AES decryption. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="40" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8h_1a4506452f9cd9a317327b2b1ce9b1bf59" prot="public" static="no">
        <name>MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</name>
        <initializer>-0x0020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid key length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="44" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8h_1ac46465e53bd0fc9dcd79cb90965e3571" prot="public" static="no">
        <name>MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH</name>
        <initializer>-0x0022</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid data input length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="46" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8h_1a8e1cd6267673f777b38a27e64a6ae4e4" prot="public" static="no">
        <name>MBEDTLS_ERR_AES_BAD_INPUT_DATA</name>
        <initializer>-0x0021</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid input data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="50" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="aes_8h_1ace3c1f8a8995d5fba5aab3b52f27b51d" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref></type>
        <definition>typedef struct mbedtls_aes_context mbedtls_aes_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_aes_context</name>
        <briefdescription>
<para>The AES context-type definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="81" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="aes_8h_1a8aaca7b5338ffffb97151a5f55ba5c24" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref></type>
        <definition>typedef struct mbedtls_aes_xts_context mbedtls_aes_xts_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_aes_xts_context</name>
        <briefdescription>
<para>The AES XTS context-type definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="92" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="aes_8h_1aa72dac8d698ab861843ef74ce8ebf62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_aes_init</definition>
        <argsstring>(mbedtls_aes_context *ctx)</argsstring>
        <name>mbedtls_aes_init</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes the specified AES context. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            It must be the first API called before using
            the context.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="107" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1ad1424ff458ff2ed765d37b620aae4882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_aes_free</definition>
        <argsstring>(mbedtls_aes_context *ctx)</argsstring>
        <name>mbedtls_aes_free</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function releases and clears the specified AES context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to clear. If this is <computeroutput>NULL</computeroutput>, this function does nothing. Otherwise, the context must have been at least initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="116" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a20fc951f82936910a5e2c490bacd904c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_aes_xts_init</definition>
        <argsstring>(mbedtls_aes_xts_context *ctx)</argsstring>
        <name>mbedtls_aes_xts_init</name>
        <param>
          <type><ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes the specified AES XTS context. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            It must be the first API called before using
            the context.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES XTS context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="127" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a92289da7b35e0c05ba1f7364c76b8319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_aes_xts_free</definition>
        <argsstring>(mbedtls_aes_xts_context *ctx)</argsstring>
        <name>mbedtls_aes_xts_free</name>
        <param>
          <type><ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function releases and clears the specified AES XTS context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES XTS context to clear. If this is <computeroutput>NULL</computeroutput>, this function does nothing. Otherwise, the context must have been at least initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="136" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1acec17c6592b98876106d035c372b1efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_setkey_enc</definition>
        <argsstring>(mbedtls_aes_context *ctx, const unsigned char *key, unsigned int keybits)</argsstring>
        <name>mbedtls_aes_setkey_enc</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keybits</declname>
        </param>
        <briefdescription>
<para>This function sets the encryption key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to which the key should be bound. It must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The encryption key. This must be a readable buffer of size <computeroutput>keybits</computeroutput> bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keybits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of data passed in bits. Valid options are: <itemizedlist>
<listitem>
<para>128 bits </para>
</listitem>
<listitem>
<para>192 bits </para>
</listitem>
<listitem>
<para>256 bits</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="aes_8h_1a4506452f9cd9a317327b2b1ce9b1bf59" kindref="member">MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</ref> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="155" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="155" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a11580b789634605dd57e425eadb56617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_setkey_dec</definition>
        <argsstring>(mbedtls_aes_context *ctx, const unsigned char *key, unsigned int keybits)</argsstring>
        <name>mbedtls_aes_setkey_dec</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keybits</declname>
        </param>
        <briefdescription>
<para>This function sets the decryption key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to which the key should be bound. It must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The decryption key. This must be a readable buffer of size <computeroutput>keybits</computeroutput> bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keybits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of data passed. Valid options are: <itemizedlist>
<listitem>
<para>128 bits </para>
</listitem>
<listitem>
<para>192 bits </para>
</listitem>
<listitem>
<para>256 bits</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="aes_8h_1a4506452f9cd9a317327b2b1ce9b1bf59" kindref="member">MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</ref> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="174" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="174" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1af5ff567cf65bc2c0c96b1c339df2907c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_xts_setkey_enc</definition>
        <argsstring>(mbedtls_aes_xts_context *ctx, const unsigned char *key, unsigned int keybits)</argsstring>
        <name>mbedtls_aes_xts_setkey_enc</name>
        <param>
          <type><ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keybits</declname>
        </param>
        <briefdescription>
<para>This function prepares an XTS context for encryption and sets the encryption key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES XTS context to which the key should be bound. It must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The encryption key. This is comprised of the XTS key1 concatenated with the XTS key2. This must be a readable buffer of size <computeroutput>keybits</computeroutput> bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keybits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <computeroutput>key</computeroutput> passed in bits. Valid options are: <itemizedlist>
<listitem>
<para>256 bits (each of key1 and key2 is a 128-bit key) </para>
</listitem>
<listitem>
<para>512 bits (each of key1 and key2 is a 256-bit key)</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="aes_8h_1a4506452f9cd9a317327b2b1ce9b1bf59" kindref="member">MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</ref> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="195" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="195" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a44eb8685d73204b79950d5d01f71de95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_xts_setkey_dec</definition>
        <argsstring>(mbedtls_aes_xts_context *ctx, const unsigned char *key, unsigned int keybits)</argsstring>
        <name>mbedtls_aes_xts_setkey_dec</name>
        <param>
          <type><ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>keybits</declname>
        </param>
        <briefdescription>
<para>This function prepares an XTS context for decryption and sets the decryption key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES XTS context to which the key should be bound. It must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The decryption key. This is comprised of the XTS key1 concatenated with the XTS key2. This must be a readable buffer of size <computeroutput>keybits</computeroutput> bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keybits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <computeroutput>key</computeroutput> passed in bits. Valid options are: <itemizedlist>
<listitem>
<para>256 bits (each of key1 and key2 is a 128-bit key) </para>
</listitem>
<listitem>
<para>512 bits (each of key1 and key2 is a 256-bit key)</para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="aes_8h_1a4506452f9cd9a317327b2b1ce9b1bf59" kindref="member">MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</ref> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="216" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="216" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a0e59fdda18a145e702984268b9ab291a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_crypt_ecb</definition>
        <argsstring>(mbedtls_aes_context *ctx, int mode, const unsigned char input[16], unsigned char output[16])</argsstring>
        <name>mbedtls_aes_crypt_ecb</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>input</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>output</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
<para>This function performs an AES single-block encryption or decryption operation. </para>
        </briefdescription>
        <detaileddescription>
<para>It performs the operation defined in the <computeroutput>mode</computeroutput> parameter (encrypt or decrypt), on the input data buffer defined in the <computeroutput>input</computeroutput> parameter.</para>
<para><ref refid="aes_8h_1aa72dac8d698ab861843ef74ce8ebf62c" kindref="member">mbedtls_aes_init()</ref>, and either <ref refid="aes_8h_1acec17c6592b98876106d035c372b1efa" kindref="member">mbedtls_aes_setkey_enc()</ref> or <ref refid="aes_8h_1a11580b789634605dd57e425eadb56617" kindref="member">mbedtls_aes_setkey_dec()</ref> must be called before the first call to this API with the same context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for encryption or decryption. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES operation: <ref refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" kindref="member">MBEDTLS_AES_ENCRYPT</ref> or <ref refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" kindref="member">MBEDTLS_AES_DECRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. It must be readable and at least <computeroutput>16</computeroutput> Bytes long. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer where the output data will be written. It must be writeable and at least <computeroutput>16</computeroutput> Bytes long.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="245" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="245" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a321834eafbf0dacb36dac343bfd6b35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_crypt_cbc</definition>
        <argsstring>(mbedtls_aes_context *ctx, int mode, size_t length, unsigned char iv[16], const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_aes_crypt_cbc</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>iv</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an AES-CBC encryption or decryption operation on full blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>It performs the operation defined in the <computeroutput>mode</computeroutput> parameter (encrypt/decrypt), on the input data buffer defined in the <computeroutput>input</computeroutput> parameter.</para>
<para>It can be called as many times as needed, until all the input data is processed. <ref refid="aes_8h_1aa72dac8d698ab861843ef74ce8ebf62c" kindref="member">mbedtls_aes_init()</ref>, and either <ref refid="aes_8h_1acec17c6592b98876106d035c372b1efa" kindref="member">mbedtls_aes_setkey_enc()</ref> or <ref refid="aes_8h_1a11580b789634605dd57e425eadb56617" kindref="member">mbedtls_aes_setkey_dec()</ref> must be called before the first call to this API with the same context.</para>
<para><simplesect kind="note"><para>This function operates on full blocks, that is, the input size must be a multiple of the AES block size of <computeroutput>16</computeroutput> Bytes.</para>
</simplesect>
<simplesect kind="note"><para>Upon exit, the content of the IV is updated so that you can call the same function again on the next block(s) of data and get the same result as if it was encrypted in one call. This allows a &quot;streaming&quot; usage. If you need to retain the contents of the IV, you should either save it manually or use the cipher module instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for encryption or decryption. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES operation: <ref refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" kindref="member">MBEDTLS_AES_ENCRYPT</ref> or <ref refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" kindref="member">MBEDTLS_AES_DECRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data in Bytes. This must be a multiple of the block size (<computeroutput>16</computeroutput> Bytes). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector (updated after use). It must be a readable and writeable buffer of <computeroutput>16</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. It must be readable and of size <computeroutput>length</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data. It must be writeable and of size <computeroutput>length</computeroutput> Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="aes_8h_1ac46465e53bd0fc9dcd79cb90965e3571" kindref="member">MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH</ref> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="293" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="293" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a4a4ddd06aa9b096b7015d2fd22c811d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_crypt_xts</definition>
        <argsstring>(mbedtls_aes_xts_context *ctx, int mode, size_t length, const unsigned char data_unit[16], const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_aes_crypt_xts</name>
        <param>
          <type><ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>data_unit</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an AES-XTS encryption or decryption operation for an entire XTS data unit. </para>
        </briefdescription>
        <detaileddescription>
<para>AES-XTS encrypts or decrypts blocks based on their location as defined by a data unit number. The data unit number must be provided by <computeroutput>data_unit</computeroutput>.</para>
<para>NIST SP 800-38E limits the maximum size of a data unit to 2^20 AES blocks. If the data unit is larger than this, this function returns <ref refid="aes_8h_1ac46465e53bd0fc9dcd79cb90965e3571" kindref="member">MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES XTS context to use for AES XTS operations. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES operation: <ref refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" kindref="member">MBEDTLS_AES_ENCRYPT</ref> or <ref refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" kindref="member">MBEDTLS_AES_DECRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of a data unit in Bytes. This can be any length between 16 bytes and 2^24 bytes inclusive (between 1 and 2^20 block cipher blocks). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the data unit encoded as an array of 16 bytes in little-endian format. For disk encryption, this is typically the index of the block device sector that contains the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data (which is an entire data unit). This function reads <computeroutput>length</computeroutput> Bytes from <computeroutput>input</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data (which is an entire data unit). This function writes <computeroutput>length</computeroutput> Bytes to <computeroutput>output</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="aes_8h_1ac46465e53bd0fc9dcd79cb90965e3571" kindref="member">MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH</ref> if <computeroutput>length</computeroutput> is smaller than an AES block in size (16 Bytes) or if <computeroutput>length</computeroutput> is larger than 2^20 blocks (16 MiB). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="338" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="338" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a944946adabbc344f2c6cf6e6f51a21e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_crypt_cfb128</definition>
        <argsstring>(mbedtls_aes_context *ctx, int mode, size_t length, size_t *iv_off, unsigned char iv[16], const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_aes_crypt_cfb128</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>iv_off</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>iv</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an AES-CFB128 encryption or decryption operation. </para>
        </briefdescription>
        <detaileddescription>
<para>It performs the operation defined in the <computeroutput>mode</computeroutput> parameter (encrypt or decrypt), on the input data buffer defined in the <computeroutput>input</computeroutput> parameter.</para>
<para>For CFB, you must set up the context with <ref refid="aes_8h_1acec17c6592b98876106d035c372b1efa" kindref="member">mbedtls_aes_setkey_enc()</ref>, regardless of whether you are performing an encryption or decryption operation, that is, regardless of the <computeroutput>mode</computeroutput> parameter. This is because CFB mode uses the same key schedule for encryption and decryption.</para>
<para><simplesect kind="note"><para>Upon exit, the content of the IV is updated so that you can call the same function again on the next block(s) of data and get the same result as if it was encrypted in one call. This allows a &quot;streaming&quot; usage. If you need to retain the contents of the IV, you must either save it manually or use the cipher module instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for encryption or decryption. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES operation: <ref refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" kindref="member">MBEDTLS_AES_ENCRYPT</ref> or <ref refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" kindref="member">MBEDTLS_AES_DECRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv_off</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in IV (updated after use). It must point to a valid <computeroutput>size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization vector (updated after use). It must be a readable and writeable buffer of <computeroutput>16</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. It must be readable and of size <computeroutput>length</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data. It must be writeable and of size <computeroutput>length</computeroutput> Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="387" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="387" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a9abf42a70f835ca9d9f62350d497e465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_crypt_cfb8</definition>
        <argsstring>(mbedtls_aes_context *ctx, int mode, size_t length, unsigned char iv[16], const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_aes_crypt_cfb8</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>iv</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an AES-CFB8 encryption or decryption operation. </para>
        </briefdescription>
        <detaileddescription>
<para>It performs the operation defined in the <computeroutput>mode</computeroutput> parameter (encrypt/decrypt), on the input data buffer defined in the <computeroutput>input</computeroutput> parameter.</para>
<para>Due to the nature of CFB, you must use the same key schedule for both encryption and decryption operations. Therefore, you must use the context initialized with <ref refid="aes_8h_1acec17c6592b98876106d035c372b1efa" kindref="member">mbedtls_aes_setkey_enc()</ref> for both <ref refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" kindref="member">MBEDTLS_AES_ENCRYPT</ref> and <ref refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" kindref="member">MBEDTLS_AES_DECRYPT</ref>.</para>
<para><simplesect kind="note"><para>Upon exit, the content of the IV is updated so that you can call the same function again on the next block(s) of data and get the same result as if it was encrypted in one call. This allows a &quot;streaming&quot; usage. If you need to retain the contents of the IV, you should either save it manually or use the cipher module instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for encryption or decryption. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES operation: <ref refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" kindref="member">MBEDTLS_AES_ENCRYPT</ref> or <ref refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" kindref="member">MBEDTLS_AES_DECRYPT</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization vector (updated after use). It must be a readable and writeable buffer of <computeroutput>16</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. It must be readable and of size <computeroutput>length</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data. It must be writeable and of size <computeroutput>length</computeroutput> Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="432" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="432" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a28fe6cc0d0ebc18745a10d7b5dfd5c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_crypt_ofb</definition>
        <argsstring>(mbedtls_aes_context *ctx, size_t length, size_t *iv_off, unsigned char iv[16], const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_aes_crypt_ofb</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>iv_off</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>iv</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an AES-OFB (Output Feedback Mode) encryption or decryption operation. </para>
        </briefdescription>
        <detaileddescription>
<para>For OFB, you must set up the context with <ref refid="aes_8h_1acec17c6592b98876106d035c372b1efa" kindref="member">mbedtls_aes_setkey_enc()</ref>, regardless of whether you are performing an encryption or decryption operation. This is because OFB mode uses the same key schedule for encryption and decryption.</para>
<para>The OFB operation is identical for encryption or decryption, therefore no operation mode needs to be specified.</para>
<para><simplesect kind="note"><para>Upon exit, the content of iv, the Initialisation Vector, is updated so that you can call the same function again on the next block(s) of data and get the same result as if it was encrypted in one call. This allows a &quot;streaming&quot; usage, by initialising iv_off to 0 before the first call, and preserving its value between calls.</para>
</simplesect>
For non-streaming use, the iv should be initialised on each call to a unique value, and iv_off set to 0 on each call.</para>
<para>If you need to retain the contents of the initialisation vector, you must either save it manually or use the cipher module instead.</para>
<para><simplesect kind="warning"><para>For the OFB mode, the initialisation vector must be unique every encryption operation. Reuse of an initialisation vector will compromise security.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for encryption or decryption. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv_off</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in IV (updated after use). It must point to a valid <computeroutput>size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>The initialization vector (updated after use). It must be a readable and writeable buffer of <computeroutput>16</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. It must be readable and of size <computeroutput>length</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data. It must be writeable and of size <computeroutput>length</computeroutput> Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="487" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="487" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a375c98cba4c5806d3a39c7d1e1e226da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_crypt_ctr</definition>
        <argsstring>(mbedtls_aes_context *ctx, size_t length, size_t *nc_off, unsigned char nonce_counter[16], unsigned char stream_block[16], const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_aes_crypt_ctr</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nc_off</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>nonce_counter</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>stream_block</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function performs an AES-CTR encryption or decryption operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Due to the nature of CTR, you must use the same key schedule for both encryption and decryption operations. Therefore, you must use the context initialized with <ref refid="aes_8h_1acec17c6592b98876106d035c372b1efa" kindref="member">mbedtls_aes_setkey_enc()</ref> for both <ref refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" kindref="member">MBEDTLS_AES_ENCRYPT</ref> and <ref refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" kindref="member">MBEDTLS_AES_DECRYPT</ref>.</para>
<para><simplesect kind="warning"><para>You must never reuse a nonce value with the same key. Doing so would void the encryption for the two messages encrypted with the same nonce and key.</para>
</simplesect>
There are two common strategies for managing nonces with CTR:</para>
<para><orderedlist>
<listitem><para>You can handle everything as a single message processed over successive calls to this function. In that case, you want to set <computeroutput>nonce_counter</computeroutput> and <computeroutput>nc_off</computeroutput> to 0 for the first call, and then preserve the values of <computeroutput>nonce_counter</computeroutput>, <computeroutput>nc_off</computeroutput> and <computeroutput>stream_block</computeroutput> across calls to this function as they will be updated by this function.</para>
</listitem></orderedlist>
</para>
<para>With this strategy, you must not encrypt more than 2**128 blocks of data with the same key.</para>
<para><orderedlist>
<listitem><para>You can encrypt separate messages by dividing the <computeroutput>nonce_counter</computeroutput> buffer in two areas: the first one used for a per-message nonce, handled by yourself, and the second one updated by this function internally.</para>
</listitem></orderedlist>
</para>
<para>For example, you might reserve the first 12 bytes for the per-message nonce, and the last 4 bytes for internal use. In that case, before calling this function on a new message you need to set the first 12 bytes of <computeroutput>nonce_counter</computeroutput> to your chosen nonce value, the last 4 to 0, and <computeroutput>nc_off</computeroutput> to 0 (which will cause <computeroutput>stream_block</computeroutput> to be ignored). That way, you can encrypt at most 2**96 messages of up to 2**32 blocks each with the same key.</para>
<para>The per-message nonce (or information sufficient to reconstruct it) needs to be communicated with the ciphertext and must be unique. The recommended way to ensure uniqueness is to use a message counter. An alternative is to generate random nonces, but this limits the number of messages that can be securely encrypted: for example, with 96-bit random nonces, you should not encrypt more than 2**32 messages with the same key.</para>
<para>Note that for both strategies, sizes are measured in blocks and that an AES block is 16 bytes.</para>
<para><simplesect kind="warning"><para>Upon return, <computeroutput>stream_block</computeroutput> contains sensitive data. Its content must not be written to insecure storage and should be securely discarded as soon as it&apos;s no longer needed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for encryption or decryption. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nc_off</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in the current <computeroutput>stream_block</computeroutput>, for resuming within the current cipher stream. The offset pointer should be 0 at the start of a stream. It must point to a valid <computeroutput>size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce_counter</parametername>
</parameternamelist>
<parameterdescription>
<para>The 128-bit nonce and counter. It must be a readable-writeable buffer of <computeroutput>16</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_block</parametername>
</parameternamelist>
<parameterdescription>
<para>The saved stream block for resuming. This is overwritten by the function. It must be a readable-writeable buffer of <computeroutput>16</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. It must be readable and of size <computeroutput>length</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data. It must be writeable and of size <computeroutput>length</computeroutput> Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="570" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="570" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a78da421a44bb3e01a3e2d2e98f989a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_internal_aes_encrypt</definition>
        <argsstring>(mbedtls_aes_context *ctx, const unsigned char input[16], unsigned char output[16])</argsstring>
        <name>mbedtls_internal_aes_encrypt</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>input</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>output</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
<para>Internal AES block encryption function. This is only exposed to allow overriding it using <computeroutput>MBEDTLS_AES_ENCRYPT_ALT</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for encryption. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The plaintext block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output (ciphertext) block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="591" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="591" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1ae3e7a68be582d306ab5d96fb4fc043a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_internal_aes_decrypt</definition>
        <argsstring>(mbedtls_aes_context *ctx, const unsigned char input[16], unsigned char output[16])</argsstring>
        <name>mbedtls_internal_aes_decrypt</name>
        <param>
          <type><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>input</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>output</declname>
          <array>[16]</array>
        </param>
        <briefdescription>
<para>Internal AES block decryption function. This is only exposed to allow overriding it using see <computeroutput>MBEDTLS_AES_DECRYPT_ALT</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES context to use for decryption. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The ciphertext block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output (plaintext) block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="607" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="607" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="aes_8h_1a17845a4d1272959f0bb9370e86bfd398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_aes_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_aes_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>Checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" line="619" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h" declline="619" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains AES definitions and functions. </para>
    </briefdescription>
    <detaileddescription>
<para><verbatim>     The Advanced Encryption Standard (AES) specifies a FIPS-approved
     cryptographic algorithm that can be used to protect electronic
     data.

     The AES algorithm is a symmetric block cipher that can
     encrypt and decrypt information. For more information, see
     &lt;em&gt;FIPS Publication 197: Advanced Encryption Standard&lt;/em&gt; and
     &lt;em&gt;ISO/IEC 18033-2:2006: Information technology -- Security
     techniques -- Encryption algorithms -- Part 2: Asymmetric
     ciphers&lt;/em&gt;.

     The AES-XTS block mode is standardized by NIST SP 800-38E
     &lt;https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38e.pdf&gt;
     and described in detail by IEEE P1619
     &lt;https://ieeexplore.ieee.org/servlet/opac?punumber=4375278&gt;.
</verbatim> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="23"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_AES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_AES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="platform__util_8h" kindref="compound">mbedtls/platform_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>padlock.c<sp/>and<sp/>aesni.c<sp/>rely<sp/>on<sp/>these<sp/>values!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="aes_8h_1ace4e123be5bb40b2adfdc4cb4f4750c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_AES_ENCRYPT<sp/><sp/><sp/><sp/><sp/>1<sp/></highlight></codeline>
<codeline lineno="40" refid="aes_8h_1ac21fbdd76fa7c6f3f87dc5eb7b5b30f8" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_AES_DECRYPT<sp/><sp/><sp/><sp/><sp/>0<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>in<sp/>range<sp/>0x0020-0x0022<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="aes_8h_1a4506452f9cd9a317327b2b1ce9b1bf59" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_AES_INVALID_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="aes_8h_1ac46465e53bd0fc9dcd79cb90965e3571" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0022</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes<sp/>in<sp/>range<sp/>0x0021-0x0025<sp/>*/</highlight></codeline>
<codeline lineno="50" refid="aes_8h_1a8e1cd6267673f777b38a27e64a6ae4e4" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_AES_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0021</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_AES_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regular<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structmbedtls__aes__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>{</highlight></codeline>
<codeline lineno="64" refid="structmbedtls__aes__context_1addb441a9a912804eb1b341fb52f4e6be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(nr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="structmbedtls__aes__context_1a25a996cc971d7ce9c49f013c43f0dcd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(rk_offset);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH)<sp/>&amp;&amp;<sp/>!defined(MBEDTLS_PADLOCK_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(buf)[44];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structmbedtls__aes__context_1a56118326bc1f8e8c9e095e777707cac7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(buf)[68];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH<sp/>&amp;&amp;<sp/>!MBEDTLS_PADLOCK_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="aes_8h_1ace3c1f8a8995d5fba5aab3b52f27b51d" kindref="member">mbedtls_aes_context</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_XTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structmbedtls__aes__xts__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref><sp/>{</highlight></codeline>
<codeline lineno="88" refid="structmbedtls__aes__xts__context_1a5a1dbd8fbcd87f1a8f6d7d97131a4f69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(crypt);<sp/></highlight></codeline>
<codeline lineno="90" refid="structmbedtls__aes__xts__context_1ae832780a5c623be614af941408d400c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(tweak);<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/><ref refid="aes_8h_1a8aaca7b5338ffffb97151a5f55ba5c24" kindref="member">mbedtls_aes_xts_context</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_XTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_AES_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;aes_alt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_AES_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1aa72dac8d698ab861843ef74ce8ebf62c" kindref="member">mbedtls_aes_init</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1ad1424ff458ff2ed765d37b620aae4882" kindref="member">mbedtls_aes_free</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_XTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a20fc951f82936910a5e2c490bacd904c" kindref="member">mbedtls_aes_xts_init</ref>(<ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a92289da7b35e0c05ba1f7364c76b8319" kindref="member">mbedtls_aes_xts_free</ref>(<ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_XTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1acec17c6592b98876106d035c372b1efa" kindref="member">mbedtls_aes_setkey_enc</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keybits);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a11580b789634605dd57e425eadb56617" kindref="member">mbedtls_aes_setkey_dec</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keybits);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_XTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1af5ff567cf65bc2c0c96b1c339df2907c" kindref="member">mbedtls_aes_xts_setkey_enc</ref>(<ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keybits);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a44eb8685d73204b79950d5d01f71de95" kindref="member">mbedtls_aes_xts_setkey_dec</ref>(<ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keybits);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_XTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a0e59fdda18a145e702984268b9ab291a" kindref="member">mbedtls_aes_crypt_ecb</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>input[16],</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output[16]);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_CBC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a321834eafbf0dacb36dac343bfd6b35d" kindref="member">mbedtls_aes_crypt_cbc</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[16],</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_CBC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_XTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a4a4ddd06aa9b096b7015d2fd22c811d3" kindref="member">mbedtls_aes_crypt_xts</ref>(<ref refid="structmbedtls__aes__xts__context" kindref="compound">mbedtls_aes_xts_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data_unit[16],</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_XTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_CFB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a944946adabbc344f2c6cf6e6f51a21e3" kindref="member">mbedtls_aes_crypt_cfb128</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*iv_off,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[16],</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a9abf42a70f835ca9d9f62350d497e465" kindref="member">mbedtls_aes_crypt_cfb8</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[16],</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*MBEDTLS_CIPHER_MODE_CFB<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_OFB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a28fe6cc0d0ebc18745a10d7b5dfd5c9b" kindref="member">mbedtls_aes_crypt_ofb</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*iv_off,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[16],</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_OFB<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_CTR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a375c98cba4c5806d3a39c7d1e1e226da" kindref="member">mbedtls_aes_crypt_ctr</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*nc_off,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nonce_counter[16],</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stream_block[16],</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_CTR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a78da421a44bb3e01a3e2d2e98f989a28" kindref="member">mbedtls_internal_aes_encrypt</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>input[16],</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output[16]);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><ref refid="platform__util_8h_1aae1ed92e13d4d4ef6a92b2d8a34b274b" kindref="member">MBEDTLS_CHECK_RETURN_TYPICAL</ref></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1ae3e7a68be582d306ab5d96fb4fc043a6" kindref="member">mbedtls_internal_aes_decrypt</ref>(<ref refid="structmbedtls__aes__context" kindref="compound">mbedtls_aes_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>input[16],</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output[16]);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SELF_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><ref refid="platform__util_8h_1adc48af1b5ae70c17794e6fea504c9292" kindref="member">MBEDTLS_CHECK_RETURN_CRITICAL</ref></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="aes_8h_1a17845a4d1272959f0bb9370e86bfd398" kindref="member">mbedtls_aes_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SELF_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>aes.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/aes.h"/>
  </compounddef>
</doxygen>
