<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__key__management" kind="group">
    <compoundname>key_management</compoundname>
    <title>Key management</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__key__management_1ga4a68fb898e28685e608c734ea54281b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_purge_key</definition>
        <argsstring>(mbedtls_svc_key_id_t key)</argsstring>
        <name>psa_purge_key</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove non-essential copies of key material from memory.</para>
<para>If the key identifier designates a volatile key, this functions does not do anything and returns successfully.</para>
<para>If the key identifier designates a persistent key, then this function will free all resources associated with the key in volatile memory. The key data in persistent storage is not affected and the key can still be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to purge.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key material will have been removed from memory if it is not currently required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>key</computeroutput> is not a valid key identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="420" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="420" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__management_1gaac27a547ca634d439e89b17aacc99943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_copy_key</definition>
        <argsstring>(mbedtls_svc_key_id_t source_key, const psa_key_attributes_t *attributes, mbedtls_svc_key_id_t *target_key)</argsstring>
        <name>psa_copy_key</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>source_key</declname>
        </param>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref> *</type>
          <declname>target_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a copy of a key.</para>
<para>Copy key material from one location to another.</para>
<para>This function is primarily useful to copy a key from one location to another, since it populates a key using the material from another key which may have a different lifetime.</para>
<para>This function may be used to share a key with a different party, subject to implementation-defined restrictions on key sharing.</para>
<para>The policy on the source key must have the usage flag <ref refid="group__policy_1ga4605d686020a6cb433c5d78bf7e91689" kindref="member">PSA_KEY_USAGE_COPY</ref> set. This flag is sufficient to permit the copy if the key has the lifetime <ref refid="group__key__lifetimes_1ga8b438870ba69489b685730d346455108" kindref="member">PSA_KEY_LIFETIME_VOLATILE</ref> or <ref refid="group__key__lifetimes_1ga3713a01c5fcd5f7eae46ff22ceaf6d02" kindref="member">PSA_KEY_LIFETIME_PERSISTENT</ref>. Some secure elements do not provide a way to copy a key without making it extractable from the secure element. If a key is located in such a secure element, then the key must have both usage flags <ref refid="group__policy_1ga4605d686020a6cb433c5d78bf7e91689" kindref="member">PSA_KEY_USAGE_COPY</ref> and <ref refid="group__policy_1ga7dddccdd1303176e87a4d20c87b589ed" kindref="member">PSA_KEY_USAGE_EXPORT</ref> in order to make a copy of the key outside the secure element.</para>
<para>The resulting key may only be used in a way that conforms to both the policy of the original key and the policy specified in the <computeroutput>attributes</computeroutput> parameter:<itemizedlist>
<listitem><para>The usage flags on the resulting key are the bitwise-and of the usage flags on the source policy and the usage flags in <computeroutput>attributes</computeroutput>.</para>
</listitem><listitem><para>If both allow the same algorithm or wildcard-based algorithm policy, the resulting key has the same algorithm policy.</para>
</listitem><listitem><para>If either of the policies allows an algorithm and the other policy allows a wildcard-based algorithm policy that includes this algorithm, the resulting key allows the same algorithm.</para>
</listitem><listitem><para>If the policies do not allow any algorithm in common, this function fails with the status <ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref>.</para>
</listitem></itemizedlist>
</para>
<para>The effect of this function on implementation-defined attributes is implementation-defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to copy. It must allow the usage <ref refid="group__policy_1ga4605d686020a6cb433c5d78bf7e91689" kindref="member">PSA_KEY_USAGE_COPY</ref>. If a private or secret key is being copied outside of a secure element it must also allow <ref refid="group__policy_1ga7dddccdd1303176e87a4d20c87b589ed" kindref="member">PSA_KEY_USAGE_EXPORT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attributes for the new key. They are used as follows:<itemizedlist>
<listitem><para>The key type and size may be 0. If either is nonzero, it must match the corresponding attribute of the source key.</para>
</listitem><listitem><para>The key location (the lifetime and, for persistent keys, the key identifier) is used directly.</para>
</listitem><listitem><para>The policy constraints (usage flags and algorithm policy) are combined from the source key and <computeroutput>attributes</computeroutput> so that both sets of restrictions apply, as described in the documentation of this function. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">target_key</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, an identifier for the newly created key. For persistent keys, this is the key identifier defined in <computeroutput>attributes</computeroutput>. <computeroutput>0</computeroutput> on failure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>source_key</computeroutput> is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gaf2b34cc87edc72f3ba90071a08210d20" kindref="member">PSA_ERROR_ALREADY_EXISTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is an attempt to create a persistent key, and there is already a persistent key with the given identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The lifetime or identifier in <computeroutput>attributes</computeroutput> are invalid, or the policy constraints on the source and specified in <computeroutput>attributes</computeroutput> are incompatible, or <computeroutput>attributes</computeroutput> specifies a key type or key size which does not match the attributes of the source key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The source key does not have the <ref refid="group__policy_1ga4605d686020a6cb433c5d78bf7e91689" kindref="member">PSA_KEY_USAGE_COPY</ref> usage flag, or the source key is not exportable and its lifetime does not allow copying it to the target&apos;s lifetime. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga897a45eb206a6f6b7be7ffbe36f0d766" kindref="member">PSA_ERROR_INSUFFICIENT_STORAGE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="510" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="510" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__key__management_1ga5f52644312291335682fbc0292c43cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_destroy_key</definition>
        <argsstring>(mbedtls_svc_key_id_t key)</argsstring>
        <name>psa_destroy_key</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Destroy a key. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys a key from both volatile memory and, if applicable, non-volatile storage. Implementations shall make a best effort to ensure that the key material cannot be recovered.</para>
<para>This function also erases any metadata such as policies and frees resources associated with the key.</para>
<para>If a key is currently in use in a multipart operation, then destroying the key will cause the multipart operation to fail.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to erase. If this is <computeroutput>0</computeroutput>, do nothing and return <ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>key</computeroutput> was a valid identifier and the key material that it referred to has been erased. Alternatively, <computeroutput>key</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key cannot be erased because it is read-only, either due to a policy or due to physical restrictions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>key</computeroutput> is not a valid identifier nor <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was a failure in communication with the cryptoprocessor. The key material may still be present in the cryptoprocessor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This error is typically a result of either storage corruption on a cleartext storage backend, or an attempt to read data that was written by an incompatible version of the library. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The storage is corrupted. Implementations shall make a best effort to erase key material even in this stage, however applications should be aware that it may be impossible to guarantee that the key material is not recoverable in such cases. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>An unexpected condition which is not a storage corruption or a communication failure occurred. The cryptoprocessor may have been compromised. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="560" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="560" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
