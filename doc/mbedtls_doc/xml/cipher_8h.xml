<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="cipher_8h" kind="file" language="C++">
    <compoundname>cipher.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="platform__util_8h" local="yes">mbedtls/platform_util.h</includes>
    <includedby refid="ccm_8h" local="yes">ccm.h</includedby>
    <includedby refid="cmac_8h" local="yes">cmac.h</includedby>
    <includedby refid="crypto__builtin__primitives_8h" local="yes">crypto_builtin_primitives.h</includedby>
    <includedby refid="gcm_8h" local="yes">gcm.h</includedby>
    <includedby refid="ssl__ciphersuites_8h" local="yes">ssl_ciphersuites.h</includedby>
    <includedby refid="nist__kw_8h" local="yes">nist_kw.h</includedby>
    <includedby refid="oid_8h" local="yes">oid.h</includedby>
    <includedby refid="pkcs12_8h" local="yes">pkcs12.h</includedby>
    <includedby refid="ssl__ticket_8h" local="yes">ssl_ticket.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="22">
        <label>mbedtls/platform_time.h</label>
        <link refid="platform__time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="21">
        <label>mbedtls/platform_util.h</label>
        <link refid="platform__util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="23">
        <label>time.h</label>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="1">
        <label>cipher.h</label>
        <link refid="cipher_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="24">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="19">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="13">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="6">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>nist_kw.h</label>
        <link refid="nist__kw_8h"/>
      </node>
      <node id="15">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>gcm.h</label>
        <link refid="gcm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="5">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>crypto_builtin_primitives.h</label>
        <link refid="crypto__builtin__primitives_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="2">
        <label>ccm.h</label>
        <link refid="ccm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="20">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="11">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="23">
        <label>crypto_driver_contexts_primitives.h</label>
        <link refid="crypto__driver__contexts__primitives_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>cmac.h</label>
        <link refid="cmac_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>cipher.h</label>
        <link refid="cipher_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>pkcs12.h</label>
        <link refid="pkcs12_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__cipher__info__t" prot="public">mbedtls_cipher_info_t</innerclass>
    <innerclass refid="structmbedtls__cipher__context__t" prot="public">mbedtls_cipher_context_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cipher_8h_1aedd176bb71b4e03034f0d629a1c8be40" prot="public" static="no">
        <name>MBEDTLS_CIPHER_MODE_AEAD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="25" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a8858b88a22fbd142804f2ab411f8c24c" prot="public" static="no">
        <name>MBEDTLS_CIPHER_MODE_WITH_PADDING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="29" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1adcd10ede34f16d1c597dd76ef6abf9de" prot="public" static="no">
        <name>MBEDTLS_CIPHER_MODE_STREAM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="34" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a5093ef5a2ca66691e189c4224098355e" prot="public" static="no">
        <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name>
        <initializer>-0x6080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The selected feature is not available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="38" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" prot="public" static="no">
        <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name>
        <initializer>-0x6100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad input parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="40" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1abd30fe33f8b6cf8106e7ea29d3f795cd" prot="public" static="no">
        <name>MBEDTLS_ERR_CIPHER_ALLOC_FAILED</name>
        <initializer>-0x6180</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Failed to allocate memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="42" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a06295349279dcbda6b1317924d5bb810" prot="public" static="no">
        <name>MBEDTLS_ERR_CIPHER_INVALID_PADDING</name>
        <initializer>-0x6200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input data contains invalid padding and is rejected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="44" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1ac7da041aba839f2ba606eb30f7547b8b" prot="public" static="no">
        <name>MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</name>
        <initializer>-0x6280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decryption of block requires a full block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="46" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a67ec20c7b124cb258978a41d5c363def" prot="public" static="no">
        <name>MBEDTLS_ERR_CIPHER_AUTH_FAILED</name>
        <initializer>-0x6300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Authentication failed (for AEAD modes). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="48" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1aee9e36063fbb6890aeb9918db7fa020e" prot="public" static="no">
        <name>MBEDTLS_ERR_CIPHER_INVALID_CONTEXT</name>
        <initializer>-0x6380</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The context is invalid. For example, because it was freed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="50" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a2a6dc5188d4a1e9bc43d9ea7c8505c6c" prot="public" static="no">
        <name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cipher accepts IVs of variable length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="52" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a882893bcfc917982037621f6e97968a6" prot="public" static="no">
        <name>MBEDTLS_CIPHER_VARIABLE_KEY_LEN</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cipher accepts keys of variable length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="53" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1aec294721b811aa0f7dcc940029fd8aab" prot="public" static="no">
        <name>MBEDTLS_MAX_IV_LENGTH</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum length of any IV, in Bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="220" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1ab8f30dc90403204515f868c3b6196ffd" prot="public" static="no">
        <name>MBEDTLS_MAX_BLOCK_LENGTH</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum block size of any cipher, in Bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="226" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a4d3073409b2b03d58c16c930049a6c8c" prot="public" static="no">
        <name>MBEDTLS_MAX_KEY_LENGTH</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum key length, in Bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="236" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a0eb50dbc1df3105a1e4e9dcba9586fc5" prot="public" static="no">
        <name>MBEDTLS_KEY_BITLEN_SHIFT</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="311" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cipher_8h_1a068a06a17500ba4e632ff2062d397c89" prot="public" static="no">
        <name>MBEDTLS_IV_SIZE_SHIFT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="312" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1b" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_cipher_id_t</name>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba9e83a435f3ae051a51b3755d57fb7324" prot="public">
          <name>MBEDTLS_CIPHER_ID_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Placeholder to mark the end of cipher ID lists. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba3b9447c8b50e7e1b8a5d526360388a14" prot="public">
          <name>MBEDTLS_CIPHER_ID_NULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The identity cipher, treated as a stream cipher. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba5a1de07b89c2fa03e102493c92a6d074" prot="public">
          <name>MBEDTLS_CIPHER_ID_AES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The AES cipher. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba34bf0303a00b450f0262e97323b67fd7" prot="public">
          <name>MBEDTLS_CIPHER_ID_DES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The DES cipher. <simplesect kind="warning"><para>DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba02827f5eb7b2600fba6ec40873b31a1b" prot="public">
          <name>MBEDTLS_CIPHER_ID_3DES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Triple DES cipher. <simplesect kind="warning"><para>3DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba1b9895858b351464e65bb47c5b11a011" prot="public">
          <name>MBEDTLS_CIPHER_ID_CAMELLIA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Camellia cipher. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba6ad5912654007636c4d8a6bc186eb961" prot="public">
          <name>MBEDTLS_CIPHER_ID_ARIA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Aria cipher. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1bab8ab323f28b16744bfeba7671f95f542" prot="public">
          <name>MBEDTLS_CIPHER_ID_CHACHA20</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The ChaCha20 cipher. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Supported cipher types. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>DES/3DES are considered weak ciphers and their use constitutes a security risk. We recommend considering stronger ciphers instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="66" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="enum" id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_cipher_type_t</name>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" prot="public">
          <name>MBEDTLS_CIPHER_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Placeholder to mark the end of cipher-pair lists. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daab45ae42bc7ab1617877167471496710" prot="public">
          <name>MBEDTLS_CIPHER_NULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The identity stream cipher. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da02173aedfb459d27316f8fcbd8452e13" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dac6e30c2e56a54e78a8b46e4d87839422" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da3c1d1256bc0e6ed7b5f5cf4dff038432" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da19501fb55aec2f10338baab059cc8ca8" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9c17540658505285896a55ef27bad52b" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab89e8f49d884804188cc9837066f4017" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da57257cfaf7fe39e49c3a35145223de43" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit CFB128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da665a71ade48243f64f191a5d2320bef8" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit CFB128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da93d9e55a10f94176800ac1155a89e2b4" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit CFB128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5f1f64e7a813ebe35de67d10f04c7c12" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa6da8177c2e59f582cf53c0ab91b0d23" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da41d9d9a010b9009bff05b3cfc3452655" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90a73f2b2d039360cda2c4655dbedd22" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1d6fd8cd15664a20d1c8426802b8c54b" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da73308f133a09589299d2f4d7e94ae538" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9b5b21833004061678fc7e7eb28d3821" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_128_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 128-bit ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90b5be24e59a7dfdfbf9a125cce0f083" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_192_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 192-bit ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8a1d31bd95a7d518611e393775d47df7" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_256_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 256-bit ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7be9d1d8f2ca3bbd6e5c8fa9afc1c58e" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 128-bit CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da26365f403c2b046ce35774e3cbaf72aa" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_192_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 192-bit CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae5706408ed6a0cdce83240ecb0d093b1" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 256-bit CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da77f1b0e09890fb93e93f4968980d5ba8" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_128_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 128-bit CFB128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5a02c88a1d48fa0d901e9aa22f477be5" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_192_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 192-bit CFB128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7d99ecf5a8719950a8be99fb9927e3b2" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_256_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 256-bit CFB128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab28c28e9f5c0ccf4f5aabdd457131e6f" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_128_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 128-bit CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabaa17a8b74d8334500e86bf8ec5d47d4" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_192_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 192-bit CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dadb9f15b9c71b37a83c68092390133f03" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_256_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 256-bit CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0653c936c1f48311640b3f796d3096d8" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 128-bit GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da31bcc4ad8b983507288b98379a855584" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_192_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 192-bit GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2005aa6b74cb2574de6f4b104b1a6278" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 256-bit GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ed7c295258192976c4f11be930b6383" prot="public">
          <name>MBEDTLS_CIPHER_DES_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DES cipher with ECB mode. <simplesect kind="warning"><para>DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da75ebf8afe088218555df2211b06ed24a" prot="public">
          <name>MBEDTLS_CIPHER_DES_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DES cipher with CBC mode. <simplesect kind="warning"><para>DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da22c639d17383ce7a7897e6364a51dbeb" prot="public">
          <name>MBEDTLS_CIPHER_DES_EDE_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DES cipher with EDE ECB mode. <simplesect kind="warning"><para>3DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa85f7610f000ed8680164bb650278aa3" prot="public">
          <name>MBEDTLS_CIPHER_DES_EDE_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DES cipher with EDE CBC mode. <simplesect kind="warning"><para>3DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad749b54fa7af5af9754f600a1cf6e8f0" prot="public">
          <name>MBEDTLS_CIPHER_DES_EDE3_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DES cipher with EDE3 ECB mode. <simplesect kind="warning"><para>3DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ebeb46e514f7d7c9791daf9f31bdbc2" prot="public">
          <name>MBEDTLS_CIPHER_DES_EDE3_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DES cipher with EDE3 CBC mode. <simplesect kind="warning"><para>3DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa853efb100255649d70037a69a6cc5f1" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da4dafc03176b3e587f5e50867ac1be0f6" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7d1a7208c43a711c1665241402b8390d" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0fb9e2fbf58e58c2907ec21992128727" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da23845346c1b2850370e1ff266d01d862" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da353b3a62f182bb4a16b5d76c274fea94" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5ad79b02517bb3b319280330456d049f" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_128_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 128-bit CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9c6e4c22ec84211b82860074889d5804" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_192_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 192-bit CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da72a8f49efb32a40d6fef16aef04622c0" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_256_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 256-bit CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da083aa5353bf556628066fb41412e7e38" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 128-bit CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8377f673c4c8d5a3f2948402b9ef54d4" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 192-bit CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7e225e0d9616fbc50d5b577e80a27897" prot="public">
          <name>MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Camellia cipher with 256-bit CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae2d8fbe5b2f925026394eb2442d06e0a" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_128_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 128-bit key and ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1f27a6352c76f187358abc3a18e436ba" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_192_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 192-bit key and ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da6aa30fa4d7e7de0a5059a443aad73fc6" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_256_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 256-bit key and ECB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dada65b844b7ea59faaa7644d553248415" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_128_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 128-bit key and CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2634d20175e2917df6cbcb8de3cdc28d" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_192_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 192-bit key and CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daad1b3625ffe480a2dc94fcfb6a290aec" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_256_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 256-bit key and CBC mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae9806ae70dcb09f6afa7c6bc52f80b14" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_128_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 128-bit key and CFB-128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab25a39b43b0b7add45755ae22a6f6048" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_192_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 192-bit key and CFB-128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da258b5fe481a6a835a0ef8e8b008dd367" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_256_CFB128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 256-bit key and CFB-128 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da26ae457e3efac119b4581bc5ca0de356" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_128_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 128-bit key and CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da83f7787f279e516368ffbbda470ae28f" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_192_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 192-bit key and CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da03a80089e4e161c73603a0ca014984ce" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_256_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 256-bit key and CTR mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ef36b3bcbcc3b36912abf20e76062bc" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_128_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 128-bit key and GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5f912593bf28e5a927e6add0046d9565" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_192_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 192-bit key and GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad02f884e9a975998c7814c5be44c7fd0" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_256_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 256-bit key and GCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9fd94fd13e496f79bfa91b280b03c938" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_128_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 128-bit key and CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2b46bc0a3cbb8d98f02b3cded3ab1158" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_192_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 192-bit key and CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae7fc34b23953f0cd7194c670bf43abf5" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_256_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 256-bit key and CCM mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad9860e7649df40338f5e087515f38add" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 128-bit key and CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da86d07d19b0d8665125aaee436a45ac50" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 192-bit key and CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90bde734683da3c78a6ee11126018ff4" prot="public">
          <name>MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Aria cipher with 256-bit key and CCM_STAR_NO_TAG mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1eb7c55e4846ae5937d3f5ebd85e004b" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_OFB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES 128-bit cipher in OFB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da33edb9fef69ac33f04f352b03c53a78b" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_OFB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES 192-bit cipher in OFB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab1c25b9f6826b20dafd8e9f29d9d8065" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_OFB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES 256-bit cipher in OFB mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da076f2417fc301ca1e3b10e214338e328" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_XTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES 128-bit cipher in XTS block mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da613a27a7798bd20ea88a18777123168a" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_XTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES 256-bit cipher in XTS block mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0b57e4a365c0747498503d89f24a61c9" prot="public">
          <name>MBEDTLS_CIPHER_CHACHA20</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ChaCha20 stream cipher. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9b1c7fd85839f54e5e1c8dd9f9979afd" prot="public">
          <name>MBEDTLS_CIPHER_CHACHA20_POLY1305</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ChaCha20-Poly1305 AEAD cipher. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabd023bdb9762c0a5f8e5ac56040e6709" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_KW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit NIST KW mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabe180613a1dab91bc7b5bb9b5b6f93f7" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_KW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit NIST KW mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8f06c5e8f24cab71c4b8b1f339c84f24" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_KW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit NIST KW mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad46518a985b10b1fb8f81e3cf4339ce5" prot="public">
          <name>MBEDTLS_CIPHER_AES_128_KWP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 128-bit NIST KWP mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabfd634c2a27977b347335a9dd0465fef" prot="public">
          <name>MBEDTLS_CIPHER_AES_192_KWP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 192-bit NIST KWP mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab4a8046bb4fe7bb74c6f1c7b5dda6376" prot="public">
          <name>MBEDTLS_CIPHER_AES_256_KWP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AES cipher with 256-bit NIST KWP mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Supported {cipher type, cipher mode} pairs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>DES/3DES are considered weak ciphers and their use constitutes a security risk. We recommend considering stronger ciphers instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="84" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="84" bodyend="169"/>
      </memberdef>
      <memberdef kind="enum" id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_cipher_mode_t</name>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" prot="public">
          <name>MBEDTLS_MODE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>None. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a002ae72c0dbf793b5858971b7ce315b1" prot="public">
          <name>MBEDTLS_MODE_ECB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The ECB cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8ac89f6880c66f742e913bf4f7618a797b" prot="public">
          <name>MBEDTLS_MODE_CBC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CBC cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a533e18634ddf1d7808c02531d2d0a891" prot="public">
          <name>MBEDTLS_MODE_CFB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CFB cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8acb22e5e78f1673f4273d0e179994f863" prot="public">
          <name>MBEDTLS_MODE_OFB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The OFB cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a95ecb03d135fd973e6da0b7e57db804e" prot="public">
          <name>MBEDTLS_MODE_CTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CTR cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a9683c4bedc462171adaf652b875abf09" prot="public">
          <name>MBEDTLS_MODE_GCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The GCM cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a2c808617b79a98d48ee7e62d97c425ef" prot="public">
          <name>MBEDTLS_MODE_STREAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The stream cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a0a5ca88e2e3530c0aef4861dfb6eda2b" prot="public">
          <name>MBEDTLS_MODE_CCM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CCM cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a9afc16c35af10e7723a927c5b5b0eee5" prot="public">
          <name>MBEDTLS_MODE_CCM_STAR_NO_TAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CCM*-no-tag cipher mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8af024caf12ad778af7f28a331a980a262" prot="public">
          <name>MBEDTLS_MODE_XTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The XTS cipher mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8ae50fd7ee5f1e325184ed564b8630c29d" prot="public">
          <name>MBEDTLS_MODE_CHACHAPOLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The ChaCha-Poly cipher mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8aa4898756e1f6f2d6abdf8fe578d20165" prot="public">
          <name>MBEDTLS_MODE_KW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SP800-38F KW mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8adca6eafd67ed625e8dbccccedd682003" prot="public">
          <name>MBEDTLS_MODE_KWP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SP800-38F KWP mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Supported cipher modes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="172" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="172" bodyend="187"/>
      </memberdef>
      <memberdef kind="enum" id="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_cipher_padding_t</name>
        <enumvalue id="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a787071478fb192f36d4a085e010b28f9" prot="public">
          <name>MBEDTLS_PADDING_PKCS7</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PKCS7 padding (default). <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a502732ab53a21eb0bf84e5a8e93609a7" prot="public">
          <name>MBEDTLS_PADDING_ONE_AND_ZEROS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ISO/IEC 7816-4 padding. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a93944bd7edfd0c6b6f362eb6eef1b4fc" prot="public">
          <name>MBEDTLS_PADDING_ZEROS_AND_LEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ANSI X.923 padding. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a339efb60a69e4b033a106c61cd8691e4" prot="public">
          <name>MBEDTLS_PADDING_ZEROS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Zero padding (not reversible). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837aace08abe82f9f79e57387133ceb07394" prot="public">
          <name>MBEDTLS_PADDING_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Never pad (full blocks only). <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Supported cipher padding types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="190" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="190" bodyend="196"/>
      </memberdef>
      <memberdef kind="enum" id="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_operation_t</name>
        <enumvalue id="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa3e5a23a347d62ec3075f547516b0e2b3" prot="public">
          <name>MBEDTLS_OPERATION_NONE</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa1209c6e6314e7dfa517602d53b6ea8b6" prot="public">
          <name>MBEDTLS_DECRYPT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fab6bd8754064eab0b5fe2426184542ba6" prot="public">
          <name>MBEDTLS_ENCRYPT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="199" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="enum" id="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba27a227b285707a038e87cee36a8d1a65" prot="public">
          <name>MBEDTLS_KEY_LENGTH_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Undefined key length. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba0786b4375829efe98db9d73c5b12eda1" prot="public">
          <name>MBEDTLS_KEY_LENGTH_DES</name>
          <initializer>= 64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Key length, in bits (including parity), for DES keys. <simplesect kind="warning"><para>DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55bade90f9d4c430f18b705faac59b2ed0b9" prot="public">
          <name>MBEDTLS_KEY_LENGTH_DES_EDE</name>
          <initializer>= 128</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Key length in bits, including parity, for DES in two-key EDE. <simplesect kind="warning"><para>3DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55bae5eb36c0a8ae45bec5b0070292be6c17" prot="public">
          <name>MBEDTLS_KEY_LENGTH_DES_EDE3</name>
          <initializer>= 192</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Key length in bits, including parity, for DES in three-key EDE. <simplesect kind="warning"><para>3DES is considered weak. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="205" column="6" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="205" bodyend="214"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cipher_8h_1aa8cada37dceeb13446c7c31459b31a07" prot="public" static="no">
        <type>struct <ref refid="cipher_8h_1aa8cada37dceeb13446c7c31459b31a07" kindref="member">mbedtls_cipher_base_t</ref></type>
        <definition>typedef struct mbedtls_cipher_base_t mbedtls_cipher_base_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_cipher_base_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Base cipher information (opaque struct). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cipher_8h_1aadfdebf0a70882e059172aa1c7235c45" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__cmac__context__t" kindref="compound">mbedtls_cmac_context_t</ref></type>
        <definition>typedef struct mbedtls_cmac_context_t mbedtls_cmac_context_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_cmac_context_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CMAC context (opaque struct). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cipher_8h_1a09664fe098df65ea21815d4998102746" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref></type>
        <definition>typedef struct mbedtls_cipher_info_t mbedtls_cipher_info_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_cipher_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cipher information. Allows calling cipher functions in a generic way.</para>
<para><simplesect kind="note"><para>The library does not support custom cipher info structures, only built-in structures returned by the functions <ref refid="cipher_8h_1a9b2e7d49ca82abe8c96b65645364e24b" kindref="member">mbedtls_cipher_info_from_string()</ref>, <ref refid="cipher_8h_1a8bc2809cbd7c2357f41be8cf76eeed92" kindref="member">mbedtls_cipher_info_from_type()</ref>, <ref refid="cipher_8h_1a9752d8056c43948c08d2e1f2009a53aa" kindref="member">mbedtls_cipher_info_from_values()</ref>, mbedtls_cipher_info_from_psa().</para>
</simplesect>
<simplesect kind="note"><para>Some fields store a value that has been right-shifted to save code-size, so should not be used directly. The accessor functions adjust for this and return the &quot;natural&quot; value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="307" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="cipher_8h_1a792b877de2cac8b10386b894408aa5f0" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref></type>
        <definition>typedef struct mbedtls_cipher_context_t mbedtls_cipher_context_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_cipher_context_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generic cipher context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="368" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cipher_8h_1a763ea39a9ccfc20f914fd3391d12a7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int *</type>
        <definition>const int* mbedtls_cipher_list</definition>
        <argsstring>(void)</argsstring>
        <name>mbedtls_cipher_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function retrieves the list of ciphers supported by the generic cipher module. </para>
        </briefdescription>
        <detaileddescription>
<para>For any cipher identifier in the returned list, you can obtain the corresponding generic cipher information structure via <ref refid="cipher_8h_1a8bc2809cbd7c2357f41be8cf76eeed92" kindref="member">mbedtls_cipher_info_from_type()</ref>, which can then be used to prepare a cipher context via <ref refid="cipher_8h_1a009056b59d69abba5843ce78cd9aae1c" kindref="member">mbedtls_cipher_setup()</ref>.</para>
<para><simplesect kind="return"><para>A statically-allocated array of cipher identifiers of type cipher_type_t. The last entry is zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="383" column="11" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="383" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a9b2e7d49ca82abe8c96b65645364e24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
        <definition>const mbedtls_cipher_info_t* mbedtls_cipher_info_from_string</definition>
        <argsstring>(const char *cipher_name)</argsstring>
        <name>mbedtls_cipher_info_from_string</name>
        <param>
          <type>const char *</type>
          <declname>cipher_name</declname>
        </param>
        <briefdescription>
<para>This function retrieves the cipher-information structure associated with the given cipher name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the cipher to search for. This must not be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cipher information structure associated with the given <computeroutput>cipher_name</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>NULL</computeroutput> if the associated cipher information is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="396" column="29" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="396" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a8bc2809cbd7c2357f41be8cf76eeed92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
        <definition>const mbedtls_cipher_info_t* mbedtls_cipher_info_from_type</definition>
        <argsstring>(const mbedtls_cipher_type_t cipher_type)</argsstring>
        <name>mbedtls_cipher_info_from_type</name>
        <param>
          <type>const <ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref></type>
          <declname>cipher_type</declname>
        </param>
        <briefdescription>
<para>This function retrieves the cipher-information structure associated with the given cipher type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the cipher to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cipher information structure associated with the given <computeroutput>cipher_type</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>NULL</computeroutput> if the associated cipher information is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="408" column="29" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="408" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a9752d8056c43948c08d2e1f2009a53aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
        <definition>const mbedtls_cipher_info_t* mbedtls_cipher_info_from_values</definition>
        <argsstring>(const mbedtls_cipher_id_t cipher_id, int key_bitlen, const mbedtls_cipher_mode_t mode)</argsstring>
        <name>mbedtls_cipher_info_from_values</name>
        <param>
          <type>const <ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1b" kindref="member">mbedtls_cipher_id_t</ref></type>
          <declname>cipher_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key_bitlen</declname>
        </param>
        <param>
          <type>const <ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>This function retrieves the cipher-information structure associated with the given cipher ID, key size and mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the cipher to search for. For example, <ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba5a1de07b89c2fa03e102493c92a6d074" kindref="member">MBEDTLS_CIPHER_ID_AES</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bitlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the key in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher mode. For example, <ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8ac89f6880c66f742e913bf4f7618a797b" kindref="member">MBEDTLS_MODE_CBC</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cipher information structure associated with the given <computeroutput>cipher_id</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>NULL</computeroutput> if the associated cipher information is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="424" column="29" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="424" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1ad530062e4fac7671a4be4adf4c5561ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref></type>
        <definition>static mbedtls_cipher_type_t mbedtls_cipher_info_get_type</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_get_type</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Retrieve the identifier for a cipher info structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure to query. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The full cipher identifier (<computeroutput>MBEDTLS_CIPHER_xxx</computeroutput>). </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" kindref="member">MBEDTLS_CIPHER_NONE</ref> if <computeroutput>info</computeroutput> is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="437" column="37" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="437" bodyend="445"/>
        <references refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" compoundref="cipher_8h" startline="85">MBEDTLS_CIPHER_NONE</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a23d4d0dc9413e4128e5ba6f2679dafe7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref></type>
        <definition>static mbedtls_cipher_mode_t mbedtls_cipher_info_get_mode</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_get_mode</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Retrieve the operation mode for a cipher info structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure to query. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cipher mode (<computeroutput>MBEDTLS_MODE_xxx</computeroutput>). </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" kindref="member">MBEDTLS_MODE_NONE</ref> if <computeroutput>info</computeroutput> is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="456" column="37" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="456" bodyend="464"/>
        <references refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" compoundref="cipher_8h" startline="173">MBEDTLS_MODE_NONE</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1afcebb7351c1d5e264e3ba015d5219c31" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mbedtls_cipher_info_get_key_bitlen</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_get_key_bitlen</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Retrieve the key size for a cipher info structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure to query. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key length in bits. For variable-sized ciphers, this is the default length. For DES, this includes the parity bits. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>info</computeroutput> is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="477" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="477" bodyend="485"/>
        <references refid="cipher_8h_1a0eb50dbc1df3105a1e4e9dcba9586fc5" compoundref="cipher_8h" startline="311">MBEDTLS_KEY_BITLEN_SHIFT</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a2715f88e97b944cc0a8f3c4852a94b7d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* mbedtls_cipher_info_get_name</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_get_name</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Retrieve the human-readable name for a cipher info structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure to query. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cipher name, which is a human readable string, with static storage duration. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>NULL</computeroutput> if <computeroutput>info</computeroutput> is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="498" column="26" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="498" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a06d26d03a46a8a04e1e1f5e96320d172" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mbedtls_cipher_info_get_iv_size</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_get_iv_size</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function returns the size of the IV or nonce for the cipher info structure, in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The recommended IV size. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> for ciphers not using an IV or a nonce. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>info</computeroutput> is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="518" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="518" bodyend="526"/>
        <references refid="cipher_8h_1a068a06a17500ba4e632ff2062d397c89" compoundref="cipher_8h" startline="312">MBEDTLS_IV_SIZE_SHIFT</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a2402304cf7c7759251ee8b6a372ea98f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mbedtls_cipher_info_get_block_size</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_get_block_size</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function returns the block size of the given cipher info structure in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The block size of the cipher. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if the cipher is a stream cipher. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>info</computeroutput> is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="538" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="538" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1ac79c9ffd1fea3084306e49ac4d2dd397" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_cipher_info_has_variable_key_bitlen</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_has_variable_key_bitlen</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function returns a non-zero value if the key length for the given cipher is variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the key length is variable, <computeroutput>0</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the given pointer is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="557" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="557" bodyend="565"/>
        <references refid="cipher_8h_1a882893bcfc917982037621f6e97968a6" compoundref="cipher_8h" startline="53">MBEDTLS_CIPHER_VARIABLE_KEY_LEN</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a4fdb45293241c6ec50c47e28fb7bef8e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_cipher_info_has_variable_iv_size</definition>
        <argsstring>(const mbedtls_cipher_info_t *info)</argsstring>
        <name>mbedtls_cipher_info_has_variable_iv_size</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function returns a non-zero value if the IV size for the given cipher is variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher info structure. This may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if the IV size is variable, <computeroutput>0</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the given pointer is <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="576" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="576" bodyend="584"/>
        <references refid="cipher_8h_1a2a6dc5188d4a1e9bc43d9ea7c8505c6c" compoundref="cipher_8h" startline="52">MBEDTLS_CIPHER_VARIABLE_IV_LEN</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a80354364e91cdb4d4e6ab7ecec65fe07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_cipher_init</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_init</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes a <computeroutput>ctx</computeroutput> as NONE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be initialized. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="591" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="591" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a903c4146b471207690988584b83854a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_cipher_free</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_free</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function frees and clears the cipher-specific context of <computeroutput>ctx</computeroutput>. Freeing <computeroutput>ctx</computeroutput> itself remains the responsibility of the caller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be freed. If this is <computeroutput>NULL</computeroutput>, the function has no effect, otherwise this must point to an initialized context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="602" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="602" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a009056b59d69abba5843ce78cd9aae1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_setup</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info)</argsstring>
        <name>mbedtls_cipher_setup</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>cipher_info</declname>
        </param>
        <briefdescription>
<para>This function prepares a cipher context for use with the given cipher primitive. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>After calling this function, you should call <ref refid="cipher_8h_1a027be8bf469069be17d82c4899b3df5f" kindref="member">mbedtls_cipher_setkey()</ref> and, if the mode uses padding, <ref refid="cipher_8h_1afad97d1964a7a98d82488fecd052130f" kindref="member">mbedtls_cipher_set_padding_mode()</ref>, then for each message to encrypt or decrypt with this key, either:<itemizedlist>
<listitem><para><ref refid="cipher_8h_1a1c249f6ee1a0d2c906927c7790c41dc5" kindref="member">mbedtls_cipher_crypt()</ref> for one-shot processing with non-AEAD modes;</para>
</listitem><listitem><para><ref refid="cipher_8h_1a64ea7a5500f054d1d60a22369d171eea" kindref="member">mbedtls_cipher_auth_encrypt_ext()</ref> or <ref refid="cipher_8h_1a2709f8b3e81f9b67c240a053c705aa86" kindref="member">mbedtls_cipher_auth_decrypt_ext()</ref> for one-shot processing with AEAD modes or NIST_KW;</para>
</listitem><listitem><para>for multi-part processing, see the documentation of <ref refid="cipher_8h_1a22b60318022c1947d9893721bc911335" kindref="member">mbedtls_cipher_reset()</ref>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to prepare. This must be initialized by a call to <ref refid="cipher_8h_1a80354364e91cdb4d4e6ab7ecec65fe07" kindref="member">mbedtls_cipher_init()</ref> first. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipher_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1abd30fe33f8b6cf8106e7ea29d3f795cd" kindref="member">MBEDTLS_ERR_CIPHER_ALLOC_FAILED</ref> if allocation of the cipher-specific context fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="631" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="631" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a867d5eb112b7cc2f7692ecacaf58f30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref></type>
        <definition>int MBEDTLS_DEPRECATED mbedtls_cipher_setup_psa</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info, size_t taglen)</argsstring>
        <name>mbedtls_cipher_setup_psa</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref> *</type>
          <declname>cipher_info</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>taglen</declname>
        </param>
        <briefdescription>
<para>This function initializes a cipher context for PSA-based use with the given cipher primitive. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and will be removed in a future version of the library. Please use psa_aead_xxx() / psa_cipher_xxx() directly instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>See <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> for information on PSA.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to initialize. May not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipher_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taglen</parametername>
</parameternamelist>
<parameterdescription>
<para>For AEAD ciphers, the length in bytes of the authentication tag to use. Subsequent uses of <ref refid="cipher_8h_1a64ea7a5500f054d1d60a22369d171eea" kindref="member">mbedtls_cipher_auth_encrypt_ext()</ref> or <ref refid="cipher_8h_1a2709f8b3e81f9b67c240a053c705aa86" kindref="member">mbedtls_cipher_auth_decrypt_ext()</ref> must provide the same tag length. For non-AEAD ciphers, the value must be <computeroutput>0</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1abd30fe33f8b6cf8106e7ea29d3f795cd" kindref="member">MBEDTLS_ERR_CIPHER_ALLOC_FAILED</ref> if allocation of the cipher-specific context fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="662" column="24" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="662" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1aa585ffa4ded213e5b3160de86e95ec4b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int mbedtls_cipher_get_block_size</definition>
        <argsstring>(const mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_get_block_size</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function returns the block size of the given cipher in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context of the cipher.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The block size of the underlying cipher. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if the cipher is a stream cipher. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>ctx</computeroutput> has not been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="678" column="28" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="678" bodyend="687"/>
        <references refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" compoundref="platform__util_8h" startline="27">MBEDTLS_INTERNAL_VALIDATE_RET</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1adae6a0d3f6f0d3e78abbf2f247a06b66" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref></type>
        <definition>static mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode</definition>
        <argsstring>(const mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_get_cipher_mode</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function returns the mode of operation for the cipher. For example, MBEDTLS_MODE_CBC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context of the cipher. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mode of operation. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" kindref="member">MBEDTLS_MODE_NONE</ref> if <computeroutput>ctx</computeroutput> has not been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="698" column="37" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="698" bodyend="707"/>
        <references refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" compoundref="platform__util_8h" startline="27">MBEDTLS_INTERNAL_VALIDATE_RET</references>
        <references refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" compoundref="cipher_8h" startline="173">MBEDTLS_MODE_NONE</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a95179cd977261724298e9bca67a0fcc0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_cipher_get_iv_size</definition>
        <argsstring>(const mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_get_iv_size</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function returns the size of the IV or nonce of the cipher, in Bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context of the cipher. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The recommended IV size if no IV has been set. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> for ciphers not using an IV or a nonce. </para>
</simplesect>
<simplesect kind="return"><para>The actual size if an IV has been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="719" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="719" bodyend="733"/>
        <references refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" compoundref="platform__util_8h" startline="27">MBEDTLS_INTERNAL_VALIDATE_RET</references>
        <references refid="cipher_8h_1a068a06a17500ba4e632ff2062d397c89" compoundref="cipher_8h" startline="312">MBEDTLS_IV_SIZE_SHIFT</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1aa11f687dee08d37b0a9835497b6c94f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref></type>
        <definition>static mbedtls_cipher_type_t mbedtls_cipher_get_type</definition>
        <argsstring>(const mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_get_type</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function returns the type of the given cipher. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context of the cipher. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The type of the cipher. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" kindref="member">MBEDTLS_CIPHER_NONE</ref> if <computeroutput>ctx</computeroutput> has not been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="743" column="37" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="743" bodyend="753"/>
        <references refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" compoundref="cipher_8h" startline="85">MBEDTLS_CIPHER_NONE</references>
        <references refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" compoundref="platform__util_8h" startline="27">MBEDTLS_INTERNAL_VALIDATE_RET</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1abf1d75d9cb96ed87ab580313f5d0eeda" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* mbedtls_cipher_get_name</definition>
        <argsstring>(const mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_get_name</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function returns the name of the given cipher as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context of the cipher. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name of the cipher. </para>
</simplesect>
<simplesect kind="return"><para>NULL if <computeroutput>ctx</computeroutput> has not been not initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="764" column="26" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="764" bodyend="773"/>
        <references refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" compoundref="platform__util_8h" startline="27">MBEDTLS_INTERNAL_VALIDATE_RET</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a6f6abbb7eadc970085c6ab41145e4812" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_cipher_get_key_bitlen</definition>
        <argsstring>(const mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_get_key_bitlen</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function returns the key length of the cipher. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context of the cipher. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key length of the cipher in bits. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba27a227b285707a038e87cee36a8d1a65" kindref="member">MBEDTLS_KEY_LENGTH_NONE</ref> if <computeroutput>ctx</computeroutput> has not been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="784" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="784" bodyend="795"/>
        <references refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" compoundref="platform__util_8h" startline="27">MBEDTLS_INTERNAL_VALIDATE_RET</references>
        <references refid="cipher_8h_1a0eb50dbc1df3105a1e4e9dcba9586fc5" compoundref="cipher_8h" startline="311">MBEDTLS_KEY_BITLEN_SHIFT</references>
        <references refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba27a227b285707a038e87cee36a8d1a65" compoundref="cipher_8h" startline="207">MBEDTLS_KEY_LENGTH_NONE</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a8a9f67bc0f62ae159eecfbe33512e17d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" kindref="member">mbedtls_operation_t</ref></type>
        <definition>static mbedtls_operation_t mbedtls_cipher_get_operation</definition>
        <argsstring>(const mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_get_operation</name>
        <param>
          <type>const <ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function returns the operation of the given cipher. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context of the cipher. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The type of operation: <ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fab6bd8754064eab0b5fe2426184542ba6" kindref="member">MBEDTLS_ENCRYPT</ref> or <ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa1209c6e6314e7dfa517602d53b6ea8b6" kindref="member">MBEDTLS_DECRYPT</ref>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa3e5a23a347d62ec3075f547516b0e2b3" kindref="member">MBEDTLS_OPERATION_NONE</ref> if <computeroutput>ctx</computeroutput> has not been initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="805" column="35" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" bodystart="805" bodyend="815"/>
        <references refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" compoundref="platform__util_8h" startline="27">MBEDTLS_INTERNAL_VALIDATE_RET</references>
        <references refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa3e5a23a347d62ec3075f547516b0e2b3" compoundref="cipher_8h" startline="200">MBEDTLS_OPERATION_NONE</references>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a027be8bf469069be17d82c4899b3df5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_setkey</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *key, int key_bitlen, const mbedtls_operation_t operation)</argsstring>
        <name>mbedtls_cipher_setkey</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key_bitlen</declname>
        </param>
        <param>
          <type>const <ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" kindref="member">mbedtls_operation_t</ref></type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>This function sets the key to use with the given context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized and bound to a cipher information structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to use. This must be a readable buffer of at least <computeroutput>key_bitlen</computeroutput> Bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bitlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The key length to use, in Bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation that the key will be used for: <ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fab6bd8754064eab0b5fe2426184542ba6" kindref="member">MBEDTLS_ENCRYPT</ref> or <ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa1209c6e6314e7dfa517602d53b6ea8b6" kindref="member">MBEDTLS_DECRYPT</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para>A cipher-specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="833" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="833" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1afad97d1964a7a98d82488fecd052130f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_set_padding_mode</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode)</argsstring>
        <name>mbedtls_cipher_set_padding_mode</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837" kindref="member">mbedtls_cipher_padding_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>This function sets the padding mode, for cipher modes that use padding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized and bound to a cipher information structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The padding mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a5093ef5a2ca66691e189c4224098355e" kindref="member">MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</ref> if the selected padding mode is not supported. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> if the cipher mode does not support padding. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="854" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="854" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a570ef5913117fbb2592f75d0d834b51c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_set_iv</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *iv, size_t iv_len)</argsstring>
        <name>mbedtls_cipher_set_iv</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iv_len</declname>
        </param>
        <briefdescription>
<para>This function sets the initialization vector (IV) or nonce. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Some ciphers do not use IVs nor nonce. For these ciphers, this function has no effect.</para>
</simplesect>
<simplesect kind="note"><para>For <ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0b57e4a365c0747498503d89f24a61c9" kindref="member">MBEDTLS_CIPHER_CHACHA20</ref>, the nonce length must be 12, and the initial counter value is 0.</para>
</simplesect>
<simplesect kind="note"><para>For <ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9b1c7fd85839f54e5e1c8dd9f9979afd" kindref="member">MBEDTLS_CIPHER_CHACHA20_POLY1305</ref>, the nonce length must be 12.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized and bound to a cipher information structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>The IV to use, or NONCE_COUNTER for CTR-mode ciphers. This must be a readable buffer of at least <computeroutput>iv_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The IV length for ciphers with variable-size IV. This parameter is discarded by ciphers with fixed-size IV.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="882" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="882" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a22b60318022c1947d9893721bc911335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_reset</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx)</argsstring>
        <name>mbedtls_cipher_reset</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function resets the cipher state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>With non-AEAD ciphers, the order of calls for each message is as follows:<orderedlist>
<listitem><para><ref refid="cipher_8h_1a570ef5913117fbb2592f75d0d834b51c" kindref="member">mbedtls_cipher_set_iv()</ref> if the mode uses an IV/nonce.</para>
</listitem><listitem><para><ref refid="cipher_8h_1a22b60318022c1947d9893721bc911335" kindref="member">mbedtls_cipher_reset()</ref></para>
</listitem><listitem><para><ref refid="cipher_8h_1a959598dfef9d7f2add8861e0c518f303" kindref="member">mbedtls_cipher_update()</ref> one or more times</para>
</listitem><listitem><para><ref refid="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" kindref="member">mbedtls_cipher_finish()</ref></para>
</listitem></orderedlist>
This sequence can be repeated to encrypt or decrypt multiple messages with the same key.</para>
</simplesect>
<simplesect kind="note"><para>With AEAD ciphers, the order of calls for each message is as follows:<orderedlist>
<listitem><para><ref refid="cipher_8h_1a570ef5913117fbb2592f75d0d834b51c" kindref="member">mbedtls_cipher_set_iv()</ref> if the mode uses an IV/nonce.</para>
</listitem><listitem><para><ref refid="cipher_8h_1a22b60318022c1947d9893721bc911335" kindref="member">mbedtls_cipher_reset()</ref></para>
</listitem><listitem><para><ref refid="cipher_8h_1a86bc4ed42ff087c33bb00fe31b049ae7" kindref="member">mbedtls_cipher_update_ad()</ref></para>
</listitem><listitem><para><ref refid="cipher_8h_1a959598dfef9d7f2add8861e0c518f303" kindref="member">mbedtls_cipher_update()</ref> one or more times</para>
</listitem><listitem><para><ref refid="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" kindref="member">mbedtls_cipher_finish()</ref></para>
</listitem><listitem><para><ref refid="cipher_8h_1ad3388eaa42a44db6a0b0339dd49f15ba" kindref="member">mbedtls_cipher_check_tag()</ref> (for decryption) or <ref refid="cipher_8h_1a8916ddd18e94002913b80a6b04b83693" kindref="member">mbedtls_cipher_write_tag()</ref> (for encryption).</para>
</listitem></orderedlist>
This sequence can be repeated to encrypt or decrypt multiple messages with the same key.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be bound to a key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="918" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="918" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a86bc4ed42ff087c33bb00fe31b049ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_update_ad</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *ad, size_t ad_len)</argsstring>
        <name>mbedtls_cipher_update_ad</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_len</declname>
        </param>
        <briefdescription>
<para>This function adds additional data for AEAD ciphers. Currently supported with GCM and ChaCha20+Poly1305. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>The additional data to use. This must be a readable buffer of at least <computeroutput>ad_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>ad</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="933" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="933" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a959598dfef9d7f2add8861e0c518f303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_update</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *input, size_t ilen, unsigned char *output, size_t *olen)</argsstring>
        <name>mbedtls_cipher_update</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <briefdescription>
<para>The generic cipher update function. It encrypts or decrypts using the given cipher context. Writes as many block-sized blocks of data as possible to output. Any data that cannot be written immediately is either added to the next block, or flushed when <ref refid="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" kindref="member">mbedtls_cipher_finish()</ref> is called. Exception: For MBEDTLS_MODE_ECB, expects a single block in size. For example, 16 Bytes for AES. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This must be a readable buffer of at least <computeroutput>ilen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer for the output data. This must be able to hold at least <computeroutput>ilen + block_size</computeroutput>. This must not be the same buffer as <computeroutput>input</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the output data, to be updated with the actual number of Bytes written. This must not be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a5093ef5a2ca66691e189c4224098355e" kindref="member">MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</ref> on an unsupported mode for a cipher. </para>
</simplesect>
<simplesect kind="return"><para>A cipher-specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="966" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="966" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_finish</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, unsigned char *output, size_t *olen)</argsstring>
        <name>mbedtls_cipher_finish</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <briefdescription>
<para>The generic cipher finalization function. If data still needs to be flushed from an incomplete block, the data contained in it is padded to the size of the last block, and written to the <computeroutput>output</computeroutput> buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write data to. This needs to be a writable buffer of at least block_size Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the data written to the <computeroutput>output</computeroutput> buffer. This may not be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1ac7da041aba839f2ba606eb30f7547b8b" kindref="member">MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</ref> on decryption expecting a full block but not receiving one. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a06295349279dcbda6b1317924d5bb810" kindref="member">MBEDTLS_ERR_CIPHER_INVALID_PADDING</ref> on invalid padding while decrypting. </para>
</simplesect>
<simplesect kind="return"><para>A cipher-specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="993" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="993" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a8916ddd18e94002913b80a6b04b83693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_write_tag</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, unsigned char *tag, size_t tag_len)</argsstring>
        <name>mbedtls_cipher_write_tag</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_len</declname>
        </param>
        <briefdescription>
<para>This function writes a tag for AEAD ciphers. Currently supported with GCM and ChaCha20+Poly1305. This must be called after <ref refid="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" kindref="member">mbedtls_cipher_finish()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized, bound to a key, and have just completed a cipher operation through <ref refid="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" kindref="member">mbedtls_cipher_finish()</ref> the tag for which should be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write the tag to. This must be a writable buffer of at least <computeroutput>tag_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the tag to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="1013" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="1013" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1ad3388eaa42a44db6a0b0339dd49f15ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_check_tag</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *tag, size_t tag_len)</argsstring>
        <name>mbedtls_cipher_check_tag</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_len</declname>
        </param>
        <briefdescription>
<para>This function checks the tag for AEAD ciphers. Currently supported with GCM and ChaCha20+Poly1305. This must be called after <ref refid="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" kindref="member">mbedtls_cipher_finish()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the tag. This must be a readable buffer of at least <computeroutput>tag_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the tag to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="1029" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="1029" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a1c249f6ee1a0d2c906927c7790c41dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_crypt</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *iv, size_t iv_len, const unsigned char *input, size_t ilen, unsigned char *output, size_t *olen)</argsstring>
        <name>mbedtls_cipher_crypt</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iv_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <briefdescription>
<para>The generic all-in-one encryption/decryption function, for all ciphers except AEAD constructs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>The IV to use, or NONCE_COUNTER for CTR-mode ciphers. This must be a readable buffer of at least <computeroutput>iv_len</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The IV length for ciphers with variable-size IV. This parameter is discarded by ciphers with fixed-size IV. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This must be a readable buffer of at least <computeroutput>ilen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer for the output data. This must be able to hold at least <computeroutput>ilen + block_size</computeroutput>. This must not be the same buffer as <computeroutput>input</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the output data, to be updated with the actual number of Bytes written. This must not be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some ciphers do not use IVs nor nonce. For these ciphers, use <computeroutput>iv</computeroutput> = NULL and <computeroutput>iv_len</computeroutput> = 0.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1ac7da041aba839f2ba606eb30f7547b8b" kindref="member">MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</ref> on decryption expecting a full block but not receiving one. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a06295349279dcbda6b1317924d5bb810" kindref="member">MBEDTLS_ERR_CIPHER_INVALID_PADDING</ref> on invalid padding while decrypting. </para>
</simplesect>
<simplesect kind="return"><para>A cipher-specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="1066" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="1066" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a64ea7a5500f054d1d60a22369d171eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_auth_encrypt_ext</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *iv, size_t iv_len, const unsigned char *ad, size_t ad_len, const unsigned char *input, size_t ilen, unsigned char *output, size_t output_len, size_t *olen, size_t tag_len)</argsstring>
        <name>mbedtls_cipher_auth_encrypt_ext</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iv_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_len</declname>
        </param>
        <briefdescription>
<para>The authenticated encryption (AEAD/NIST_KW) function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For AEAD modes, the tag will be appended to the ciphertext, as recommended by RFC 5116. (NIST_KW doesn&apos;t have a separate tag.)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized and bound to a key, with an AEAD algorithm or NIST_KW. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce to use. This must be a readable buffer of at least <computeroutput>iv_len</computeroutput> Bytes and may be <computeroutput>NULL</computeroutput> if <computeroutput>iv_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the nonce. For AEAD ciphers, this must satisfy the constraints imposed by the cipher used. For NIST_KW, this must be <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>The additional data to authenticate. This must be a readable buffer of at least <computeroutput>ad_len</computeroutput> Bytes, and may be <computeroutput>NULL</computeroutput> is <computeroutput>ad_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>ad</computeroutput>. For NIST_KW, this must be <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This must be a readable buffer of at least <computeroutput>ilen</computeroutput> Bytes, and may be <computeroutput>NULL</computeroutput> if <computeroutput>ilen</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer for the output data. This must be a writable buffer of at least <computeroutput>output_len</computeroutput> Bytes, and must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the <computeroutput>output</computeroutput> buffer in Bytes. For AEAD ciphers, this must be at least <computeroutput>ilen</computeroutput> + <computeroutput>tag_len</computeroutput>. For NIST_KW, this must be at least <computeroutput>ilen</computeroutput> + 8 (rounded up to a multiple of 8 if KWP is used); <computeroutput>ilen</computeroutput> + 15 is always a safe value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>This will be filled with the actual number of Bytes written to the <computeroutput>output</computeroutput> buffer. This must point to a writable object of type <computeroutput>size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired length of the authentication tag. For AEAD ciphers, this must match the constraints imposed by the cipher used, and in particular must not be <computeroutput>0</computeroutput>. For NIST_KW, this must be <computeroutput>0</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para>A cipher-specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="1116" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="1116" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cipher_8h_1a2709f8b3e81f9b67c240a053c705aa86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_cipher_auth_decrypt_ext</definition>
        <argsstring>(mbedtls_cipher_context_t *ctx, const unsigned char *iv, size_t iv_len, const unsigned char *ad, size_t ad_len, const unsigned char *input, size_t ilen, unsigned char *output, size_t output_len, size_t *olen, size_t tag_len)</argsstring>
        <name>mbedtls_cipher_auth_decrypt_ext</name>
        <param>
          <type><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iv_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>ad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_len</declname>
        </param>
        <briefdescription>
<para>The authenticated encryption (AEAD/NIST_KW) function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the data is not authentic, then the output buffer is zeroed out to prevent the unauthentic plaintext being used, making this interface safer.</para>
</simplesect>
<simplesect kind="note"><para>For AEAD modes, the tag must be appended to the ciphertext, as recommended by RFC 5116. (NIST_KW doesn&apos;t have a separate tag.)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic cipher context. This must be initialized and bound to a key, with an AEAD algorithm or NIST_KW. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce to use. This must be a readable buffer of at least <computeroutput>iv_len</computeroutput> Bytes and may be <computeroutput>NULL</computeroutput> if <computeroutput>iv_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the nonce. For AEAD ciphers, this must satisfy the constraints imposed by the cipher used. For NIST_KW, this must be <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad</parametername>
</parameternamelist>
<parameterdescription>
<para>The additional data to authenticate. This must be a readable buffer of at least <computeroutput>ad_len</computeroutput> Bytes, and may be <computeroutput>NULL</computeroutput> is <computeroutput>ad_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>ad</computeroutput>. For NIST_KW, this must be <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This must be a readable buffer of at least <computeroutput>ilen</computeroutput> Bytes, and may be <computeroutput>NULL</computeroutput> if <computeroutput>ilen</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data. For AEAD ciphers this must be at least <computeroutput>tag_len</computeroutput>. For NIST_KW this must be at least <computeroutput>8</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer for the output data. This must be a writable buffer of at least <computeroutput>output_len</computeroutput> Bytes, and may be <computeroutput>NULL</computeroutput> if <computeroutput>output_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the <computeroutput>output</computeroutput> buffer in Bytes. For AEAD ciphers, this must be at least <computeroutput>ilen</computeroutput> - <computeroutput>tag_len</computeroutput>. For NIST_KW, this must be at least <computeroutput>ilen</computeroutput> - 8. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>This will be filled with the actual number of Bytes written to the <computeroutput>output</computeroutput> buffer. This must point to a writable object of type <computeroutput>size_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual length of the authentication tag. For AEAD ciphers, this must match the constraints imposed by the cipher used, and in particular must not be <computeroutput>0</computeroutput>. For NIST_KW, this must be <computeroutput>0</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" kindref="member">MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</ref> on parameter-verification failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="cipher_8h_1a67ec20c7b124cb258978a41d5c363def" kindref="member">MBEDTLS_ERR_CIPHER_AUTH_FAILED</ref> if data is not authentic. </para>
</simplesect>
<simplesect kind="return"><para>A cipher-specific error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" line="1172" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h" declline="1172" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains an abstraction interface for use with the cipher primitives provided by the library. It provides a common interface to all of the available cipher operations. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Adriaan de Jong <ulink url="mailto:dejong@fox-it.com">dejong@fox-it.com</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_CIPHER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_CIPHER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="platform__util_8h" kindref="compound">mbedtls/platform_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_GCM_C)<sp/>||<sp/>defined(MBEDTLS_CCM_C)<sp/>||<sp/>defined(MBEDTLS_CHACHAPOLY_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="cipher_8h_1aedd176bb71b4e03034f0d629a1c8be40" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_CIPHER_MODE_AEAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_CBC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="cipher_8h_1a8858b88a22fbd142804f2ab411f8c24c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_CIPHER_MODE_WITH_PADDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_NULL_CIPHER)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_CHACHA20_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="cipher_8h_1adcd10ede34f16d1c597dd76ef6abf9de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_CIPHER_MODE_STREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="cipher_8h_1a5093ef5a2ca66691e189c4224098355e" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE<sp/><sp/>-0x6080</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="cipher_8h_1a6ce4034c4ecd0cd1592232ed8a93d648" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="cipher_8h_1abd30fe33f8b6cf8106e7ea29d3f795cd" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CIPHER_ALLOC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="cipher_8h_1a06295349279dcbda6b1317924d5bb810" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CIPHER_INVALID_PADDING<sp/><sp/><sp/><sp/><sp/><sp/>-0x6200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="cipher_8h_1ac7da041aba839f2ba606eb30f7547b8b" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED<sp/><sp/>-0x6280</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="cipher_8h_1a67ec20c7b124cb258978a41d5c363def" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CIPHER_AUTH_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6300</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="cipher_8h_1aee9e36063fbb6890aeb9918db7fa020e" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CIPHER_INVALID_CONTEXT<sp/><sp/><sp/><sp/><sp/><sp/>-0x6380</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="cipher_8h_1a2a6dc5188d4a1e9bc43d9ea7c8505c6c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_CIPHER_VARIABLE_IV_LEN<sp/><sp/><sp/><sp/><sp/>0x01<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53" refid="cipher_8h_1a882893bcfc917982037621f6e97968a6" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_CIPHER_VARIABLE_KEY_LEN<sp/><sp/><sp/><sp/>0x02<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba9e83a435f3ae051a51b3755d57fb7324" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba9e83a435f3ae051a51b3755d57fb7324" kindref="member">MBEDTLS_CIPHER_ID_NONE</ref><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="68" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba3b9447c8b50e7e1b8a5d526360388a14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba3b9447c8b50e7e1b8a5d526360388a14" kindref="member">MBEDTLS_CIPHER_ID_NULL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba5a1de07b89c2fa03e102493c92a6d074" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba5a1de07b89c2fa03e102493c92a6d074" kindref="member">MBEDTLS_CIPHER_ID_AES</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba34bf0303a00b450f0262e97323b67fd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba34bf0303a00b450f0262e97323b67fd7" kindref="member">MBEDTLS_CIPHER_ID_DES</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba02827f5eb7b2600fba6ec40873b31a1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba02827f5eb7b2600fba6ec40873b31a1b" kindref="member">MBEDTLS_CIPHER_ID_3DES</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba1b9895858b351464e65bb47c5b11a011" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba1b9895858b351464e65bb47c5b11a011" kindref="member">MBEDTLS_CIPHER_ID_CAMELLIA</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba6ad5912654007636c4d8a6bc186eb961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1ba6ad5912654007636c4d8a6bc186eb961" kindref="member">MBEDTLS_CIPHER_ID_ARIA</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1bab8ab323f28b16744bfeba7671f95f542" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1bab8ab323f28b16744bfeba7671f95f542" kindref="member">MBEDTLS_CIPHER_ID_CHACHA20</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1b" kindref="member">mbedtls_cipher_id_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" kindref="member">MBEDTLS_CIPHER_NONE</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daab45ae42bc7ab1617877167471496710" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daab45ae42bc7ab1617877167471496710" kindref="member">MBEDTLS_CIPHER_NULL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da02173aedfb459d27316f8fcbd8452e13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da02173aedfb459d27316f8fcbd8452e13" kindref="member">MBEDTLS_CIPHER_AES_128_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dac6e30c2e56a54e78a8b46e4d87839422" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dac6e30c2e56a54e78a8b46e4d87839422" kindref="member">MBEDTLS_CIPHER_AES_192_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da3c1d1256bc0e6ed7b5f5cf4dff038432" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da3c1d1256bc0e6ed7b5f5cf4dff038432" kindref="member">MBEDTLS_CIPHER_AES_256_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da19501fb55aec2f10338baab059cc8ca8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da19501fb55aec2f10338baab059cc8ca8" kindref="member">MBEDTLS_CIPHER_AES_128_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9c17540658505285896a55ef27bad52b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9c17540658505285896a55ef27bad52b" kindref="member">MBEDTLS_CIPHER_AES_192_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab89e8f49d884804188cc9837066f4017" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab89e8f49d884804188cc9837066f4017" kindref="member">MBEDTLS_CIPHER_AES_256_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da57257cfaf7fe39e49c3a35145223de43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da57257cfaf7fe39e49c3a35145223de43" kindref="member">MBEDTLS_CIPHER_AES_128_CFB128</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da665a71ade48243f64f191a5d2320bef8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da665a71ade48243f64f191a5d2320bef8" kindref="member">MBEDTLS_CIPHER_AES_192_CFB128</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da93d9e55a10f94176800ac1155a89e2b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da93d9e55a10f94176800ac1155a89e2b4" kindref="member">MBEDTLS_CIPHER_AES_256_CFB128</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5f1f64e7a813ebe35de67d10f04c7c12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5f1f64e7a813ebe35de67d10f04c7c12" kindref="member">MBEDTLS_CIPHER_AES_128_CTR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa6da8177c2e59f582cf53c0ab91b0d23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa6da8177c2e59f582cf53c0ab91b0d23" kindref="member">MBEDTLS_CIPHER_AES_192_CTR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da41d9d9a010b9009bff05b3cfc3452655" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da41d9d9a010b9009bff05b3cfc3452655" kindref="member">MBEDTLS_CIPHER_AES_256_CTR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90a73f2b2d039360cda2c4655dbedd22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90a73f2b2d039360cda2c4655dbedd22" kindref="member">MBEDTLS_CIPHER_AES_128_GCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1d6fd8cd15664a20d1c8426802b8c54b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1d6fd8cd15664a20d1c8426802b8c54b" kindref="member">MBEDTLS_CIPHER_AES_192_GCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da73308f133a09589299d2f4d7e94ae538" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da73308f133a09589299d2f4d7e94ae538" kindref="member">MBEDTLS_CIPHER_AES_256_GCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9b5b21833004061678fc7e7eb28d3821" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9b5b21833004061678fc7e7eb28d3821" kindref="member">MBEDTLS_CIPHER_CAMELLIA_128_ECB</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90b5be24e59a7dfdfbf9a125cce0f083" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90b5be24e59a7dfdfbf9a125cce0f083" kindref="member">MBEDTLS_CIPHER_CAMELLIA_192_ECB</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8a1d31bd95a7d518611e393775d47df7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8a1d31bd95a7d518611e393775d47df7" kindref="member">MBEDTLS_CIPHER_CAMELLIA_256_ECB</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7be9d1d8f2ca3bbd6e5c8fa9afc1c58e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7be9d1d8f2ca3bbd6e5c8fa9afc1c58e" kindref="member">MBEDTLS_CIPHER_CAMELLIA_128_CBC</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da26365f403c2b046ce35774e3cbaf72aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da26365f403c2b046ce35774e3cbaf72aa" kindref="member">MBEDTLS_CIPHER_CAMELLIA_192_CBC</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae5706408ed6a0cdce83240ecb0d093b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae5706408ed6a0cdce83240ecb0d093b1" kindref="member">MBEDTLS_CIPHER_CAMELLIA_256_CBC</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da77f1b0e09890fb93e93f4968980d5ba8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da77f1b0e09890fb93e93f4968980d5ba8" kindref="member">MBEDTLS_CIPHER_CAMELLIA_128_CFB128</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="109" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5a02c88a1d48fa0d901e9aa22f477be5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5a02c88a1d48fa0d901e9aa22f477be5" kindref="member">MBEDTLS_CIPHER_CAMELLIA_192_CFB128</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="110" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7d99ecf5a8719950a8be99fb9927e3b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7d99ecf5a8719950a8be99fb9927e3b2" kindref="member">MBEDTLS_CIPHER_CAMELLIA_256_CFB128</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="111" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab28c28e9f5c0ccf4f5aabdd457131e6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab28c28e9f5c0ccf4f5aabdd457131e6f" kindref="member">MBEDTLS_CIPHER_CAMELLIA_128_CTR</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabaa17a8b74d8334500e86bf8ec5d47d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabaa17a8b74d8334500e86bf8ec5d47d4" kindref="member">MBEDTLS_CIPHER_CAMELLIA_192_CTR</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dadb9f15b9c71b37a83c68092390133f03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dadb9f15b9c71b37a83c68092390133f03" kindref="member">MBEDTLS_CIPHER_CAMELLIA_256_CTR</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0653c936c1f48311640b3f796d3096d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0653c936c1f48311640b3f796d3096d8" kindref="member">MBEDTLS_CIPHER_CAMELLIA_128_GCM</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da31bcc4ad8b983507288b98379a855584" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da31bcc4ad8b983507288b98379a855584" kindref="member">MBEDTLS_CIPHER_CAMELLIA_192_GCM</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2005aa6b74cb2574de6f4b104b1a6278" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2005aa6b74cb2574de6f4b104b1a6278" kindref="member">MBEDTLS_CIPHER_CAMELLIA_256_GCM</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ed7c295258192976c4f11be930b6383" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ed7c295258192976c4f11be930b6383" kindref="member">MBEDTLS_CIPHER_DES_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da75ebf8afe088218555df2211b06ed24a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da75ebf8afe088218555df2211b06ed24a" kindref="member">MBEDTLS_CIPHER_DES_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da22c639d17383ce7a7897e6364a51dbeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da22c639d17383ce7a7897e6364a51dbeb" kindref="member">MBEDTLS_CIPHER_DES_EDE_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa85f7610f000ed8680164bb650278aa3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa85f7610f000ed8680164bb650278aa3" kindref="member">MBEDTLS_CIPHER_DES_EDE_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad749b54fa7af5af9754f600a1cf6e8f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad749b54fa7af5af9754f600a1cf6e8f0" kindref="member">MBEDTLS_CIPHER_DES_EDE3_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ebeb46e514f7d7c9791daf9f31bdbc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ebeb46e514f7d7c9791daf9f31bdbc2" kindref="member">MBEDTLS_CIPHER_DES_EDE3_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa853efb100255649d70037a69a6cc5f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daa853efb100255649d70037a69a6cc5f1" kindref="member">MBEDTLS_CIPHER_AES_128_CCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da4dafc03176b3e587f5e50867ac1be0f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da4dafc03176b3e587f5e50867ac1be0f6" kindref="member">MBEDTLS_CIPHER_AES_192_CCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7d1a7208c43a711c1665241402b8390d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7d1a7208c43a711c1665241402b8390d" kindref="member">MBEDTLS_CIPHER_AES_256_CCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0fb9e2fbf58e58c2907ec21992128727" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0fb9e2fbf58e58c2907ec21992128727" kindref="member">MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="127" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da23845346c1b2850370e1ff266d01d862" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da23845346c1b2850370e1ff266d01d862" kindref="member">MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="128" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da353b3a62f182bb4a16b5d76c274fea94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da353b3a62f182bb4a16b5d76c274fea94" kindref="member">MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="129" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5ad79b02517bb3b319280330456d049f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5ad79b02517bb3b319280330456d049f" kindref="member">MBEDTLS_CIPHER_CAMELLIA_128_CCM</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9c6e4c22ec84211b82860074889d5804" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9c6e4c22ec84211b82860074889d5804" kindref="member">MBEDTLS_CIPHER_CAMELLIA_192_CCM</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da72a8f49efb32a40d6fef16aef04622c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da72a8f49efb32a40d6fef16aef04622c0" kindref="member">MBEDTLS_CIPHER_CAMELLIA_256_CCM</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da083aa5353bf556628066fb41412e7e38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da083aa5353bf556628066fb41412e7e38" kindref="member">MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="133" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8377f673c4c8d5a3f2948402b9ef54d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8377f673c4c8d5a3f2948402b9ef54d4" kindref="member">MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="134" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7e225e0d9616fbc50d5b577e80a27897" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da7e225e0d9616fbc50d5b577e80a27897" kindref="member">MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="135" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae2d8fbe5b2f925026394eb2442d06e0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae2d8fbe5b2f925026394eb2442d06e0a" kindref="member">MBEDTLS_CIPHER_ARIA_128_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1f27a6352c76f187358abc3a18e436ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1f27a6352c76f187358abc3a18e436ba" kindref="member">MBEDTLS_CIPHER_ARIA_192_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da6aa30fa4d7e7de0a5059a443aad73fc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da6aa30fa4d7e7de0a5059a443aad73fc6" kindref="member">MBEDTLS_CIPHER_ARIA_256_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dada65b844b7ea59faaa7644d553248415" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dada65b844b7ea59faaa7644d553248415" kindref="member">MBEDTLS_CIPHER_ARIA_128_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2634d20175e2917df6cbcb8de3cdc28d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2634d20175e2917df6cbcb8de3cdc28d" kindref="member">MBEDTLS_CIPHER_ARIA_192_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daad1b3625ffe480a2dc94fcfb6a290aec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569daad1b3625ffe480a2dc94fcfb6a290aec" kindref="member">MBEDTLS_CIPHER_ARIA_256_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae9806ae70dcb09f6afa7c6bc52f80b14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae9806ae70dcb09f6afa7c6bc52f80b14" kindref="member">MBEDTLS_CIPHER_ARIA_128_CFB128</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab25a39b43b0b7add45755ae22a6f6048" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab25a39b43b0b7add45755ae22a6f6048" kindref="member">MBEDTLS_CIPHER_ARIA_192_CFB128</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da258b5fe481a6a835a0ef8e8b008dd367" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da258b5fe481a6a835a0ef8e8b008dd367" kindref="member">MBEDTLS_CIPHER_ARIA_256_CFB128</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da26ae457e3efac119b4581bc5ca0de356" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da26ae457e3efac119b4581bc5ca0de356" kindref="member">MBEDTLS_CIPHER_ARIA_128_CTR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da83f7787f279e516368ffbbda470ae28f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da83f7787f279e516368ffbbda470ae28f" kindref="member">MBEDTLS_CIPHER_ARIA_192_CTR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da03a80089e4e161c73603a0ca014984ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da03a80089e4e161c73603a0ca014984ce" kindref="member">MBEDTLS_CIPHER_ARIA_256_CTR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ef36b3bcbcc3b36912abf20e76062bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0ef36b3bcbcc3b36912abf20e76062bc" kindref="member">MBEDTLS_CIPHER_ARIA_128_GCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5f912593bf28e5a927e6add0046d9565" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da5f912593bf28e5a927e6add0046d9565" kindref="member">MBEDTLS_CIPHER_ARIA_192_GCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad02f884e9a975998c7814c5be44c7fd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad02f884e9a975998c7814c5be44c7fd0" kindref="member">MBEDTLS_CIPHER_ARIA_256_GCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9fd94fd13e496f79bfa91b280b03c938" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9fd94fd13e496f79bfa91b280b03c938" kindref="member">MBEDTLS_CIPHER_ARIA_128_CCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2b46bc0a3cbb8d98f02b3cded3ab1158" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da2b46bc0a3cbb8d98f02b3cded3ab1158" kindref="member">MBEDTLS_CIPHER_ARIA_192_CCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae7fc34b23953f0cd7194c670bf43abf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dae7fc34b23953f0cd7194c670bf43abf5" kindref="member">MBEDTLS_CIPHER_ARIA_256_CCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad9860e7649df40338f5e087515f38add" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad9860e7649df40338f5e087515f38add" kindref="member">MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="154" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da86d07d19b0d8665125aaee436a45ac50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da86d07d19b0d8665125aaee436a45ac50" kindref="member">MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="155" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90bde734683da3c78a6ee11126018ff4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da90bde734683da3c78a6ee11126018ff4" kindref="member">MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG</ref>,<sp/></highlight></codeline>
<codeline lineno="156" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1eb7c55e4846ae5937d3f5ebd85e004b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da1eb7c55e4846ae5937d3f5ebd85e004b" kindref="member">MBEDTLS_CIPHER_AES_128_OFB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da33edb9fef69ac33f04f352b03c53a78b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da33edb9fef69ac33f04f352b03c53a78b" kindref="member">MBEDTLS_CIPHER_AES_192_OFB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab1c25b9f6826b20dafd8e9f29d9d8065" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab1c25b9f6826b20dafd8e9f29d9d8065" kindref="member">MBEDTLS_CIPHER_AES_256_OFB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da076f2417fc301ca1e3b10e214338e328" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da076f2417fc301ca1e3b10e214338e328" kindref="member">MBEDTLS_CIPHER_AES_128_XTS</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da613a27a7798bd20ea88a18777123168a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da613a27a7798bd20ea88a18777123168a" kindref="member">MBEDTLS_CIPHER_AES_256_XTS</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0b57e4a365c0747498503d89f24a61c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da0b57e4a365c0747498503d89f24a61c9" kindref="member">MBEDTLS_CIPHER_CHACHA20</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9b1c7fd85839f54e5e1c8dd9f9979afd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9b1c7fd85839f54e5e1c8dd9f9979afd" kindref="member">MBEDTLS_CIPHER_CHACHA20_POLY1305</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabd023bdb9762c0a5f8e5ac56040e6709" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabd023bdb9762c0a5f8e5ac56040e6709" kindref="member">MBEDTLS_CIPHER_AES_128_KW</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabe180613a1dab91bc7b5bb9b5b6f93f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabe180613a1dab91bc7b5bb9b5b6f93f7" kindref="member">MBEDTLS_CIPHER_AES_192_KW</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8f06c5e8f24cab71c4b8b1f339c84f24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da8f06c5e8f24cab71c4b8b1f339c84f24" kindref="member">MBEDTLS_CIPHER_AES_256_KW</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad46518a985b10b1fb8f81e3cf4339ce5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dad46518a985b10b1fb8f81e3cf4339ce5" kindref="member">MBEDTLS_CIPHER_AES_128_KWP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabfd634c2a27977b347335a9dd0465fef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dabfd634c2a27977b347335a9dd0465fef" kindref="member">MBEDTLS_CIPHER_AES_192_KWP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168" refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab4a8046bb4fe7bb74c6f1c7b5dda6376" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569dab4a8046bb4fe7bb74c6f1c7b5dda6376" kindref="member">MBEDTLS_CIPHER_AES_256_KWP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal">}<sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="173" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" kindref="member">MBEDTLS_MODE_NONE</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a002ae72c0dbf793b5858971b7ce315b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a002ae72c0dbf793b5858971b7ce315b1" kindref="member">MBEDTLS_MODE_ECB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8ac89f6880c66f742e913bf4f7618a797b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8ac89f6880c66f742e913bf4f7618a797b" kindref="member">MBEDTLS_MODE_CBC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a533e18634ddf1d7808c02531d2d0a891" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a533e18634ddf1d7808c02531d2d0a891" kindref="member">MBEDTLS_MODE_CFB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8acb22e5e78f1673f4273d0e179994f863" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8acb22e5e78f1673f4273d0e179994f863" kindref="member">MBEDTLS_MODE_OFB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a95ecb03d135fd973e6da0b7e57db804e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a95ecb03d135fd973e6da0b7e57db804e" kindref="member">MBEDTLS_MODE_CTR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a9683c4bedc462171adaf652b875abf09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a9683c4bedc462171adaf652b875abf09" kindref="member">MBEDTLS_MODE_GCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="180" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a2c808617b79a98d48ee7e62d97c425ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a2c808617b79a98d48ee7e62d97c425ef" kindref="member">MBEDTLS_MODE_STREAM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="181" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a0a5ca88e2e3530c0aef4861dfb6eda2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a0a5ca88e2e3530c0aef4861dfb6eda2b" kindref="member">MBEDTLS_MODE_CCM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a9afc16c35af10e7723a927c5b5b0eee5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a9afc16c35af10e7723a927c5b5b0eee5" kindref="member">MBEDTLS_MODE_CCM_STAR_NO_TAG</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8af024caf12ad778af7f28a331a980a262" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8af024caf12ad778af7f28a331a980a262" kindref="member">MBEDTLS_MODE_XTS</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8ae50fd7ee5f1e325184ed564b8630c29d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8ae50fd7ee5f1e325184ed564b8630c29d" kindref="member">MBEDTLS_MODE_CHACHAPOLY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8aa4898756e1f6f2d6abdf8fe578d20165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8aa4898756e1f6f2d6abdf8fe578d20165" kindref="member">MBEDTLS_MODE_KW</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186" refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8adca6eafd67ed625e8dbccccedd682003" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8adca6eafd67ed625e8dbccccedd682003" kindref="member">MBEDTLS_MODE_KWP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal">}<sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="191" refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a787071478fb192f36d4a085e010b28f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a787071478fb192f36d4a085e010b28f9" kindref="member">MBEDTLS_PADDING_PKCS7</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192" refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a502732ab53a21eb0bf84e5a8e93609a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a502732ab53a21eb0bf84e5a8e93609a7" kindref="member">MBEDTLS_PADDING_ONE_AND_ZEROS</ref>,<sp/></highlight></codeline>
<codeline lineno="193" refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a93944bd7edfd0c6b6f362eb6eef1b4fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a93944bd7edfd0c6b6f362eb6eef1b4fc" kindref="member">MBEDTLS_PADDING_ZEROS_AND_LEN</ref>,<sp/></highlight></codeline>
<codeline lineno="194" refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a339efb60a69e4b033a106c61cd8691e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837a339efb60a69e4b033a106c61cd8691e4" kindref="member">MBEDTLS_PADDING_ZEROS</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195" refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837aace08abe82f9f79e57387133ceb07394" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837aace08abe82f9f79e57387133ceb07394" kindref="member">MBEDTLS_PADDING_NONE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal">}<sp/><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837" kindref="member">mbedtls_cipher_padding_t</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="200" refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa3e5a23a347d62ec3075f547516b0e2b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa3e5a23a347d62ec3075f547516b0e2b3" kindref="member">MBEDTLS_OPERATION_NONE</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="201" refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa1209c6e6314e7dfa517602d53b6ea8b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa1209c6e6314e7dfa517602d53b6ea8b6" kindref="member">MBEDTLS_DECRYPT</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="202" refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fab6bd8754064eab0b5fe2426184542ba6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fab6bd8754064eab0b5fe2426184542ba6" kindref="member">MBEDTLS_ENCRYPT</ref>,</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" kindref="member">mbedtls_operation_t</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207" refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba27a227b285707a038e87cee36a8d1a65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba27a227b285707a038e87cee36a8d1a65" kindref="member">MBEDTLS_KEY_LENGTH_NONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="209" refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba0786b4375829efe98db9d73c5b12eda1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba0786b4375829efe98db9d73c5b12eda1" kindref="member">MBEDTLS_KEY_LENGTH_DES</ref><sp/><sp/>=<sp/>64,</highlight></codeline>
<codeline lineno="211" refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55bade90f9d4c430f18b705faac59b2ed0b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55bade90f9d4c430f18b705faac59b2ed0b9" kindref="member">MBEDTLS_KEY_LENGTH_DES_EDE</ref><sp/>=<sp/>128,</highlight></codeline>
<codeline lineno="213" refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55bae5eb36c0a8ae45bec5b0070292be6c17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55bae5eb36c0a8ae45bec5b0070292be6c17" kindref="member">MBEDTLS_KEY_LENGTH_DES_EDE3</ref><sp/>=<sp/>192,</highlight></codeline>
<codeline lineno="214"><highlight class="normal">};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="comment">/*<sp/>This<sp/>should<sp/>ideally<sp/>be<sp/>derived<sp/>automatically<sp/>from<sp/>list<sp/>of<sp/>ciphers.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>This<sp/>should<sp/>be<sp/>kept<sp/>in<sp/>sync<sp/>with<sp/>MBEDTLS_SSL_MAX_IV_LENGTH<sp/>defined</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>in<sp/>library/ssl_misc.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="cipher_8h_1aec294721b811aa0f7dcc940029fd8aab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MAX_IV_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">/*<sp/>This<sp/>should<sp/>ideally<sp/>be<sp/>derived<sp/>automatically<sp/>from<sp/>list<sp/>of<sp/>ciphers.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>This<sp/>should<sp/>be<sp/>kept<sp/>in<sp/>sync<sp/>with<sp/>MBEDTLS_SSL_MAX_BLOCK_LENGTH<sp/>defined</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>in<sp/>library/ssl_misc.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="cipher_8h_1ab8f30dc90403204515f868c3b6196ffd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MAX_BLOCK_LENGTH<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="comment">/*<sp/>This<sp/>should<sp/>ideally<sp/>be<sp/>derived<sp/>automatically<sp/>from<sp/>list<sp/>of<sp/>ciphers.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>For<sp/>now,<sp/>only<sp/>check<sp/>whether<sp/>XTS<sp/>is<sp/>enabled<sp/>which<sp/>uses<sp/>64<sp/>Byte<sp/>keys,</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>and<sp/>use<sp/>32<sp/>Bytes<sp/>as<sp/>an<sp/>upper<sp/>bound<sp/>for<sp/>the<sp/>maximum<sp/>key<sp/>length<sp/>otherwise.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>This<sp/>should<sp/>be<sp/>kept<sp/>in<sp/>sync<sp/>with<sp/>MBEDTLS_SSL_MAX_BLOCK_LENGTH<sp/>defined</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>in<sp/>library/ssl_misc.h,<sp/>which<sp/>however<sp/>deliberately<sp/>ignores<sp/>the<sp/>case<sp/>of<sp/>XTS</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>since<sp/>the<sp/>latter<sp/>isn&apos;t<sp/>used<sp/>in<sp/>SSL/TLS.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_XTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="cipher_8h_1a4d3073409b2b03d58c16c930049a6c8c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MAX_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MAX_KEY_LENGTH<sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_XTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="cipher_8h_1aa8cada37dceeb13446c7c31459b31a07" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="cipher_8h_1aa8cada37dceeb13446c7c31459b31a07" kindref="member">mbedtls_cipher_base_t</ref><sp/><ref refid="cipher_8h_1aa8cada37dceeb13446c7c31459b31a07" kindref="member">mbedtls_cipher_base_t</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="cipher_8h_1aadfdebf0a70882e059172aa1c7235c45" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__cmac__context__t" kindref="compound">mbedtls_cmac_context_t</ref><sp/><ref refid="structmbedtls__cmac__context__t" kindref="compound">mbedtls_cmac_context_t</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="structmbedtls__cipher__info__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>{</highlight></codeline>
<codeline lineno="268" refid="structmbedtls__cipher__info__t_1a0700c51941badfb12ccccd6d9c80b7d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(name);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="structmbedtls__cipher__info__t_1a9ad09e46f3b39db33f7ce7be13fabb4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(block_size)<sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="structmbedtls__cipher__info__t_1a6ae104267001b35a8eb164934b422287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(iv_size)<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="structmbedtls__cipher__info__t_1ae29148f3ae2a3abc83c03371852d2766" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(key_bitlen)<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="structmbedtls__cipher__info__t_1ad674859010eacd0f7cd54f447cf59c85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mode)<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="structmbedtls__cipher__info__t_1af69e3590a3e533bf203c459ace063cc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(type)<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="structmbedtls__cipher__info__t_1aab43790142dea30ef7a9a7c9a5d86a15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(flags)<sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="structmbedtls__cipher__info__t_1abf0cce842b7931d6cbc389239701d956" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(base_idx)<sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}<sp/><ref refid="cipher_8h_1a09664fe098df65ea21815d4998102746" kindref="member">mbedtls_cipher_info_t</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>only.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>These<sp/>are<sp/>used<sp/>to<sp/>more<sp/>compactly<sp/>represent<sp/>the<sp/>fields<sp/>above.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="cipher_8h_1a0eb50dbc1df3105a1e4e9dcba9586fc5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_KEY_BITLEN_SHIFT<sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="cipher_8h_1a068a06a17500ba4e632ff2062d397c89" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_IV_SIZE_SHIFT<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="structmbedtls__cipher__context__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>{</highlight></codeline>
<codeline lineno="318" refid="structmbedtls__cipher__context__t_1a6bafa7c136e16ea3d260ae88980631e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cipher_info);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="structmbedtls__cipher__context__t_1acd66328d6efe4dd755f4365182183ce3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(key_bitlen);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="structmbedtls__cipher__context__t_1a4bb8e7536714de01e3359687df60db35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" kindref="member">mbedtls_operation_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(operation);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="structmbedtls__cipher__context__t_1a1b5398a44201bc4e66308e8527525ffa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(add_padding))(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>olen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_len);</highlight></codeline>
<codeline lineno="333" refid="structmbedtls__cipher__context__t_1a6da6db9dc797ef5739c916d8ffc13937" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(get_padding))(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*data_len);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="structmbedtls__cipher__context__t_1a3ae6c6e48c40205cab65927725e16139" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(unprocessed_data)[<ref refid="cipher_8h_1ab8f30dc90403204515f868c3b6196ffd" kindref="member">MBEDTLS_MAX_BLOCK_LENGTH</ref>];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="structmbedtls__cipher__context__t_1a61763361492bca3e6e2fb11251dd8147" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(unprocessed_len);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="structmbedtls__cipher__context__t_1a3abb0edc5952c8d39b4b18d785c0af75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(iv)[<ref refid="cipher_8h_1aec294721b811aa0f7dcc940029fd8aab" kindref="member">MBEDTLS_MAX_IV_LENGTH</ref>];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="structmbedtls__cipher__context__t_1ad1152a5dfc634df6b9f11a90a09c87f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(iv_size);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="structmbedtls__cipher__context__t_1a81815c800239bfeb342455ca593eb02a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cipher_ctx);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CMAC_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="structmbedtls__cipher__context__t_1ac552a86563524ab2e6c1b1c368bd98de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__cmac__context__t" kindref="compound">mbedtls_cmac_context_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cmac_ctx);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)<sp/>&amp;&amp;<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="structmbedtls__cipher__context__t_1aea096089c4e4e71e620fce6179265486" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(psa_enabled);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>&amp;&amp;<sp/>!MBEDTLS_DEPRECATED_REMOVED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">}<sp/><ref refid="cipher_8h_1a792b877de2cac8b10386b894408aa5f0" kindref="member">mbedtls_cipher_context_t</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="cipher_8h_1a763ea39a9ccfc20f914fd3391d12a7fc" kindref="member">mbedtls_cipher_list</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*<ref refid="cipher_8h_1a9b2e7d49ca82abe8c96b65645364e24b" kindref="member">mbedtls_cipher_info_from_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cipher_name);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*<ref refid="cipher_8h_1a8bc2809cbd7c2357f41be8cf76eeed92" kindref="member">mbedtls_cipher_info_from_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref><sp/>cipher_type);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*<ref refid="cipher_8h_1a9752d8056c43948c08d2e1f2009a53aa" kindref="member">mbedtls_cipher_info_from_values</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1af5b069ffd0b2ad31225e42ee4ee29b1b" kindref="member">mbedtls_cipher_id_t</ref><sp/>cipher_id,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key_bitlen,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="cipher_8h_1ad530062e4fac7671a4be4adf4c5561ca" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref><sp/><ref refid="cipher_8h_1ad530062e4fac7671a4be4adf4c5561ca" kindref="member">mbedtls_cipher_info_get_type</ref>(</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" kindref="member">MBEDTLS_CIPHER_NONE</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref>)<sp/>info-&gt;MBEDTLS_PRIVATE(type);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="cipher_8h_1a23d4d0dc9413e4128e5ba6f2679dafe7" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref><sp/><ref refid="cipher_8h_1a23d4d0dc9413e4128e5ba6f2679dafe7" kindref="member">mbedtls_cipher_info_get_mode</ref>(</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" kindref="member">MBEDTLS_MODE_NONE</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref>)<sp/>info-&gt;MBEDTLS_PRIVATE(mode);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="cipher_8h_1afcebb7351c1d5e264e3ba015d5219c31" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1afcebb7351c1d5e264e3ba015d5219c31" kindref="member">mbedtls_cipher_info_get_key_bitlen</ref>(</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info-&gt;MBEDTLS_PRIVATE(key_bitlen)<sp/>&lt;&lt;<sp/><ref refid="cipher_8h_1a0eb50dbc1df3105a1e4e9dcba9586fc5" kindref="member">MBEDTLS_KEY_BITLEN_SHIFT</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="cipher_8h_1a2715f88e97b944cc0a8f3c4852a94b7d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="cipher_8h_1a2715f88e97b944cc0a8f3c4852a94b7d" kindref="member">mbedtls_cipher_info_get_name</ref>(</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info-&gt;MBEDTLS_PRIVATE(name);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="cipher_8h_1a06d26d03a46a8a04e1e1f5e96320d172" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a06d26d03a46a8a04e1e1f5e96320d172" kindref="member">mbedtls_cipher_info_get_iv_size</ref>(</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>info-&gt;MBEDTLS_PRIVATE(iv_size))<sp/>&lt;&lt;<sp/><ref refid="cipher_8h_1a068a06a17500ba4e632ff2062d397c89" kindref="member">MBEDTLS_IV_SIZE_SHIFT</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="cipher_8h_1a2402304cf7c7759251ee8b6a372ea98f" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a2402304cf7c7759251ee8b6a372ea98f" kindref="member">mbedtls_cipher_info_get_block_size</ref>(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(info-&gt;MBEDTLS_PRIVATE(block_size));</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="557" refid="cipher_8h_1ac79c9ffd1fea3084306e49ac4d2dd397" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1ac79c9ffd1fea3084306e49ac4d2dd397" kindref="member">mbedtls_cipher_info_has_variable_key_bitlen</ref>(</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info-&gt;MBEDTLS_PRIVATE(flags)<sp/>&amp;<sp/><ref refid="cipher_8h_1a882893bcfc917982037621f6e97968a6" kindref="member">MBEDTLS_CIPHER_VARIABLE_KEY_LEN</ref>;</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="cipher_8h_1a4fdb45293241c6ec50c47e28fb7bef8e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a4fdb45293241c6ec50c47e28fb7bef8e" kindref="member">mbedtls_cipher_info_has_variable_iv_size</ref>(</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info-&gt;MBEDTLS_PRIVATE(flags)<sp/>&amp;<sp/><ref refid="cipher_8h_1a2a6dc5188d4a1e9bc43d9ea7c8505c6c" kindref="member">MBEDTLS_CIPHER_VARIABLE_IV_LEN</ref>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a80354364e91cdb4d4e6ab7ecec65fe07" kindref="member">mbedtls_cipher_init</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a903c4146b471207690988584b83854a9" kindref="member">mbedtls_cipher_free</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a009056b59d69abba5843ce78cd9aae1c" kindref="member">mbedtls_cipher_setup</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*cipher_info);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref><sp/><ref refid="cipher_8h_1a867d5eb112b7cc2f7692ecacaf58f30c" kindref="member">mbedtls_cipher_setup_psa</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__info__t" kindref="compound">mbedtls_cipher_info_t</ref><sp/>*cipher_info,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>taglen);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DEPRECATED_REMOVED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="678" refid="cipher_8h_1aa585ffa4ded213e5b3160de86e95ec4b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1aa585ffa4ded213e5b3160de86e95ec4b" kindref="member">mbedtls_cipher_get_block_size</ref>(</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" kindref="member">MBEDTLS_INTERNAL_VALIDATE_RET</ref>(ctx<sp/>!=<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(cipher_info)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ctx-&gt;MBEDTLS_PRIVATE(cipher_info)-&gt;MBEDTLS_PRIVATE(block_size);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="cipher_8h_1adae6a0d3f6f0d3e78abbf2f247a06b66" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref><sp/><ref refid="cipher_8h_1adae6a0d3f6f0d3e78abbf2f247a06b66" kindref="member">mbedtls_cipher_get_cipher_mode</ref>(</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" kindref="member">MBEDTLS_INTERNAL_VALIDATE_RET</ref>(ctx<sp/>!=<sp/>NULL,<sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" kindref="member">MBEDTLS_MODE_NONE</ref>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(cipher_info)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8a4a44bef531861d3e54416b95607e7ebe" kindref="member">MBEDTLS_MODE_NONE</ref>;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="cipher_8h_1adf5f7524a682fa63093dd0fa608fb2f8" kindref="member">mbedtls_cipher_mode_t</ref>)<sp/>ctx-&gt;MBEDTLS_PRIVATE(cipher_info)-&gt;MBEDTLS_PRIVATE(mode);</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="cipher_8h_1a95179cd977261724298e9bca67a0fcc0" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a95179cd977261724298e9bca67a0fcc0" kindref="member">mbedtls_cipher_get_iv_size</ref>(</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" kindref="member">MBEDTLS_INTERNAL_VALIDATE_RET</ref>(ctx<sp/>!=<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(cipher_info)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(iv_size)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ctx-&gt;MBEDTLS_PRIVATE(iv_size);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((int)<sp/>ctx-&gt;MBEDTLS_PRIVATE(cipher_info)-&gt;MBEDTLS_PRIVATE(iv_size))<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a068a06a17500ba4e632ff2062d397c89" kindref="member">MBEDTLS_IV_SIZE_SHIFT</ref>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="743" refid="cipher_8h_1aa11f687dee08d37b0a9835497b6c94f2" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref><sp/><ref refid="cipher_8h_1aa11f687dee08d37b0a9835497b6c94f2" kindref="member">mbedtls_cipher_get_type</ref>(</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" kindref="member">MBEDTLS_INTERNAL_VALIDATE_RET</ref>(</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx<sp/>!=<sp/>NULL,<sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" kindref="member">MBEDTLS_CIPHER_NONE</ref>);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(cipher_info)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569da9551142e177841a57cf75cd357791fea" kindref="member">MBEDTLS_CIPHER_NONE</ref>;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="cipher_8h_1a00c5885f1ea7279c5a7d8e12e596569d" kindref="member">mbedtls_cipher_type_t</ref>)<sp/>ctx-&gt;MBEDTLS_PRIVATE(cipher_info)-&gt;MBEDTLS_PRIVATE(type);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="cipher_8h_1abf1d75d9cb96ed87ab580313f5d0eeda" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="cipher_8h_1abf1d75d9cb96ed87ab580313f5d0eeda" kindref="member">mbedtls_cipher_get_name</ref>(</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" kindref="member">MBEDTLS_INTERNAL_VALIDATE_RET</ref>(ctx<sp/>!=<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(cipher_info)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;MBEDTLS_PRIVATE(cipher_info)-&gt;MBEDTLS_PRIVATE(name);</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="cipher_8h_1a6f6abbb7eadc970085c6ab41145e4812" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a6f6abbb7eadc970085c6ab41145e4812" kindref="member">mbedtls_cipher_get_key_bitlen</ref>(</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" kindref="member">MBEDTLS_INTERNAL_VALIDATE_RET</ref>(</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx<sp/>!=<sp/>NULL,<sp/><ref refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba27a227b285707a038e87cee36a8d1a65" kindref="member">MBEDTLS_KEY_LENGTH_NONE</ref>);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(cipher_info)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a06fc87d81c62e9abb8790b6e5713c55ba27a227b285707a038e87cee36a8d1a65" kindref="member">MBEDTLS_KEY_LENGTH_NONE</ref>;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ctx-&gt;MBEDTLS_PRIVATE(cipher_info)-&gt;MBEDTLS_PRIVATE(key_bitlen)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a0eb50dbc1df3105a1e4e9dcba9586fc5" kindref="member">MBEDTLS_KEY_BITLEN_SHIFT</ref>;</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="cipher_8h_1a8a9f67bc0f62ae159eecfbe33512e17d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" kindref="member">mbedtls_operation_t</ref><sp/><ref refid="cipher_8h_1a8a9f67bc0f62ae159eecfbe33512e17d" kindref="member">mbedtls_cipher_get_operation</ref>(</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__util_8h_1a66dcaea7470b3b6685814e04b58d704c" kindref="member">MBEDTLS_INTERNAL_VALIDATE_RET</ref>(</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx<sp/>!=<sp/>NULL,<sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa3e5a23a347d62ec3075f547516b0e2b3" kindref="member">MBEDTLS_OPERATION_NONE</ref>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;MBEDTLS_PRIVATE(cipher_info)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3fa3e5a23a347d62ec3075f547516b0e2b3" kindref="member">MBEDTLS_OPERATION_NONE</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;MBEDTLS_PRIVATE(operation);</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a027be8bf469069be17d82c4899b3df5f" kindref="member">mbedtls_cipher_setkey</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key_bitlen,</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1aaa5f820a58011f938ba3389555ba5b3f" kindref="member">mbedtls_operation_t</ref><sp/>operation);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1afad97d1964a7a98d82488fecd052130f" kindref="member">mbedtls_cipher_set_padding_mode</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cipher_8h_1a5b57bc07ab7c430e9b4f29f3a5729837" kindref="member">mbedtls_cipher_padding_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_WITH_PADDING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a570ef5913117fbb2592f75d0d834b51c" kindref="member">mbedtls_cipher_set_iv</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv_len);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a22b60318022c1947d9893721bc911335" kindref="member">mbedtls_cipher_reset</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_GCM_C)<sp/>||<sp/>defined(MBEDTLS_CHACHAPOLY_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a86bc4ed42ff087c33bb00fe31b049ae7" kindref="member">mbedtls_cipher_update_ad</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ad_len);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_GCM_C<sp/>||<sp/>MBEDTLS_CHACHAPOLY_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a959598dfef9d7f2add8861e0c518f303" kindref="member">mbedtls_cipher_update</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a6678691c02cb3f1322b2179987bfffb2" kindref="member">mbedtls_cipher_finish</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_GCM_C)<sp/>||<sp/>defined(MBEDTLS_CHACHAPOLY_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a8916ddd18e94002913b80a6b04b83693" kindref="member">mbedtls_cipher_write_tag</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tag_len);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1ad3388eaa42a44db6a0b0339dd49f15ba" kindref="member">mbedtls_cipher_check_tag</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tag,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tag_len);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_GCM_C<sp/>||<sp/>MBEDTLS_CHACHAPOLY_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a1c249f6ee1a0d2c906927c7790c41dc5" kindref="member">mbedtls_cipher_crypt</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv_len,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_CIPHER_MODE_AEAD)<sp/>||<sp/>defined(MBEDTLS_NIST_KW_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a64ea7a5500f054d1d60a22369d171eea" kindref="member">mbedtls_cipher_auth_encrypt_ext</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv_len,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ad_len,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_len,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tag_len);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cipher_8h_1a2709f8b3e81f9b67c240a053c705aa86" kindref="member">mbedtls_cipher_auth_decrypt_ext</ref>(<ref refid="structmbedtls__cipher__context__t" kindref="compound">mbedtls_cipher_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iv,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv_len,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ad_len,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_len,</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tag_len);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_MODE_AEAD<sp/>||<sp/>MBEDTLS_NIST_KW_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CIPHER_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/cipher.h"/>
  </compounddef>
</doxygen>
