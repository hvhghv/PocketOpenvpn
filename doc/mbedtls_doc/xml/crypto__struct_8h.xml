<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="crypto__struct_8h" kind="file" language="C++">
    <compoundname>crypto_struct.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="crypto__driver__contexts__primitives_8h" local="yes">psa/crypto_driver_contexts_primitives.h</includes>
    <includes refid="crypto__driver__contexts__composites_8h" local="yes">psa/crypto_driver_contexts_composites.h</includes>
    <includes refid="crypto__driver__contexts__key__derivation_8h" local="yes">psa/crypto_driver_contexts_key_derivation.h</includes>
    <includedby refid="crypto_8h" local="yes">crypto.h</includedby>
    <incdepgraph>
      <node id="32">
        <label>mbedtls/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>mbedtls/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="41">
        <label>psa/crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>mbedtls/ecp.h</label>
        <link refid="ecp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="37">
        <label>mbedtls/platform_time.h</label>
        <link refid="platform__time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="23">
        <label>crypto_types.h</label>
        <link refid="crypto__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>mbedtls/bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>mbedtls/gcm.h</label>
        <link refid="gcm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>mbedtls/platform_util.h</label>
        <link refid="platform__util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>mbedtls/sha512.h</label>
        <link refid="sha512_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>stddef.h</label>
      </node>
      <node id="29">
        <label>mbedtls/md5.h</label>
        <link refid="md5_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>mbedtls/sha3.h</label>
        <link refid="sha3_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>mbedtls/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>psa/crypto_builtin_primitives.h</label>
        <link refid="crypto__builtin__primitives_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>psa/crypto_driver_contexts_key_derivation.h</label>
        <link refid="crypto__driver__contexts__key__derivation_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>mbedtls/ccm.h</label>
        <link refid="ccm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>crypto_values.h</label>
        <link refid="crypto__values_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>psa/crypto_driver_contexts_primitives.h</label>
        <link refid="crypto__driver__contexts__primitives_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="24">
        <label>crypto_platform.h</label>
        <link refid="crypto__platform_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>psa/crypto_sizes.h</label>
        <link refid="crypto__sizes_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>mbedtls/poly1305.h</label>
        <link refid="poly1305_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>mbedtls/ecjpake.h</label>
        <link refid="ecjpake_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>psa/crypto_driver_common.h</label>
        <link refid="crypto__driver__common_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="38">
        <label>time.h</label>
      </node>
      <node id="40">
        <label>psa/crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="25">
        <label>psa/build_info.h</label>
        <link refid="psa_2build__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>mbedtls/cmac.h</label>
        <link refid="cmac_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>psa/crypto_builtin_key_derivation.h</label>
        <link refid="crypto__builtin__key__derivation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>mbedtls/cipher.h</label>
        <link refid="cipher_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>mbedtls/md.h</label>
        <link refid="md_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>mbedtls/chachapoly.h</label>
        <link refid="chachapoly_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="47">
        <label>mbedtls/chacha20.h</label>
        <link refid="chacha20_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>stdio.h</label>
      </node>
      <node id="31">
        <label>mbedtls/sha1.h</label>
        <link refid="sha1_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="15">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="9">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="2">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="1">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="3">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="16">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="7">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="14">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpsa__hash__operation__s" prot="public">psa_hash_operation_s</innerclass>
    <innerclass refid="structpsa__cipher__operation__s" prot="public">psa_cipher_operation_s</innerclass>
    <innerclass refid="structpsa__mac__operation__s" prot="public">psa_mac_operation_s</innerclass>
    <innerclass refid="structpsa__aead__operation__s" prot="public">psa_aead_operation_s</innerclass>
    <innerclass refid="structpsa__key__derivation__s" prot="public">psa_key_derivation_s</innerclass>
    <innerclass refid="structpsa__key__policy__s" prot="public">psa_key_policy_s</innerclass>
    <innerclass refid="structpsa__core__key__attributes__t" prot="public">psa_core_key_attributes_t</innerclass>
    <innerclass refid="structpsa__key__attributes__s" prot="public">psa_key_attributes_s</innerclass>
    <innerclass refid="structpsa__sign__hash__interruptible__operation__s" prot="public">psa_sign_hash_interruptible_operation_s</innerclass>
    <innerclass refid="structpsa__verify__hash__interruptible__operation__s" prot="public">psa_verify_hash_interruptible_operation_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__hash_1ga6ab7fe8d3500bc2f21be840b4f4f8d1d" prot="public" static="no">
        <name>PSA_HASH_OPERATION_INIT</name>
        <initializer>{ 0, { 0 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for a hash operation object of type <ref refid="group__hash_1ga3c4205d2ce66c4095fc5c78c25273fab" kindref="member">psa_hash_operation_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="76" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__cipher_1ga2da0541aabf9a4995cf2004e36311919" prot="public" static="no">
        <name>PSA_CIPHER_OPERATION_INIT</name>
        <initializer>{ 0, 0, 0, 0, { 0 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for a cipher operation object of type <ref refid="group__cipher_1ga1399de29db657e3737bb09927aae51fa" kindref="member">psa_cipher_operation_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="100" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___m_a_c_1ga441b6efc161a4573d06465bd22d9dc2d" prot="public" static="no">
        <name>PSA_MAC_OPERATION_INIT</name>
        <initializer>{ 0, 0, 0, { 0 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for a MAC operation object of type <ref refid="group___m_a_c_1ga78f0838b0c4e3db28b26355624d4bd37" kindref="member">psa_mac_operation_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="124" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" prot="public" static="no">
        <name>PSA_AEAD_OPERATION_INIT</name>
        <initializer>{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, { 0 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for an AEAD operation object of type <ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="156" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__derivation_1ga5bdec40d201551558579a635520ae85d" prot="public" static="no">
        <name>PSA_KEY_DERIVATION_OPERATION_INIT</name>
        <initializer>{ 0, 0, 0, { 0 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for a key derivation operation object of type <ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="175" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1a5e6bc5f550e88fdc7790f2a75e79f7c5" prot="public" static="no">
        <name>PSA_KEY_POLICY_INIT</name>
        <initializer>{ 0, 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="190" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1a04b358641be4a6ce59f2df88014147c2" prot="public" static="no">
        <name>PSA_KEY_BITS_TOO_LARGE</name>
        <initializer>((<ref refid="crypto__struct_8h_1a57270c808928ab5d7c9cfc7cb1e5735d" kindref="member">psa_key_bits_t</ref>) -1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="202" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1a97e0e760dc2c9bd201fcc595ce06da1b" prot="public" static="no">
        <name>PSA_MAX_KEY_BITS</name>
        <initializer>0xfff8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="208" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1a18305949e05a5e48b26743bb92f50760" prot="public" static="no">
        <name>MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER</name>
        <initializer>((<ref refid="crypto__struct_8h_1a71ff48e6c5d3dd77cc1e4c89d105106b" kindref="member">psa_key_attributes_flag_t</ref>) 0x0001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="219" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1af04a649011b2fdcc0ef8b6117c376e7b" prot="public" static="no">
        <name>MBEDTLS_PSA_KA_MASK_EXTERNAL_ONLY</name>
        <initializer>        (      \
        <ref refid="crypto__struct_8h_1a18305949e05a5e48b26743bb92f50760" kindref="member">MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER</ref> |    \
        0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="224" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1a52b85c63e913e170d80475ea1f8c894d" prot="public" static="no">
        <name>MBEDTLS_PSA_KA_MASK_DUAL_USE</name>
        <initializer>        (          \
        0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="230" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1a8cfdd4f538e9ba46b4273f5fd990a87f" prot="public" static="no">
        <name>PSA_CORE_KEY_ATTRIBUTES_INIT</name>
        <initializer>                                       { <ref refid="group__crypto__types_1gafce7ab2b54ce97ea5bff73f13a9f3e5b" kindref="member">PSA_KEY_TYPE_NONE</ref>, 0,            \
                                       <ref refid="group__key__lifetimes_1ga8b438870ba69489b685730d346455108" kindref="member">PSA_KEY_LIFETIME_VOLATILE</ref>,       \
                                       <ref refid="group__key__lifetimes_1ga838f2dc64e670aa69fc4c0b82932f021" kindref="member">MBEDTLS_SVC_KEY_ID_INIT</ref>,         \
                                       <ref refid="crypto__struct_8h_1a5e6bc5f550e88fdc7790f2a75e79f7c5" kindref="member">PSA_KEY_POLICY_INIT</ref>, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="242" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1gac45b6c1e7228a1f425338279ee679c4e" prot="public" static="no">
        <name>PSA_KEY_ATTRIBUTES_INIT</name>
        <initializer>{ <ref refid="crypto__struct_8h_1a8cfdd4f538e9ba46b4273f5fd990a87f" kindref="member">PSA_CORE_KEY_ATTRIBUTES_INIT</ref>, 0, NULL, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for a key attribute structure of type <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="257" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1ae8d7c502f24f810c3abad377daa8b051" prot="public" static="no">
        <name>PSA_SIGN_HASH_INTERRUPTIBLE_OPERATION_INIT</name>
        <initializer>{ 0, { 0 }, 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="415" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__struct_8h_1aed5b04a316ca690bd97f5ea0d2b905b9" prot="public" static="no">
        <name>PSA_VERIFY_HASH_INTERRUPTIBLE_OPERATION_INIT</name>
        <initializer>{ 0, { 0 }, 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="445" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="crypto__struct_8h_1af553efd409845b6d09ff25ce2ba36607" prot="public" static="no">
        <type>struct <ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_s</ref></type>
        <definition>typedef struct psa_key_policy_s psa_key_policy_t</definition>
        <argsstring></argsstring>
        <name>psa_key_policy_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto__struct_8h_1a57270c808928ab5d7c9cfc7cb1e5735d" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t psa_key_bits_t</definition>
        <argsstring></argsstring>
        <name>psa_key_bits_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="199" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto__struct_8h_1a71ff48e6c5d3dd77cc1e4c89d105106b" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t psa_key_attributes_flag_t</definition>
        <argsstring></argsstring>
        <name>psa_key_attributes_flag_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A mask of flags that can be stored in key attributes.</para>
<para>This type is also used internally to store flags in slots. Internal flags are defined in library/psa_crypto_core.h. Internal flags may have the same value as external flags if they are properly handled during key creation and in psa_get_key_attributes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="217" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="crypto__struct_8h_1ac74804b4466452143112398ec3c7ee6a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__hash__operation__s" kindref="compound">psa_hash_operation_s</ref></type>
        <definition>static struct psa_hash_operation_s psa_hash_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_hash_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="77" bodyend="81"/>
        <references refid="group__hash_1ga6ab7fe8d3500bc2f21be840b4f4f8d1d" compoundref="crypto__struct_8h" startline="76">PSA_HASH_OPERATION_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a75d990a3e181f887a018b74e0bc60e7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__cipher__operation__s" kindref="compound">psa_cipher_operation_s</ref></type>
        <definition>static struct psa_cipher_operation_s psa_cipher_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_cipher_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="101" bodyend="105"/>
        <references refid="group__cipher_1ga2da0541aabf9a4995cf2004e36311919" compoundref="crypto__struct_8h" startline="100">PSA_CIPHER_OPERATION_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1abfcded7bb17c25237ecd02235f8767cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__mac__operation__s" kindref="compound">psa_mac_operation_s</ref></type>
        <definition>static struct psa_mac_operation_s psa_mac_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_mac_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="125" bodyend="129"/>
        <references refid="group___m_a_c_1ga441b6efc161a4573d06465bd22d9dc2d" compoundref="crypto__struct_8h" startline="124">PSA_MAC_OPERATION_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a54f6cb8381bd41e9039a261ed85ae074" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__aead__operation__s" kindref="compound">psa_aead_operation_s</ref></type>
        <definition>static struct psa_aead_operation_s psa_aead_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_aead_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="157" bodyend="161"/>
        <references refid="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" compoundref="crypto__struct_8h" startline="156">PSA_AEAD_OPERATION_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a7f9b4b80cc1509da5f4e366d1b023870" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__key__derivation__s" kindref="compound">psa_key_derivation_s</ref></type>
        <definition>static struct psa_key_derivation_s psa_key_derivation_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_key_derivation_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="176" bodyend="181"/>
        <references refid="group__key__derivation_1ga5bdec40d201551558579a635520ae85d" compoundref="crypto__struct_8h" startline="175">PSA_KEY_DERIVATION_OPERATION_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1afe572489f4e3c6adf0e84af5ae5200e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_s</ref></type>
        <definition>static struct psa_key_policy_s psa_key_policy_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_key_policy_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="191" bodyend="195"/>
        <references refid="crypto__struct_8h_1a5e6bc5f550e88fdc7790f2a75e79f7c5" compoundref="crypto__struct_8h" startline="190">PSA_KEY_POLICY_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a68f3f03c6a5d98812ddd2d6d9212ee5a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_s</ref></type>
        <definition>static struct psa_key_attributes_s psa_key_attributes_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_key_attributes_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="217" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="262" bodyend="266"/>
        <references refid="group__attributes_1gac45b6c1e7228a1f425338279ee679c4e" compoundref="crypto__struct_8h" startline="257">PSA_KEY_ATTRIBUTES_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1ae48fcfdc72a23e7499957d7f54ff5a64" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_id</definition>
        <argsstring>(psa_key_attributes_t *attributes, mbedtls_svc_key_id_t key)</argsstring>
        <name>psa_set_key_id</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="268" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="268" bodyend="281"/>
        <references refid="group__key__lifetimes_1gaef4d244b4d33ae7876ed87226b8112aa" compoundref="crypto__values_8h" startline="2371">PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION</references>
        <references refid="group__key__lifetimes_1ga4bd83feb0ca4853eee26d5394e69a5de" compoundref="crypto__values_8h" startline="2318">PSA_KEY_LIFETIME_GET_LOCATION</references>
        <references refid="group__key__lifetimes_1ga63d63adbfc947cab4dee4f4b39e840a1" compoundref="crypto__values_8h" startline="2337">PSA_KEY_LIFETIME_IS_VOLATILE</references>
        <references refid="group__key__lifetimes_1ga3713a01c5fcd5f7eae46ff22ceaf6d02" compoundref="crypto__values_8h" startline="2295">PSA_KEY_LIFETIME_PERSISTENT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1afd8a339ef75f9ec0f72c97edfc99a2a4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
        <definition>static mbedtls_svc_key_id_t psa_get_key_id</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>psa_get_key_id</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="283" column="36" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1ac03ccf09ca6d36cc3d5b43f8303db6f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_lifetime</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_key_lifetime_t lifetime)</argsstring>
        <name>psa_set_key_lifetime</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref></type>
          <declname>lifetime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="297" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="297" bodyend="308"/>
        <references refid="group__key__lifetimes_1ga63d63adbfc947cab4dee4f4b39e840a1" compoundref="crypto__values_8h" startline="2337">PSA_KEY_LIFETIME_IS_VOLATILE</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a9ea8eae1b81e480cc56dec858859aff9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref></type>
        <definition>static psa_key_lifetime_t psa_get_key_lifetime</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>psa_get_key_lifetime</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="310" column="34" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="310" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1ab1d132120773a313a54141473a7ccaec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_extend_key_usage_flags</definition>
        <argsstring>(psa_key_usage_t *usage_flags)</argsstring>
        <name>psa_extend_key_usage_flags</name>
        <param>
          <type><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref> *</type>
          <declname>usage_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="316" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="316" bodyend="325"/>
        <references refid="group__policy_1ga181c73e00d9e95aa3a8366f26c4380b6" compoundref="crypto__values_8h" startline="2587">PSA_KEY_USAGE_SIGN_HASH</references>
        <references refid="group__policy_1ga552117ac92b79500cae87d4e65a85c54" compoundref="crypto__values_8h" startline="2567">PSA_KEY_USAGE_SIGN_MESSAGE</references>
        <references refid="group__policy_1gafadf131ef2182045e3483d03aadaa1bd" compoundref="crypto__values_8h" startline="2597">PSA_KEY_USAGE_VERIFY_HASH</references>
        <references refid="group__policy_1gabea7ec4173f4f943110329ac2953b2b1" compoundref="crypto__values_8h" startline="2577">PSA_KEY_USAGE_VERIFY_MESSAGE</references>
        <referencedby refid="crypto__struct_8h_1a42a65b3c4522ce9b67ea5ea7720e17de" compoundref="crypto__struct_8h" startline="327" endline="332">psa_set_key_usage_flags</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a42a65b3c4522ce9b67ea5ea7720e17de" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_usage_flags</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_key_usage_t usage_flags)</argsstring>
        <name>psa_set_key_usage_flags</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref></type>
          <declname>usage_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="327" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="327" bodyend="332"/>
        <references refid="crypto__struct_8h_1ab1d132120773a313a54141473a7ccaec" compoundref="crypto__struct_8h" startline="316" endline="325">psa_extend_key_usage_flags</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1aa1af20f142ca722222c6d98678a0c448" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref></type>
        <definition>static psa_key_usage_t psa_get_key_usage_flags</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>psa_get_key_usage_flags</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="334" column="31" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="334" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1aeb8341ca52baa0279475ea3fd3bcdc98" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_algorithm</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_algorithm_t alg)</argsstring>
        <name>psa_set_key_algorithm</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="340" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="340" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1ac255da850a00bbed925390044f016b34" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
        <definition>static psa_algorithm_t psa_get_key_algorithm</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>psa_get_key_algorithm</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="346" column="31" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a8909d3f2ee48121ea0dff198276bdd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_set_key_domain_parameters</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_key_type_t type, const uint8_t *data, size_t data_length)</argsstring>
        <name>psa_set_key_domain_parameters</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="354" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" declline="354" declcolumn="14"/>
        <referencedby refid="crypto__struct_8h_1a6857ef0ecb3fa844d4536939d9c64025" compoundref="crypto__struct_8h" startline="359" endline="372">psa_set_key_type</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a6857ef0ecb3fa844d4536939d9c64025" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_type</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_key_type_t type)</argsstring>
        <name>psa_set_key_type</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="359" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="359" bodyend="372"/>
        <references refid="crypto__struct_8h_1a8909d3f2ee48121ea0dff198276bdd38">psa_set_key_domain_parameters</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1ae4fb812af4f57aa1ad85e335a865b918" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref></type>
        <definition>static psa_key_type_t psa_get_key_type</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>psa_get_key_type</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="374" column="30" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="374" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1af61683ac87f87687a40262b5afbfa018" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_bits</definition>
        <argsstring>(psa_key_attributes_t *attributes, size_t bits)</argsstring>
        <name>psa_set_key_bits</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="380" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="380" bodyend="388"/>
        <references refid="crypto__struct_8h_1a04b358641be4a6ce59f2df88014147c2" compoundref="crypto__struct_8h" startline="202">PSA_KEY_BITS_TOO_LARGE</references>
        <references refid="crypto__struct_8h_1a97e0e760dc2c9bd201fcc595ce06da1b" compoundref="crypto__struct_8h" startline="208">PSA_MAX_KEY_BITS</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a5bee85c2164ad3d4c0d42501241eeb06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t psa_get_key_bits</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>psa_get_key_bits</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="390" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="390" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a12166ea6ade6825a053b698ed510ef33" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__sign__hash__interruptible__operation__s" kindref="compound">psa_sign_hash_interruptible_operation_s</ref></type>
        <definition>static struct psa_sign_hash_interruptible_operation_s psa_sign_hash_interruptible_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_sign_hash_interruptible_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="390" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="418" bodyend="424"/>
        <references refid="crypto__struct_8h_1ae8d7c502f24f810c3abad377daa8b051" compoundref="crypto__struct_8h" startline="415">PSA_SIGN_HASH_INTERRUPTIBLE_OPERATION_INIT</references>
      </memberdef>
      <memberdef kind="function" id="crypto__struct_8h_1a570efe3897a9133ffa0373b9984d076c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="structpsa__verify__hash__interruptible__operation__s" kindref="compound">psa_verify_hash_interruptible_operation_s</ref></type>
        <definition>static struct psa_verify_hash_interruptible_operation_s psa_verify_hash_interruptible_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_verify_hash_interruptible_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="390" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="448" bodyend="454"/>
        <references refid="crypto__struct_8h_1aed5b04a316ca690bd97f5ea0d2b905b9" compoundref="crypto__struct_8h" startline="445">PSA_VERIFY_HASH_INTERRUPTIBLE_OPERATION_INIT</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PSA cryptography module: Mbed TLS structured type implementations. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This file may not be included directly. Applications must include <ref refid="crypto_8h" kindref="compound">psa/crypto.h</ref>.</para>
</simplesect>
This file contains the definitions of some data structures with implementation-specific definitions.</para>
<para>In implementations with isolation between the application and the cryptography module, it is expected that the front-end and the back-end would have different versions of this file.</para>
<para><heading level="3">Design notes about multipart operation structures</heading>
</para>
<para>For multipart operations without driver delegation support, each multipart operation structure contains a <computeroutput>psa_algorithm_t alg</computeroutput> field which indicates which specific algorithm the structure is for. When the structure is not in use, <computeroutput>alg</computeroutput> is 0. Most of the structure consists of a union which is discriminated by <computeroutput>alg</computeroutput>.</para>
<para>For multipart operations with driver delegation support, each multipart operation structure contains an <computeroutput>unsigned int id</computeroutput> field indicating which driver got assigned to do the operation. When the structure is not in use, &apos;id&apos; is 0. The structure contains also a driver context which is the union of the contexts of all drivers able to handle the type of multipart operation.</para>
<para>Note that when <computeroutput>alg</computeroutput> or <computeroutput>id</computeroutput> is 0, the content of other fields is undefined. In particular, it is not guaranteed that a freshly-initialized structure is all-zero: we initialize structures to something like <computeroutput>{0, 0}</computeroutput>, which is only guaranteed to initializes the first member of the union; GCC and Clang initialize the whole structure to 0 (at the time of writing), but MSVC and CompCert don&apos;t.</para>
<para>In Mbed TLS, multipart operation structures live independently from the key. This allows Mbed TLS to free the key objects when destroying a key slot. If a multipart operation needs to remember the key after the setup function returns, the operation structure needs to contain a copy of the key. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="44"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PSA_CRYPTO_STRUCT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_CRYPTO_STRUCT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Include<sp/>the<sp/>Mbed<sp/>TLS<sp/>configuration<sp/>file,<sp/>the<sp/>way<sp/>Mbed<sp/>TLS<sp/>does<sp/>it</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>in<sp/>each<sp/>of<sp/>its<sp/>header<sp/>files.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Include<sp/>the<sp/>context<sp/>definition<sp/>for<sp/>the<sp/>compiled-in<sp/>drivers<sp/>for<sp/>the<sp/>primitive</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto__driver__contexts__primitives_8h" kindref="compound">psa/crypto_driver_contexts_primitives.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structpsa__hash__operation__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__hash__operation__s" kindref="compound">psa_hash_operation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="72" refid="structpsa__hash__operation__s_1a11be52db82590102fe798bdb71374abe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73" refid="structpsa__hash__operation__s_1a0e3da9e698709296cefa5068537cc1d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__hash__context__t" kindref="compound">psa_driver_hash_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__hash_1ga6ab7fe8d3500bc2f21be840b4f4f8d1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HASH_OPERATION_INIT<sp/>{<sp/>0,<sp/>{<sp/>0<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="crypto__struct_8h_1ac74804b4466452143112398ec3c7ee6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__hash__operation__s" kindref="compound">psa_hash_operation_s</ref><sp/><ref refid="crypto__struct_8h_1ac74804b4466452143112398ec3c7ee6a" kindref="member">psa_hash_operation_init</ref>(void)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__hash__operation__s" kindref="compound">psa_hash_operation_s</ref><sp/>v<sp/>=<sp/><ref refid="group__hash_1ga6ab7fe8d3500bc2f21be840b4f4f8d1d" kindref="member">PSA_HASH_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structpsa__cipher__operation__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__cipher__operation__s" kindref="compound">psa_cipher_operation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="90" refid="structpsa__cipher__operation__s_1a69a2c8025c424664c2988ab686eadf4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structpsa__cipher__operation__s_1a21e32b597833afd9641b30dbc7f82f28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(iv_required)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="93" refid="structpsa__cipher__operation__s_1a0a52aa75b5416279f75dad35d8e375ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(iv_set)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structpsa__cipher__operation__s_1aa266f52944cec0feba2131507e6fae9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(default_iv_length);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="structpsa__cipher__operation__s_1a8f2ab066db9cc77a0a607e7507ee1f11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__cipher__context__t" kindref="compound">psa_driver_cipher_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="group__cipher_1ga2da0541aabf9a4995cf2004e36311919" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_CIPHER_OPERATION_INIT<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>{<sp/>0<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="crypto__struct_8h_1a75d990a3e181f887a018b74e0bc60e7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__cipher__operation__s" kindref="compound">psa_cipher_operation_s</ref><sp/><ref refid="crypto__struct_8h_1a75d990a3e181f887a018b74e0bc60e7b" kindref="member">psa_cipher_operation_init</ref>(void)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__cipher__operation__s" kindref="compound">psa_cipher_operation_s</ref><sp/>v<sp/>=<sp/><ref refid="group__cipher_1ga2da0541aabf9a4995cf2004e36311919" kindref="member">PSA_CIPHER_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Include<sp/>the<sp/>context<sp/>definition<sp/>for<sp/>the<sp/>compiled-in<sp/>drivers<sp/>for<sp/>the<sp/>composite</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto__driver__contexts__composites_8h" kindref="compound">psa/crypto_driver_contexts_composites.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="structpsa__mac__operation__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__mac__operation__s" kindref="compound">psa_mac_operation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="118" refid="structpsa__mac__operation__s_1a4a62a90a9064bf16663c8fcaa8134bcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119" refid="structpsa__mac__operation__s_1ae89babec2d2750b819de7784d22dd8d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mac_size);</highlight></codeline>
<codeline lineno="120" refid="structpsa__mac__operation__s_1a6274a0a32a1bc6db9c4ca5978e48dfae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(is_sign)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="121" refid="structpsa__mac__operation__s_1a1c2a236099f8578ddd1df3f875e32739" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__mac__context__t" kindref="compound">psa_driver_mac_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="group___m_a_c_1ga441b6efc161a4573d06465bd22d9dc2d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_MAC_OPERATION_INIT<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>{<sp/>0<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="crypto__struct_8h_1abfcded7bb17c25237ecd02235f8767cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__mac__operation__s" kindref="compound">psa_mac_operation_s</ref><sp/><ref refid="crypto__struct_8h_1abfcded7bb17c25237ecd02235f8767cd" kindref="member">psa_mac_operation_init</ref>(void)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__mac__operation__s" kindref="compound">psa_mac_operation_s</ref><sp/>v<sp/>=<sp/><ref refid="group___m_a_c_1ga441b6efc161a4573d06465bd22d9dc2d" kindref="member">PSA_MAC_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structpsa__aead__operation__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__aead__operation__s" kindref="compound">psa_aead_operation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="structpsa__aead__operation__s_1aa8da3959b889cc50c7f4872d46ae6a4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="structpsa__aead__operation__s_1ae956c9e5b8fac543f855277e514717b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alg);</highlight></codeline>
<codeline lineno="142" refid="structpsa__aead__operation__s_1a1cf17d56ccb8208ae260e465d2b84809" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(key_type);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structpsa__aead__operation__s_1a96ad4b6083637192f2021524ca8f04c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ad_remaining);</highlight></codeline>
<codeline lineno="145" refid="structpsa__aead__operation__s_1a206ff8d7c5445cf3e3e8a2b284a7aead" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(body_remaining);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="structpsa__aead__operation__s_1af0058834ac39b45c332bd29b788b7e76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(nonce_set)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="148" refid="structpsa__aead__operation__s_1a0c3b7d40685f7c24416678bf343b361f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(lengths_set)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="149" refid="structpsa__aead__operation__s_1abb0a23a711386a7e3eaf9a0b240e9233" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ad_started)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="150" refid="structpsa__aead__operation__s_1a7f31b42ad9697696721e661389deb478" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(body_started)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="151" refid="structpsa__aead__operation__s_1a1aadf0a08a0be4511ba857711e459832" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(is_encrypt)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structpsa__aead__operation__s_1a7486c941fd760ecf453bf28e9d4919d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__aead__context__t" kindref="compound">psa_driver_aead_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_AEAD_OPERATION_INIT<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>{<sp/>0<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="crypto__struct_8h_1a54f6cb8381bd41e9039a261ed85ae074" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__aead__operation__s" kindref="compound">psa_aead_operation_s</ref><sp/><ref refid="crypto__struct_8h_1a54f6cb8381bd41e9039a261ed85ae074" kindref="member">psa_aead_operation_init</ref>(void)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__aead__operation__s" kindref="compound">psa_aead_operation_s</ref><sp/>v<sp/>=<sp/><ref refid="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" kindref="member">PSA_AEAD_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Include<sp/>the<sp/>context<sp/>definition<sp/>for<sp/>the<sp/>compiled-in<sp/>drivers<sp/>for<sp/>the<sp/>key</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>derivation<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto__driver__contexts__key__derivation_8h" kindref="compound">psa/crypto_driver_contexts_key_derivation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structpsa__key__derivation__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__derivation__s" kindref="compound">psa_key_derivation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="168" refid="structpsa__key__derivation__s_1ad4e5495469b5d5ce0c1d8c550726adfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alg);</highlight></codeline>
<codeline lineno="169" refid="structpsa__key__derivation__s_1afaf7039b22a5c605908cb7d1a6f5ba00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(can_output_key)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="170" refid="structpsa__key__derivation__s_1a07d76b2f9f634400516aac3d7f79b1f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(capacity);</highlight></codeline>
<codeline lineno="171" refid="structpsa__key__derivation__s_1a02fcc977730fe8f8b08a8242e48ce77b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__key__derivation__context__t" kindref="compound">psa_driver_key_derivation_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>only<sp/>zeroes<sp/>out<sp/>the<sp/>first<sp/>byte<sp/>in<sp/>the<sp/>union,<sp/>the<sp/>rest<sp/>is<sp/>unspecified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="group__key__derivation_1ga5bdec40d201551558579a635520ae85d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_DERIVATION_OPERATION_INIT<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>{<sp/>0<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="crypto__struct_8h_1a7f9b4b80cc1509da5f4e366d1b023870" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__derivation__s" kindref="compound">psa_key_derivation_s</ref><sp/><ref refid="crypto__struct_8h_1a7f9b4b80cc1509da5f4e366d1b023870" kindref="member">psa_key_derivation_operation_init</ref>(</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>void)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__derivation__s" kindref="compound">psa_key_derivation_s</ref><sp/>v<sp/>=<sp/><ref refid="group__key__derivation_1ga5bdec40d201551558579a635520ae85d" kindref="member">PSA_KEY_DERIVATION_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="structpsa__key__policy__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_s</ref><sp/>{</highlight></codeline>
<codeline lineno="184" refid="structpsa__key__policy__s_1a34289b62bdbfe8cda71ee9808d52a696" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(usage);</highlight></codeline>
<codeline lineno="185" refid="structpsa__key__policy__s_1a59ae7fcc32fb141c58a0b162f9029ba5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alg);</highlight></codeline>
<codeline lineno="186" refid="structpsa__key__policy__s_1a29f3980b2c64c08647701a132baad5fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alg2);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">};</highlight></codeline>
<codeline lineno="188" refid="crypto__struct_8h_1af553efd409845b6d09ff25ce2ba36607" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_s</ref><sp/><ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_t</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="crypto__struct_8h_1a5e6bc5f550e88fdc7790f2a75e79f7c5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_POLICY_INIT<sp/>{<sp/>0,<sp/>0,<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="crypto__struct_8h_1afe572489f4e3c6adf0e84af5ae5200e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_s</ref><sp/><ref refid="crypto__struct_8h_1afe572489f4e3c6adf0e84af5ae5200e7" kindref="member">psa_key_policy_init</ref>(void)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_s</ref><sp/>v<sp/>=<sp/><ref refid="crypto__struct_8h_1a5e6bc5f550e88fdc7790f2a75e79f7c5" kindref="member">PSA_KEY_POLICY_INIT</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>type<sp/>used<sp/>internally<sp/>for<sp/>key<sp/>sizes.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>Public<sp/>interfaces<sp/>use<sp/>size_t,<sp/>but<sp/>internally<sp/>we<sp/>use<sp/>a<sp/>smaller<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="crypto__struct_8h_1a57270c808928ab5d7c9cfc7cb1e5735d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="crypto__struct_8h_1a57270c808928ab5d7c9cfc7cb1e5735d" kindref="member">psa_key_bits_t</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>value<sp/>of<sp/>the<sp/>type<sp/>used<sp/>to<sp/>represent<sp/>bit-sizes.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>used<sp/>to<sp/>mark<sp/>an<sp/>invalid<sp/>key<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="crypto__struct_8h_1a04b358641be4a6ce59f2df88014147c2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_BITS_TOO_LARGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_key_bits_t)<sp/>-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>size<sp/>of<sp/>a<sp/>key<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>Currently<sp/>defined<sp/>as<sp/>the<sp/>maximum<sp/>that<sp/>can<sp/>be<sp/>represented,<sp/>rounded<sp/>down</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>to<sp/>a<sp/>whole<sp/>number<sp/>of<sp/>bytes.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>an<sp/>uncast<sp/>value<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/>used<sp/>in<sp/>preprocessor</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>conditionals.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="crypto__struct_8h_1a97e0e760dc2c9bd201fcc595ce06da1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_MAX_KEY_BITS<sp/>0xfff8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="crypto__struct_8h_1a71ff48e6c5d3dd77cc1e4c89d105106b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="crypto__struct_8h_1a71ff48e6c5d3dd77cc1e4c89d105106b" kindref="member">psa_key_attributes_flag_t</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="crypto__struct_8h_1a18305949e05a5e48b26743bb92f50760" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((psa_key_attributes_flag_t)<sp/>0x0001)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>mask<sp/>of<sp/>key<sp/>attribute<sp/>flags<sp/>used<sp/>externally<sp/>only.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>Only<sp/>meant<sp/>for<sp/>internal<sp/>checks<sp/>inside<sp/>the<sp/>library.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="crypto__struct_8h_1af04a649011b2fdcc0ef8b6117c376e7b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PSA_KA_MASK_EXTERNAL_ONLY<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER<sp/>|<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>mask<sp/>of<sp/>key<sp/>attribute<sp/>flags<sp/>used<sp/>both<sp/>internally<sp/>and<sp/>externally.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>Currently<sp/>there<sp/>aren&apos;t<sp/>any.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="crypto__struct_8h_1a52b85c63e913e170d80475ea1f8c894d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PSA_KA_MASK_DUAL_USE<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="structpsa__core__key__attributes__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234" refid="structpsa__core__key__attributes__t_1ad9ac3e09844077c5401de5478ef5ba4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(type);</highlight></codeline>
<codeline lineno="235" refid="structpsa__core__key__attributes__t_1afac21d42b8a763781a9320f03ecdcd57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__struct_8h_1a57270c808928ab5d7c9cfc7cb1e5735d" kindref="member">psa_key_bits_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(bits);</highlight></codeline>
<codeline lineno="236" refid="structpsa__core__key__attributes__t_1ad394ed58ed34c0a020b48dc510a85341" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(lifetime);</highlight></codeline>
<codeline lineno="237" refid="structpsa__core__key__attributes__t_1a6d1f1bb1c10cdc3d10a944028774bd7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238" refid="structpsa__core__key__attributes__t_1a91fe1dee16d7120a67110c57cdb3415b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__key__policy__s" kindref="compound">psa_key_policy_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(policy);</highlight></codeline>
<codeline lineno="239" refid="structpsa__core__key__attributes__t_1af34a22a7efc954f0c6fe5d9795e2906b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__struct_8h_1a71ff48e6c5d3dd77cc1e4c89d105106b" kindref="member">psa_key_attributes_flag_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(flags);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}<sp/><ref refid="structpsa__core__key__attributes__t" kindref="compound">psa_core_key_attributes_t</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="crypto__struct_8h_1a8cfdd4f538e9ba46b4273f5fd990a87f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_CORE_KEY_ATTRIBUTES_INIT<sp/>{<sp/>PSA_KEY_TYPE_NONE,<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_KEY_LIFETIME_VOLATILE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SVC_KEY_ID_INIT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_KEY_POLICY_INIT,<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="structpsa__key__attributes__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_s</ref><sp/>{</highlight></codeline>
<codeline lineno="248" refid="structpsa__key__attributes__s_1a7ac765977b35f3ecd2c51c94ee766a51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__core__key__attributes__t" kindref="compound">psa_core_key_attributes_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(core);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_SE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="structpsa__key__attributes__s_1a298e53d666e41fa68f1486e987eb018d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" kindref="member">psa_key_slot_number_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(slot_number);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_SE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="structpsa__key__attributes__s_1a154be77c483eaa1e02531ebc2eaa8c04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(domain_parameters);</highlight></codeline>
<codeline lineno="253" refid="structpsa__key__attributes__s_1a407dac51b4e3b0d9d9d9263c58cc4b29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(domain_parameters_size);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">};</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_SE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="group__attributes_1gac45b6c1e7228a1f425338279ee679c4e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_ATTRIBUTES_INIT<sp/>{<sp/>PSA_CORE_KEY_ATTRIBUTES_INIT,<sp/>0,<sp/>NULL,<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_ATTRIBUTES_INIT<sp/>{<sp/>PSA_CORE_KEY_ATTRIBUTES_INIT,<sp/>NULL,<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="crypto__struct_8h_1a68f3f03c6a5d98812ddd2d6d9212ee5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_s</ref><sp/><ref refid="crypto__struct_8h_1a68f3f03c6a5d98812ddd2d6d9212ee5a" kindref="member">psa_key_attributes_init</ref>(void)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_s</ref><sp/>v<sp/>=<sp/><ref refid="group__attributes_1gac45b6c1e7228a1f425338279ee679c4e" kindref="member">PSA_KEY_ATTRIBUTES_INIT</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="crypto__struct_8h_1ae48fcfdc72a23e7499957d7f54ff5a64" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1ae48fcfdc72a23e7499957d7f54ff5a64" kindref="member">psa_set_key_id</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>key)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref><sp/>lifetime<sp/>=<sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(lifetime);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__key__lifetimes_1ga63d63adbfc947cab4dee4f4b39e840a1" kindref="member">PSA_KEY_LIFETIME_IS_VOLATILE</ref>(lifetime))<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(lifetime)<sp/>=</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1gaef4d244b4d33ae7876ed87226b8112aa" kindref="member">PSA_KEY_LIFETIME_FROM_PERSISTENCE_AND_LOCATION</ref>(</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga3713a01c5fcd5f7eae46ff22ceaf6d02" kindref="member">PSA_KEY_LIFETIME_PERSISTENT</ref>,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga4bd83feb0ca4853eee26d5394e69a5de" kindref="member">PSA_KEY_LIFETIME_GET_LOCATION</ref>(lifetime));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="crypto__struct_8h_1afd8a339ef75f9ec0f72c97edfc99a2a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/><ref refid="crypto__struct_8h_1afd8a339ef75f9ec0f72c97edfc99a2a4" kindref="member">psa_get_key_id</ref>(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mbedtls_set_key_owner_id(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbedtls_key_owner_id_t<sp/>owner)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).MBEDTLS_PRIVATE(owner)<sp/>=<sp/>owner;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="crypto__struct_8h_1ac03ccf09ca6d36cc3d5b43f8303db6f7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1ac03ccf09ca6d36cc3d5b43f8303db6f7" kindref="member">psa_set_key_lifetime</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref><sp/>lifetime)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(lifetime)<sp/>=<sp/>lifetime;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__key__lifetimes_1ga63d63adbfc947cab4dee4f4b39e840a1" kindref="member">PSA_KEY_LIFETIME_IS_VOLATILE</ref>(lifetime))<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).MBEDTLS_PRIVATE(key_id)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="crypto__struct_8h_1a9ea8eae1b81e480cc56dec858859aff9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref><sp/><ref refid="crypto__struct_8h_1a9ea8eae1b81e480cc56dec858859aff9" kindref="member">psa_get_key_lifetime</ref>(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(lifetime);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="crypto__struct_8h_1ab1d132120773a313a54141473a7ccaec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1ab1d132120773a313a54141473a7ccaec" kindref="member">psa_extend_key_usage_flags</ref>(<ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref><sp/>*usage_flags)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*usage_flags<sp/>&amp;<sp/><ref refid="group__policy_1ga181c73e00d9e95aa3a8366f26c4380b6" kindref="member">PSA_KEY_USAGE_SIGN_HASH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*usage_flags<sp/>|=<sp/><ref refid="group__policy_1ga552117ac92b79500cae87d4e65a85c54" kindref="member">PSA_KEY_USAGE_SIGN_MESSAGE</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*usage_flags<sp/>&amp;<sp/><ref refid="group__policy_1gafadf131ef2182045e3483d03aadaa1bd" kindref="member">PSA_KEY_USAGE_VERIFY_HASH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*usage_flags<sp/>|=<sp/><ref refid="group__policy_1gabea7ec4173f4f943110329ac2953b2b1" kindref="member">PSA_KEY_USAGE_VERIFY_MESSAGE</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="crypto__struct_8h_1a42a65b3c4522ce9b67ea5ea7720e17de" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1a42a65b3c4522ce9b67ea5ea7720e17de" kindref="member">psa_set_key_usage_flags</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref><sp/>usage_flags)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__struct_8h_1ab1d132120773a313a54141473a7ccaec" kindref="member">psa_extend_key_usage_flags</ref>(&amp;usage_flags);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(policy).MBEDTLS_PRIVATE(usage)<sp/>=<sp/>usage_flags;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="crypto__struct_8h_1aa1af20f142ca722222c6d98678a0c448" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref><sp/><ref refid="crypto__struct_8h_1aa1af20f142ca722222c6d98678a0c448" kindref="member">psa_get_key_usage_flags</ref>(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(policy).MBEDTLS_PRIVATE(usage);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="crypto__struct_8h_1aeb8341ca52baa0279475ea3fd3bcdc98" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1aeb8341ca52baa0279475ea3fd3bcdc98" kindref="member">psa_set_key_algorithm</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/>alg)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(policy).MBEDTLS_PRIVATE(alg)<sp/>=<sp/>alg;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="crypto__struct_8h_1ac255da850a00bbed925390044f016b34" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="crypto__struct_8h_1ac255da850a00bbed925390044f016b34" kindref="member">psa_get_key_algorithm</ref>(</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(policy).MBEDTLS_PRIVATE(alg);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>is<sp/>declared<sp/>in<sp/>crypto_extra.h,<sp/>which<sp/>comes<sp/>after<sp/>this</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>header<sp/>file,<sp/>but<sp/>we<sp/>need<sp/>the<sp/>function<sp/>here,<sp/>so<sp/>repeat<sp/>the<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="crypto__struct_8h_1a8909d3f2ee48121ea0dff198276bdd38" kindref="member">psa_set_key_domain_parameters</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/>type,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_length);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="crypto__struct_8h_1a6857ef0ecb3fa844d4536939d9c64025" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1a6857ef0ecb3fa844d4536939d9c64025" kindref="member">psa_set_key_type</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/>type)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attributes-&gt;MBEDTLS_PRIVATE(domain_parameters)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Common<sp/>case:<sp/>quick<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(type)<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>bigger<sp/>function<sp/>to<sp/>free<sp/>the<sp/>old<sp/>domain<sp/>parameters.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Ignore<sp/>any<sp/>errors<sp/>which<sp/>may<sp/>arise<sp/>due<sp/>to<sp/>type<sp/>requiring</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>non-default<sp/>domain<sp/>parameters,<sp/>since<sp/>this<sp/>function<sp/>can&apos;t</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>report<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/><ref refid="crypto__struct_8h_1a8909d3f2ee48121ea0dff198276bdd38" kindref="member">psa_set_key_domain_parameters</ref>(attributes,<sp/>type,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="crypto__struct_8h_1ae4fb812af4f57aa1ad85e335a865b918" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/><ref refid="crypto__struct_8h_1ae4fb812af4f57aa1ad85e335a865b918" kindref="member">psa_get_key_type</ref>(</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(type);</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="crypto__struct_8h_1af61683ac87f87687a40262b5afbfa018" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1af61683ac87f87687a40262b5afbfa018" kindref="member">psa_set_key_bits</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bits)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>&gt;<sp/><ref refid="crypto__struct_8h_1a97e0e760dc2c9bd201fcc595ce06da1b" kindref="member">PSA_MAX_KEY_BITS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(bits)<sp/>=<sp/><ref refid="crypto__struct_8h_1a04b358641be4a6ce59f2df88014147c2" kindref="member">PSA_KEY_BITS_TOO_LARGE</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(bits)<sp/>=<sp/>(<ref refid="crypto__struct_8h_1a57270c808928ab5d7c9cfc7cb1e5735d" kindref="member">psa_key_bits_t</ref>)<sp/>bits;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="crypto__struct_8h_1a5bee85c2164ad3d4c0d42501241eeb06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="crypto__struct_8h_1a5bee85c2164ad3d4c0d42501241eeb06" kindref="member">psa_get_key_bits</ref>(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(bits);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="structpsa__sign__hash__interruptible__operation__s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__sign__hash__interruptible__operation__s" kindref="compound">psa_sign_hash_interruptible_operation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="406" refid="structpsa__sign__hash__interruptible__operation__s_1a90e44258881276d57b8972a075f90c21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="structpsa__sign__hash__interruptible__operation__s_1aaf5c3aba42bc2e11f5a1f83cd2545f35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__sign__hash__interruptible__context__t" kindref="compound">psa_driver_sign_hash_interruptible_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="structpsa__sign__hash__interruptible__operation__s_1a7b53aa271c7448a0b8ed6c3cbc13ccc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(error_occurred)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="structpsa__sign__hash__interruptible__operation__s_1adc0e634dde82eedf8ee376cf1d9b3675" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(num_ops);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="crypto__struct_8h_1ae8d7c502f24f810c3abad377daa8b051" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_SIGN_HASH_INTERRUPTIBLE_OPERATION_INIT<sp/>{<sp/>0,<sp/>{<sp/>0<sp/>},<sp/>0,<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__sign__hash__interruptible__operation__s" kindref="compound">psa_sign_hash_interruptible_operation_s</ref></highlight></codeline>
<codeline lineno="418" refid="crypto__struct_8h_1a12166ea6ade6825a053b698ed510ef33" refkind="member"><highlight class="normal"><ref refid="crypto__struct_8h_1a12166ea6ade6825a053b698ed510ef33" kindref="member">psa_sign_hash_interruptible_operation_init</ref>(void)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__sign__hash__interruptible__operation__s" kindref="compound">psa_sign_hash_interruptible_operation_s</ref><sp/>v<sp/>=</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="crypto__struct_8h_1ae8d7c502f24f810c3abad377daa8b051" kindref="member">PSA_SIGN_HASH_INTERRUPTIBLE_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="structpsa__verify__hash__interruptible__operation__s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__verify__hash__interruptible__operation__s" kindref="compound">psa_verify_hash_interruptible_operation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="436" refid="structpsa__verify__hash__interruptible__operation__s_1aeb4849c82c72b385761c7849c3fa0228" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="structpsa__verify__hash__interruptible__operation__s_1a6dc34cd9e1ba2e01d899f29c4ca288fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__verify__hash__interruptible__context__t" kindref="compound">psa_driver_verify_hash_interruptible_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="structpsa__verify__hash__interruptible__operation__s_1a1d3720f4b36df06edf67103341d5a6b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(error_occurred)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="structpsa__verify__hash__interruptible__operation__s_1a05ab9c279f6c3f3cba77c777fb4d3933" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(num_ops);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="crypto__struct_8h_1aed5b04a316ca690bd97f5ea0d2b905b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VERIFY_HASH_INTERRUPTIBLE_OPERATION_INIT<sp/>{<sp/>0,<sp/>{<sp/>0<sp/>},<sp/>0,<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__verify__hash__interruptible__operation__s" kindref="compound">psa_verify_hash_interruptible_operation_s</ref></highlight></codeline>
<codeline lineno="448" refid="crypto__struct_8h_1a570efe3897a9133ffa0373b9984d076c" refkind="member"><highlight class="normal"><ref refid="crypto__struct_8h_1a570efe3897a9133ffa0373b9984d076c" kindref="member">psa_verify_hash_interruptible_operation_init</ref>(void)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__verify__hash__interruptible__operation__s" kindref="compound">psa_verify_hash_interruptible_operation_s</ref><sp/>v<sp/>=</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="crypto__struct_8h_1aed5b04a316ca690bd97f5ea0d2b905b9" kindref="member">PSA_VERIFY_HASH_INTERRUPTIBLE_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PSA_CRYPTO_STRUCT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h"/>
  </compounddef>
</doxygen>
