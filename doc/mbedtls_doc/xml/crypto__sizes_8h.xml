<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="crypto__sizes_8h" kind="file" language="C++">
    <compoundname>crypto_sizes.h</compoundname>
    <includes refid="psa_2build__info_8h" local="yes">psa/build_info.h</includes>
    <includedby refid="crypto_8h" local="yes">crypto.h</includedby>
    <includedby refid="crypto__driver__common_8h" local="no">crypto_driver_common.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="1">
        <label>crypto_sizes.h</label>
        <link refid="crypto__sizes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>psa/build_info.h</label>
        <link refid="psa_2build__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22">
        <label>crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="15">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="9">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="2">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="19">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>crypto_builtin_primitives.h</label>
        <link refid="crypto__builtin__primitives_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="23">
        <label>crypto_driver_contexts_key_derivation.h</label>
        <link refid="crypto__driver__contexts__key__derivation_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="16">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="7">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="18">
        <label>crypto_driver_contexts_primitives.h</label>
        <link refid="crypto__driver__contexts__primitives_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>crypto_sizes.h</label>
        <link refid="crypto__sizes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>crypto_driver_common.h</label>
        <link refid="crypto__driver__common_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>crypto_builtin_key_derivation.h</label>
        <link refid="crypto__builtin__key__derivation_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>crypto_se_driver.h</label>
        <link refid="crypto__se__driver_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" prot="public" static="no">
        <name>PSA_BITS_TO_BYTES</name>
        <param><defname>bits</defname></param>
        <initializer>(((bits) + 7u) / 8u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="40" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a997f71feb68cca794f7ed676600e06db" prot="public" static="no">
        <name>PSA_BYTES_TO_BITS</name>
        <param><defname>bytes</defname></param>
        <initializer>((bytes) * 8u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="41" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1afbf0c86bb3652ab37c04b43c98659873" prot="public" static="no">
        <name>PSA_MAX_OF_THREE</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>                                   ((a) &lt;= (b) ? (b) &lt;= (c) ? \
                                   (c) : (b) : (a) &lt;= (c) ? (c) : (a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="42" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" prot="public" static="no">
        <name>PSA_ROUND_UP_TO_MULTIPLE</name>
        <param><defname>block_size</defname></param>
        <param><defname>length</defname></param>
        <initializer>(((length) + (block_size) - 1) / (block_size) * (block_size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="45" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ae0c23128dc05e9680d2c4c1b292bcc77" prot="public" static="no">
        <name>PSA_HASH_LENGTH</name>
        <param><defname>alg</defname></param>
        <initializer>    (                                                               \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gade591d9286d23382eb5cec099c84180d" kindref="member">PSA_ALG_MD5</ref> ? 16u :           \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga6c5d3a32cda59086f07b85ef007033dd" kindref="member">PSA_ALG_RIPEMD160</ref> ? 20u :     \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga3fca4e9f9ad4a1158817d1850dee82e5" kindref="member">PSA_ALG_SHA_1</ref> ? 20u :         \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga25d6a3244d10a7148fe6b026d1979f7b" kindref="member">PSA_ALG_SHA_224</ref> ? 28u :       \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga619471f978e13cdd0a1e37145e4bf341" kindref="member">PSA_ALG_SHA_256</ref> ? 32u :       \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga58af64dd9a86a287e8da9ed7739eead4" kindref="member">PSA_ALG_SHA_384</ref> ? 48u :       \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gafba3ae409f46d3dd7f37a0910660c3e9" kindref="member">PSA_ALG_SHA_512</ref> ? 64u :       \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga3fe2d7c3c80e3186ca78d16a35d5d931" kindref="member">PSA_ALG_SHA_512_224</ref> ? 28u :   \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga5910b3964c14e9613e8643a45b09c2d4" kindref="member">PSA_ALG_SHA_512_256</ref> ? 32u :   \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga16f5fe34ccce68c2fada1224c054a999" kindref="member">PSA_ALG_SHA3_224</ref> ? 28u :      \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gaace70d9515489bbe3c5e7ac1b7d9155b" kindref="member">PSA_ALG_SHA3_256</ref> ? 32u :      \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gab0f079257ea75e2acfe2fc3b38c78cd8" kindref="member">PSA_ALG_SHA3_384</ref> ? 48u :      \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga37e5dbe936dddb155e76f2997de27188" kindref="member">PSA_ALG_SHA3_512</ref> ? 64u :      \
        0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The size of the output of <ref refid="group__hash_1ga4795fd06a0067b0adcd92e9627b8c97e" kindref="member">psa_hash_finish()</ref>, in bytes.</para>
<para>This is also the hash size that <ref refid="group__hash_1ga7be923c5700c9c70ef77ee9b76d1a5c0" kindref="member">psa_hash_verify()</ref> expects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>alg</computeroutput>) is true), or an HMAC algorithm (<ref refid="group__crypto__types_1ga70f397425684b3efcde1e0e34c28261f" kindref="member">PSA_ALG_HMAC</ref>(<computeroutput>hash_alg</computeroutput>) where <computeroutput>hash_alg</computeroutput> is a hash algorithm).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash size for the specified hash algorithm. If the hash algorithm is not recognized, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="60" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ab650de09f5b291b6dedaf15c346a2cfe" prot="public" static="no">
        <name>PSA_HASH_BLOCK_LENGTH</name>
        <param><defname>alg</defname></param>
        <initializer>    (                                                               \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gade591d9286d23382eb5cec099c84180d" kindref="member">PSA_ALG_MD5</ref> ? 64u :           \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga6c5d3a32cda59086f07b85ef007033dd" kindref="member">PSA_ALG_RIPEMD160</ref> ? 64u :     \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga3fca4e9f9ad4a1158817d1850dee82e5" kindref="member">PSA_ALG_SHA_1</ref> ? 64u :         \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga25d6a3244d10a7148fe6b026d1979f7b" kindref="member">PSA_ALG_SHA_224</ref> ? 64u :       \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga619471f978e13cdd0a1e37145e4bf341" kindref="member">PSA_ALG_SHA_256</ref> ? 64u :       \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga58af64dd9a86a287e8da9ed7739eead4" kindref="member">PSA_ALG_SHA_384</ref> ? 128u :      \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gafba3ae409f46d3dd7f37a0910660c3e9" kindref="member">PSA_ALG_SHA_512</ref> ? 128u :      \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga3fe2d7c3c80e3186ca78d16a35d5d931" kindref="member">PSA_ALG_SHA_512_224</ref> ? 128u :  \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga5910b3964c14e9613e8643a45b09c2d4" kindref="member">PSA_ALG_SHA_512_256</ref> ? 128u :  \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga16f5fe34ccce68c2fada1224c054a999" kindref="member">PSA_ALG_SHA3_224</ref> ? 144u :     \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gaace70d9515489bbe3c5e7ac1b7d9155b" kindref="member">PSA_ALG_SHA3_256</ref> ? 136u :     \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gab0f079257ea75e2acfe2fc3b38c78cd8" kindref="member">PSA_ALG_SHA3_384</ref> ? 104u :     \
        <ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1ga37e5dbe936dddb155e76f2997de27188" kindref="member">PSA_ALG_SHA3_512</ref> ? 72u :      \
        0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The input block size of a hash algorithm, in bytes.</para>
<para>Hash algorithms process their input data in blocks. Hash operations will retain any partial blocks until they have enough input to fill the block or until the operation is finished. This affects the output from psa_hash_suspend().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that PSA_ALG_IS_HASH(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The block size in bytes for the specified hash algorithm. If the hash algorithm is not recognized, return 0. An implementation can return either 0 or the correct size for a hash algorithm that it recognizes, but does not support. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="92" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a123539632874601194b1d86a398e14ff" prot="public" static="no">
        <name>PSA_HMAC_MAX_HASH_BLOCK_SIZE</name>
        <initializer>144u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="122" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a6ce1014efbbc0bcca286ef7f9a72cb29" prot="public" static="no">
        <name>PSA_HASH_MAX_SIZE</name>
        <initializer>64u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of a hash.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of a hash in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="142" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a4681cc4f6226883a2160122c562ca682" prot="public" static="no">
        <name>PSA_MAC_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1a6ce1014efbbc0bcca286ef7f9a72cb29" kindref="member">PSA_HASH_MAX_SIZE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of a MAC.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of a MAC in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="165" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a9aab63d83591633baa13beff3bdf8b2f" prot="public" static="no">
        <name>PSA_AEAD_TAG_LENGTH</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" kindref="member">PSA_AEAD_NONCE_LENGTH</ref>(key_type, alg) != 0 ?                            \
     <ref refid="group__crypto__types_1ga0f183e8013db6567dcb832310ba9bd2f" kindref="member">PSA_ALG_AEAD_GET_TAG_LENGTH</ref>(alg) :                                     \
     ((void) (key_bits), 0u))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The length of a tag for an AEAD algorithm, in bytes.</para>
<para>This macro can be used to allocate a buffer of sufficient size to store the tag output from <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref>.</para>
<para>See also <ref refid="crypto__sizes_8h_1ae3b873ea579c278946e6e536b7e513af" kindref="member">PSA_AEAD_TAG_MAX_SIZE</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the AEAD key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the AEAD key in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tag length for the specified algorithm and key. If the AEAD algorithm does not have an identified tag that can be distinguished from the rest of the ciphertext, return 0. If the key type or AEAD algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="188" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ae3b873ea579c278946e6e536b7e513af" prot="public" static="no">
        <name>PSA_AEAD_TAG_MAX_SIZE</name>
        <initializer>16u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum tag size for all supported AEAD algorithms, in bytes.</para>
<para>See also <ref refid="crypto__sizes_8h_1a9aab63d83591633baa13beff3bdf8b2f" kindref="member">PSA_AEAD_TAG_LENGTH</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>, <computeroutput>alg</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="197" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a2ab9324235c63e9e8cdee5bb1793eabe" prot="public" static="no">
        <name>PSA_VENDOR_RSA_MAX_KEY_BITS</name>
        <initializer>4096u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="212" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a2587eefb3f3a07078117f7282869e3c1" prot="public" static="no">
        <name>PSA_VENDOR_RSA_GENERATE_MIN_KEY_BITS</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="223" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a9c2685c79ae2ae922a78c35f266dd6a4" prot="public" static="no">
        <name>PSA_VENDOR_FFDH_MAX_KEY_BITS</name>
        <initializer>8192u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="230" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a81080a6cbbab87f35b114cb991e3f550" prot="public" static="no">
        <name>PSA_VENDOR_ECC_MAX_CURVE_BITS</name>
        <initializer>521u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="235" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1aea956970b7c2221f5c8d179c02d74d43" prot="public" static="no">
        <name>PSA_TLS12_PSK_TO_MS_PSK_MAX_SIZE</name>
        <initializer>128u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns the maximum supported length of the PSK for the TLS-1.2 PSK-to-MS key derivation (<ref refid="group__crypto__types_1ga039ec797f15d1635d9b2e09a611f8a68" kindref="member">PSA_ALG_TLS12_PSK_TO_MS</ref>(<computeroutput>hash_alg</computeroutput>)).</para>
<para>The maximum supported length does not depend on the chosen hash algorithm.</para>
<para>Quoting RFC 4279, Sect 5.3: TLS implementations supporting these ciphersuites MUST support arbitrary PSK identities up to 128 octets in length, and arbitrary PSKs up to 64 octets in length. Supporting longer identities and keys is RECOMMENDED.</para>
<para>Therefore, no implementation should define a value smaller than 64 for <ref refid="crypto__sizes_8h_1aea956970b7c2221f5c8d179c02d74d43" kindref="member">PSA_TLS12_PSK_TO_MS_PSK_MAX_SIZE</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="279" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a04e6e84b72b2f61c374f347347d87a87" prot="public" static="no">
        <name>PSA_TLS12_ECJPAKE_TO_PMS_INPUT_SIZE</name>
        <initializer>65u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="283" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a25d5de5a2c512d8ecc51319cc2ee1f3b" prot="public" static="no">
        <name>PSA_TLS12_ECJPAKE_TO_PMS_DATA_SIZE</name>
        <initializer>32u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="288" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a9ae91d1c22deed4a58fbeed527e2a3b6" prot="public" static="no">
        <name>PSA_VENDOR_PBKDF2_MAX_ITERATIONS</name>
        <initializer>0xffffffffU</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="292" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" prot="public" static="no">
        <name>PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE</name>
        <initializer>16u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum size of a block cipher. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="295" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a4c1151a9816184287aa5f76e82e16080" prot="public" static="no">
        <name>PSA_MAC_LENGTH</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    ((alg) &amp; <ref refid="group__crypto__types_1ga8c48784065c65c623a21b9a3ccc56b1d" kindref="member">PSA_ALG_MAC_TRUNCATION_MASK</ref> ? <ref refid="group__crypto__types_1gabcdd93759ceae34fd3678284ad3b12a6" kindref="member">PSA_MAC_TRUNCATED_LENGTH</ref>(alg) :        \
     <ref refid="group__crypto__types_1ga4a050c3c3cbc6eb96418f18847601c8a" kindref="member">PSA_ALG_IS_HMAC</ref>(alg) ? <ref refid="crypto__sizes_8h_1ae0c23128dc05e9680d2c4c1b292bcc77" kindref="member">PSA_HASH_LENGTH</ref>(<ref refid="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" kindref="member">PSA_ALG_HMAC_GET_HASH</ref>(alg)) :         \
     <ref refid="group__crypto__types_1gae49d1eb601125d65a5c5b252aa45479e" kindref="member">PSA_ALG_IS_BLOCK_CIPHER_MAC</ref>(alg) ? <ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) : \
     ((void) (key_type), (void) (key_bits), 0u))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The size of the output of <ref refid="group___m_a_c_1gac22bc0125580c96724a09226cfbc97f2" kindref="member">psa_mac_sign_finish()</ref>, in bytes.</para>
<para>This is also the MAC size that <ref refid="group___m_a_c_1gac92b2930d6728e1be4d011c05d485822" kindref="member">psa_mac_verify_finish()</ref> expects.</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the MAC key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the MAC key in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A MAC algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gaca7aee4c9dde316b3b1a150a26eab776" kindref="member">PSA_ALG_IS_MAC</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The MAC size for the specified algorithm with the specified key parameters. </para>
</simplesect>
<simplesect kind="return"><para>0 if the MAC algorithm is not recognized. </para>
</simplesect>
<simplesect kind="return"><para>Either 0 or the correct size for a MAC algorithm that the implementation recognizes, but does not support. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if the key parameters are not consistent with the algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="318" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a0e0791f41b38a79b1fda63c4cb0eec7a" prot="public" static="no">
        <name>PSA_AEAD_ENCRYPT_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <param><defname>plaintext_length</defname></param>
        <initializer>    (<ref refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" kindref="member">PSA_AEAD_NONCE_LENGTH</ref>(key_type, alg) != 0 ?                      \
     (plaintext_length) + <ref refid="group__crypto__types_1ga0f183e8013db6567dcb832310ba9bd2f" kindref="member">PSA_ALG_AEAD_GET_TAG_LENGTH</ref>(alg) :          \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum size of the output of <ref refid="group__aead_1gae72e1eb3c2da3ebd843bb9c8db8df509" kindref="member">psa_aead_encrypt()</ref>, in bytes.</para>
<para>If the size of the ciphertext buffer is at least this large, it is guaranteed that <ref refid="group__aead_1gae72e1eb3c2da3ebd843bb9c8db8df509" kindref="member">psa_aead_encrypt()</ref> will not fail due to an insufficient buffer size. Depending on the algorithm, the actual size of the ciphertext may be smaller.</para>
<para>See also <ref refid="crypto__sizes_8h_1a627fd15f45e7aab42d0126f1534f24a5" kindref="member">PSA_AEAD_ENCRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>plaintext_length</computeroutput>).</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the plaintext in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The AEAD ciphertext size for the specified algorithm. If the key type or AEAD algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="350" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a627fd15f45e7aab42d0126f1534f24a5" prot="public" static="no">
        <name>PSA_AEAD_ENCRYPT_OUTPUT_MAX_SIZE</name>
        <param><defname>plaintext_length</defname></param>
        <initializer>((plaintext_length) + <ref refid="crypto__sizes_8h_1ae3b873ea579c278946e6e536b7e513af" kindref="member">PSA_AEAD_TAG_MAX_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__aead_1gae72e1eb3c2da3ebd843bb9c8db8df509" kindref="member">psa_aead_encrypt()</ref>, for any of the supported key types and AEAD algorithms.</para>
<para>If the size of the ciphertext buffer is at least this large, it is guaranteed that <ref refid="group__aead_1gae72e1eb3c2da3ebd843bb9c8db8df509" kindref="member">psa_aead_encrypt()</ref> will not fail due to an insufficient buffer size.</para>
<para><simplesect kind="note"><para>This macro returns a compile-time constant if its arguments are compile-time constants.</para>
</simplesect>
See also <ref refid="crypto__sizes_8h_1a0e0791f41b38a79b1fda63c4cb0eec7a" kindref="member">PSA_AEAD_ENCRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>plaintext_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the plaintext in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output buffer size for any of the supported key types and AEAD algorithms. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="373" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ad33bdee829a3d6c4083cae62d176fa9e" prot="public" static="no">
        <name>PSA_AEAD_DECRYPT_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <param><defname>ciphertext_length</defname></param>
        <initializer>    (<ref refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" kindref="member">PSA_AEAD_NONCE_LENGTH</ref>(key_type, alg) != 0 &amp;&amp;                      \
     (ciphertext_length) &gt; <ref refid="group__crypto__types_1ga0f183e8013db6567dcb832310ba9bd2f" kindref="member">PSA_ALG_AEAD_GET_TAG_LENGTH</ref>(alg) ?      \
     (ciphertext_length) - <ref refid="group__crypto__types_1ga0f183e8013db6567dcb832310ba9bd2f" kindref="member">PSA_ALG_AEAD_GET_TAG_LENGTH</ref>(alg) :      \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum size of the output of <ref refid="group__aead_1gae799f6196a22d50c216c947e0320d3ba" kindref="member">psa_aead_decrypt()</ref>, in bytes.</para>
<para>If the size of the plaintext buffer is at least this large, it is guaranteed that <ref refid="group__aead_1gae799f6196a22d50c216c947e0320d3ba" kindref="member">psa_aead_decrypt()</ref> will not fail due to an insufficient buffer size. Depending on the algorithm, the actual size of the plaintext may be smaller.</para>
<para>See also <ref refid="crypto__sizes_8h_1aa7135728f0067ffcf6536e7d6c356aa5" kindref="member">PSA_AEAD_DECRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>ciphertext_length</computeroutput>).</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the plaintext in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The AEAD ciphertext size for the specified algorithm. If the key type or AEAD algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="403" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1aa7135728f0067ffcf6536e7d6c356aa5" prot="public" static="no">
        <name>PSA_AEAD_DECRYPT_OUTPUT_MAX_SIZE</name>
        <param><defname>ciphertext_length</defname></param>
        <initializer>(ciphertext_length)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__aead_1gae799f6196a22d50c216c947e0320d3ba" kindref="member">psa_aead_decrypt()</ref>, for any of the supported key types and AEAD algorithms.</para>
<para>If the size of the plaintext buffer is at least this large, it is guaranteed that <ref refid="group__aead_1gae799f6196a22d50c216c947e0320d3ba" kindref="member">psa_aead_decrypt()</ref> will not fail due to an insufficient buffer size.</para>
<para><simplesect kind="note"><para>This macro returns a compile-time constant if its arguments are compile-time constants.</para>
</simplesect>
See also <ref refid="crypto__sizes_8h_1ad33bdee829a3d6c4083cae62d176fa9e" kindref="member">PSA_AEAD_DECRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>ciphertext_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the ciphertext in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output buffer size for any of the supported key types and AEAD algorithms. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="427" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" prot="public" static="no">
        <name>PSA_AEAD_NONCE_LENGTH</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) == 16 ? \
     <ref refid="group__helper__macros_1gadd88e30fe90f6497958acd3f73a950b5" kindref="member">MBEDTLS_PSA_ALG_AEAD_EQUAL</ref>(alg, <ref refid="group__crypto__types_1gac2c0e7d21f1b2df5e76bcb4a8f84273c" kindref="member">PSA_ALG_CCM</ref>) ? 13u : \
     <ref refid="group__helper__macros_1gadd88e30fe90f6497958acd3f73a950b5" kindref="member">MBEDTLS_PSA_ALG_AEAD_EQUAL</ref>(alg, <ref refid="group__crypto__types_1ga0d7d02b15aaae490d38277d99f1c637c" kindref="member">PSA_ALG_GCM</ref>) ? 12u : \
     0u : \
     (key_type) == <ref refid="group__crypto__types_1ga901548883b3bce56cc21c3a22cf8d93c" kindref="member">PSA_KEY_TYPE_CHACHA20</ref> &amp;&amp; \
     <ref refid="group__helper__macros_1gadd88e30fe90f6497958acd3f73a950b5" kindref="member">MBEDTLS_PSA_ALG_AEAD_EQUAL</ref>(alg, <ref refid="group__crypto__types_1ga1fec55093541640a71bdd022d4adfb9c" kindref="member">PSA_ALG_CHACHA20_POLY1305</ref>) ? 12u : \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default nonce size for an AEAD algorithm, in bytes.</para>
<para>This macro can be used to allocate a buffer of sufficient size to store the nonce output from <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref>.</para>
<para>See also <ref refid="crypto__sizes_8h_1ac2a332765ba4ccfc24935d6f7f48fcc7" kindref="member">PSA_AEAD_NONCE_MAX_SIZE</ref>.</para>
<para><simplesect kind="note"><para>This is not the maximum size of nonce supported as input to <ref refid="group__aead_1ga59132751a6f843d038924cb217b5e13b" kindref="member">psa_aead_set_nonce()</ref>, <ref refid="group__aead_1gae72e1eb3c2da3ebd843bb9c8db8df509" kindref="member">psa_aead_encrypt()</ref> or <ref refid="group__aead_1gae799f6196a22d50c216c947e0320d3ba" kindref="member">psa_aead_decrypt()</ref>, just the default size that is generated by <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref>.</para>
</simplesect>
<simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm <computeroutput>alg</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The default nonce size for the specified key type and algorithm. If the key type or AEAD algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="455" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ac2a332765ba4ccfc24935d6f7f48fcc7" prot="public" static="no">
        <name>PSA_AEAD_NONCE_MAX_SIZE</name>
        <initializer>13u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum default nonce size among all supported pairs of key types and AEAD algorithms, in bytes.</para>
<para>This is equal to or greater than any value that <ref refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" kindref="member">PSA_AEAD_NONCE_LENGTH()</ref> may return.</para>
<para><simplesect kind="note"><para>This is not the maximum size of nonce supported as input to <ref refid="group__aead_1ga59132751a6f843d038924cb217b5e13b" kindref="member">psa_aead_set_nonce()</ref>, <ref refid="group__aead_1gae72e1eb3c2da3ebd843bb9c8db8df509" kindref="member">psa_aead_encrypt()</ref> or <ref refid="group__aead_1gae799f6196a22d50c216c947e0320d3ba" kindref="member">psa_aead_decrypt()</ref>, just the largest size that may be generated by <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="475" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a38c502f21653f1b3708ae8897d1bb01d" prot="public" static="no">
        <name>PSA_AEAD_UPDATE_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <param><defname>input_length</defname></param>
        <initializer>    (<ref refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" kindref="member">PSA_AEAD_NONCE_LENGTH</ref>(key_type, alg) != 0 ?                                             \
     <ref refid="group__crypto__types_1gafa4d92f00cf52ad28c08c6cb434665e7" kindref="member">PSA_ALG_IS_AEAD_ON_BLOCK_CIPHER</ref>(alg) ?                                              \
     <ref refid="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" kindref="member">PSA_ROUND_UP_TO_MULTIPLE</ref>(<ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type), (input_length)) : \
     (input_length) : \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> will not fail due to an insufficient buffer size. The actual size of the output may be smaller in any given call.</para>
<para>See also <ref refid="crypto__sizes_8h_1a7bad9346cc8ceaffa4a8e7cb8c4fc9ce" kindref="member">PSA_AEAD_UPDATE_OUTPUT_MAX_SIZE</ref>(<computeroutput>input_length</computeroutput>).</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output buffer size for the specified algorithm. If the key type or AEAD algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="507" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a7bad9346cc8ceaffa4a8e7cb8c4fc9ce" prot="public" static="no">
        <name>PSA_AEAD_UPDATE_OUTPUT_MAX_SIZE</name>
        <param><defname>input_length</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" kindref="member">PSA_ROUND_UP_TO_MULTIPLE</ref>(<ref refid="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" kindref="member">PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE</ref>, (input_length)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>, for any of the supported key types and AEAD algorithms.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> will not fail due to an insufficient buffer size.</para>
<para>See also <ref refid="crypto__sizes_8h_1a38c502f21653f1b3708ae8897d1bb01d" kindref="member">PSA_AEAD_UPDATE_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>input_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="524" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1aeaa3630f4450996638d4c56d651301d3" prot="public" static="no">
        <name>PSA_AEAD_FINISH_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" kindref="member">PSA_AEAD_NONCE_LENGTH</ref>(key_type, alg) != 0 &amp;&amp;  \
     <ref refid="group__crypto__types_1gafa4d92f00cf52ad28c08c6cb434665e7" kindref="member">PSA_ALG_IS_AEAD_ON_BLOCK_CIPHER</ref>(alg) ?    \
     <ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) : \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient ciphertext buffer size for <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref>.</para>
<para>If the size of the ciphertext buffer is at least this large, it is guaranteed that <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref> will not fail due to an insufficient ciphertext buffer size. The actual size of the output may be smaller in any given call.</para>
<para>See also <ref refid="crypto__sizes_8h_1ae2d44f764023b9e7948af9344ecb66ce" kindref="member">PSA_AEAD_FINISH_OUTPUT_MAX_SIZE</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient ciphertext buffer size for the specified algorithm. If the key type or AEAD algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="548" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ae2d44f764023b9e7948af9344ecb66ce" prot="public" static="no">
        <name>PSA_AEAD_FINISH_OUTPUT_MAX_SIZE</name>
        <initializer>(<ref refid="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" kindref="member">PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient ciphertext buffer size for <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref>, for any of the supported key types and AEAD algorithms.</para>
<para>See also <ref refid="crypto__sizes_8h_1aeaa3630f4450996638d4c56d651301d3" kindref="member">PSA_AEAD_FINISH_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="559" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a4ca7886c2fedd17a1327ad90ee1cc480" prot="public" static="no">
        <name>PSA_AEAD_VERIFY_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" kindref="member">PSA_AEAD_NONCE_LENGTH</ref>(key_type, alg) != 0 &amp;&amp;  \
     <ref refid="group__crypto__types_1gafa4d92f00cf52ad28c08c6cb434665e7" kindref="member">PSA_ALG_IS_AEAD_ON_BLOCK_CIPHER</ref>(alg) ?    \
     <ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) : \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient plaintext buffer size for <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref>.</para>
<para>If the size of the plaintext buffer is at least this large, it is guaranteed that <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> will not fail due to an insufficient plaintext buffer size. The actual size of the output may be smaller in any given call.</para>
<para>See also <ref refid="crypto__sizes_8h_1a19fc08f5f6f33fd0b91152de1643df0c" kindref="member">PSA_AEAD_VERIFY_OUTPUT_MAX_SIZE</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient plaintext buffer size for the specified algorithm. If the key type or AEAD algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="582" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a19fc08f5f6f33fd0b91152de1643df0c" prot="public" static="no">
        <name>PSA_AEAD_VERIFY_OUTPUT_MAX_SIZE</name>
        <initializer>(<ref refid="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" kindref="member">PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient plaintext buffer size for <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref>, for any of the supported key types and AEAD algorithms.</para>
<para>See also <ref refid="crypto__sizes_8h_1a4ca7886c2fedd17a1327ad90ee1cc480" kindref="member">PSA_AEAD_VERIFY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="593" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1aec0bcba60e7514b83f967b171d494ed3" prot="public" static="no">
        <name>PSA_RSA_MINIMUM_PADDING_SIZE</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga9a85c05fd5c39ca63bbc47fb0755da39" kindref="member">PSA_ALG_IS_RSA_OAEP</ref>(alg) ?                                   \
     2u * <ref refid="crypto__sizes_8h_1ae0c23128dc05e9680d2c4c1b292bcc77" kindref="member">PSA_HASH_LENGTH</ref>(<ref refid="group__crypto__types_1gae6b0b87aabe82a1b3113824f022c52e8" kindref="member">PSA_ALG_RSA_OAEP_GET_HASH</ref>(alg)) + 1u :   \
     11u /*PKCS#1v1.5*/)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="595" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a10c472a35f04051add6b20cc228ffc11" prot="public" static="no">
        <name>PSA_ECDSA_SIGNATURE_SIZE</name>
        <param><defname>curve_bits</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(curve_bits) * 2u)</initializer>
        <briefdescription>
<para>ECDSA signature size for a given curve bit size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Curve size in bits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Signature size in bytes.</para>
</simplesect>
<simplesect kind="note"><para>This macro returns a compile-time constant if its argument is one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="608" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a31021bbd8bb365fc350532b5fd18a25a" prot="public" static="no">
        <name>PSA_SIGN_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga0e1d8f241228e49c9cadadfb4579ef1a" kindref="member">PSA_KEY_TYPE_IS_RSA</ref>(key_type) ? ((void) alg, <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits)) : \
     <ref refid="group__crypto__types_1ga88e01fa06b585654689a99bcc06bbe66" kindref="member">PSA_KEY_TYPE_IS_ECC</ref>(key_type) ? <ref refid="crypto__sizes_8h_1a10c472a35f04051add6b20cc228ffc11" kindref="member">PSA_ECDSA_SIGNATURE_SIZE</ref>(key_bits) : \
     ((void) alg, 0u))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient signature buffer size for <ref refid="group__asymmetric_1ga785e746a31a7b2a35ae5175c5ace3c5c" kindref="member">psa_sign_hash()</ref>.</para>
<para>This macro returns a sufficient buffer size for a signature using a key of the specified type and size, with the specified algorithm. Note that the actual size of the signature may be smaller (some algorithms produce a variable-size signature).</para>
<para><simplesect kind="warning"><para>This function may call its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An asymmetric key type (this may indifferently be a key pair type or a public key type). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature algorithm.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the parameters are valid and supported, return a buffer size in bytes that guarantees that <ref refid="group__asymmetric_1ga785e746a31a7b2a35ae5175c5ace3c5c" kindref="member">psa_sign_hash()</ref> will not fail with <ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref>. If the parameters are a valid combination that is not supported, return either a sensible size or 0. If the parameters are not valid, the return value is unspecified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="636" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1af3a17477697d78b6c293d18ee9bc231b" prot="public" static="no">
        <name>PSA_VENDOR_ECDSA_SIGNATURE_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1a10c472a35f04051add6b20cc228ffc11" kindref="member">PSA_ECDSA_SIGNATURE_SIZE</ref>(<ref refid="crypto__sizes_8h_1a81080a6cbbab87f35b114cb991e3f550" kindref="member">PSA_VENDOR_ECC_MAX_CURVE_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="641" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a687a317642db9486fda38ea553900a1e" prot="public" static="no">
        <name>PSA_SIGNATURE_MAX_SIZE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of an asymmetric signature.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of a signature in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="651" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a687a317642db9486fda38ea553900a1e" prot="public" static="no">
        <name>PSA_SIGNATURE_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1af3a17477697d78b6c293d18ee9bc231b" kindref="member">PSA_VENDOR_ECDSA_SIGNATURE_MAX_SIZE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of an asymmetric signature.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of a signature in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="656" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a687a317642db9486fda38ea553900a1e" prot="public" static="no">
        <name>PSA_SIGNATURE_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(<ref refid="crypto__sizes_8h_1a2ab9324235c63e9e8cdee5bb1793eabe" kindref="member">PSA_VENDOR_RSA_MAX_KEY_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of an asymmetric signature.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of a signature in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="661" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a66ba3bd93e5ec52870ccc3848778bad8" prot="public" static="no">
        <name>PSA_ASYMMETRIC_ENCRYPT_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga0e1d8f241228e49c9cadadfb4579ef1a" kindref="member">PSA_KEY_TYPE_IS_RSA</ref>(key_type) ?                                    \
     ((void) alg, <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits)) :                         \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient output buffer size for <ref refid="group__asymmetric_1gaa17f61e4ddafd1823d2c834b3706c290" kindref="member">psa_asymmetric_encrypt()</ref>.</para>
<para>This macro returns a sufficient buffer size for a ciphertext produced using a key of the specified type and size, with the specified algorithm. Note that the actual size of the ciphertext may be smaller, depending on the algorithm.</para>
<para><simplesect kind="warning"><para>This function may call its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An asymmetric key type (this may indifferently be a key pair type or a public key type). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The asymmetric encryption algorithm.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the parameters are valid and supported, return a buffer size in bytes that guarantees that <ref refid="group__asymmetric_1gaa17f61e4ddafd1823d2c834b3706c290" kindref="member">psa_asymmetric_encrypt()</ref> will not fail with <ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref>. If the parameters are a valid combination that is not supported, return either a sensible size or 0. If the parameters are not valid, the return value is unspecified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="689" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a1a04450654b66dd9ac2fafb9b5413ae3" prot="public" static="no">
        <name>PSA_ASYMMETRIC_ENCRYPT_OUTPUT_MAX_SIZE</name>
        <initializer>(<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(<ref refid="crypto__sizes_8h_1a2ab9324235c63e9e8cdee5bb1793eabe" kindref="member">PSA_VENDOR_RSA_MAX_KEY_BITS</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__asymmetric_1gaa17f61e4ddafd1823d2c834b3706c290" kindref="member">psa_asymmetric_encrypt()</ref>, for any supported asymmetric encryption.</para>
<para>See also <ref refid="crypto__sizes_8h_1a66ba3bd93e5ec52870ccc3848778bad8" kindref="member">PSA_ASYMMETRIC_ENCRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>, <computeroutput>alg</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="700" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a61a246f3eac41989821d982e56fea6c1" prot="public" static="no">
        <name>PSA_ASYMMETRIC_DECRYPT_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga0e1d8f241228e49c9cadadfb4579ef1a" kindref="member">PSA_KEY_TYPE_IS_RSA</ref>(key_type) ?                                    \
     <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) - <ref refid="crypto__sizes_8h_1aec0bcba60e7514b83f967b171d494ed3" kindref="member">PSA_RSA_MINIMUM_PADDING_SIZE</ref>(alg) :  \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient output buffer size for <ref refid="group__asymmetric_1ga4f968756f6b22aab362b598b202d83d7" kindref="member">psa_asymmetric_decrypt()</ref>.</para>
<para>This macro returns a sufficient buffer size for a plaintext produced using a key of the specified type and size, with the specified algorithm. Note that the actual size of the plaintext may be smaller, depending on the algorithm.</para>
<para><simplesect kind="warning"><para>This function may call its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An asymmetric key type (this may indifferently be a key pair type or a public key type). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The asymmetric encryption algorithm.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the parameters are valid and supported, return a buffer size in bytes that guarantees that <ref refid="group__asymmetric_1ga4f968756f6b22aab362b598b202d83d7" kindref="member">psa_asymmetric_decrypt()</ref> will not fail with <ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref>. If the parameters are a valid combination that is not supported, return either a sensible size or 0. If the parameters are not valid, the return value is unspecified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="728" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a4b1576b11393e43831232cac4bf75f0c" prot="public" static="no">
        <name>PSA_ASYMMETRIC_DECRYPT_OUTPUT_MAX_SIZE</name>
        <initializer>(<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(<ref refid="crypto__sizes_8h_1a2ab9324235c63e9e8cdee5bb1793eabe" kindref="member">PSA_VENDOR_RSA_MAX_KEY_BITS</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__asymmetric_1ga4f968756f6b22aab362b598b202d83d7" kindref="member">psa_asymmetric_decrypt()</ref>, for any supported asymmetric decryption.</para>
<para>This macro assumes that RSA is the only supported asymmetric encryption.</para>
<para>See also <ref refid="crypto__sizes_8h_1a61a246f3eac41989821d982e56fea6c1" kindref="member">PSA_ASYMMETRIC_DECRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>, <computeroutput>alg</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="740" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a6a30ddc479486f4c5db1c759c3d052c2" prot="public" static="no">
        <name>PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE</name>
        <param><defname>bits</defname></param>
        <initializer>((bits) / 8u + 5u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="753" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a0fffdb6216268eb6455cc83a854c8acf" prot="public" static="no">
        <name>PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1a6a30ddc479486f4c5db1c759c3d052c2" kindref="member">PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE</ref>(key_bits) + 11u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="767" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ac2eaace56d8f367b9a5745aa6c4f7a7e" prot="public" static="no">
        <name>PSA_KEY_EXPORT_RSA_KEY_PAIR_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(9u * <ref refid="crypto__sizes_8h_1a6a30ddc479486f4c5db1c759c3d052c2" kindref="member">PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE</ref>((key_bits) / 2u + 1u) + 14u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="792" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1aaee3efce949efb49d0d13110051ad2a0" prot="public" static="no">
        <name>PSA_KEY_EXPORT_DSA_PUBLIC_KEY_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1a6a30ddc479486f4c5db1c759c3d052c2" kindref="member">PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE</ref>(key_bits) * 3u + 59u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="811" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a68f01ef6eab3c432f732b57163841bb0" prot="public" static="no">
        <name>PSA_KEY_EXPORT_DSA_KEY_PAIR_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1a6a30ddc479486f4c5db1c759c3d052c2" kindref="member">PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE</ref>(key_bits) * 3u + 75u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="830" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a221b29f08b4e5e0509a1c7cc11b623d0" prot="public" static="no">
        <name>PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(2u * <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) + 1u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="843" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1abc94d8116eac9d098304e3eb15448cc7" prot="public" static="no">
        <name>PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="850" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1aaab39b6ba615141f9fa2131e44bf4e13" prot="public" static="no">
        <name>PSA_KEY_EXPORT_FFDH_KEY_PAIR_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="857" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a3092049df1afb352bdd1a4f64716c900" prot="public" static="no">
        <name>PSA_KEY_EXPORT_FFDH_PUBLIC_KEY_MAX_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="862" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" prot="public" static="no">
        <name>PSA_EXPORT_KEY_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gaef86ce4e810e1c2c76068ac874bfef54" kindref="member">PSA_KEY_TYPE_IS_UNSTRUCTURED</ref>(key_type) ? <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) :                         \
     <ref refid="group__crypto__types_1ga248ae35c0e2becaebbf479fc1c3a3b0e" kindref="member">PSA_KEY_TYPE_IS_DH</ref>(key_type) ? <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) :                                   \
     (key_type) == <ref refid="group__crypto__types_1ga11745b110166e927e2abeabc7d532051" kindref="member">PSA_KEY_TYPE_RSA_KEY_PAIR</ref> ? <ref refid="crypto__sizes_8h_1ac2eaace56d8f367b9a5745aa6c4f7a7e" kindref="member">PSA_KEY_EXPORT_RSA_KEY_PAIR_MAX_SIZE</ref>(key_bits) :     \
     (key_type) == <ref refid="group__crypto__types_1ga9ba0878f56c8bcd1995ac017a74f513b" kindref="member">PSA_KEY_TYPE_RSA_PUBLIC_KEY</ref> ? <ref refid="crypto__sizes_8h_1a0fffdb6216268eb6455cc83a854c8acf" kindref="member">PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE</ref>(key_bits) : \
     (key_type) == <ref refid="group__crypto__types_1ga7d4a45c147cb0ecb55d01d9c04bfed76" kindref="member">PSA_KEY_TYPE_DSA_KEY_PAIR</ref> ? <ref refid="crypto__sizes_8h_1a68f01ef6eab3c432f732b57163841bb0" kindref="member">PSA_KEY_EXPORT_DSA_KEY_PAIR_MAX_SIZE</ref>(key_bits) :     \
     (key_type) == <ref refid="group__crypto__types_1ga5e7439c2905136366c3a876e62e5ddfc" kindref="member">PSA_KEY_TYPE_DSA_PUBLIC_KEY</ref> ? <ref refid="crypto__sizes_8h_1aaee3efce949efb49d0d13110051ad2a0" kindref="member">PSA_KEY_EXPORT_DSA_PUBLIC_KEY_MAX_SIZE</ref>(key_bits) : \
     <ref refid="group__crypto__types_1gab00289ec3d84a469950a4d8c10fb8cc6" kindref="member">PSA_KEY_TYPE_IS_ECC_KEY_PAIR</ref>(key_type) ? <ref refid="crypto__sizes_8h_1abc94d8116eac9d098304e3eb15448cc7" kindref="member">PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE</ref>(key_bits) :      \
     <ref refid="group__crypto__types_1ga5af146a173b0c84d7e737e2fb6a3c0a7" kindref="member">PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY</ref>(key_type) ? <ref refid="crypto__sizes_8h_1a221b29f08b4e5e0509a1c7cc11b623d0" kindref="member">PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE</ref>(key_bits) :  \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient output buffer size for <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> or <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>.</para>
<para>This macro returns a compile-time constant if its arguments are compile-time constants.</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
The following code illustrates how to allocate enough memory to export a key by querying the key type and size at runtime. <programlisting filename=".c"><codeline><highlight class="normal"><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>attributes<sp/>=<sp/><ref refid="group__attributes_1gac45b6c1e7228a1f425338279ee679c4e" kindref="member">PSA_KEY_ATTRIBUTES_INIT</ref>;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/>status;</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/><ref refid="group__attributes_1gacbbf5c11eac6cd70c87ffb936e1b9be2" kindref="member">psa_get_key_attributes</ref>(key,<sp/>&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>)<sp/>handle_error(...);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/>key_type<sp/>=<sp/><ref refid="group__attributes_1gae4fb812af4f57aa1ad85e335a865b918" kindref="member">psa_get_key_type</ref>(&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_bits<sp/>=<sp/><ref refid="group__attributes_1ga5bee85c2164ad3d4c0d42501241eeb06" kindref="member">psa_get_key_bits</ref>(&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size<sp/>=<sp/><ref refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" kindref="member">PSA_EXPORT_KEY_OUTPUT_SIZE</ref>(key_type,<sp/>key_bits);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes</ref>(&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>*buffer<sp/>=<sp/>malloc(buffer_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer<sp/>==<sp/>NULL)<sp/>handle_error(...);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_length;</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/><ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key</ref>(key,<sp/>buffer,<sp/>buffer_size,<sp/>&amp;buffer_length);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>)<sp/>handle_error(...);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A supported key type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key in bits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the parameters are valid and supported, return a buffer size in bytes that guarantees that <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> or <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> will not fail with <ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref>. If the parameters are a valid combination that is not supported, return either a sensible size or 0. If the parameters are not valid, the return value is unspecified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="904" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1adf475af5fd8eae67bc9cf524d38209f2" prot="public" static="no">
        <name>PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga0e1d8f241228e49c9cadadfb4579ef1a" kindref="member">PSA_KEY_TYPE_IS_RSA</ref>(key_type) ? <ref refid="crypto__sizes_8h_1a0fffdb6216268eb6455cc83a854c8acf" kindref="member">PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE</ref>(key_bits) : \
     <ref refid="group__crypto__types_1ga88e01fa06b585654689a99bcc06bbe66" kindref="member">PSA_KEY_TYPE_IS_ECC</ref>(key_type) ? <ref refid="crypto__sizes_8h_1a221b29f08b4e5e0509a1c7cc11b623d0" kindref="member">PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE</ref>(key_bits) : \
     <ref refid="group__crypto__types_1ga248ae35c0e2becaebbf479fc1c3a3b0e" kindref="member">PSA_KEY_TYPE_IS_DH</ref>(key_type) ? <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) : \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient output buffer size for <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>.</para>
<para>This macro returns a compile-time constant if its arguments are compile-time constants.</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
The following code illustrates how to allocate enough memory to export a public key by querying the key type and size at runtime. <programlisting filename=".c"><codeline><highlight class="normal"><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>attributes<sp/>=<sp/><ref refid="group__attributes_1gac45b6c1e7228a1f425338279ee679c4e" kindref="member">PSA_KEY_ATTRIBUTES_INIT</ref>;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/>status;</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/><ref refid="group__attributes_1gacbbf5c11eac6cd70c87ffb936e1b9be2" kindref="member">psa_get_key_attributes</ref>(key,<sp/>&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>)<sp/>handle_error(...);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/>key_type<sp/>=<sp/><ref refid="group__attributes_1gae4fb812af4f57aa1ad85e335a865b918" kindref="member">psa_get_key_type</ref>(&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_bits<sp/>=<sp/><ref refid="group__attributes_1ga5bee85c2164ad3d4c0d42501241eeb06" kindref="member">psa_get_key_bits</ref>(&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size<sp/>=<sp/><ref refid="crypto__sizes_8h_1adf475af5fd8eae67bc9cf524d38209f2" kindref="member">PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE</ref>(key_type,<sp/>key_bits);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes</ref>(&amp;attributes);</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>*buffer<sp/>=<sp/>malloc(buffer_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer<sp/>==<sp/>NULL)<sp/>handle_error(...);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_length;</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/><ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key</ref>(key,<sp/>buffer,<sp/>buffer_size,<sp/>&amp;buffer_length);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>)<sp/>handle_error(...);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A public key or key pair key type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key in bits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the parameters are valid and supported, return a buffer size in bytes that guarantees that <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> will not fail with <ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref>. If the parameters are a valid combination that is not supported, return either a sensible size or 0. If the parameters are not valid, the return value is unspecified.</para>
</simplesect>
If the parameters are valid and supported, return the same result as <ref refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" kindref="member">PSA_EXPORT_KEY_OUTPUT_SIZE</ref>( <computeroutput><ref refid="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" kindref="member">PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</ref></computeroutput>(<computeroutput>key_type</computeroutput>), <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="960" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a5aa21302f87f1e932c9a1daa092df7db" prot="public" static="no">
        <name>PSA_EXPORT_KEY_PAIR_MAX_SIZE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient buffer size for exporting any asymmetric key pair.</para>
<para>This macro expands to a compile-time constant integer. This value is a sufficient buffer size when calling <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> to export any asymmetric key pair, regardless of the exact key type and key size.</para>
<para>See also <ref refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" kindref="member">PSA_EXPORT_KEY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="974" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a5aa21302f87f1e932c9a1daa092df7db" prot="public" static="no">
        <name>PSA_EXPORT_KEY_PAIR_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1abc94d8116eac9d098304e3eb15448cc7" kindref="member">PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE</ref>(<ref refid="crypto__sizes_8h_1a81080a6cbbab87f35b114cb991e3f550" kindref="member">PSA_VENDOR_ECC_MAX_CURVE_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient buffer size for exporting any asymmetric key pair.</para>
<para>This macro expands to a compile-time constant integer. This value is a sufficient buffer size when calling <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> to export any asymmetric key pair, regardless of the exact key type and key size.</para>
<para>See also <ref refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" kindref="member">PSA_EXPORT_KEY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="980" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a5aa21302f87f1e932c9a1daa092df7db" prot="public" static="no">
        <name>PSA_EXPORT_KEY_PAIR_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1ac2eaace56d8f367b9a5745aa6c4f7a7e" kindref="member">PSA_KEY_EXPORT_RSA_KEY_PAIR_MAX_SIZE</ref>(<ref refid="crypto__sizes_8h_1a2ab9324235c63e9e8cdee5bb1793eabe" kindref="member">PSA_VENDOR_RSA_MAX_KEY_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient buffer size for exporting any asymmetric key pair.</para>
<para>This macro expands to a compile-time constant integer. This value is a sufficient buffer size when calling <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> to export any asymmetric key pair, regardless of the exact key type and key size.</para>
<para>See also <ref refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" kindref="member">PSA_EXPORT_KEY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="987" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ad4463cb6edc2061338a88d1adc92b94c" prot="public" static="no">
        <name>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient buffer size for exporting any asymmetric public key.</para>
<para>This macro expands to a compile-time constant integer. This value is a sufficient buffer size when calling <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> or <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> to export any asymmetric public key, regardless of the exact key type and key size.</para>
<para>See also <ref refid="crypto__sizes_8h_1adf475af5fd8eae67bc9cf524d38209f2" kindref="member">PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1007" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ad4463cb6edc2061338a88d1adc92b94c" prot="public" static="no">
        <name>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1a221b29f08b4e5e0509a1c7cc11b623d0" kindref="member">PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE</ref>(<ref refid="crypto__sizes_8h_1a81080a6cbbab87f35b114cb991e3f550" kindref="member">PSA_VENDOR_ECC_MAX_CURVE_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient buffer size for exporting any asymmetric public key.</para>
<para>This macro expands to a compile-time constant integer. This value is a sufficient buffer size when calling <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> or <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> to export any asymmetric public key, regardless of the exact key type and key size.</para>
<para>See also <ref refid="crypto__sizes_8h_1adf475af5fd8eae67bc9cf524d38209f2" kindref="member">PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1013" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ad4463cb6edc2061338a88d1adc92b94c" prot="public" static="no">
        <name>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1a0fffdb6216268eb6455cc83a854c8acf" kindref="member">PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE</ref>(<ref refid="crypto__sizes_8h_1a2ab9324235c63e9e8cdee5bb1793eabe" kindref="member">PSA_VENDOR_RSA_MAX_KEY_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient buffer size for exporting any asymmetric public key.</para>
<para>This macro expands to a compile-time constant integer. This value is a sufficient buffer size when calling <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> or <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> to export any asymmetric public key, regardless of the exact key type and key size.</para>
<para>See also <ref refid="crypto__sizes_8h_1adf475af5fd8eae67bc9cf524d38209f2" kindref="member">PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1020" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ad4463cb6edc2061338a88d1adc92b94c" prot="public" static="no">
        <name>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1a3092049df1afb352bdd1a4f64716c900" kindref="member">PSA_KEY_EXPORT_FFDH_PUBLIC_KEY_MAX_SIZE</ref>(<ref refid="crypto__sizes_8h_1a9c2685c79ae2ae922a78c35f266dd6a4" kindref="member">PSA_VENDOR_FFDH_MAX_KEY_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient buffer size for exporting any asymmetric public key.</para>
<para>This macro expands to a compile-time constant integer. This value is a sufficient buffer size when calling <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> or <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> to export any asymmetric public key, regardless of the exact key type and key size.</para>
<para>See also <ref refid="crypto__sizes_8h_1adf475af5fd8eae67bc9cf524d38209f2" kindref="member">PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1027" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a189c37b83f1d5f792dc119bc5013a978" prot="public" static="no">
        <name>PSA_RAW_KEY_AGREEMENT_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <initializer>    ((<ref refid="group__crypto__types_1gab00289ec3d84a469950a4d8c10fb8cc6" kindref="member">PSA_KEY_TYPE_IS_ECC_KEY_PAIR</ref>(key_type) || \
      <ref refid="group__crypto__types_1gabb9dd614786fe328df4e485c1a61ed25" kindref="member">PSA_KEY_TYPE_IS_DH_KEY_PAIR</ref>(key_type)) ? <ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) : 0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sufficient output buffer size for <ref refid="group__key__derivation_1ga165dda1ad80a10730cb538069d4cc7aa" kindref="member">psa_raw_key_agreement()</ref>.</para>
<para>This macro returns a compile-time constant if its arguments are compile-time constants.</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
See also <ref refid="crypto__sizes_8h_1af9612bd2bc7851c937fd6d6f94b4aba0" kindref="member">PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A supported key type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key in bits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the parameters are valid and supported, return a buffer size in bytes that guarantees that <ref refid="group__key__derivation_1ga165dda1ad80a10730cb538069d4cc7aa" kindref="member">psa_raw_key_agreement()</ref> will not fail with <ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref>. If the parameters are a valid combination that is not supported, return either a sensible size or 0. If the parameters are not valid, the return value is unspecified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1054" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1af9612bd2bc7851c937fd6d6f94b4aba0" prot="public" static="no">
        <name>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of the output from <ref refid="group__key__derivation_1ga165dda1ad80a10730cb538069d4cc7aa" kindref="member">psa_raw_key_agreement()</ref>.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of the output any raw key agreement algorithm, in bytes.</para>
<para>See also <ref refid="crypto__sizes_8h_1a189c37b83f1d5f792dc119bc5013a978" kindref="member">PSA_RAW_KEY_AGREEMENT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1065" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1af9612bd2bc7851c937fd6d6f94b4aba0" prot="public" static="no">
        <name>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(<ref refid="crypto__sizes_8h_1a81080a6cbbab87f35b114cb991e3f550" kindref="member">PSA_VENDOR_ECC_MAX_CURVE_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of the output from <ref refid="group__key__derivation_1ga165dda1ad80a10730cb538069d4cc7aa" kindref="member">psa_raw_key_agreement()</ref>.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of the output any raw key agreement algorithm, in bytes.</para>
<para>See also <ref refid="crypto__sizes_8h_1a189c37b83f1d5f792dc119bc5013a978" kindref="member">PSA_RAW_KEY_AGREEMENT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1070" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1af9612bd2bc7851c937fd6d6f94b4aba0" prot="public" static="no">
        <name>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(<ref refid="crypto__sizes_8h_1a9c2685c79ae2ae922a78c35f266dd6a4" kindref="member">PSA_VENDOR_FFDH_MAX_KEY_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size of the output from <ref refid="group__key__derivation_1ga165dda1ad80a10730cb538069d4cc7aa" kindref="member">psa_raw_key_agreement()</ref>.</para>
<para>This macro expands to a compile-time constant integer. This value is the maximum size of the output any raw key agreement algorithm, in bytes.</para>
<para>See also <ref refid="crypto__sizes_8h_1a189c37b83f1d5f792dc119bc5013a978" kindref="member">PSA_RAW_KEY_AGREEMENT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1075" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1adaeef0383905487313ccbfaf1b73c95e" prot="public" static="no">
        <name>PSA_CIPHER_IV_LENGTH</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) &gt; 1 &amp;&amp; \
     ((alg) == <ref refid="group__crypto__types_1gad318309706a769cffdc64e4c7e06b2e9" kindref="member">PSA_ALG_CTR</ref> || \
      (alg) == <ref refid="group__crypto__types_1ga0088c933e01d671f263a9a1f177cb5bc" kindref="member">PSA_ALG_CFB</ref> || \
      (alg) == <ref refid="group__crypto__types_1gae96bb421fa634c6fa8f571f0112f1ddb" kindref="member">PSA_ALG_OFB</ref> || \
      (alg) == <ref refid="group__crypto__types_1gaa722c0e426a797fd6d99623f59748125" kindref="member">PSA_ALG_XTS</ref> || \
      (alg) == <ref refid="group__crypto__types_1gacb332d72716958880ee7f97d8365ae66" kindref="member">PSA_ALG_CBC_NO_PADDING</ref> || \
      (alg) == <ref refid="group__crypto__types_1gaef50d2e9716eb6d476046608e4e0c78c" kindref="member">PSA_ALG_CBC_PKCS7</ref>) ? <ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) : \
     (key_type) == <ref refid="group__crypto__types_1ga901548883b3bce56cc21c3a22cf8d93c" kindref="member">PSA_KEY_TYPE_CHACHA20</ref> &amp;&amp; \
     (alg) == <ref refid="group__crypto__types_1gad98c105198f7428f7d1dffcb2cd398cd" kindref="member">PSA_ALG_STREAM_CIPHER</ref> ? 12u : \
     (alg) == <ref refid="group__crypto__types_1ga89627bb27ec3ce642853ab8554a88572" kindref="member">PSA_ALG_CCM_STAR_NO_TAG</ref> ? 13u : \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default IV size for a cipher algorithm, in bytes.</para>
<para>The IV that is generated as part of a call to <ref refid="group__cipher_1ga61f02fbfa681c2659546eca52277dbf1" kindref="member">psa_cipher_encrypt()</ref> is always the default IV length for the algorithm.</para>
<para>This macro can be used to allocate a buffer of sufficient size to store the IV output from <ref refid="group__cipher_1ga29fd7d32a5729226a2f73e7b6487bd8a" kindref="member">psa_cipher_generate_iv()</ref> when using a multi-part cipher operation.</para>
<para>See also <ref refid="crypto__sizes_8h_1ad5630c60148421b334b1bb3962bd4f86" kindref="member">PSA_CIPHER_IV_MAX_SIZE</ref>.</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm <computeroutput>alg</computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A cipher algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The default IV size for the specified key type and algorithm. If the algorithm does not use an IV, return 0. If the key type or cipher algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1102" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ad5630c60148421b334b1bb3962bd4f86" prot="public" static="no">
        <name>PSA_CIPHER_IV_MAX_SIZE</name>
        <initializer>16u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum IV size for all supported cipher algorithms, in bytes.</para>
<para>See also <ref refid="crypto__sizes_8h_1adaeef0383905487313ccbfaf1b73c95e" kindref="member">PSA_CIPHER_IV_LENGTH()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1119" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ada02457bee639a10a0c3ddbe1f73fedc" prot="public" static="no">
        <name>PSA_CIPHER_ENCRYPT_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <param><defname>input_length</defname></param>
        <initializer>    (alg == <ref refid="group__crypto__types_1gaef50d2e9716eb6d476046608e4e0c78c" kindref="member">PSA_ALG_CBC_PKCS7</ref> ?                                         \
     (<ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) != 0 ?                    \
      <ref refid="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" kindref="member">PSA_ROUND_UP_TO_MULTIPLE</ref>(<ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type), \
                               (input_length) + 1u) +                   \
      <ref refid="crypto__sizes_8h_1adaeef0383905487313ccbfaf1b73c95e" kindref="member">PSA_CIPHER_IV_LENGTH</ref>((key_type), (alg)) : 0u) :                   \
     (<ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(alg) ?                                          \
      (input_length) + <ref refid="crypto__sizes_8h_1adaeef0383905487313ccbfaf1b73c95e" kindref="member">PSA_CIPHER_IV_LENGTH</ref>((key_type), (alg)) :        \
      0u))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum size of the output of <ref refid="group__cipher_1ga61f02fbfa681c2659546eca52277dbf1" kindref="member">psa_cipher_encrypt()</ref>, in bytes.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__cipher_1ga61f02fbfa681c2659546eca52277dbf1" kindref="member">psa_cipher_encrypt()</ref> will not fail due to an insufficient buffer size. Depending on the algorithm, the actual size of the output might be smaller.</para>
<para>See also <ref refid="crypto__sizes_8h_1a745c06526e5e062a9caf45e6f111f67d" kindref="member">PSA_CIPHER_ENCRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>input_length</computeroutput>).</para>
<para><simplesect kind="warning"><para>This macro may evaluate its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm alg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A cipher algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output size for the specified key type and algorithm. If the key type or cipher algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1144" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a745c06526e5e062a9caf45e6f111f67d" prot="public" static="no">
        <name>PSA_CIPHER_ENCRYPT_OUTPUT_MAX_SIZE</name>
        <param><defname>input_length</defname></param>
        <initializer>    (<ref refid="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" kindref="member">PSA_ROUND_UP_TO_MULTIPLE</ref>(<ref refid="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" kindref="member">PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE</ref>,          \
                              (input_length) + 1u) +                    \
     <ref refid="crypto__sizes_8h_1ad5630c60148421b334b1bb3962bd4f86" kindref="member">PSA_CIPHER_IV_MAX_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__cipher_1ga61f02fbfa681c2659546eca52277dbf1" kindref="member">psa_cipher_encrypt()</ref>, for any of the supported key types and cipher algorithms.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__cipher_1ga61f02fbfa681c2659546eca52277dbf1" kindref="member">psa_cipher_encrypt()</ref> will not fail due to an insufficient buffer size.</para>
<para>See also <ref refid="crypto__sizes_8h_1ada02457bee639a10a0c3ddbe1f73fedc" kindref="member">PSA_CIPHER_ENCRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>input_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1165" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a413e5c78d89d0f7a4ccdb047e7238125" prot="public" static="no">
        <name>PSA_CIPHER_DECRYPT_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <param><defname>input_length</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(alg) &amp;&amp;                                          \
     ((key_type) &amp; <ref refid="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" kindref="member">PSA_KEY_TYPE_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga8f214beb04334be08f927f227f097ef1" kindref="member">PSA_KEY_TYPE_CATEGORY_SYMMETRIC</ref> ? \
     (input_length) :                                                   \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum size of the output of <ref refid="group__cipher_1gab3593f5f14d8c0431dd306d80929215e" kindref="member">psa_cipher_decrypt()</ref>, in bytes.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__cipher_1gab3593f5f14d8c0431dd306d80929215e" kindref="member">psa_cipher_decrypt()</ref> will not fail due to an insufficient buffer size. Depending on the algorithm, the actual size of the output might be smaller.</para>
<para>See also <ref refid="crypto__sizes_8h_1afbcce9b24605d70ead18d9c6de6a5ac7" kindref="member">PSA_CIPHER_DECRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>input_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm alg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A cipher algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output size for the specified key type and algorithm. If the key type or cipher algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1189" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1afbcce9b24605d70ead18d9c6de6a5ac7" prot="public" static="no">
        <name>PSA_CIPHER_DECRYPT_OUTPUT_MAX_SIZE</name>
        <param><defname>input_length</defname></param>
        <initializer>(input_length)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__cipher_1gab3593f5f14d8c0431dd306d80929215e" kindref="member">psa_cipher_decrypt()</ref>, for any of the supported key types and cipher algorithms.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__cipher_1gab3593f5f14d8c0431dd306d80929215e" kindref="member">psa_cipher_decrypt()</ref> will not fail due to an insufficient buffer size.</para>
<para>See also <ref refid="crypto__sizes_8h_1a413e5c78d89d0f7a4ccdb047e7238125" kindref="member">PSA_CIPHER_DECRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>input_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1205" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1acf11f477f1a0f57e3258bc345e9198bc" prot="public" static="no">
        <name>PSA_CIPHER_UPDATE_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <param><defname>input_length</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(alg) ?                                           \
     (<ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) != 0 ?                    \
      (((alg) == <ref refid="group__crypto__types_1gaef50d2e9716eb6d476046608e4e0c78c" kindref="member">PSA_ALG_CBC_PKCS7</ref>      ||                              \
        (alg) == <ref refid="group__crypto__types_1gacb332d72716958880ee7f97d8365ae66" kindref="member">PSA_ALG_CBC_NO_PADDING</ref> ||                              \
        (alg) == <ref refid="group__crypto__types_1gab8f0609cd0f12cccc9c950fd5a81a0e3" kindref="member">PSA_ALG_ECB_NO_PADDING</ref>) ?                              \
       <ref refid="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" kindref="member">PSA_ROUND_UP_TO_MULTIPLE</ref>(<ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type), \
                                input_length) :                         \
       (input_length)) : 0u) :                                          \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__cipher_1gac3ca27ac6682917c48247d01fd96cd0f" kindref="member">psa_cipher_update()</ref>.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__cipher_1gac3ca27ac6682917c48247d01fd96cd0f" kindref="member">psa_cipher_update()</ref> will not fail due to an insufficient buffer size. The actual size of the output might be smaller in any given call.</para>
<para>See also <ref refid="crypto__sizes_8h_1ab1f6598efd6a7dc56e7ad7e34719eb32" kindref="member">PSA_CIPHER_UPDATE_OUTPUT_MAX_SIZE</ref>(<computeroutput>input_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm alg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A cipher algorithm (PSA_ALG_XXX value such that <ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output size for the specified key type and algorithm. If the key type or cipher algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1226" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ab1f6598efd6a7dc56e7ad7e34719eb32" prot="public" static="no">
        <name>PSA_CIPHER_UPDATE_OUTPUT_MAX_SIZE</name>
        <param><defname>input_length</defname></param>
        <initializer>(<ref refid="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" kindref="member">PSA_ROUND_UP_TO_MULTIPLE</ref>(<ref refid="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" kindref="member">PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE</ref>, input_length))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__cipher_1gac3ca27ac6682917c48247d01fd96cd0f" kindref="member">psa_cipher_update()</ref>, for any of the supported key types and cipher algorithms.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__cipher_1gac3ca27ac6682917c48247d01fd96cd0f" kindref="member">psa_cipher_update()</ref> will not fail due to an insufficient buffer size.</para>
<para>See also <ref refid="crypto__sizes_8h_1acf11f477f1a0f57e3258bc345e9198bc" kindref="member">PSA_CIPHER_UPDATE_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>input_length</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the input in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1247" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1a2d9422f5ca18e6025d41134fe883d697" prot="public" static="no">
        <name>PSA_CIPHER_FINISH_OUTPUT_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(alg) ?                           \
     (alg == <ref refid="group__crypto__types_1gaef50d2e9716eb6d476046608e4e0c78c" kindref="member">PSA_ALG_CBC_PKCS7</ref> ?                        \
      <ref refid="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" kindref="member">PSA_BLOCK_CIPHER_BLOCK_LENGTH</ref>(key_type) :         \
      0u) :                                             \
     0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient ciphertext buffer size for <ref refid="group__cipher_1ga1dcb58b8befe23f8a4d7a1d49c99249b" kindref="member">psa_cipher_finish()</ref>.</para>
<para>If the size of the ciphertext buffer is at least this large, it is guaranteed that <ref refid="group__cipher_1ga1dcb58b8befe23f8a4d7a1d49c99249b" kindref="member">psa_cipher_finish()</ref> will not fail due to an insufficient ciphertext buffer size. The actual size of the output might be smaller in any given call.</para>
<para>See also <ref refid="crypto__sizes_8h_1ac7980b0ebf97b171493560b06c51e8f5" kindref="member">PSA_CIPHER_FINISH_OUTPUT_MAX_SIZE()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A symmetric key type that is compatible with algorithm alg. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A cipher algorithm (PSA_ALG_XXX value such that <ref refid="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" kindref="member">PSA_ALG_IS_CIPHER</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output size for the specified key type and algorithm. If the key type or cipher algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1267" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__sizes_8h_1ac7980b0ebf97b171493560b06c51e8f5" prot="public" static="no">
        <name>PSA_CIPHER_FINISH_OUTPUT_MAX_SIZE</name>
        <initializer>(<ref refid="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" kindref="member">PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient ciphertext buffer size for <ref refid="group__cipher_1ga1dcb58b8befe23f8a4d7a1d49c99249b" kindref="member">psa_cipher_finish()</ref>, for any of the supported key types and cipher algorithms.</para>
<para>See also <ref refid="crypto__sizes_8h_1a2d9422f5ca18e6025d41134fe883d697" kindref="member">PSA_CIPHER_FINISH_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" line="1279" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h" bodystart="1279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PSA cryptography module: Mbed TLS buffer size macros. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This file may not be included directly. Applications must include <ref refid="crypto_8h" kindref="compound">psa/crypto.h</ref>.</para>
</simplesect>
This file contains the definitions of macros that are useful to compute buffer sizes. The signatures and semantics of these macros are standardized, but the definitions are not, because they depend on the available algorithms and, in some cases, on permitted tolerances on buffer sizes.</para>
<para>In implementations with isolation between the application and the cryptography module, implementers should take care to ensure that the definitions that are exposed to applications match what the module implements.</para>
<para>Macros that compute sizes whose values do not depend on the implementation are in <ref refid="crypto_8h" kindref="compound">crypto.h</ref>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="23"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PSA_CRYPTO_SIZES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_CRYPTO_SIZES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Include<sp/>the<sp/>build-time<sp/>configuration<sp/>information<sp/>file.<sp/>Here,<sp/>we<sp/>do<sp/>not</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>include<sp/>`&quot;mbedtls/build_info.h&quot;`<sp/>directly<sp/>but<sp/>`&quot;psa/build_info.h&quot;`,<sp/>which</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>is<sp/>basically<sp/>just<sp/>an<sp/>alias<sp/>to<sp/>it.<sp/>This<sp/>is<sp/>to<sp/>ease<sp/>the<sp/>maintenance<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>PSA<sp/>cryptography<sp/>repository<sp/>which<sp/>has<sp/>a<sp/>different<sp/>build<sp/>system<sp/>and</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>configuration.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="psa_2build__info_8h" kindref="compound">psa/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_BITS_TO_BYTES(bits)<sp/>(((bits)<sp/>+<sp/>7u)<sp/>/<sp/>8u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="crypto__sizes_8h_1a997f71feb68cca794f7ed676600e06db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_BYTES_TO_BITS(bytes)<sp/>((bytes)<sp/>*<sp/>8u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="crypto__sizes_8h_1afbf0c86bb3652ab37c04b43c98659873" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_MAX_OF_THREE(a,<sp/>b,<sp/>c)<sp/>((a)<sp/>&lt;=<sp/>(b)<sp/>?<sp/>(b)<sp/>&lt;=<sp/>(c)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c)<sp/>:<sp/>(b)<sp/>:<sp/>(a)<sp/>&lt;=<sp/>(c)<sp/>?<sp/>(c)<sp/>:<sp/>(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="crypto__sizes_8h_1a0d9fea0449db3d4ddfe5942e739027a3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ROUND_UP_TO_MULTIPLE(block_size,<sp/>length)<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((length)<sp/>+<sp/>(block_size)<sp/>-<sp/>1)<sp/>/<sp/>(block_size)<sp/>*<sp/>(block_size))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="crypto__sizes_8h_1ae0c23128dc05e9680d2c4c1b292bcc77" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_HASH_LENGTH(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_MD5<sp/>?<sp/>16u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_RIPEMD160<sp/>?<sp/>20u<sp/>:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_1<sp/>?<sp/>20u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_224<sp/>?<sp/>28u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_256<sp/>?<sp/>32u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_384<sp/>?<sp/>48u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_512<sp/>?<sp/>64u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_512_224<sp/>?<sp/>28u<sp/>:<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_512_256<sp/>?<sp/>32u<sp/>:<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_224<sp/>?<sp/>28u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_256<sp/>?<sp/>32u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_384<sp/>?<sp/>48u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_512<sp/>?<sp/>64u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="crypto__sizes_8h_1ab650de09f5b291b6dedaf15c346a2cfe" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_HASH_BLOCK_LENGTH(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_MD5<sp/>?<sp/>64u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_RIPEMD160<sp/>?<sp/>64u<sp/>:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_1<sp/>?<sp/>64u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_224<sp/>?<sp/>64u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_256<sp/>?<sp/>64u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_384<sp/>?<sp/>128u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_512<sp/>?<sp/>128u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_512_224<sp/>?<sp/>128u<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA_512_256<sp/>?<sp/>128u<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_224<sp/>?<sp/>144u<sp/>:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_256<sp/>?<sp/>136u<sp/>:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_384<sp/>?<sp/>104u<sp/>:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ALG_HMAC_GET_HASH(alg)<sp/>==<sp/>PSA_ALG_SHA3_512<sp/>?<sp/>72u<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/*<sp/>Note:<sp/>for<sp/>HMAC-SHA-3,<sp/>the<sp/>block<sp/>size<sp/>is<sp/>144<sp/>bytes<sp/>for<sp/>HMAC-SHA3-224,</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>136<sp/>bytes<sp/>for<sp/>HMAC-SHA3-256,<sp/>104<sp/>bytes<sp/>for<sp/>SHA3-384,<sp/>72<sp/>bytes<sp/>for</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>HMAC-SHA3-512.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>PSA_HASH_MAX_SIZE<sp/>should<sp/>be<sp/>kept<sp/>in<sp/>sync<sp/>with<sp/>MBEDTLS_MD_MAX_SIZE,</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>see<sp/>the<sp/>note<sp/>on<sp/>MBEDTLS_MD_MAX_SIZE<sp/>for<sp/>details.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_ALG_SHA3_224)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="crypto__sizes_8h_1a123539632874601194b1d86a398e14ff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>144u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA3_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>136u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_512)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>128u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>128u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA3_384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>104u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA3_512)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>72u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>64u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_224)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>64u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>SHA-1<sp/>or<sp/>smaller<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HMAC_MAX_HASH_BLOCK_SIZE<sp/>64u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_ALG_SHA_512)<sp/>||<sp/>defined(PSA_WANT_ALG_SHA3_512)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="crypto__sizes_8h_1a6ce1014efbbc0bcca286ef7f9a72cb29" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HASH_MAX_SIZE<sp/>64u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_384)<sp/>||<sp/>defined(PSA_WANT_ALG_SHA3_384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HASH_MAX_SIZE<sp/>48u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_256)<sp/>||<sp/>defined(PSA_WANT_ALG_SHA3_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HASH_MAX_SIZE<sp/>32u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_224)<sp/>||<sp/>defined(PSA_WANT_ALG_SHA3_224)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HASH_MAX_SIZE<sp/>28u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>SHA-1<sp/>or<sp/>smaller<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_HASH_MAX_SIZE<sp/>20u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="comment">/*<sp/>All<sp/>non-HMAC<sp/>MACs<sp/>have<sp/>a<sp/>maximum<sp/>size<sp/>that&apos;s<sp/>smaller<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>minimum<sp/>possible<sp/>value<sp/>of<sp/>PSA_HASH_MAX_SIZE<sp/>in<sp/>this<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>the<sp/>encoding<sp/>of<sp/>truncated<sp/>MAC<sp/>algorithms<sp/>limits<sp/>this<sp/>value</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>to<sp/>64<sp/>bytes.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="crypto__sizes_8h_1a4681cc4f6226883a2160122c562ca682" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_MAC_MAX_SIZE<sp/>PSA_HASH_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="crypto__sizes_8h_1a9aab63d83591633baa13beff3bdf8b2f" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_TAG_LENGTH(key_type,<sp/>key_bits,<sp/>alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_AEAD_NONCE_LENGTH(key_type,<sp/>alg)<sp/>!=<sp/>0<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ALG_AEAD_GET_TAG_LENGTH(alg)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((void)<sp/>(key_bits),<sp/>0u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="crypto__sizes_8h_1ae3b873ea579c278946e6e536b7e513af" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_TAG_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>16u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>size<sp/>of<sp/>an<sp/>RSA<sp/>key<sp/>on<sp/>this<sp/>implementation,<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>vendor-specific<sp/>macro.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>Mbed<sp/>TLS<sp/>does<sp/>not<sp/>set<sp/>a<sp/>hard<sp/>limit<sp/>on<sp/>the<sp/>size<sp/>of<sp/>RSA<sp/>keys:<sp/>any<sp/>key</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>whose<sp/>parameters<sp/>fit<sp/>in<sp/>a<sp/>bignum<sp/>is<sp/>accepted.<sp/>However<sp/>large<sp/>keys<sp/>can</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>induce<sp/>a<sp/>large<sp/>memory<sp/>usage<sp/>and<sp/>long<sp/>computation<sp/>times.<sp/>Unlike<sp/>other</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>auxiliary<sp/>macros<sp/>in<sp/>this<sp/>file<sp/>and<sp/>in<sp/>crypto.h,<sp/>which<sp/>reflect<sp/>how<sp/>the</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>library<sp/>is<sp/>configured,<sp/>this<sp/>macro<sp/>defines<sp/>how<sp/>the<sp/>library<sp/>is</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>configured.<sp/>This<sp/>implementation<sp/>refuses<sp/>to<sp/>import<sp/>or<sp/>generate<sp/>an</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>RSA<sp/>key<sp/>whose<sp/>size<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>value<sp/>defined<sp/>here.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>an<sp/>implementation<sp/>may<sp/>set<sp/>different<sp/>size<sp/>limits<sp/>for<sp/>different</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>operations,<sp/>and<sp/>does<sp/>not<sp/>need<sp/>to<sp/>accept<sp/>all<sp/>key<sp/>sizes<sp/>up<sp/>to<sp/>the<sp/>limit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="crypto__sizes_8h_1a2ab9324235c63e9e8cdee5bb1793eabe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_RSA_MAX_KEY_BITS<sp/>4096u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>minimum<sp/>size<sp/>of<sp/>an<sp/>RSA<sp/>key<sp/>on<sp/>this<sp/>implementation,<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>vendor-specific<sp/>macro.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>Limits<sp/>RSA<sp/>key<sp/>generation<sp/>to<sp/>a<sp/>minimum<sp/>due<sp/>to<sp/>avoid<sp/>accidental<sp/>misuse.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>This<sp/>value<sp/>cannot<sp/>be<sp/>less<sp/>than<sp/>128<sp/>bits.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_RSA_GEN_KEY_MIN_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_RSA_GENERATE_MIN_KEY_BITS<sp/>MBEDTLS_RSA_GEN_KEY_MIN_BITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="crypto__sizes_8h_1a2587eefb3f3a07078117f7282869e3c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_RSA_GENERATE_MIN_KEY_BITS<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>size<sp/>of<sp/>an<sp/>DH<sp/>key<sp/>on<sp/>this<sp/>implementation,<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>an<sp/>implementation<sp/>may<sp/>set<sp/>different<sp/>size<sp/>limits<sp/>for<sp/>different</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>operations,<sp/>and<sp/>does<sp/>not<sp/>need<sp/>to<sp/>accept<sp/>all<sp/>key<sp/>sizes<sp/>up<sp/>to<sp/>the<sp/>limit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="crypto__sizes_8h_1a9c2685c79ae2ae922a78c35f266dd6a4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_FFDH_MAX_KEY_BITS<sp/>8192u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>size<sp/>of<sp/>an<sp/>ECC<sp/>key<sp/>on<sp/>this<sp/>implementation,<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>vendor-specific<sp/>macro.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_ECC_SECP_R1_521)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="crypto__sizes_8h_1a81080a6cbbab87f35b114cb991e3f550" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>521u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_BRAINPOOL_P_R1_512)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>512u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_MONTGOMERY_448)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>448u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_SECP_R1_384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>384u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_BRAINPOOL_P_R1_384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>384u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_SECP_R1_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>256u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_SECP_K1_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>256u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_BRAINPOOL_P_R1_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>256u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_MONTGOMERY_255)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>255u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_SECP_R1_224)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>224u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_SECP_K1_224)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>224u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_SECP_R1_192)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>192u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ECC_SECP_K1_192)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>192u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECC_MAX_CURVE_BITS<sp/>0u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="crypto__sizes_8h_1aea956970b7c2221f5c8d179c02d74d43" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_TLS12_PSK_TO_MS_PSK_MAX_SIZE<sp/>128u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>expected<sp/>size<sp/>of<sp/>input<sp/>passed<sp/>to<sp/>psa_tls12_ecjpake_to_pms_input,</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>which<sp/>is<sp/>expected<sp/>to<sp/>work<sp/>with<sp/>P-256<sp/>curve<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="crypto__sizes_8h_1a04e6e84b72b2f61c374f347347d87a87" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_TLS12_ECJPAKE_TO_PMS_INPUT_SIZE<sp/>65u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>size<sp/>of<sp/>a<sp/>serialized<sp/>K.X<sp/>coordinate<sp/>to<sp/>be<sp/>used<sp/>in</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>psa_tls12_ecjpake_to_pms_input.<sp/>This<sp/>function<sp/>only<sp/>accepts<sp/>the<sp/>P-256</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>curve.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="crypto__sizes_8h_1a25d5de5a2c512d8ecc51319cc2ee1f3b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_TLS12_ECJPAKE_TO_PMS_DATA_SIZE<sp/>32u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>iterations<sp/>for<sp/>PBKDF2<sp/>on<sp/>this<sp/>implementation,<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>vendor-specific<sp/>macro.<sp/>This<sp/>can<sp/>be<sp/>configured<sp/>if<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="crypto__sizes_8h_1a9ae91d1c22deed4a58fbeed527e2a3b6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_PBKDF2_MAX_ITERATIONS<sp/>0xffffffffU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="crypto__sizes_8h_1a615cd3a686a1d2301a6ef1198e55a512" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE<sp/>16u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="crypto__sizes_8h_1a4c1151a9816184287aa5f76e82e16080" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_MAC_LENGTH(key_type,<sp/>key_bits,<sp/>alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((alg)<sp/>&amp;<sp/>PSA_ALG_MAC_TRUNCATION_MASK<sp/>?<sp/>PSA_MAC_TRUNCATED_LENGTH(alg)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ALG_IS_HMAC(alg)<sp/>?<sp/>PSA_HASH_LENGTH(PSA_ALG_HMAC_GET_HASH(alg))<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ALG_IS_BLOCK_CIPHER_MAC(alg)<sp/>?<sp/>PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((void)<sp/>(key_type),<sp/>(void)<sp/>(key_bits),<sp/>0u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="crypto__sizes_8h_1a0e0791f41b38a79b1fda63c4cb0eec7a" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_ENCRYPT_OUTPUT_SIZE(key_type,<sp/>alg,<sp/>plaintext_length)<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_AEAD_NONCE_LENGTH(key_type,<sp/>alg)<sp/>!=<sp/>0<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(plaintext_length)<sp/>+<sp/>PSA_ALG_AEAD_GET_TAG_LENGTH(alg)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="crypto__sizes_8h_1a627fd15f45e7aab42d0126f1534f24a5" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_ENCRYPT_OUTPUT_MAX_SIZE(plaintext_length)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((plaintext_length)<sp/>+<sp/>PSA_AEAD_TAG_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="crypto__sizes_8h_1ad33bdee829a3d6c4083cae62d176fa9e" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_DECRYPT_OUTPUT_SIZE(key_type,<sp/>alg,<sp/>ciphertext_length)<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_AEAD_NONCE_LENGTH(key_type,<sp/>alg)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(ciphertext_length)<sp/>&gt;<sp/>PSA_ALG_AEAD_GET_TAG_LENGTH(alg)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(ciphertext_length)<sp/>-<sp/>PSA_ALG_AEAD_GET_TAG_LENGTH(alg)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="crypto__sizes_8h_1aa7135728f0067ffcf6536e7d6c356aa5" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_DECRYPT_OUTPUT_MAX_SIZE(ciphertext_length)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(ciphertext_length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="crypto__sizes_8h_1a3dcd505a4e70a63708c05bd8591a4782" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_NONCE_LENGTH(key_type,<sp/>alg)<sp/>\</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>==<sp/>16<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_PSA_ALG_AEAD_EQUAL(alg,<sp/>PSA_ALG_CCM)<sp/>?<sp/>13u<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_PSA_ALG_AEAD_EQUAL(alg,<sp/>PSA_ALG_GCM)<sp/>?<sp/>12u<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(key_type)<sp/>==<sp/>PSA_KEY_TYPE_CHACHA20<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_PSA_ALG_AEAD_EQUAL(alg,<sp/>PSA_ALG_CHACHA20_POLY1305)<sp/>?<sp/>12u<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="crypto__sizes_8h_1ac2a332765ba4ccfc24935d6f7f48fcc7" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_NONCE_MAX_SIZE<sp/>13u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="comment">/*<sp/>For<sp/>all<sp/>the<sp/>AEAD<sp/>modes<sp/>defined<sp/>in<sp/>this<sp/>specification,<sp/>it<sp/>is<sp/>possible</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>to<sp/>emit<sp/>output<sp/>without<sp/>delay.<sp/>However,<sp/>hardware<sp/>may<sp/>not<sp/>always<sp/>be</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>capable<sp/>of<sp/>this.<sp/>So<sp/>for<sp/>modes<sp/>based<sp/>on<sp/>a<sp/>block<sp/>cipher,<sp/>allow<sp/>the</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>implementation<sp/>to<sp/>delay<sp/>the<sp/>output<sp/>until<sp/>it<sp/>has<sp/>a<sp/>full<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="crypto__sizes_8h_1a38c502f21653f1b3708ae8897d1bb01d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_AEAD_UPDATE_OUTPUT_SIZE(key_type,<sp/>alg,<sp/>input_length)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_AEAD_NONCE_LENGTH(key_type,<sp/>alg)<sp/>!=<sp/>0<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ALG_IS_AEAD_ON_BLOCK_CIPHER(alg)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ROUND_UP_TO_MULTIPLE(PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type),<sp/>(input_length))<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(input_length)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="crypto__sizes_8h_1a7bad9346cc8ceaffa4a8e7cb8c4fc9ce" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_UPDATE_OUTPUT_MAX_SIZE(input_length)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ROUND_UP_TO_MULTIPLE(PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE,<sp/>(input_length)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="crypto__sizes_8h_1aeaa3630f4450996638d4c56d651301d3" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_FINISH_OUTPUT_SIZE(key_type,<sp/>alg)<sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_AEAD_NONCE_LENGTH(key_type,<sp/>alg)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/><sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ALG_IS_AEAD_ON_BLOCK_CIPHER(alg)<sp/>?<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="crypto__sizes_8h_1ae2d44f764023b9e7948af9344ecb66ce" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_FINISH_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/><sp/>(PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="crypto__sizes_8h_1a4ca7886c2fedd17a1327ad90ee1cc480" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_VERIFY_OUTPUT_SIZE(key_type,<sp/>alg)<sp/>\</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_AEAD_NONCE_LENGTH(key_type,<sp/>alg)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/><sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ALG_IS_AEAD_ON_BLOCK_CIPHER(alg)<sp/>?<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="crypto__sizes_8h_1a19fc08f5f6f33fd0b91152de1643df0c" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_AEAD_VERIFY_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/><sp/>(PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595" refid="crypto__sizes_8h_1aec0bcba60e7514b83f967b171d494ed3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_RSA_MINIMUM_PADDING_SIZE(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_IS_RSA_OAEP(alg)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>2u<sp/>*<sp/>PSA_HASH_LENGTH(PSA_ALG_RSA_OAEP_GET_HASH(alg))<sp/>+<sp/>1u<sp/>:<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>11u<sp/></highlight><highlight class="comment">/*PKCS#1v1.5*/</highlight><highlight class="preprocessor">)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="crypto__sizes_8h_1a10c472a35f04051add6b20cc228ffc11" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ECDSA_SIGNATURE_SIZE(curve_bits)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(curve_bits)<sp/>*<sp/>2u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="crypto__sizes_8h_1a31021bbd8bb365fc350532b5fd18a25a" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_SIGN_OUTPUT_SIZE(key_type,<sp/>key_bits,<sp/>alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_IS_RSA(key_type)<sp/>?<sp/>((void)<sp/>alg,<sp/>PSA_BITS_TO_BYTES(key_bits))<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_ECC(key_type)<sp/>?<sp/>PSA_ECDSA_SIGNATURE_SIZE(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((void)<sp/>alg,<sp/>0u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="crypto__sizes_8h_1af3a17477697d78b6c293d18ee9bc231b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_VENDOR_ECDSA_SIGNATURE_MAX_SIZE<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_ECDSA_SIGNATURE_SIZE(PSA_VENDOR_ECC_MAX_CURVE_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="preprocessor">#define<sp/>PSA_SIGNATURE_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(PSA_WANT_ALG_ECDSA)<sp/>||<sp/>defined(PSA_WANT_ALG_DETERMINISTIC_ECDSA))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_VENDOR_ECDSA_SIGNATURE_MAX_SIZE<sp/>&gt;<sp/>PSA_SIGNATURE_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_SIGNATURE_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>PSA_VENDOR_ECDSA_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(PSA_WANT_ALG_RSA_PKCS1V15_SIGN)<sp/>||<sp/>defined(PSA_WANT_ALG_RSA_PSS))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(PSA_VENDOR_RSA_MAX_KEY_BITS)<sp/>&gt;<sp/>PSA_SIGNATURE_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="crypto__sizes_8h_1a687a317642db9486fda38ea553900a1e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_SIGNATURE_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>PSA_BITS_TO_BYTES(PSA_VENDOR_RSA_MAX_KEY_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="crypto__sizes_8h_1a66ba3bd93e5ec52870ccc3848778bad8" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ASYMMETRIC_ENCRYPT_OUTPUT_SIZE(key_type,<sp/>key_bits,<sp/>alg)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_IS_RSA(key_type)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((void)<sp/>alg,<sp/>PSA_BITS_TO_BYTES(key_bits))<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="comment">/*<sp/>This<sp/>macro<sp/>assumes<sp/>that<sp/>RSA<sp/>is<sp/>the<sp/>only<sp/>supported<sp/>asymmetric<sp/>encryption.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="crypto__sizes_8h_1a1a04450654b66dd9ac2fafb9b5413ae3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ASYMMETRIC_ENCRYPT_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(PSA_VENDOR_RSA_MAX_KEY_BITS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="728" refid="crypto__sizes_8h_1a61a246f3eac41989821d982e56fea6c1" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ASYMMETRIC_DECRYPT_OUTPUT_SIZE(key_type,<sp/>key_bits,<sp/>alg)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_IS_RSA(key_type)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_BITS_TO_BYTES(key_bits)<sp/>-<sp/>PSA_RSA_MINIMUM_PADDING_SIZE(alg)<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="crypto__sizes_8h_1a4b1576b11393e43831232cac4bf75f0c" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ASYMMETRIC_DECRYPT_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(PSA_VENDOR_RSA_MAX_KEY_BITS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>ASN.1<sp/>encoding<sp/>of<sp/>an<sp/>INTEGER<sp/>with<sp/>the<sp/>specified</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>This<sp/>definition<sp/>assumes<sp/>that<sp/>bits<sp/>&lt;=<sp/>2^19<sp/>-<sp/>9<sp/>so<sp/>that<sp/>the<sp/>length<sp/>field</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/>is<sp/>at<sp/>most<sp/>3<sp/>bytes.<sp/>The<sp/>length<sp/>of<sp/>the<sp/>encoding<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>bit<sp/>string<sp/>padded<sp/>to<sp/>a<sp/>whole<sp/>number<sp/>of<sp/>bytes<sp/>plus:</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/>-<sp/>1<sp/>type<sp/>byte;</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>-<sp/>1<sp/>to<sp/>3<sp/>length<sp/>bytes;</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>-<sp/>0<sp/>to<sp/>1<sp/>bytes<sp/>of<sp/>leading<sp/>0<sp/>due<sp/>to<sp/>the<sp/>sign<sp/>bit.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753" refid="crypto__sizes_8h_1a6a30ddc479486f4c5db1c759c3d052c2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE(bits)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((bits)<sp/>/<sp/>8u<sp/>+<sp/>5u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>an<sp/>RSA<sp/>public<sp/>key.</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*<sp/>Assumes<sp/>that<sp/>the<sp/>public<sp/>exponent<sp/>is<sp/>less<sp/>than<sp/>2^32.</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>RSAPublicKey<sp/><sp/>::=<sp/><sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>modulus<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/><sp/><sp/>--<sp/>n</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>publicExponent<sp/><sp/><sp/><sp/><sp/>INTEGER<sp/><sp/>}<sp/><sp/>--<sp/>e</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/>-<sp/>4<sp/>bytes<sp/>of<sp/>SEQUENCE<sp/>overhead;</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>-<sp/>n<sp/>:<sp/>INTEGER;</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>-<sp/>7<sp/>bytes<sp/>for<sp/>the<sp/>public<sp/>exponent.</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="crypto__sizes_8h_1a0fffdb6216268eb6455cc83a854c8acf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE(key_bits)<sp/>+<sp/>11u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>an<sp/>RSA<sp/>key<sp/>pair.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/>Assumes<sp/>that<sp/>the<sp/>public<sp/>exponent<sp/>is<sp/>less<sp/>than<sp/>2^32<sp/>and<sp/>that<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>difference<sp/>between<sp/>the<sp/>two<sp/>primes<sp/>is<sp/>at<sp/>most<sp/>1<sp/>bit.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*<sp/>RSAPrivateKey<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Version,<sp/><sp/>--<sp/>0</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>modulus<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>N-bit</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>publicExponent<sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>32-bit</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>privateExponent<sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>N-bit</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>prime1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>N/2-bit</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>prime2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>N/2-bit</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>exponent1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>N/2-bit</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>exponent2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>N/2-bit</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>coefficient<sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>N/2-bit</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/>-<sp/>4<sp/>bytes<sp/>of<sp/>SEQUENCE<sp/>overhead;</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*<sp/>-<sp/>3<sp/>bytes<sp/>of<sp/>version;</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*<sp/>-<sp/>7<sp/>half-size<sp/>INTEGERs<sp/>plus<sp/>2<sp/>full-size<sp/>INTEGERs,</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/><sp/><sp/>overapproximated<sp/>as<sp/>9<sp/>half-size<sp/>INTEGERS;</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*<sp/>-<sp/>7<sp/>bytes<sp/>for<sp/>the<sp/>public<sp/>exponent.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792" refid="crypto__sizes_8h_1ac2eaace56d8f367b9a5745aa6c4f7a7e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_RSA_KEY_PAIR_MAX_SIZE(key_bits)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="793"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(9u<sp/>*<sp/>PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE((key_bits)<sp/>/<sp/>2u<sp/>+<sp/>1u)<sp/>+<sp/>14u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>a<sp/>DSA<sp/>public<sp/>key.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*<sp/>SubjectPublicKeyInfo<sp/><sp/>::=<sp/><sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlgorithmIdentifier,</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>subjectPublicKey<sp/><sp/><sp/><sp/><sp/>BIT<sp/>STRING<sp/><sp/>}<sp/>--<sp/>contains<sp/>DSAPublicKey</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>AlgorithmIdentifier<sp/><sp/>::=<sp/><sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OBJECT<sp/>IDENTIFIER,</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dss-Params<sp/><sp/>}<sp/>--<sp/>SEQUENCE<sp/>of<sp/>3<sp/>INTEGERs</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>DSAPublicKey<sp/><sp/>::=<sp/><sp/>INTEGER<sp/>--<sp/>public<sp/>key,<sp/>Y</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>-<sp/>3<sp/>*<sp/>4<sp/>bytes<sp/>of<sp/>SEQUENCE<sp/>overhead;</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>-<sp/>1<sp/>+<sp/>1<sp/>+<sp/>7<sp/>bytes<sp/>of<sp/>algorithm<sp/>(DSA<sp/>OID);</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>-<sp/>4<sp/>bytes<sp/>of<sp/>BIT<sp/>STRING<sp/>overhead;</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*<sp/>-<sp/>3<sp/>full-size<sp/>INTEGERs<sp/>(p,<sp/>g,<sp/>y);</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*<sp/>-<sp/>1<sp/>+<sp/>1<sp/>+<sp/>32<sp/>bytes<sp/>for<sp/>1<sp/>sub-size<sp/>INTEGER<sp/>(q<sp/>&lt;=<sp/>256<sp/>bits).</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="crypto__sizes_8h_1aaee3efce949efb49d0d13110051ad2a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_DSA_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE(key_bits)<sp/>*<sp/>3u<sp/>+<sp/>59u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>a<sp/>DSA<sp/>key<sp/>pair.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/>DSAPrivateKey<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Version,<sp/><sp/>--<sp/>0</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>prime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>p</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>subprime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>q</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>generator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>g</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>public<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>y</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>private<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>x</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>-<sp/>4<sp/>bytes<sp/>of<sp/>SEQUENCE<sp/>overhead;</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>-<sp/>3<sp/>bytes<sp/>of<sp/>version;</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>-<sp/>3<sp/>full-size<sp/>INTEGERs<sp/>(p,<sp/>g,<sp/>y);</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>-<sp/>2<sp/>*<sp/>(1<sp/>+<sp/>1<sp/>+<sp/>32)<sp/>bytes<sp/>for<sp/>2<sp/>sub-size<sp/>INTEGERs<sp/>(q,<sp/>x<sp/>&lt;=<sp/>256<sp/>bits).</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830" refid="crypto__sizes_8h_1a68f01ef6eab3c432f732b57163841bb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_DSA_KEY_PAIR_MAX_SIZE(key_bits)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_ASN1_INTEGER_MAX_SIZE(key_bits)<sp/>*<sp/>3u<sp/>+<sp/>75u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>an<sp/>ECC<sp/>public<sp/>key.</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/>The<sp/>representation<sp/>of<sp/>an<sp/>ECC<sp/>public<sp/>key<sp/>is:</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>byte<sp/>0x04;</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>`x_P`<sp/>as<sp/>a<sp/>`ceiling(m/8)`-byte<sp/>string,<sp/>big-endian;</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>`y_P`<sp/>as<sp/>a<sp/>`ceiling(m/8)`-byte<sp/>string,<sp/>big-endian;</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>where<sp/>m<sp/>is<sp/>the<sp/>bit<sp/>size<sp/>associated<sp/>with<sp/>the<sp/>curve.</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*<sp/>-<sp/>1<sp/>byte<sp/>+<sp/>2<sp/>*<sp/>point<sp/>size.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843" refid="crypto__sizes_8h_1a221b29f08b4e5e0509a1c7cc11b623d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(2u<sp/>*<sp/>PSA_BITS_TO_BYTES(key_bits)<sp/>+<sp/>1u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>an<sp/>ECC<sp/>key<sp/>pair.</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*<sp/>An<sp/>ECC<sp/>key<sp/>pair<sp/>is<sp/>represented<sp/>by<sp/>the<sp/>secret<sp/>value.</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850" refid="crypto__sizes_8h_1abc94d8116eac9d098304e3eb15448cc7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE(key_bits)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(key_bits))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>an<sp/>DH<sp/>key<sp/>pair.</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*<sp/>An<sp/>DH<sp/>key<sp/>pair<sp/>is<sp/>represented<sp/>by<sp/>the<sp/>secret<sp/>value.</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857" refid="crypto__sizes_8h_1aaab39b6ba615141f9fa2131e44bf4e13" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_FFDH_KEY_PAIR_MAX_SIZE(key_bits)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="858"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(key_bits))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>the<sp/>export<sp/>encoding<sp/>of<sp/>an<sp/>DH<sp/>public<sp/>key.</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862" refid="crypto__sizes_8h_1a3092049df1afb352bdd1a4f64716c900" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_KEY_EXPORT_FFDH_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(key_bits))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="904" refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_EXPORT_KEY_OUTPUT_SIZE(key_type,<sp/>key_bits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="905"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_IS_UNSTRUCTURED(key_type)<sp/>?<sp/>PSA_BITS_TO_BYTES(key_bits)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="906"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_DH(key_type)<sp/>?<sp/>PSA_BITS_TO_BYTES(key_bits)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="907"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(key_type)<sp/>==<sp/>PSA_KEY_TYPE_RSA_KEY_PAIR<sp/>?<sp/>PSA_KEY_EXPORT_RSA_KEY_PAIR_MAX_SIZE(key_bits)<sp/>:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="908"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(key_type)<sp/>==<sp/>PSA_KEY_TYPE_RSA_PUBLIC_KEY<sp/>?<sp/>PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="909"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(key_type)<sp/>==<sp/>PSA_KEY_TYPE_DSA_KEY_PAIR<sp/>?<sp/>PSA_KEY_EXPORT_DSA_KEY_PAIR_MAX_SIZE(key_bits)<sp/>:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="910"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(key_type)<sp/>==<sp/>PSA_KEY_TYPE_DSA_PUBLIC_KEY<sp/>?<sp/>PSA_KEY_EXPORT_DSA_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="911"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_ECC_KEY_PAIR(key_type)<sp/>?<sp/>PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE(key_bits)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="912"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY(key_type)<sp/>?<sp/>PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="913"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="960" refid="crypto__sizes_8h_1adf475af5fd8eae67bc9cf524d38209f2" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE(key_type,<sp/>key_bits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="961"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_IS_RSA(key_type)<sp/>?<sp/>PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="962"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_ECC(key_type)<sp/>?<sp/>PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="963"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_DH(key_type)<sp/>?<sp/>PSA_BITS_TO_BYTES(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="964"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor">#define<sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_KEY_TYPE_ECC_KEY_PAIR_BASIC)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE(PSA_VENDOR_ECC_MAX_CURVE_BITS)<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_KEY_EXPORT_ECC_KEY_PAIR_MAX_SIZE(PSA_VENDOR_ECC_MAX_CURVE_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_KEY_TYPE_RSA_KEY_PAIR_BASIC)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_RSA_KEY_PAIR_MAX_SIZE(PSA_VENDOR_RSA_MAX_KEY_BITS)<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="crypto__sizes_8h_1a5aa21302f87f1e932c9a1daa092df7db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="988"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_KEY_EXPORT_RSA_KEY_PAIR_MAX_SIZE(PSA_VENDOR_RSA_MAX_KEY_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_KEY_TYPE_DH_KEY_PAIR_BASIC)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_FFDH_KEY_PAIR_MAX_SIZE(PSA_VENDOR_FFDH_MAX_KEY_BITS)<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_EXPORT_KEY_PAIR_MAX_SIZE<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="995"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_KEY_EXPORT_FFDH_KEY_PAIR_MAX_SIZE(PSA_VENDOR_FFDH_MAX_KEY_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="preprocessor">#define<sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_KEY_TYPE_ECC_PUBLIC_KEY)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1010"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE(PSA_VENDOR_ECC_MAX_CURVE_BITS)<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1011"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE(PSA_VENDOR_ECC_MAX_CURVE_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_KEY_TYPE_RSA_PUBLIC_KEY)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1017"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE(PSA_VENDOR_RSA_MAX_KEY_BITS)<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1018"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1021"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_KEY_EXPORT_RSA_PUBLIC_KEY_MAX_SIZE(PSA_VENDOR_RSA_MAX_KEY_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_KEY_TYPE_DH_PUBLIC_KEY)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_EXPORT_FFDH_PUBLIC_KEY_MAX_SIZE(PSA_VENDOR_FFDH_MAX_KEY_BITS)<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1025"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027" refid="crypto__sizes_8h_1ad4463cb6edc2061338a88d1adc92b94c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_EXPORT_PUBLIC_KEY_MAX_SIZE<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_KEY_EXPORT_FFDH_PUBLIC_KEY_MAX_SIZE(PSA_VENDOR_FFDH_MAX_KEY_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054" refid="crypto__sizes_8h_1a189c37b83f1d5f792dc119bc5013a978" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_SIZE(key_type,<sp/>key_bits)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1055"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((PSA_KEY_TYPE_IS_ECC_KEY_PAIR(key_type)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1056"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_DH_KEY_PAIR(key_type))<sp/>?<sp/>PSA_BITS_TO_BYTES(key_bits)<sp/>:<sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="preprocessor">#define<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_ALG_ECDH)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1068"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(PSA_VENDOR_ECC_MAX_CURVE_BITS)<sp/>&gt;<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/>PSA_BITS_TO_BYTES(PSA_VENDOR_ECC_MAX_CURVE_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_ALG_FFDH)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1073"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BITS_TO_BYTES(PSA_VENDOR_FFDH_MAX_KEY_BITS)<sp/>&gt;<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075" refid="crypto__sizes_8h_1af9612bd2bc7851c937fd6d6f94b4aba0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_RAW_KEY_AGREEMENT_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/>PSA_BITS_TO_BYTES(PSA_VENDOR_FFDH_MAX_KEY_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102" refid="crypto__sizes_8h_1adaeef0383905487313ccbfaf1b73c95e" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_IV_LENGTH(key_type,<sp/>alg)<sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((alg)<sp/>==<sp/>PSA_ALG_CTR<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_CFB<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_OFB<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_XTS<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_CBC_NO_PADDING<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_CBC_PKCS7)<sp/>?<sp/>PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(key_type)<sp/>==<sp/>PSA_KEY_TYPE_CHACHA20<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_STREAM_CIPHER<sp/>?<sp/>12u<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_CCM_STAR_NO_TAG<sp/>?<sp/>13u<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119" refid="crypto__sizes_8h_1ad5630c60148421b334b1bb3962bd4f86" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_IV_MAX_SIZE<sp/>16u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144" refid="crypto__sizes_8h_1ada02457bee639a10a0c3ddbe1f73fedc" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_ENCRYPT_OUTPUT_SIZE(key_type,<sp/>alg,<sp/>input_length)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(alg<sp/>==<sp/>PSA_ALG_CBC_PKCS7<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>!=<sp/>0<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ROUND_UP_TO_MULTIPLE(PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type),<sp/>\</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(input_length)<sp/>+<sp/>1u)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PSA_CIPHER_IV_LENGTH((key_type),<sp/>(alg))<sp/>:<sp/>0u)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(PSA_ALG_IS_CIPHER(alg)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(input_length)<sp/>+<sp/>PSA_CIPHER_IV_LENGTH((key_type),<sp/>(alg))<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>0u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165" refid="crypto__sizes_8h_1a745c06526e5e062a9caf45e6f111f67d" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_ENCRYPT_OUTPUT_MAX_SIZE(input_length)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ROUND_UP_TO_MULTIPLE(PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(input_length)<sp/>+<sp/>1u)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_CIPHER_IV_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189" refid="crypto__sizes_8h_1a413e5c78d89d0f7a4ccdb047e7238125" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_DECRYPT_OUTPUT_SIZE(key_type,<sp/>alg,<sp/>input_length)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_IS_CIPHER(alg)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((key_type)<sp/>&amp;<sp/>PSA_KEY_TYPE_CATEGORY_MASK)<sp/>==<sp/>PSA_KEY_TYPE_CATEGORY_SYMMETRIC<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(input_length)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205" refid="crypto__sizes_8h_1afbcce9b24605d70ead18d9c6de6a5ac7" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_DECRYPT_OUTPUT_MAX_SIZE(input_length)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(input_length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226" refid="crypto__sizes_8h_1acf11f477f1a0f57e3258bc345e9198bc" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_UPDATE_OUTPUT_SIZE(key_type,<sp/>alg,<sp/>input_length)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_IS_CIPHER(alg)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>!=<sp/>0<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(((alg)<sp/>==<sp/>PSA_ALG_CBC_PKCS7<sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_CBC_NO_PADDING<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(alg)<sp/>==<sp/>PSA_ALG_ECB_NO_PADDING)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ROUND_UP_TO_MULTIPLE(PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type),<sp/>\</highlight></codeline>
<codeline lineno="1233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_length)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(input_length))<sp/>:<sp/>0u)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247" refid="crypto__sizes_8h_1ab1f6598efd6a7dc56e7ad7e34719eb32" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_UPDATE_OUTPUT_MAX_SIZE(input_length)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ROUND_UP_TO_MULTIPLE(PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE,<sp/>input_length))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="crypto__sizes_8h_1a2d9422f5ca18e6025d41134fe883d697" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_FINISH_OUTPUT_SIZE(key_type,<sp/>alg)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_IS_CIPHER(alg)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(alg<sp/>==<sp/>PSA_ALG_CBC_PKCS7<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PSA_BLOCK_CIPHER_BLOCK_LENGTH(key_type)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>0u)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279" refid="crypto__sizes_8h_1ac7980b0ebf97b171493560b06c51e8f5" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_CIPHER_FINISH_OUTPUT_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_BLOCK_CIPHER_BLOCK_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PSA_CRYPTO_SIZES_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_sizes.h"/>
  </compounddef>
</doxygen>
