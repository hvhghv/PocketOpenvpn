<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__asn1__module" kind="group">
    <compoundname>asn1_module</compoundname>
    <title>Asn1_module</title>
    <innerclass refid="structmbedtls__asn1__buf" prot="public">mbedtls_asn1_buf</innerclass>
    <innerclass refid="structmbedtls__asn1__bitstring" prot="public">mbedtls_asn1_bitstring</innerclass>
    <innerclass refid="structmbedtls__asn1__sequence" prot="public">mbedtls_asn1_sequence</innerclass>
    <innerclass refid="structmbedtls__asn1__named__data" prot="public">mbedtls_asn1_named_data</innerclass>
      <sectiondef kind="user-defined">
      <header>ASN1 Error codes</header>
      <description><para>These error codes are combined with other error codes for higher error granularity. e.g. X.509 and PKCS #7 error codes ASN1 is a standard to specify data structures. </para>
</description>
      <memberdef kind="define" id="group__asn1__module_1ga284c12cf03a4ffeee89a63750f00dfdd" prot="public" static="no">
        <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name>
        <initializer>-0x0060</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Out of data when parsing an ASN1 data structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="37" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gab055945fda47ad0e16dc59f8c5ecb86e" prot="public" static="no">
        <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name>
        <initializer>-0x0062</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ASN1 tag was of an unexpected value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="39" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga0ebe8e0a4894533db505303504eea59b" prot="public" static="no">
        <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name>
        <initializer>-0x0064</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error when trying to determine the length or invalid length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="41" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gacf6fad8d80fa050c3463539412674a20" prot="public" static="no">
        <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name>
        <initializer>-0x0066</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Actual length differs from expected length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="43" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga9ac36bf8c63a9968afe1d35d0569e4d8" prot="public" static="no">
        <name>MBEDTLS_ERR_ASN1_INVALID_DATA</name>
        <initializer>-0x0068</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="45" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gab7d40360e48e414ffa1a4df1961723d2" prot="public" static="no">
        <name>MBEDTLS_ERR_ASN1_ALLOC_FAILED</name>
        <initializer>-0x006A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory allocation failed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="47" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gaf9bf64017ed866c846b506e80dc15e94" prot="public" static="no">
        <name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name>
        <initializer>-0x006C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Buffer too small when writing ASN.1 data structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="49" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>DER constants</header>
      <description><para>These constants comply with the DER encoded ASN.1 type tags. DER encoding uses hexadecimal representation. An example DER sequence is:<linebreak/>
<itemizedlist>
<listitem><para>0x02 <ndash/> tag indicating INTEGER</para>
</listitem><listitem><para>0x01 <ndash/> length in octets</para>
</listitem><listitem><para>0x05 <ndash/> value Such sequences are typically read into <computeroutput><ref refid="group__x509__module_1ga4d02c9e8e4e2934555e0d132cd2976dc" kindref="member">mbedtls_x509_buf</ref></computeroutput>. </para>
</listitem></itemizedlist>
</para>
</description>
      <memberdef kind="define" id="group__asn1__module_1ga1382980a474a765365d8f5c7bd63795a" prot="public" static="no">
        <name>MBEDTLS_ASN1_BOOLEAN</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="64" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga6e8614f8937956c294fe791bc5ac6a7c" prot="public" static="no">
        <name>MBEDTLS_ASN1_INTEGER</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="65" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gafd5c5ecc822b7e2f4d2e64bf388fc559" prot="public" static="no">
        <name>MBEDTLS_ASN1_BIT_STRING</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="66" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga080d1f82b0996a63c561541eb22a7d0f" prot="public" static="no">
        <name>MBEDTLS_ASN1_OCTET_STRING</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="67" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gae26e36d787617e0b2dd067ccc342db0d" prot="public" static="no">
        <name>MBEDTLS_ASN1_NULL</name>
        <initializer>0x05</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="68" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gad87ad0570a31add4ecac6cc3694ca79a" prot="public" static="no">
        <name>MBEDTLS_ASN1_OID</name>
        <initializer>0x06</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="69" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gacbaecf2f809a9c73b6b42307527a288c" prot="public" static="no">
        <name>MBEDTLS_ASN1_ENUMERATED</name>
        <initializer>0x0A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="70" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gafc28060cb0e9b2be4f0960ad345a2e42" prot="public" static="no">
        <name>MBEDTLS_ASN1_UTF8_STRING</name>
        <initializer>0x0C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="71" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga64ce838eb4418e69fe9aa251436203b3" prot="public" static="no">
        <name>MBEDTLS_ASN1_SEQUENCE</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="72" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga67afaa83253889dacb9fcb47062162c5" prot="public" static="no">
        <name>MBEDTLS_ASN1_SET</name>
        <initializer>0x11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="73" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga57f497984e573597e1ed100afcc3f965" prot="public" static="no">
        <name>MBEDTLS_ASN1_PRINTABLE_STRING</name>
        <initializer>0x13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="74" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gabe4ca1599521c0a3b4c54391906c2083" prot="public" static="no">
        <name>MBEDTLS_ASN1_T61_STRING</name>
        <initializer>0x14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="75" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga30d5d0f805af50deb5820e741a53e481" prot="public" static="no">
        <name>MBEDTLS_ASN1_IA5_STRING</name>
        <initializer>0x16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="76" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gac4e932ef9cdf9fa9b8fb152357c6ec64" prot="public" static="no">
        <name>MBEDTLS_ASN1_UTC_TIME</name>
        <initializer>0x17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="77" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga29f746333b11a4d9e0b7624dcd982fdb" prot="public" static="no">
        <name>MBEDTLS_ASN1_GENERALIZED_TIME</name>
        <initializer>0x18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="78" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gacdbc7c6bcf1b8eb158a52ed773f3cdf3" prot="public" static="no">
        <name>MBEDTLS_ASN1_UNIVERSAL_STRING</name>
        <initializer>0x1C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="79" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga577f12d1a059eb52928614c50f2bb0d8" prot="public" static="no">
        <name>MBEDTLS_ASN1_BMP_STRING</name>
        <initializer>0x1E</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="80" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga800aec91d6d124d917bb2707b246c551" prot="public" static="no">
        <name>MBEDTLS_ASN1_PRIMITIVE</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="81" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga8d855bf93e7f26e7c0c9c70af7f04d8e" prot="public" static="no">
        <name>MBEDTLS_ASN1_CONSTRUCTED</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="82" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga8d78fbb123ee982c80d8020050bf86e0" prot="public" static="no">
        <name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="83" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga4819e8909ac8f16f937a945d75cc442c" prot="public" static="no">
        <name>MBEDTLS_ASN1_IS_STRING_TAG</name>
        <param><defname>tag</defname></param>
        <initializer>    ((unsigned int) (tag) &lt; 32u &amp;&amp; (                                   \
         ((1u &lt;&lt; (tag)) &amp; ((1u &lt;&lt; <ref refid="group__asn1__module_1ga577f12d1a059eb52928614c50f2bb0d8" kindref="member">MBEDTLS_ASN1_BMP_STRING</ref>)       |     \
                           (1u &lt;&lt; <ref refid="group__asn1__module_1gafc28060cb0e9b2be4f0960ad345a2e42" kindref="member">MBEDTLS_ASN1_UTF8_STRING</ref>)      |     \
                           (1u &lt;&lt; <ref refid="group__asn1__module_1gabe4ca1599521c0a3b4c54391906c2083" kindref="member">MBEDTLS_ASN1_T61_STRING</ref>)       |     \
                           (1u &lt;&lt; <ref refid="group__asn1__module_1ga30d5d0f805af50deb5820e741a53e481" kindref="member">MBEDTLS_ASN1_IA5_STRING</ref>)       |     \
                           (1u &lt;&lt; <ref refid="group__asn1__module_1gacdbc7c6bcf1b8eb158a52ed773f3cdf3" kindref="member">MBEDTLS_ASN1_UNIVERSAL_STRING</ref>) |     \
                           (1u &lt;&lt; <ref refid="group__asn1__module_1ga57f497984e573597e1ed100afcc3f965" kindref="member">MBEDTLS_ASN1_PRINTABLE_STRING</ref>))) != 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="87" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga01a2dcbe2148d903c4bc6eaad4dbcd3d" prot="public" static="no">
        <name>MBEDTLS_ASN1_TAG_CLASS_MASK</name>
        <initializer>0xC0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="106" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga5994a5ddfb487f14d03d5b61e335e9cc" prot="public" static="no">
        <name>MBEDTLS_ASN1_TAG_PC_MASK</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="107" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1gaa2a3c5289c11edb569b306df3411ff3b" prot="public" static="no">
        <name>MBEDTLS_ASN1_TAG_VALUE_MASK</name>
        <initializer>0x1F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="108" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions to parse ASN.1 data structures</header>
      <memberdef kind="typedef" id="group__asn1__module_1gaa0aba269f10492d09cdc4119527ba378" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__asn1__buf" kindref="compound">mbedtls_asn1_buf</ref></type>
        <definition>typedef struct mbedtls_asn1_buf mbedtls_asn1_buf</definition>
        <argsstring></argsstring>
        <name>mbedtls_asn1_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type-length-value structure that allows for ASN1 using DER. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="146" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__asn1__module_1ga5d85765e6b1953e4ededcedf3c31d6b6" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__asn1__bitstring" kindref="compound">mbedtls_asn1_bitstring</ref></type>
        <definition>typedef struct mbedtls_asn1_bitstring mbedtls_asn1_bitstring</definition>
        <argsstring></argsstring>
        <name>mbedtls_asn1_bitstring</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for ASN1 bit strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="156" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__asn1__module_1ga4f3c9235634ebe6b91b0a0b4c668298e" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref></type>
        <definition>typedef struct mbedtls_asn1_sequence mbedtls_asn1_sequence</definition>
        <argsstring></argsstring>
        <name>mbedtls_asn1_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for a sequence of ASN.1 items </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="173" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__asn1__module_1ga630d752a2840570b8af4368a942fba34" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref></type>
        <definition>typedef struct mbedtls_asn1_named_data mbedtls_asn1_named_data</definition>
        <argsstring></argsstring>
        <name>mbedtls_asn1_named_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for a sequence or list of &apos;named&apos; ASN.1 data items </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="198" column="24"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gad45c1d0ed3694fe903342cb32647bfb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_len</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, size_t *len)</argsstring>
        <name>mbedtls_asn1_get_len</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get the length of an ASN.1 element. Updates the pointer to immediately behind the length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the first byte of the length, i.e. immediately after the tag. On successful completion, <computeroutput>*p</computeroutput> points to the first byte after the length, i.e. the first byte of the content. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>On successful completion, <computeroutput>*len</computeroutput> contains the length read from the ASN.1 input.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga284c12cf03a4ffeee89a63750f00dfdd" kindref="member">MBEDTLS_ERR_ASN1_OUT_OF_DATA</ref> if the ASN.1 element would end beyond <computeroutput>end</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga0ebe8e0a4894533db505303504eea59b" kindref="member">MBEDTLS_ERR_ASN1_INVALID_LENGTH</ref> if the length is unparsable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="219" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="219" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gae8d7dd42a3b99b61d2ef60bc0c2eaf0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_tag</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, size_t *len, int tag)</argsstring>
        <name>mbedtls_asn1_get_tag</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Get the tag and length of the element. Check for the requested tag. Updates the pointer to immediately behind the tag and length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte after the length, i.e. the first byte of the content. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>On successful completion, <computeroutput>*len</computeroutput> contains the length read from the ASN.1 input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected tag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1gab055945fda47ad0e16dc59f8c5ecb86e" kindref="member">MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</ref> if the data does not start with the requested tag. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga284c12cf03a4ffeee89a63750f00dfdd" kindref="member">MBEDTLS_ERR_ASN1_OUT_OF_DATA</ref> if the ASN.1 element would end beyond <computeroutput>end</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga0ebe8e0a4894533db505303504eea59b" kindref="member">MBEDTLS_ERR_ASN1_INVALID_LENGTH</ref> if the length is unparsable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="244" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="244" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gaec9e4bbd8690a8ab17cabf87893dbd2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_bool</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, int *val)</argsstring>
        <name>mbedtls_asn1_get_bool</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Retrieve a boolean ASN.1 tag and its value. Updates the pointer to immediately behind the full tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte beyond the ASN.1 element. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the parsed value (<computeroutput>0</computeroutput> or <computeroutput>1</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 BOOLEAN. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="265" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="265" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga7f8a8b447c11f2200cc5aa8033801b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_int</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, int *val)</argsstring>
        <name>mbedtls_asn1_get_int</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Retrieve an integer ASN.1 tag and its value. Updates the pointer to immediately behind the full tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte beyond the ASN.1 element. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the parsed value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 INTEGER. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga0ebe8e0a4894533db505303504eea59b" kindref="member">MBEDTLS_ERR_ASN1_INVALID_LENGTH</ref> if the parsed value does not fit in an <computeroutput>int</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="286" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="286" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga61bd2b9ab13412094878a364101f9121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_enum</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, int *val)</argsstring>
        <name>mbedtls_asn1_get_enum</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Retrieve an enumerated ASN.1 tag and its value. Updates the pointer to immediately behind the full tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte beyond the ASN.1 element. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the parsed value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 ENUMERATED. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga0ebe8e0a4894533db505303504eea59b" kindref="member">MBEDTLS_ERR_ASN1_INVALID_LENGTH</ref> if the parsed value does not fit in an <computeroutput>int</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="307" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="307" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gae2dcf021cf1326b62e2f23aa3bda69d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_bitstring</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, mbedtls_asn1_bitstring *bs)</argsstring>
        <name>mbedtls_asn1_get_bitstring</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__asn1__bitstring" kindref="compound">mbedtls_asn1_bitstring</ref> *</type>
          <declname>bs</declname>
        </param>
        <briefdescription>
<para>Retrieve a bitstring ASN.1 tag and its value. Updates the pointer to immediately behind the full tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> is equal to <computeroutput>end</computeroutput>. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bs</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, <ref refid="structmbedtls__asn1__bitstring" kindref="compound">mbedtls_asn1_bitstring</ref> information about the parsed value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1gacf6fad8d80fa050c3463539412674a20" kindref="member">MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</ref> if the input contains extra data after a valid BIT STRING. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 BIT STRING. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="328" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="328" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga0f9d2d846b16d5ce18ad99de6224313b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_bitstring_null</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, size_t *len)</argsstring>
        <name>mbedtls_asn1_get_bitstring_null</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Retrieve a bitstring ASN.1 tag without unused bits and its value. Updates the pointer to the beginning of the bit/octet string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte of the content of the BIT STRING. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, <computeroutput>*len</computeroutput> is the length of the content in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga9ac36bf8c63a9968afe1d35d0569e4d8" kindref="member">MBEDTLS_ERR_ASN1_INVALID_DATA</ref> if the input starts with a valid BIT STRING with a nonzero number of unused bits. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 BIT STRING. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="349" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="349" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga872d62128956b3574bb0e681536c0d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_sequence_of</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, mbedtls_asn1_sequence *cur, int tag)</argsstring>
        <name>mbedtls_asn1_get_sequence_of</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref> *</type>
          <declname>cur</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Parses and splits an ASN.1 &quot;SEQUENCE OF &lt;tag&gt;&quot;. Updates the pointer to immediately behind the full sequence tag. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allocates memory for the sequence elements. You can free the allocated memory with <ref refid="group__asn1__module_1ga835bfde2dc9ada1a3ee434f7ed2da750" kindref="member">mbedtls_asn1_sequence_free()</ref>.</para>
<para><simplesect kind="note"><para>On error, this function may return a partial list in <computeroutput>cur</computeroutput>. You must set <computeroutput>cur-&gt;next = NULL</computeroutput> before calling this function! Otherwise it is impossible to distinguish a previously non-null pointer from a pointer to an object allocated by this function.</para>
</simplesect>
<simplesect kind="note"><para>If the sequence is empty, this function does not modify <computeroutput>*cur</computeroutput>. If the sequence is valid and non-empty, this function sets <computeroutput>cur-&gt;buf.tag</computeroutput> to <computeroutput>tag</computeroutput>. This allows callers to distinguish between an empty sequence and a one-element sequence.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> is equal to <computeroutput>end</computeroutput>. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cur</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref> which this function fills. When this function returns, <computeroutput>*cur</computeroutput> is the head of a linked list. Each node in this list is allocated with <ref refid="platform_8h_1a36a09500d93d29d1f4a81f6a3be8bbed" kindref="member">mbedtls_calloc()</ref> apart from <computeroutput>cur</computeroutput> itself, and should therefore be freed with <ref refid="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" kindref="member">mbedtls_free()</ref>. The list describes the content of the sequence. The head of the list (i.e. <computeroutput>*cur</computeroutput> itself) describes the first element, <computeroutput>*cur-&gt;next</computeroutput> describes the second element, etc. For each element, <computeroutput>buf.tag == tag</computeroutput>, <computeroutput>buf.len</computeroutput> is the length of the content of the content of the element, and <computeroutput>buf.p</computeroutput> points to the first byte of the content (i.e. immediately past the length of the element). Note that list elements may be allocated even on error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Each element of the sequence must have this tag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1gacf6fad8d80fa050c3463539412674a20" kindref="member">MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</ref> if the input contains extra data after a valid SEQUENCE OF <computeroutput>tag</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1gab055945fda47ad0e16dc59f8c5ecb86e" kindref="member">MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</ref> if the input starts with an ASN.1 SEQUENCE in which an element has a tag that is different from <computeroutput>tag</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1gab7d40360e48e414ffa1a4df1961723d2" kindref="member">MBEDTLS_ERR_ASN1_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 SEQUENCE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="400" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="400" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga835bfde2dc9ada1a3ee434f7ed2da750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_asn1_sequence_free</definition>
        <argsstring>(mbedtls_asn1_sequence *seq)</argsstring>
        <name>mbedtls_asn1_sequence_free</name>
        <param>
          <type><ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref> *</type>
          <declname>seq</declname>
        </param>
        <briefdescription>
<para>Free a heap-allocated linked list presentation of an ASN.1 sequence, including the first element. </para>
        </briefdescription>
        <detaileddescription>
<para>There are two common ways to manage the memory used for the representation of a parsed ASN.1 sequence:<itemizedlist>
<listitem><para>Allocate a head node <computeroutput><ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref> *head</computeroutput> with <ref refid="platform_8h_1a36a09500d93d29d1f4a81f6a3be8bbed" kindref="member">mbedtls_calloc()</ref>. Pass this node as the <computeroutput>cur</computeroutput> argument to <ref refid="group__asn1__module_1ga872d62128956b3574bb0e681536c0d6b" kindref="member">mbedtls_asn1_get_sequence_of()</ref>. When you have finished processing the sequence, call <ref refid="group__asn1__module_1ga835bfde2dc9ada1a3ee434f7ed2da750" kindref="member">mbedtls_asn1_sequence_free()</ref> on <computeroutput>head</computeroutput>.</para>
</listitem><listitem><para>Allocate a head node <computeroutput><ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref> *head</computeroutput> in any manner, for example on the stack. Make sure that <computeroutput>head-&gt;next == NULL</computeroutput>. Pass <computeroutput>head</computeroutput> as the <computeroutput>cur</computeroutput> argument to <ref refid="group__asn1__module_1ga872d62128956b3574bb0e681536c0d6b" kindref="member">mbedtls_asn1_get_sequence_of()</ref>. When you have finished processing the sequence, call <ref refid="group__asn1__module_1ga835bfde2dc9ada1a3ee434f7ed2da750" kindref="member">mbedtls_asn1_sequence_free()</ref> on <computeroutput>head-&gt;cur</computeroutput>, then free <computeroutput>head</computeroutput> itself in the appropriate manner.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the first sequence component. This may be <computeroutput>NULL</computeroutput>, in which case this functions returns immediately. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="425" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="425" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gaaae35fadc8746f712e496f017064177d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_traverse_sequence_of</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, unsigned char tag_must_mask, unsigned char tag_must_val, unsigned char tag_may_mask, unsigned char tag_may_val, int(*cb)(void *ctx, int tag, unsigned char *start, size_t len), void *ctx)</argsstring>
        <name>mbedtls_asn1_traverse_sequence_of</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>tag_must_mask</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>tag_must_val</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>tag_may_mask</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>tag_may_val</declname>
        </param>
        <param>
          <type>int(*)(void *ctx, int tag, unsigned char *start, size_t len)</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Traverse an ASN.1 SEQUENCE container and call a callback for each entry. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks that the input is a SEQUENCE of elements that each have a &quot;must&quot; tag, and calls a callback function on the elements that have a &quot;may&quot; tag.</para>
<para>For example, to validate that the input is a SEQUENCE of <computeroutput>tag1</computeroutput> and call <computeroutput>cb</computeroutput> on each element, use <programlisting><codeline><highlight class="normal">mbedtls_asn1_traverse_sequence_of(&amp;p,<sp/>end,<sp/>0xff,<sp/>tag1,<sp/>0,<sp/>0,<sp/>cb,<sp/>ctx);</highlight></codeline>
</programlisting></para>
<para>To validate that the input is a SEQUENCE of ANY and call <computeroutput>cb</computeroutput> on each element, use <programlisting><codeline><highlight class="normal">mbedtls_asn1_traverse_sequence_of(&amp;p,<sp/>end,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>cb,<sp/>ctx);</highlight></codeline>
</programlisting></para>
<para>To validate that the input is a SEQUENCE of CHOICE {NULL, OCTET STRING} and call <computeroutput>cb</computeroutput> on each element that is an OCTET STRING, use <programlisting><codeline><highlight class="normal">mbedtls_asn1_traverse_sequence_of(&amp;p,<sp/>end,<sp/>0xfe,<sp/>0x04,<sp/>0xff,<sp/>0x04,<sp/>cb,<sp/>ctx);</highlight></codeline>
</programlisting></para>
<para>The callback is called on the elements with a &quot;may&quot; tag from left to right. If the input is not a valid SEQUENCE of elements with a &quot;must&quot; tag, the callback is called on the elements up to the leftmost point where the input is invalid.</para>
<para><simplesect kind="warning"><para>This function is still experimental and may change at any time.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the pointer to the beginning of the ASN.1 SEQUENCE header. This is updated to point to the end of the ASN.1 SEQUENCE container on a successful invocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The end of the ASN.1 SEQUENCE container. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_must_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask to be applied to the ASN.1 tags found within the SEQUENCE before comparing to <computeroutput>tag_must_val</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_must_val</parametername>
</parameternamelist>
<parameterdescription>
<para>The required value of each ASN.1 tag found in the SEQUENCE, after masking with <computeroutput>tag_must_mask</computeroutput>. Mismatching tags lead to an error. For example, a value of <computeroutput>0</computeroutput> for both <computeroutput>tag_must_mask</computeroutput> and <computeroutput>tag_must_val</computeroutput> means that every tag is allowed, while a value of <computeroutput>0xFF</computeroutput> for <computeroutput>tag_must_mask</computeroutput> means that <computeroutput>tag_must_val</computeroutput> is the only allowed tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_may_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask to be applied to the ASN.1 tags found within the SEQUENCE before comparing to <computeroutput>tag_may_val</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_may_val</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired value of each ASN.1 tag found in the SEQUENCE, after masking with <computeroutput>tag_may_mask</computeroutput>. Mismatching tags will be silently ignored. For example, a value of <computeroutput>0</computeroutput> for <computeroutput>tag_may_mask</computeroutput> and <computeroutput>tag_may_val</computeroutput> means that any tag will be considered, while a value of <computeroutput>0xFF</computeroutput> for <computeroutput>tag_may_mask</computeroutput> means that all tags with value different from <computeroutput>tag_may_val</computeroutput> will be ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to trigger for each component in the ASN.1 SEQUENCE that matches <computeroutput>tag_may_val</computeroutput>. The callback function is called with the following parameters:<itemizedlist>
<listitem><para><computeroutput>ctx</computeroutput>.</para>
</listitem><listitem><para>The tag of the current element.</para>
</listitem><listitem><para>A pointer to the start of the current element&apos;s content inside the input.</para>
</listitem><listitem><para>The length of the content of the current element. If the callback returns a non-zero value, the function stops immediately, forwarding the callback&apos;s return value. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be passed to the callback <computeroutput>cb</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful the entire ASN.1 SEQUENCE was traversed without parsing or callback errors. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1gacf6fad8d80fa050c3463539412674a20" kindref="member">MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</ref> if the input contains extra data after a valid SEQUENCE of elements with an accepted tag. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1gab055945fda47ad0e16dc59f8c5ecb86e" kindref="member">MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</ref> if the input starts with an ASN.1 SEQUENCE in which an element has a tag that is not accepted. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 SEQUENCE. </para>
</simplesect>
<simplesect kind="return"><para>A non-zero error code forwarded from the callback <computeroutput>cb</computeroutput> in case the latter returns a non-zero value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="512" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="512" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga48e235454b64aa67c9472a6579706b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_mpi</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, mbedtls_mpi *X)</argsstring>
        <name>mbedtls_asn1_get_mpi</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Retrieve an integer ASN.1 tag and its value. Updates the pointer to immediately behind the full tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte beyond the ASN.1 element. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the parsed value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful. </para>
</simplesect>
<simplesect kind="return"><para>An ASN.1 error code if the input does not start with a valid ASN.1 INTEGER. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__asn1__module_1ga0ebe8e0a4894533db505303504eea59b" kindref="member">MBEDTLS_ERR_ASN1_INVALID_LENGTH</ref> if the parsed value does not fit in an <computeroutput>int</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para>An MPI error code if the parsed value is too large. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="540" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="540" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gadd253579640ea717f368d9a0f6085be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_alg</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params)</argsstring>
        <name>mbedtls_asn1_get_alg</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__asn1__buf" kindref="compound">mbedtls_asn1_buf</ref> *</type>
          <declname>alg</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__asn1__buf" kindref="compound">mbedtls_asn1_buf</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Retrieve an AlgorithmIdentifier ASN.1 sequence. Updates the pointer to immediately behind the full AlgorithmIdentifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte beyond the AlgorithmIdentifier element. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to receive the OID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to receive the parameters. This is zeroized if there are no parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful or a specific ASN.1 or MPI error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="561" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="561" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gadad023ecf92a50d47eaf206705efdb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_asn1_get_alg_null</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, mbedtls_asn1_buf *alg)</argsstring>
        <name>mbedtls_asn1_get_alg_null</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__asn1__buf" kindref="compound">mbedtls_asn1_buf</ref> *</type>
          <declname>alg</declname>
        </param>
        <briefdescription>
<para>Retrieve an AlgorithmIdentifier ASN.1 sequence with NULL or no params. Updates the pointer to immediately behind the full AlgorithmIdentifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>On entry, <computeroutput>*p</computeroutput> points to the start of the ASN.1 element. On successful completion, <computeroutput>*p</computeroutput> points to the first byte beyond the AlgorithmIdentifier element. On error, the value of <computeroutput>*p</computeroutput> is undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to receive the OID.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful or a specific ASN.1 or MPI error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="580" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="580" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga4b93f1c3d4ee1d60f62ce072d4fb3b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> *</type>
        <definition>const mbedtls_asn1_named_data* mbedtls_asn1_find_named_data</definition>
        <argsstring>(const mbedtls_asn1_named_data *list, const char *oid, size_t len)</argsstring>
        <name>mbedtls_asn1_find_named_data</name>
        <param>
          <type>const <ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Find a specific named_data entry in a sequence or list based on the OID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to seek through </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oid</parametername>
</parameternamelist>
<parameterdescription>
<para>The OID to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the OID</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if not found, or a pointer to the existing entry. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="594" column="31" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="594" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga02469d5d4e32e50f9e18781320c70093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref></type>
        <definition>void MBEDTLS_DEPRECATED mbedtls_asn1_free_named_data</definition>
        <argsstring>(mbedtls_asn1_named_data *entry)</argsstring>
        <name>mbedtls_asn1_free_named_data</name>
        <param>
          <type><ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Free a <ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> entry. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and will be removed in a future version of the library. Please use <ref refid="group__asn1__module_1gafd1a084a9285cebcd289bf6df0e6c021" kindref="member">mbedtls_asn1_free_named_data_list()</ref> or <ref refid="group__asn1__module_1ga6a42d8e2aaee5fdfb4466d5862dd83cf" kindref="member">mbedtls_asn1_free_named_data_list_shallow()</ref>.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The named data entry to free. This function calls <ref refid="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" kindref="member">mbedtls_free()</ref> on <computeroutput>entry-&gt;oid.p</computeroutput> and <computeroutput>entry-&gt;val.p</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="610" column="25" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="610" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1gafd1a084a9285cebcd289bf6df0e6c021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_asn1_free_named_data_list</definition>
        <argsstring>(mbedtls_asn1_named_data **head)</argsstring>
        <name>mbedtls_asn1_free_named_data_list</name>
        <param>
          <type><ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> **</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Free all entries in a <ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the head of the list of named data entries to free. This function calls <ref refid="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" kindref="member">mbedtls_free()</ref> on <computeroutput>entry-&gt;oid.p</computeroutput> and <computeroutput>entry-&gt;val.p</computeroutput> and then on <computeroutput>entry</computeroutput> for each list entry, and sets <computeroutput>*head</computeroutput> to <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="621" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="621" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__asn1__module_1ga6a42d8e2aaee5fdfb4466d5862dd83cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_asn1_free_named_data_list_shallow</definition>
        <argsstring>(mbedtls_asn1_named_data *name)</argsstring>
        <name>mbedtls_asn1_free_named_data_list_shallow</name>
        <param>
          <type><ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Free all shallow entries in a <ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref> list, but do not free internal pointer targets. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Head of the list of named data entries to free. This function calls <ref refid="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" kindref="member">mbedtls_free()</ref> on each list element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="630" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" declline="630" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__asn1__module_1gac2f2e00874ca486c912c33bb4f7bb16a" prot="public" static="no">
        <name>MBEDTLS_OID_SIZE</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(x) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the size of the binary string, without the trailing \0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="113" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga0b81f225b3551ec7c4da69b2d183d10b" prot="public" static="no">
        <name>MBEDTLS_OID_CMP</name>
        <param><defname>oid_str</defname></param>
        <param><defname>oid_buf</defname></param>
        <initializer>    ((<ref refid="group__asn1__module_1gac2f2e00874ca486c912c33bb4f7bb16a" kindref="member">MBEDTLS_OID_SIZE</ref>(oid_str) != (oid_buf)-&gt;len) ||                \
     memcmp((oid_str), (oid_buf)-&gt;p, (oid_buf)-&gt;len) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares an <ref refid="structmbedtls__asn1__buf" kindref="compound">mbedtls_asn1_buf</ref> structure to a reference OID.</para>
<para>Only works for &apos;defined&apos; oid_str values (MBEDTLS_OID_HMAC_SHA1), you cannot use a &apos;unsigned char *oid&apos; here! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="121" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asn1__module_1ga88259e7a5163b63bc9b618cc0faac0be" prot="public" static="no">
        <name>MBEDTLS_OID_CMP_RAW</name>
        <param><defname>oid_str</defname></param>
        <param><defname>oid_buf</defname></param>
        <param><defname>oid_buf_len</defname></param>
        <initializer>    ((<ref refid="group__asn1__module_1gac2f2e00874ca486c912c33bb4f7bb16a" kindref="member">MBEDTLS_OID_SIZE</ref>(oid_str) != (oid_buf_len)) ||             \
     memcmp((oid_str), (oid_buf), (oid_buf_len)) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" line="125" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/asn1.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
