<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="sha512_8h" kind="file" language="C++">
    <compoundname>sha512.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="crypto__builtin__primitives_8h" local="yes">crypto_builtin_primitives.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="1">
        <label>sha512.h</label>
        <link refid="sha512_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="18">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="12">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="5">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>sha512.h</label>
        <link refid="sha512_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="4">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="2">
        <label>crypto_builtin_primitives.h</label>
        <link refid="crypto__builtin__primitives_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="19">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="10">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="3">
        <label>crypto_driver_contexts_primitives.h</label>
        <link refid="crypto__driver__contexts__primitives_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__sha512__context" prot="public">mbedtls_sha512_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="sha512_8h_1a672936ac73c409e6a3eb43468c29ae69" prot="public" static="no">
        <name>MBEDTLS_ERR_SHA512_BAD_INPUT_DATA</name>
        <initializer>-0x0075</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA-512 input data was malformed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="22" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sha512_8h_1af054c0b9d6dd26cffd3b38ace49a4911" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref></type>
        <definition>typedef struct mbedtls_sha512_context mbedtls_sha512_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_sha512_context</name>
        <briefdescription>
<para>The SHA-512 context structure. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            The structure is used both for SHA-384 and for SHA-512
            checksum calculations. The choice between these two is
            made in the call to mbedtls_sha512_starts().
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="48" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sha512_8h_1afefd852a76626e45968b79b70642f3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_sha512_init</definition>
        <argsstring>(mbedtls_sha512_context *ctx)</argsstring>
        <name>mbedtls_sha512_init</name>
        <param>
          <type><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes a SHA-512 context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-512 context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="60" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1a63c673fa54cb703372fef5df4db02d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_sha512_free</definition>
        <argsstring>(mbedtls_sha512_context *ctx)</argsstring>
        <name>mbedtls_sha512_free</name>
        <param>
          <type><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function clears a SHA-512 context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-512 context to clear. This may be <computeroutput>NULL</computeroutput>, in which case this function does nothing. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized SHA-512 context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="70" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1a483ab65c7c6919462a8f632d6a044a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_sha512_clone</definition>
        <argsstring>(mbedtls_sha512_context *dst, const mbedtls_sha512_context *src)</argsstring>
        <name>mbedtls_sha512_clone</name>
        <param>
          <type><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>This function clones the state of a SHA-512 context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination context. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to clone. This must be initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="78" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1a2267a32f3725558b27e054ca13d7433d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_sha512_starts</definition>
        <argsstring>(mbedtls_sha512_context *ctx, int is384)</argsstring>
        <name>mbedtls_sha512_starts</name>
        <param>
          <type><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is384</declname>
        </param>
        <briefdescription>
<para>This function starts a SHA-384 or SHA-512 checksum calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-512 context to use. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is384</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines which function to use. This must be either <computeroutput>0</computeroutput> for SHA-512, or <computeroutput>1</computeroutput> for SHA-384.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>is384 must be defined accordingly to the enabled MBEDTLS_SHA384_C/MBEDTLS_SHA512_C symbols otherwise the function will return <ref refid="sha512_8h_1a672936ac73c409e6a3eb43468c29ae69" kindref="member">MBEDTLS_ERR_SHA512_BAD_INPUT_DATA</ref>.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="96" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="96" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1a91b9329d9e8e0166187d120d50d560e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_sha512_update</definition>
        <argsstring>(mbedtls_sha512_context *ctx, const unsigned char *input, size_t ilen)</argsstring>
        <name>mbedtls_sha512_update</name>
        <param>
          <type><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
<para>This function feeds an input buffer into an ongoing SHA-512 checksum calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-512 context. This must be initialized and have a hash operation started. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This must be a readable buffer of length <computeroutput>ilen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="111" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1aceefec6ae97343b58126876e0eab0fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_sha512_finish</definition>
        <argsstring>(mbedtls_sha512_context *ctx, unsigned char *output)</argsstring>
        <name>mbedtls_sha512_finish</name>
        <param>
          <type><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function finishes the SHA-512 operation, and writes the result to the output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-512 context. This must be initialized and have a hash operation started. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-384 or SHA-512 checksum result. This must be a writable buffer of length <computeroutput>64</computeroutput> bytes for SHA-512, <computeroutput>48</computeroutput> bytes for SHA-384.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="128" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="128" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1a2444643f71eb582c81a60c4dfd04f894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_internal_sha512_process</definition>
        <argsstring>(mbedtls_sha512_context *ctx, const unsigned char data[128])</argsstring>
        <name>mbedtls_internal_sha512_process</name>
        <param>
          <type><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>data</declname>
          <array>[128]</array>
        </param>
        <briefdescription>
<para>This function processes a single data block within the ongoing SHA-512 computation. This function is for internal use only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-512 context. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding one block of data. This must be a readable buffer of length <computeroutput>128</computeroutput> Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="143" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="143" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1afe7193c2825a9e755889e139cd5e5e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_sha512</definition>
        <argsstring>(const unsigned char *input, size_t ilen, unsigned char *output, int is384)</argsstring>
        <name>mbedtls_sha512</name>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is384</declname>
        </param>
        <briefdescription>
<para>This function calculates the SHA-512 or SHA-384 checksum of a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The function allocates the context, performs the calculation, and frees the context.</para>
<para>The SHA-512 result is calculated as output = SHA-512(input buffer).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This must be a readable buffer of length <computeroutput>ilen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The SHA-384 or SHA-512 checksum result. This must be a writable buffer of length <computeroutput>64</computeroutput> bytes for SHA-512, <computeroutput>48</computeroutput> bytes for SHA-384. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is384</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines which function to use. This must be either <computeroutput>0</computeroutput> for SHA-512, or <computeroutput>1</computeroutput> for SHA-384.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>is384 must be defined accordingly with the supported symbols in the config file. If:<itemizedlist>
<listitem><para>is384 is 0, but <computeroutput>MBEDTLS_SHA384_C</computeroutput> is not defined, or</para>
</listitem><listitem><para>is384 is 1, but <computeroutput>MBEDTLS_SHA512_C</computeroutput> is not defined then the function will return <ref refid="sha512_8h_1a672936ac73c409e6a3eb43468c29ae69" kindref="member">MBEDTLS_ERR_SHA512_BAD_INPUT_DATA</ref>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="175" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="175" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1a73d439e5132f2c889f26600549e76db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_sha384_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_sha384_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>The SHA-384 checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="189" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="189" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="sha512_8h_1ac5374de3ea65545880b1fac215570fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_sha512_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_sha512_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>The SHA-512 checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" line="199" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h" declline="199" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains SHA-384 and SHA-512 definitions and functions. </para>
    </briefdescription>
    <detaileddescription>
<para>The Secure Hash Algorithms 384 and 512 (SHA-384 and SHA-512) cryptographic hash functions are defined in <emphasis>FIPS 180-4: Secure Hash Standard (SHS)</emphasis>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_SHA512_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SHA512_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="sha512_8h_1a672936ac73c409e6a3eb43468c29ae69" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SHA512_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0075</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SHA512_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regular<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structmbedtls__sha512__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="structmbedtls__sha512__context_1a7d04d17ba56bc772159c981e07296d12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(total)[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="structmbedtls__sha512__context_1aa79372afc279756d29e6ba0fd6b383bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(state)[8];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="structmbedtls__sha512__context_1a8bd00a14804d2b7f6a2d0268ff5c75cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(buffer)[128];<sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SHA384_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structmbedtls__sha512__context_1a249ae713f56cc1cf2d4f7f3e68fd6282" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(is384);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="sha512_8h_1af054c0b9d6dd26cffd3b38ace49a4911" kindref="member">mbedtls_sha512_context</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SHA512_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sha512_alt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SHA512_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1afefd852a76626e45968b79b70642f3bc" kindref="member">mbedtls_sha512_init</ref>(<ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1a63c673fa54cb703372fef5df4db02d28" kindref="member">mbedtls_sha512_free</ref>(<ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1a483ab65c7c6919462a8f632d6a044a4a" kindref="member">mbedtls_sha512_clone</ref>(<ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*src);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1a2267a32f3725558b27e054ca13d7433d" kindref="member">mbedtls_sha512_starts</ref>(<ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is384);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1a91b9329d9e8e0166187d120d50d560e6" kindref="member">mbedtls_sha512_update</ref>(<ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1aceefec6ae97343b58126876e0eab0fe9" kindref="member">mbedtls_sha512_finish</ref>(<ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1a2444643f71eb582c81a60c4dfd04f894" kindref="member">mbedtls_internal_sha512_process</ref>(<ref refid="structmbedtls__sha512__context" kindref="compound">mbedtls_sha512_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[128]);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1afe7193c2825a9e755889e139cd5e5e67" kindref="member">mbedtls_sha512</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is384);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SELF_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SHA384_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1a73d439e5132f2c889f26600549e76db4" kindref="member">mbedtls_sha384_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SHA384_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SHA512_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sha512_8h_1ac5374de3ea65545880b1fac215570fe7" kindref="member">mbedtls_sha512_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SHA512_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SELF_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>mbedtls_sha512.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/sha512.h"/>
  </compounddef>
</doxygen>
