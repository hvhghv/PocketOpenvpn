<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pem_8h" kind="file" language="C++">
    <compoundname>pem.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes local="no">stddef.h</includes>
    <incdepgraph>
      <node id="1">
        <label>pem.h</label>
        <link refid="pem_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="structmbedtls__pem__context" prot="public">mbedtls_pem_context</innerclass>
      <sectiondef kind="user-defined">
      <header>PEM Error codes</header>
      <description><para>These error codes are returned in case of errors reading the PEM data. </para>
</description>
      <memberdef kind="define" id="pem_8h_1a9fca39bb5d4a6845239221a53685a2dc" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name>
        <initializer>-0x1080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No PEM header or footer found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="25" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1a820cf2ffc66f354f3d8f621cac7b4eda" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_INVALID_DATA</name>
        <initializer>-0x1100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PEM string is not as expected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="27" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1a97ca9753a0adeb688b3093506c60a41e" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_ALLOC_FAILED</name>
        <initializer>-0x1180</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Failed to allocate memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="29" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1a7709c4b0616a4d6ec0184204ace4d4b3" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_INVALID_ENC_IV</name>
        <initializer>-0x1200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA IV is not in hex-format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="31" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1a28b7a955389ec2e9a8b7a7d3f13ad746" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG</name>
        <initializer>-0x1280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unsupported key encryption algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="33" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1ab883990c7b4a373519ab3b25ec945cd8" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_PASSWORD_REQUIRED</name>
        <initializer>-0x1300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Private key password can&apos;t be empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="35" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1aea98f44a528310c53398a49c90469861" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_PASSWORD_MISMATCH</name>
        <initializer>-0x1380</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given private key password does not allow for correct decryption. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="37" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1a58b1dec72e6a2586a1bda819ea768ad1" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE</name>
        <initializer>-0x1400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unavailable feature, e.g. hashing/encryption combination. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="39" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pem_8h_1a5db6f46565c6078d041253c3a00d2ae6" prot="public" static="no">
        <name>MBEDTLS_ERR_PEM_BAD_INPUT_DATA</name>
        <initializer>-0x1480</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad input parameters to function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="41" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pem_8h_1a35c501f8d92b889688732432624256ac" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref></type>
        <definition>typedef struct mbedtls_pem_context mbedtls_pem_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_pem_context</name>
        <briefdescription>
<para>PEM context structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="57" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pem_8h_1a0421a5ec66a7efca0b6868ae72551d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_pem_init</definition>
        <argsstring>(mbedtls_pem_context *ctx)</argsstring>
        <name>mbedtls_pem_init</name>
        <param>
          <type><ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>PEM context setup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to be initialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="64" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pem_8h_1a4ba4a0490a5edf5ca2055b8385863c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pem_read_buffer</definition>
        <argsstring>(mbedtls_pem_context *ctx, const char *header, const char *footer, const unsigned char *data, const unsigned char *pwd, size_t pwdlen, size_t *use_len)</argsstring>
        <name>mbedtls_pem_read_buffer</name>
        <param>
          <type><ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>footer</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pwd</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pwdlen</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>use_len</declname>
        </param>
        <briefdescription>
<para>Read a buffer for PEM information and store the resulting data into the specified context buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>header string to seek and expect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footer</parametername>
</parameternamelist>
<parameterdescription>
<para>footer string to seek and expect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>source data to look in (must be nul-terminated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwd</parametername>
</parameternamelist>
<parameterdescription>
<para>password for decryption (can be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwdlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_len</parametername>
</parameternamelist>
<parameterdescription>
<para>destination for total length used (set after header is correctly read, so unless you get MBEDTLS_ERR_PEM_BAD_INPUT_DATA or MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT, use_len is the length to skip)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Attempts to check password correctness by verifying if the decrypted text starts with an ASN.1 sequence of appropriate length</para>
</simplesect>
<simplesect kind="note"><para><computeroutput>mbedtls_pem_free</computeroutput> must be called on PEM context before the PEM context can be reused in another call to <computeroutput>mbedtls_pem_read_buffer</computeroutput> </para>
</simplesect>
<simplesect kind="return"><para>0 on success, or a specific PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="92" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" declline="92" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pem_8h_1a22fc5e4099c47815063f98a28eead3df" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>static const unsigned char* mbedtls_pem_get_buffer</definition>
        <argsstring>(mbedtls_pem_context *ctx, size_t *buflen)</argsstring>
        <name>mbedtls_pem_get_buffer</name>
        <param>
          <type><ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Get the pointer to the decoded binary data in a PEM context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>PEM context to access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, this will contain the length of the binary data. This must be a valid (non-null) pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the decoded binary data.</para>
</simplesect>
<simplesect kind="note"><para>The returned pointer remains valid only until <computeroutput>ctx</computeroutput> is modified or freed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="109" column="35" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="pem_8h_1a84ba36e8321d38064d78f29a97d7014c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_pem_free</definition>
        <argsstring>(mbedtls_pem_context *ctx)</argsstring>
        <name>mbedtls_pem_free</name>
        <param>
          <type><ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>PEM context memory freeing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to be freed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="121" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pem_8h_1a0fe6df77c4783c3f639ab5e47e5632aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pem_write_buffer</definition>
        <argsstring>(const char *header, const char *footer, const unsigned char *der_data, size_t der_len, unsigned char *buf, size_t buf_len, size_t *olen)</argsstring>
        <name>mbedtls_pem_write_buffer</name>
        <param>
          <type>const char *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>footer</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>der_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>der_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <briefdescription>
<para>Write a buffer of PEM information from a DER encoded buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>The header string to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footer</parametername>
</parameternamelist>
<parameterdescription>
<para>The footer string to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The DER data to encode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the DER data <computeroutput>der_data</computeroutput> in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the output buffer <computeroutput>buf</computeroutput> in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the total length written or required (if <computeroutput>buf_len</computeroutput> is not enough).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You may pass <computeroutput>NULL</computeroutput> for <computeroutput>buf</computeroutput> and <computeroutput>0</computeroutput> for <computeroutput>buf_len</computeroutput> to request the length of the resulting PEM buffer in <computeroutput>*olen</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>This function may be called with overlapping <computeroutput>der_data</computeroutput> and <computeroutput>buf</computeroutput> buffers.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="base64_8h_1aee2d8e14fac7a47751514356572b97e5" kindref="member">MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL</ref> if <computeroutput>buf</computeroutput> isn&apos;t large enough to hold the PEM buffer. In this case, <computeroutput>*olen</computeroutput> holds the required minimum size of <computeroutput>buf</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para>Another PEM or BASE64 error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" line="151" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h" declline="151" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Privacy Enhanced Mail (PEM) decoding. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_PEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="pem_8h_1a9fca39bb5d4a6845239221a53685a2dc" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1080</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="pem_8h_1a820cf2ffc66f354f3d8f621cac7b4eda" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_INVALID_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="pem_8h_1a97ca9753a0adeb688b3093506c60a41e" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_ALLOC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="pem_8h_1a7709c4b0616a4d6ec0184204ace4d4b3" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_INVALID_ENC_IV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="pem_8h_1a28b7a955389ec2e9a8b7a7d3f13ad746" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1280</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="pem_8h_1ab883990c7b4a373519ab3b25ec945cd8" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_PASSWORD_REQUIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1300</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="pem_8h_1aea98f44a528310c53398a49c90469861" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_PASSWORD_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1380</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="pem_8h_1a58b1dec72e6a2586a1bda819ea768ad1" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="pem_8h_1a5db6f46565c6078d041253c3a00d2ae6" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PEM_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x1480</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PEM_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structmbedtls__pem__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="structmbedtls__pem__context_1a167b74fc8a1d43dde2c22cdf0bac3b93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(buf);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54" refid="structmbedtls__pem__context_1a4dfe0671f5a770156917da110f63975e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(buflen);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="structmbedtls__pem__context_1ac96f69af92790741a6430c3860aa3657" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(info);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="pem_8h_1a35c501f8d92b889688732432624256ac" kindref="member">mbedtls_pem_context</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pem_8h_1a0421a5ec66a7efca0b6868ae72551d47" kindref="member">mbedtls_pem_init</ref>(<ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pem_8h_1a4ba4a0490a5edf5ca2055b8385863c39" kindref="member">mbedtls_pem_read_buffer</ref>(<ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*header,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*footer,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pwd,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pwdlen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*use_len);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="pem_8h_1a22fc5e4099c47815063f98a28eead3df" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="pem_8h_1a22fc5e4099c47815063f98a28eead3df" kindref="member">mbedtls_pem_get_buffer</ref>(<ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*buflen)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>*buflen<sp/>=<sp/>ctx-&gt;MBEDTLS_PRIVATE(buflen);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;MBEDTLS_PRIVATE(buf);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pem_8h_1a84ba36e8321d38064d78f29a97d7014c" kindref="member">mbedtls_pem_free</ref>(<ref refid="structmbedtls__pem__context" kindref="compound">mbedtls_pem_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PEM_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PEM_WRITE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pem_8h_1a0fe6df77c4783c3f639ab5e47e5632aa" kindref="member">mbedtls_pem_write_buffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*header,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*footer,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*der_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>der_len,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PEM_WRITE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>pem.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pem.h"/>
  </compounddef>
</doxygen>
