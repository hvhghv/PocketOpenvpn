<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__aead" kind="group">
    <compoundname>aead</compoundname>
    <title>Authenticated encryption with associated data (AEAD)</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" prot="public" static="no">
        <type>struct <ref refid="structpsa__aead__operation__s" kindref="compound">psa_aead_operation_s</ref></type>
        <definition>typedef struct psa_aead_operation_s psa_aead_operation_t</definition>
        <argsstring></argsstring>
        <name>psa_aead_operation_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of the state data structure for multipart AEAD operations.</para>
<para>Before calling any function on an AEAD operation object, the application must initialize it by any of the following means:<itemizedlist>
<listitem><para>Set the structure to all-bits-zero, for example: <programlisting><codeline><highlight class="normal">psa_aead_operation_t<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal">memset(&amp;operation,<sp/>0,<sp/>sizeof(operation));</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to logical zero values, for example: <programlisting><codeline><highlight class="normal">psa_aead_operation_t<sp/>operation<sp/>=<sp/>{0};</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to the initializer <ref refid="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" kindref="member">PSA_AEAD_OPERATION_INIT</ref>, for example: <programlisting><codeline><highlight class="normal">psa_aead_operation_t<sp/>operation<sp/>=<sp/>PSA_AEAD_OPERATION_INIT;</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Assign the result of the function <ref refid="group__aead_1ga286b61e83f1bdd5017568c4fd1939f89" kindref="member">psa_aead_operation_init()</ref> to the structure, for example: <programlisting><codeline><highlight class="normal">psa_aead_operation_t<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal">operation<sp/>=<sp/>psa_aead_operation_init();</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>This is an implementation-defined <computeroutput>struct</computeroutput>. Applications should not make any assumptions about the content of this structure. Implementation details can change in future versions without notice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2172" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" bodystart="2212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__aead_1gae72e1eb3c2da3ebd843bb9c8db8df509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_encrypt</definition>
        <argsstring>(mbedtls_svc_key_id_t key, psa_algorithm_t alg, const uint8_t *nonce, size_t nonce_length, const uint8_t *additional_data, size_t additional_data_length, const uint8_t *plaintext, size_t plaintext_length, uint8_t *ciphertext, size_t ciphertext_size, size_t *ciphertext_length)</argsstring>
        <name>psa_aead_encrypt</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nonce_length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>additional_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>additional_data_length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>plaintext_length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ciphertext_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>ciphertext_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process an authenticated encryption operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to use for the operation. It must allow the usage <ref refid="group__policy_1ga75153b296d045d529d97203a6a995dad" kindref="member">PSA_KEY_USAGE_ENCRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The AEAD algorithm to compute (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonce or IV to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>nonce</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">additional_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional data that will be authenticated but not encrypted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>additional_data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>additional_data</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Data that will be authenticated and encrypted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>plaintext</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer for the authenticated and encrypted data. The additional data is not part of this output. For algorithms where the encrypted data and the authentication tag are defined as separate outputs, the authentication tag is appended to the encrypted data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>ciphertext</computeroutput> buffer in bytes. This must be appropriate for the selected algorithm and key:<itemizedlist>
<listitem><para>A sufficient output size is <ref refid="crypto__sizes_8h_1a0e0791f41b38a79b1fda63c4cb0eec7a" kindref="member">PSA_AEAD_ENCRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>plaintext_length</computeroutput>) where <computeroutput>key_type</computeroutput> is the type of <computeroutput>key</computeroutput>.</para>
</listitem><listitem><para><ref refid="crypto__sizes_8h_1a627fd15f45e7aab42d0126f1534f24a5" kindref="member">PSA_AEAD_ENCRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>plaintext_length</computeroutput>) evaluates to the maximum ciphertext size of any supported AEAD encryption. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ciphertext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the size of the output in the <computeroutput>ciphertext</computeroutput> buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>key</computeroutput> is not compatible with <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not supported or is not an AEAD algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>ciphertext_size</computeroutput> is too small. <ref refid="crypto__sizes_8h_1a0e0791f41b38a79b1fda63c4cb0eec7a" kindref="member">PSA_AEAD_ENCRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>plaintext_length</computeroutput>) or <ref refid="crypto__sizes_8h_1a627fd15f45e7aab42d0126f1534f24a5" kindref="member">PSA_AEAD_ENCRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>plaintext_length</computeroutput>) can be used to determine the required buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2099" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2099" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1gae799f6196a22d50c216c947e0320d3ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_decrypt</definition>
        <argsstring>(mbedtls_svc_key_id_t key, psa_algorithm_t alg, const uint8_t *nonce, size_t nonce_length, const uint8_t *additional_data, size_t additional_data_length, const uint8_t *ciphertext, size_t ciphertext_length, uint8_t *plaintext, size_t plaintext_size, size_t *plaintext_length)</argsstring>
        <name>psa_aead_decrypt</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nonce_length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>additional_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>additional_data_length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ciphertext_length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>plaintext_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>plaintext_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process an authenticated decryption operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to use for the operation. It must allow the usage <ref refid="group__policy_1gac3f2d2e5983db1edde9f142ca9bf8e6a" kindref="member">PSA_KEY_USAGE_DECRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The AEAD algorithm to compute (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonce or IV to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>nonce</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">additional_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional data that has been authenticated but not encrypted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>additional_data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>additional_data</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Data that has been authenticated and encrypted. For algorithms where the encrypted data and the authentication tag are defined as separate inputs, the buffer must contain the encrypted data followed by the authentication tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>ciphertext</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer for the decrypted data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>plaintext</computeroutput> buffer in bytes. This must be appropriate for the selected algorithm and key:<itemizedlist>
<listitem><para>A sufficient output size is <ref refid="crypto__sizes_8h_1ad33bdee829a3d6c4083cae62d176fa9e" kindref="member">PSA_AEAD_DECRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>ciphertext_length</computeroutput>) where <computeroutput>key_type</computeroutput> is the type of <computeroutput>key</computeroutput>.</para>
</listitem><listitem><para><ref refid="crypto__sizes_8h_1aa7135728f0067ffcf6536e7d6c356aa5" kindref="member">PSA_AEAD_DECRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>ciphertext_length</computeroutput>) evaluates to the maximum plaintext size of any supported AEAD decryption. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">plaintext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the size of the output in the <computeroutput>plaintext</computeroutput> buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The ciphertext is not authentic. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>key</computeroutput> is not compatible with <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not supported or is not an AEAD algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>plaintext_size</computeroutput> is too small. <ref refid="crypto__sizes_8h_1ad33bdee829a3d6c4083cae62d176fa9e" kindref="member">PSA_AEAD_DECRYPT_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>ciphertext_length</computeroutput>) or <ref refid="crypto__sizes_8h_1aa7135728f0067ffcf6536e7d6c356aa5" kindref="member">PSA_AEAD_DECRYPT_OUTPUT_MAX_SIZE</ref>(<computeroutput>ciphertext_length</computeroutput>) can be used to determine the required buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2172" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2172" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1ga286b61e83f1bdd5017568c4fd1939f89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref></type>
        <definition>static psa_aead_operation_t psa_aead_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_aead_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an initial value for an AEAD operation object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2222" column="29" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2222" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_encrypt_setup</definition>
        <argsstring>(psa_aead_operation_t *operation, mbedtls_svc_key_id_t key, psa_algorithm_t alg)</argsstring>
        <name>psa_aead_encrypt_setup</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the key for a multipart authenticated encryption operation.</para>
<para>The sequence of operations to encrypt a message with authentication is as follows:<orderedlist>
<listitem><para>Allocate an operation object which will be passed to all the functions listed here.</para>
</listitem><listitem><para>Initialize the operation object with one of the methods described in the documentation for <ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref>, e.g. <ref refid="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" kindref="member">PSA_AEAD_OPERATION_INIT</ref>.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref> to specify the algorithm and key.</para>
</listitem><listitem><para>If needed, call <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref> to specify the length of the inputs to the subsequent calls to <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> and <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>. See the documentation of <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref> for details.</para>
</listitem><listitem><para>Call either <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref> or <ref refid="group__aead_1ga59132751a6f843d038924cb217b5e13b" kindref="member">psa_aead_set_nonce()</ref> to generate or set the nonce. You should use <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref> unless the protocol you are implementing requires a specific nonce value.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> zero, one or more times, passing a fragment of the non-encrypted additional authenticated data each time.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> zero, one or more times, passing a fragment of the message to encrypt each time.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref>.</para>
</listitem></orderedlist>
</para>
<para>If an error occurs at any step after a call to <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref>, the operation will need to be reset by a call to <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>. The application may call <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref> at any time after the operation has been initialized.</para>
<para>After a successful call to <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref>, the application must eventually terminate the operation. The following events terminate an operation:<itemizedlist>
<listitem><para>A successful call to <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref>.</para>
</listitem><listitem><para>A call to <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation object to set up. It must have been initialized as per the documentation for <ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> and not yet in use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to use for the operation. It must remain valid until the operation terminates. It must allow the usage <ref refid="group__policy_1ga75153b296d045d529d97203a6a995dad" kindref="member">PSA_KEY_USAGE_ENCRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The AEAD algorithm to compute (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be inactive), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>key</computeroutput> is not compatible with <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not supported or is not an AEAD algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2290" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2290" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_decrypt_setup</definition>
        <argsstring>(psa_aead_operation_t *operation, mbedtls_svc_key_id_t key, psa_algorithm_t alg)</argsstring>
        <name>psa_aead_decrypt_setup</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the key for a multipart authenticated decryption operation.</para>
<para>The sequence of operations to decrypt a message with authentication is as follows:<orderedlist>
<listitem><para>Allocate an operation object which will be passed to all the functions listed here.</para>
</listitem><listitem><para>Initialize the operation object with one of the methods described in the documentation for <ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref>, e.g. <ref refid="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" kindref="member">PSA_AEAD_OPERATION_INIT</ref>.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref> to specify the algorithm and key.</para>
</listitem><listitem><para>If needed, call <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref> to specify the length of the inputs to the subsequent calls to <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> and <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>. See the documentation of <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref> for details.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1ga59132751a6f843d038924cb217b5e13b" kindref="member">psa_aead_set_nonce()</ref> with the nonce for the decryption.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> zero, one or more times, passing a fragment of the non-encrypted additional authenticated data each time.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> zero, one or more times, passing a fragment of the ciphertext to decrypt each time.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref>.</para>
</listitem></orderedlist>
</para>
<para>If an error occurs at any step after a call to <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref>, the operation will need to be reset by a call to <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>. The application may call <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref> at any time after the operation has been initialized.</para>
<para>After a successful call to <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref>, the application must eventually terminate the operation. The following events terminate an operation:<itemizedlist>
<listitem><para>A successful call to <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref>.</para>
</listitem><listitem><para>A call to <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation object to set up. It must have been initialized as per the documentation for <ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> and not yet in use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to use for the operation. It must remain valid until the operation terminates. It must allow the usage <ref refid="group__policy_1gac3f2d2e5983db1edde9f142ca9bf8e6a" kindref="member">PSA_KEY_USAGE_DECRYPT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The AEAD algorithm to compute (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>key</computeroutput> is not compatible with <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>alg</computeroutput> is not supported or is not an AEAD algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be inactive), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2356" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2356" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1ga5799df1c555efd35970b65be51cb07d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_generate_nonce</definition>
        <argsstring>(psa_aead_operation_t *operation, uint8_t *nonce, size_t nonce_size, size_t *nonce_length)</argsstring>
        <name>psa_aead_generate_nonce</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nonce_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nonce_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a random nonce for an authenticated encryption operation.</para>
<para>This function generates a random nonce for the authenticated encryption operation with an appropriate size for the chosen algorithm, key type and key size.</para>
<para>The application must call <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref> before calling this function.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active AEAD operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the generated nonce is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>nonce</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nonce_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes of the generated nonce.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>nonce</computeroutput> buffer is too small. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be an active aead encrypt operation, with no nonce set), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2395" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2395" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1ga59132751a6f843d038924cb217b5e13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_set_nonce</definition>
        <argsstring>(psa_aead_operation_t *operation, const uint8_t *nonce, size_t nonce_length)</argsstring>
        <name>psa_aead_set_nonce</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nonce_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the nonce for an authenticated encryption or decryption operation.</para>
<para>This function sets the nonce for the authenticated encryption or decryption operation.</para>
<para>The application must call <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref> or <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref> before calling this function.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
<para><simplesect kind="note"><para>When encrypting, applications should use <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref> instead of this function, unless implementing a protocol that requires a non-random IV.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active AEAD operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the nonce to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the nonce in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <computeroutput>nonce</computeroutput> is not acceptable for the chosen algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active, with no nonce set), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2435" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2435" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1gad3431e28d05002c2a7b0760610176050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_set_lengths</definition>
        <argsstring>(psa_aead_operation_t *operation, size_t ad_length, size_t plaintext_length)</argsstring>
        <name>psa_aead_set_lengths</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ad_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>plaintext_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare the lengths of the message and additional data for AEAD.</para>
<para>The application must call this function before calling <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> or <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> if the algorithm for the operation requires it. If the algorithm does not require it, calling this function is optional, but if this function is called then the implementation must enforce the lengths.</para>
<para>You may call this function before or after setting the nonce with <ref refid="group__aead_1ga59132751a6f843d038924cb217b5e13b" kindref="member">psa_aead_set_nonce()</ref> or <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref>.</para>
<para><itemizedlist>
<listitem><para>For <ref refid="group__crypto__types_1gac2c0e7d21f1b2df5e76bcb4a8f84273c" kindref="member">PSA_ALG_CCM</ref>, calling this function is required.</para>
</listitem><listitem><para>For the other AEAD algorithms defined in this specification, calling this function is not required.</para>
</listitem><listitem><para>For vendor-defined algorithm, refer to the vendor documentation.</para>
</listitem></itemizedlist>
</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active AEAD operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ad_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the non-encrypted additional authenticated data in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the plaintext to encrypt in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>At least one of the lengths is not acceptable for the chosen algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active, and <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> and <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> must not have been called yet), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2480" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2480" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_update_ad</definition>
        <argsstring>(psa_aead_operation_t *operation, const uint8_t *input, size_t input_length)</argsstring>
        <name>psa_aead_update_ad</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pass additional data to an active AEAD operation.</para>
<para>Additional data is authenticated, but not encrypted.</para>
<para>You may call this function multiple times to pass successive fragments of the additional data. You may not call this function after passing data to encrypt or decrypt with <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>.</para>
<para>Before calling this function, you must:<orderedlist>
<listitem><para>Call either <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref> or <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref>.</para>
</listitem><listitem><para>Set the nonce with <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref> or <ref refid="group__aead_1ga59132751a6f843d038924cb217b5e13b" kindref="member">psa_aead_set_nonce()</ref>.</para>
</listitem></orderedlist>
</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
<para><simplesect kind="warning"><para>When decrypting, until <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> has returned <ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>, there is no guarantee that the input is valid. Therefore, until you have called <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> and it has returned <ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>, treat the input as untrusted and prepare to undo any action that depends on the input if <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> returns an error status.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active AEAD operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the fragment of additional data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>input</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The total input length overflows the additional data length that was previously specified with <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active, have a nonce set, have lengths set if required by the algorithm, and <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> must not have been called yet), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2528" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2528" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_update</definition>
        <argsstring>(psa_aead_operation_t *operation, const uint8_t *input, size_t input_length, uint8_t *output, size_t output_size, size_t *output_length)</argsstring>
        <name>psa_aead_update</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypt or decrypt a message fragment in an active AEAD operation.</para>
<para>Before calling this function, you must:<orderedlist>
<listitem><para>Call either <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref> or <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref>. The choice of setup function determines whether this function encrypts or decrypts its input.</para>
</listitem><listitem><para>Set the nonce with <ref refid="group__aead_1ga5799df1c555efd35970b65be51cb07d1" kindref="member">psa_aead_generate_nonce()</ref> or <ref refid="group__aead_1ga59132751a6f843d038924cb217b5e13b" kindref="member">psa_aead_set_nonce()</ref>.</para>
</listitem><listitem><para>Call <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> to pass all the additional data.</para>
</listitem></orderedlist>
</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
<para><simplesect kind="warning"><para>When decrypting, until <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> has returned <ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>, there is no guarantee that the input is valid. Therefore, until you have called <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> and it has returned <ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref>:<itemizedlist>
<listitem><para>Do not use the output in any way other than storing it in a confidential location. If you take any action that depends on the tentative decrypted data, this action will need to be undone if the input turns out not to be valid. Furthermore, if an adversary can observe that this action took place (for example through timing), they may be able to use this fact as an oracle to decrypt any message encrypted with the same key.</para>
</listitem><listitem><para>In particular, do not copy the output anywhere but to a memory or storage space that you have exclusive access to.</para>
</listitem></itemizedlist>
</para>
</simplesect>
This function does not require the input to be aligned to any particular block boundary. If the implementation can only process a whole block at a time, it must consume all the input provided, but it may delay the end of the corresponding output until a subsequent call to <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>, <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref> or <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> provides sufficient input. The amount of data that can be delayed in this way is bounded by <ref refid="crypto__sizes_8h_1a38c502f21653f1b3708ae8897d1bb01d" kindref="member">PSA_AEAD_UPDATE_OUTPUT_SIZE</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active AEAD operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the message fragment to encrypt or decrypt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>input</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the output is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>output</computeroutput> buffer in bytes. This must be appropriate for the selected algorithm and key:<itemizedlist>
<listitem><para>A sufficient output size is <ref refid="crypto__sizes_8h_1a38c502f21653f1b3708ae8897d1bb01d" kindref="member">PSA_AEAD_UPDATE_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>input_length</computeroutput>) where <computeroutput>key_type</computeroutput> is the type of key and <computeroutput>alg</computeroutput> is the algorithm that were used to set up the operation.</para>
</listitem><listitem><para><ref refid="crypto__sizes_8h_1a7bad9346cc8ceaffa4a8e7cb8c4fc9ce" kindref="member">PSA_AEAD_UPDATE_OUTPUT_MAX_SIZE</ref>(<computeroutput>input_length</computeroutput>) evaluates to the maximum output size of any supported AEAD algorithm. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the returned output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>output</computeroutput> buffer is too small. <ref refid="crypto__sizes_8h_1a38c502f21653f1b3708ae8897d1bb01d" kindref="member">PSA_AEAD_UPDATE_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>, <computeroutput>input_length</computeroutput>) or <ref refid="crypto__sizes_8h_1a7bad9346cc8ceaffa4a8e7cb8c4fc9ce" kindref="member">PSA_AEAD_UPDATE_OUTPUT_MAX_SIZE</ref>(<computeroutput>input_length</computeroutput>) can be used to determine the required buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The total length of input to <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> so far is less than the additional data length that was previously specified with <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref>, or the total input length overflows the plaintext length that was previously specified with <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active, have a nonce set, and have lengths set if required by the algorithm), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2612" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2612" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_finish</definition>
        <argsstring>(psa_aead_operation_t *operation, uint8_t *ciphertext, size_t ciphertext_size, size_t *ciphertext_length, uint8_t *tag, size_t tag_size, size_t *tag_length)</argsstring>
        <name>psa_aead_finish</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ciphertext_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>ciphertext_length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>tag_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finish encrypting a message in an AEAD operation.</para>
<para>The operation must have been set up with <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref>.</para>
<para>This function finishes the authentication of the additional data formed by concatenating the inputs passed to preceding calls to <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> with the plaintext formed by concatenating the inputs passed to preceding calls to <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>.</para>
<para>This function has two output buffers:<itemizedlist>
<listitem><para><computeroutput>ciphertext</computeroutput> contains trailing ciphertext that was buffered from preceding calls to <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>.</para>
</listitem><listitem><para><computeroutput>tag</computeroutput> contains the authentication tag.</para>
</listitem></itemizedlist>
</para>
<para>When this function returns successfully, the operation becomes inactive. If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active AEAD operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the last part of the ciphertext is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>ciphertext</computeroutput> buffer in bytes. This must be appropriate for the selected algorithm and key:<itemizedlist>
<listitem><para>A sufficient output size is <ref refid="crypto__sizes_8h_1aeaa3630f4450996638d4c56d651301d3" kindref="member">PSA_AEAD_FINISH_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>) where <computeroutput>key_type</computeroutput> is the type of key and <computeroutput>alg</computeroutput> is the algorithm that were used to set up the operation.</para>
</listitem><listitem><para><ref refid="crypto__sizes_8h_1ae2d44f764023b9e7948af9344ecb66ce" kindref="member">PSA_AEAD_FINISH_OUTPUT_MAX_SIZE</ref> evaluates to the maximum output size of any supported AEAD algorithm. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ciphertext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes of returned ciphertext. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the authentication tag is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>tag</computeroutput> buffer in bytes. This must be appropriate for the selected algorithm and key:<itemizedlist>
<listitem><para>The exact tag size is <ref refid="crypto__sizes_8h_1a9aab63d83591633baa13beff3bdf8b2f" kindref="member">PSA_AEAD_TAG_LENGTH</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>, <computeroutput>alg</computeroutput>) where <computeroutput>key_type</computeroutput> and <computeroutput>key_bits</computeroutput> are the type and bit-size of the key, and <computeroutput>alg</computeroutput> is the algorithm that were used in the call to <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref>.</para>
</listitem><listitem><para><ref refid="crypto__sizes_8h_1ae3b873ea579c278946e6e536b7e513af" kindref="member">PSA_AEAD_TAG_MAX_SIZE</ref> evaluates to the maximum tag size of any supported AEAD algorithm. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tag_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the returned tag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>ciphertext</computeroutput> or <computeroutput>tag</computeroutput> buffer is too small. <ref refid="crypto__sizes_8h_1aeaa3630f4450996638d4c56d651301d3" kindref="member">PSA_AEAD_FINISH_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>) or <ref refid="crypto__sizes_8h_1ae2d44f764023b9e7948af9344ecb66ce" kindref="member">PSA_AEAD_FINISH_OUTPUT_MAX_SIZE</ref> can be used to determine the required <computeroutput>ciphertext</computeroutput> buffer size. <ref refid="crypto__sizes_8h_1a9aab63d83591633baa13beff3bdf8b2f" kindref="member">PSA_AEAD_TAG_LENGTH</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>key_bits</computeroutput>, <computeroutput>alg</computeroutput>) or <ref refid="crypto__sizes_8h_1ae3b873ea579c278946e6e536b7e513af" kindref="member">PSA_AEAD_TAG_MAX_SIZE</ref> can be used to determine the required <computeroutput>tag</computeroutput> buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The total length of input to <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> so far is less than the additional data length that was previously specified with <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref>, or the total length of input to <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> so far is less than the plaintext length that was previously specified with <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be an active encryption operation with a nonce set), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2698" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2698" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1gae0280e2e61a185b893c36d858453f0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_verify</definition>
        <argsstring>(psa_aead_operation_t *operation, uint8_t *plaintext, size_t plaintext_size, size_t *plaintext_length, const uint8_t *tag, size_t tag_length)</argsstring>
        <name>psa_aead_verify</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>plaintext_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>plaintext_length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tag_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finish authenticating and decrypting a message in an AEAD operation.</para>
<para>The operation must have been set up with <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref>.</para>
<para>This function finishes the authenticated decryption of the message components:</para>
<para><itemizedlist>
<listitem><para>The additional data consisting of the concatenation of the inputs passed to preceding calls to <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref>.</para>
</listitem><listitem><para>The ciphertext consisting of the concatenation of the inputs passed to preceding calls to <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref>.</para>
</listitem><listitem><para>The tag passed to this function call.</para>
</listitem></itemizedlist>
</para>
<para>If the authentication tag is correct, this function outputs any remaining plaintext and reports success. If the authentication tag is not correct, this function returns <ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref>.</para>
<para>When this function returns successfully, the operation becomes inactive. If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>.</para>
<para><simplesect kind="note"><para>Implementations shall make the best effort to ensure that the comparison between the actual tag and the expected tag is performed in constant time.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active AEAD operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the last part of the plaintext is to be written. This is the remaining data from previous calls to <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> that could not be processed until the end of the input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>plaintext</computeroutput> buffer in bytes. This must be appropriate for the selected algorithm and key:<itemizedlist>
<listitem><para>A sufficient output size is <ref refid="crypto__sizes_8h_1a4ca7886c2fedd17a1327ad90ee1cc480" kindref="member">PSA_AEAD_VERIFY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>) where <computeroutput>key_type</computeroutput> is the type of key and <computeroutput>alg</computeroutput> is the algorithm that were used to set up the operation.</para>
</listitem><listitem><para><ref refid="crypto__sizes_8h_1a19fc08f5f6f33fd0b91152de1643df0c" kindref="member">PSA_AEAD_VERIFY_OUTPUT_MAX_SIZE</ref> evaluates to the maximum output size of any supported AEAD algorithm. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">plaintext_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes of returned plaintext. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the authentication tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>tag</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The calculations were successful, but the authentication tag is not correct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>plaintext</computeroutput> buffer is too small. <ref refid="crypto__sizes_8h_1a4ca7886c2fedd17a1327ad90ee1cc480" kindref="member">PSA_AEAD_VERIFY_OUTPUT_SIZE</ref>(<computeroutput>key_type</computeroutput>, <computeroutput>alg</computeroutput>) or <ref refid="crypto__sizes_8h_1a19fc08f5f6f33fd0b91152de1643df0c" kindref="member">PSA_AEAD_VERIFY_OUTPUT_MAX_SIZE</ref> can be used to determine the required buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The total length of input to <ref refid="group__aead_1ga6d0eed03f832e5c9c91cb8adf2882569" kindref="member">psa_aead_update_ad()</ref> so far is less than the additional data length that was previously specified with <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref>, or the total length of input to <ref refid="group__aead_1gaf6d49864951ca42136b4a9b71ea26e5c" kindref="member">psa_aead_update()</ref> so far is less than the plaintext length that was previously specified with <ref refid="group__aead_1gad3431e28d05002c2a7b0760610176050" kindref="member">psa_aead_set_lengths()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be an active decryption operation with a nonce set), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2781" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2781" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_aead_abort</definition>
        <argsstring>(psa_aead_operation_t *operation)</argsstring>
        <name>psa_aead_abort</name>
        <param>
          <type><ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abort an AEAD operation.</para>
<para>Aborting an operation frees all associated resources except for the <computeroutput>operation</computeroutput> structure itself. Once aborted, the operation object can be reused for another operation by calling <ref refid="group__aead_1ga2732c40ce8f3619d41359a329e9b46c4" kindref="member">psa_aead_encrypt_setup()</ref> or <ref refid="group__aead_1gaaa5c5018e67a7a6514b7e76b9a14de26" kindref="member">psa_aead_decrypt_setup()</ref> again.</para>
<para>You may call this function any time after the operation object has been initialized as described in <ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref>.</para>
<para>In particular, calling <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref> after the operation has been terminated by a call to <ref refid="group__aead_1gae8a5f93d92318c8f592ee9fbb9d36ba0" kindref="member">psa_aead_abort()</ref>, <ref refid="group__aead_1ga759791bbe1763b377c3b5447641f1fc8" kindref="member">psa_aead_finish()</ref> or <ref refid="group__aead_1gae0280e2e61a185b893c36d858453f0d0" kindref="member">psa_aead_verify()</ref> is safe and has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialized AEAD operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="2813" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="2813" declcolumn="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__aead_1gaf52e036794c0dc6fbadd93a2b990f366" prot="public" static="no">
        <name>PSA_AEAD_OPERATION_INIT</name>
        <initializer>{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, { 0 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro returns a suitable initializer for an AEAD operation object of type <ref refid="group__aead_1ga14f6a01afbaa8c5b3d8c5d345cbaa3ed" kindref="member">psa_aead_operation_t</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" line="156" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_struct.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
