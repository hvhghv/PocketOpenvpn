<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ssl_8h" kind="file" language="C++">
    <compoundname>ssl.h</compoundname>
    <includes refid="platform__util_8h" local="yes">mbedtls/platform_util.h</includes>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="bignum_8h" local="yes">mbedtls/bignum.h</includes>
    <includes refid="ecp_8h" local="yes">mbedtls/ecp.h</includes>
    <includes refid="ssl__ciphersuites_8h" local="yes">mbedtls/ssl_ciphersuites.h</includes>
    <includes refid="x509__crt_8h" local="yes">mbedtls/x509_crt.h</includes>
    <includes refid="x509__crl_8h" local="yes">mbedtls/x509_crl.h</includes>
    <includes refid="dhm_8h" local="yes">mbedtls/dhm.h</includes>
    <includes refid="md_8h" local="yes">mbedtls/md.h</includes>
    <includes refid="ecdh_8h" local="yes">mbedtls/ecdh.h</includes>
    <includes refid="platform__time_8h" local="yes">mbedtls/platform_time.h</includes>
    <includes refid="crypto_8h" local="yes">psa/crypto.h</includes>
    <includedby refid="debug_8h" local="yes">debug.h</includedby>
    <includedby refid="net__sockets_8h" local="yes">net_sockets.h</includedby>
    <includedby refid="ssl__cache_8h" local="yes">ssl_cache.h</includedby>
    <includedby refid="ssl__cookie_8h" local="yes">ssl_cookie.h</includedby>
    <includedby refid="ssl__ticket_8h" local="yes">ssl_ticket.h</includedby>
    <incdepgraph>
      <node id="49">
        <label>mbedtls/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>mbedtls/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="70">
        <label>mbedtls/dhm.h</label>
        <link refid="dhm_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>psa/crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>mbedtls/ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>mbedtls/ecp.h</label>
        <link refid="ecp_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="33">
        <label>stdlib.h</label>
      </node>
      <node id="32">
        <label>mbedtls/threading.h</label>
        <link refid="threading_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="21">
        <label>mbedtls/platform_time.h</label>
        <link refid="platform__time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>crypto_extra.h</label>
        <link refid="crypto__extra_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>psa/crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="39">
        <label>crypto_types.h</label>
        <link refid="crypto__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>mbedtls/x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>mbedtls/bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>mbedtls/gcm.h</label>
        <link refid="gcm_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mbedtls/platform_util.h</label>
        <link refid="platform__util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>mbedtls/sha512.h</label>
        <link refid="sha512_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="46">
        <label>mbedtls/md5.h</label>
        <link refid="md5_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>mbedtls/sha3.h</label>
        <link refid="sha3_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>psa/crypto_builtin_primitives.h</label>
        <link refid="crypto__builtin__primitives_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>mbedtls/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="34">
        <label>pthread.h</label>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>psa/crypto_driver_contexts_key_derivation.h</label>
        <link refid="crypto__driver__contexts__key__derivation_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>mbedtls/ccm.h</label>
        <link refid="ccm_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>mbedtls/pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>crypto_values.h</label>
        <link refid="crypto__values_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>psa/crypto_driver_contexts_primitives.h</label>
        <link refid="crypto__driver__contexts__primitives_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="37">
        <label>crypto_platform.h</label>
        <link refid="crypto__platform_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>crypto_compat.h</label>
        <link refid="crypto__compat_8h"/>
      </node>
      <node id="41">
        <label>crypto_sizes.h</label>
        <link refid="crypto__sizes_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>mbedtls/poly1305.h</label>
        <link refid="poly1305_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>mbedtls/ecjpake.h</label>
        <link refid="ecjpake_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>psa/crypto_driver_common.h</label>
        <link refid="crypto__driver__common_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="22">
        <label>time.h</label>
      </node>
      <node id="71">
        <label>mbedtls/ecdh.h</label>
        <link refid="ecdh_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>psa/crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="38">
        <label>psa/build_info.h</label>
        <link refid="psa_2build__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>mbedtls/cmac.h</label>
        <link refid="cmac_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>psa/crypto_builtin_key_derivation.h</label>
        <link refid="crypto__builtin__key__derivation_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>mbedtls/cipher.h</label>
        <link refid="cipher_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>mbedtls/md.h</label>
        <link refid="md_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>mbedtls/chachapoly.h</label>
        <link refid="chachapoly_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>mbedtls/x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="66">
        <label>mbedtls/x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>mbedtls/asn1.h</label>
        <link refid="asn1_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>mbedtls/rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>mbedtls/chacha20.h</label>
        <link refid="chacha20_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>stdio.h</label>
      </node>
      <node id="48">
        <label>mbedtls/sha1.h</label>
        <link refid="sha1_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="5">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="1">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="4">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="3">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="unionmbedtls__ssl__premaster__secret" prot="public">mbedtls_ssl_premaster_secret</innerclass>
    <innerclass refid="structmbedtls__ssl__tls13__application__secrets" prot="public">mbedtls_ssl_tls13_application_secrets</innerclass>
    <innerclass refid="structmbedtls__dtls__srtp__info__t" prot="public">mbedtls_dtls_srtp_info_t</innerclass>
    <innerclass refid="structmbedtls__ssl__session" prot="public">mbedtls_ssl_session</innerclass>
    <innerclass refid="unionmbedtls__ssl__user__data__t" prot="public">mbedtls_ssl_user_data_t</innerclass>
    <innerclass refid="structmbedtls__ssl__config" prot="public">mbedtls_ssl_config</innerclass>
    <innerclass refid="structmbedtls__ssl__context" prot="public">mbedtls_ssl_context</innerclass>
      <sectiondef kind="user-defined">
      <header>SECTION: Module settings</header>
      <description><para>The configuration options you can set for this module are in this section. Either change them in <ref refid="mbedtls__config_8h" kindref="compound">mbedtls_config.h</ref> or define them on the compiler command line. </para>
</description>
      <memberdef kind="define" id="ssl_8h_1aabb3c84cb377d3d0291225ad6aab6ade" prot="public" static="no">
        <name>MBEDTLS_SSL_IN_CONTENT_LEN</name>
        <initializer>16384</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum length (in bytes) of incoming plaintext fragments.</para>
<para>This determines the size of the incoming TLS I/O buffer in such a way that it is capable of holding the specified amount of plaintext data, regardless of the protection mechanism used.</para>
<para><simplesect kind="note"><para>When using a value less than the default of 16KB on the client, it is recommended to use the Maximum Fragment Length (MFL) extension to inform the server about this limitation. On the server, there is no supported, standardized way of informing the client about restriction on the maximum size of incoming messages, and unless the limitation has been communicated by other means, it is recommended to only change the outgoing buffer size <ref refid="ssl_8h_1ae6d6fb50d2997e49b202fa9fb4356158" kindref="member">MBEDTLS_SSL_OUT_CONTENT_LEN</ref> while keeping the default value of 16KB for the incoming buffer.</para>
</simplesect>
Uncomment to set the maximum plaintext size of the incoming I/O buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="366" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae6d6fb50d2997e49b202fa9fb4356158" prot="public" static="no">
        <name>MBEDTLS_SSL_OUT_CONTENT_LEN</name>
        <initializer>16384</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum length (in bytes) of outgoing plaintext fragments.</para>
<para>This determines the size of the outgoing TLS I/O buffer in such a way that it is capable of holding the specified amount of plaintext data, regardless of the protection mechanism used.</para>
<para>It is possible to save RAM by setting a smaller outward buffer, while keeping the default inward 16384 byte buffer to conform to the TLS specification.</para>
<para>The minimum required outward buffer size is determined by the handshake protocol&apos;s usage. Handshaking will fail if the outward buffer is too small. The specific size requirement depends on the configured ciphers and any certificate data which is sent during the handshake.</para>
<para>Uncomment to set the maximum plaintext size of the outgoing I/O buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="370" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2eee1c4027ef23dfcd764101c9e95edf" prot="public" static="no">
        <name>MBEDTLS_SSL_DTLS_MAX_BUFFERING</name>
        <initializer>32768</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of heap-allocated bytes for the purpose of DTLS handshake message reassembly and future message buffering.</para>
<para>This should be at least 9/8 * MBEDTLS_SSL_IN_CONTENT_LEN to account for a reassembled handshake message of maximum size, together with its reassembly bitmap.</para>
<para>A value of 2 * MBEDTLS_SSL_IN_CONTENT_LEN (32768 by default) should be sufficient for all practical situations as it allows to reassembly a large handshake message (such as a certificate) while buffering multiple smaller handshake messages. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="378" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a326a31352ca97afdc7a94bac39577d2e" prot="public" static="no">
        <name>MBEDTLS_SSL_CID_IN_LEN_MAX</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum length of CIDs used for incoming DTLS messages. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="385" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a17df67385a32a5648a5c3d85777cdc8e" prot="public" static="no">
        <name>MBEDTLS_SSL_CID_OUT_LEN_MAX</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum length of CIDs used for outgoing DTLS messages. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="389" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6c3638ed1c6c9a77ca62b35b8fa82597" prot="public" static="no">
        <name>MBEDTLS_SSL_CID_TLS1_3_PADDING_GRANULARITY</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This option controls the use of record plaintext padding in TLS 1.3 and when using the Connection ID extension in DTLS 1.2.</para>
<para>The padding will always be chosen so that the length of the padded plaintext is a multiple of the value of this option.</para>
<para>Note: A value of <computeroutput>1</computeroutput> means that no padding will be used for outgoing records.</para>
<para>Note: On systems lacking division instructions, a power of two should be preferred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="393" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a61da138676b0f01dac6e045949ab4387" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_EARLY_DATA_SIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Complete list of ciphersuites to use, in order of preference.</para>
<para><simplesect kind="warning"><para>No dependency checking is done on that field! This option can only be used to restrict the set of available ciphersuites. It is your responsibility to make sure the needed modules are active.</para>
</simplesect>
Use this to save a few hundred bytes of ROM (default ordering of all available ciphersuites) and a few to a few hundred bytes of RAM.</para>
<para>The value below is only an example, not the default.</para>
<para>The default maximum amount of 0-RTT data. See the documentation of <computeroutput><ref refid="ssl_8h_1a72875597697f96e1b626fb4c2664dabf" kindref="member">mbedtls_ssl_tls13_conf_max_early_data_size()</ref></computeroutput> for more information.</para>
<para>It must be positive and smaller than UINT32_MAX.</para>
<para>If MBEDTLS_SSL_EARLY_DATA is not defined, this default value does not have any impact on the build.</para>
<para>This feature is experimental, not completed and thus not ready for production. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="397" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a809f2bc417bb651aec1218f4448ee174" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_TICKET_AGE_TOLERANCE</name>
        <initializer>6000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum time difference in milliseconds tolerated between the age of a ticket from the server and client point of view. From the client point of view, the age of a ticket is the time difference between the time when the client proposes to the server to use the ticket (time of writing of the Pre-Shared Key Extension including the ticket) and the time the client received the ticket from the server. From the server point of view, the age of a ticket is the time difference between the time when the server receives a proposition from the client to use the ticket and the time when the ticket was created by the server. The server age is expected to be always greater than the client one and MBEDTLS_SSL_TLS1_3_TICKET_AGE_TOLERANCE defines the maximum difference tolerated for the server to accept the ticket. This is not used in TLS 1.2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="401" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a7fa88207224d12b4b8819468dc573a68" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_TICKET_NONCE_LENGTH</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size in bytes of a ticket nonce. This is not used in TLS 1.2.</para>
<para>This must be less than 256. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="405" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a9e73436ef33056d4f74db72d484dea6e" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_DEFAULT_NEW_SESSION_TICKETS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default number of NewSessionTicket messages to be sent by a TLS 1.3 server after handshake completion. This is not used in TLS 1.2 and relevant only if the MBEDTLS_SSL_SESSION_TICKETS option is enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="409" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="ssl_8h_1a6516299349393931e8d17957f9b80eca" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</name>
        <initializer>-0x7000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A cryptographic operation is in progress. Try again later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="47" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aea8b7e95c7e547959c10e9cad5f46043" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name>
        <initializer>-0x7080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested feature is not available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="49" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name>
        <initializer>-0x7100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad input parameters to function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="51" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac88e465f67430fba26abeb44f2ac28d5" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_INVALID_MAC</name>
        <initializer>-0x7180</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verification of the message MAC failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="53" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aad21f6b8a740ef21dd162d91b809e3a4" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name>
        <initializer>-0x7200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An invalid SSL record was received. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="55" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab82e0253b53fa62fab94b98ef9eb97f9" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CONN_EOF</name>
        <initializer>-0x7280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The connection indicated an EOF. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="57" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1afc098d478516dfc8f6cbcdfb29e1f663" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_DECODE_ERROR</name>
        <initializer>-0x7300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A message could not be parsed due to a syntactic error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="59" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aebfdb35dab3c9928c1db296b7b7140ab" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_NO_RNG</name>
        <initializer>-0x7400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No RNG was provided to the SSL module. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="62" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aaa160d753b94b4ecf6e22a1415450e8f" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE</name>
        <initializer>-0x7480</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No client certification received from the client, but required by the authentication mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="64" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acf1e86f4ffb6ff35b65f2d37a63fe129" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_UNSUPPORTED_EXTENSION</name>
        <initializer>-0x7500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Client received an extended server hello containing an unsupported extension </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="66" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6991d6a617c79c1c5ad3162f18ffd2ff" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_NO_APPLICATION_PROTOCOL</name>
        <initializer>-0x7580</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No ALPN protocols supported that the client advertises </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="68" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a4c40a91dc331782b9aaa82812fc38eb4" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED</name>
        <initializer>-0x7600</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The own private key or pre-shared key is not set, but needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="70" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a31bcc2bfd103177e3e76e04219e0497f" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED</name>
        <initializer>-0x7680</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No CA Chain is set, but required to operate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="72" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ada7521232ac79a0cc64e8f5325fc7574" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name>
        <initializer>-0x7700</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An unexpected message was received from our peer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="74" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acc37a34787c5c5484a993ff64c3a1634" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE</name>
        <initializer>-0x7780</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A fatal alert message was received from our peer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="76" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0965a4adfeb38e6ca6a72aa83e3f4aaa" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_UNRECOGNIZED_NAME</name>
        <initializer>-0x7800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No server could be identified matching the client&apos;s SNI. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="78" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac5e16e4c94a7e4ba0cf6b95c4547ddb1" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY</name>
        <initializer>-0x7880</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The peer notified us that the connection is going to be closed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="80" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0393b67a084dd92dcd80fe62ee06813d" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_BAD_CERTIFICATE</name>
        <initializer>-0x7A00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Processing of the Certificate handshake message failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="84" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a789622e6961edd0fade001480c7a887c" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_RECEIVED_NEW_SESSION_TICKET</name>
        <initializer>-0x7B00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Received NewSessionTicket Post Handshake Message. This error code is experimental and may be changed or removed without notice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="90" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1addd67a6fff1bf4256267dec1b3127546" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CANNOT_READ_EARLY_DATA</name>
        <initializer>-0x7B80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Not possible to read early data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="92" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a036eb294f38b65208be7b82c797f93de" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CANNOT_WRITE_EARLY_DATA</name>
        <initializer>-0x7C00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Not possible to write early data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="94" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8aacd7800641540018eccacb43c822cc" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CACHE_ENTRY_NOT_FOUND</name>
        <initializer>-0x7E80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cache entry not found </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="100" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a701ee611f7a16a261b306466c8602177" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name>
        <initializer>-0x7F00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory allocation failed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="102" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aef773c241760a00e92c239a917e4868e" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name>
        <initializer>-0x7F80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hardware acceleration function returned with error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="104" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af9328fb82f9548f4fa6bf3a5e1254c65" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH</name>
        <initializer>-0x6F80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hardware acceleration function skipped / left alone data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="106" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac478dec79a014adf7a236d242cf35ebc" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_BAD_PROTOCOL_VERSION</name>
        <initializer>-0x6E80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handshake protocol not within min/max boundaries </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="108" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa7770a6157a4477542b51e4732aba0a0" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE</name>
        <initializer>-0x6E00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The handshake negotiation failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="110" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8b1558e0b749f8b5f856d73d8b9869e9" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED</name>
        <initializer>-0x6D80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Session ticket has expired. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="112" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acfee5259b88126fa1f8fc5437a089f57" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH</name>
        <initializer>-0x6D00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Public key type mismatch (eg, asked for RSA key exchange and presented EC key) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="114" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1adf3630ee46adcea979db9519225d0519" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY</name>
        <initializer>-0x6C80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unknown identity received (eg, PSK identity) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="116" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af06cd02b5bcd36592925c2f63d80f43f" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name>
        <initializer>-0x6C00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal error (eg, unexpected failure in lower-level module) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="118" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae8cfe8ffb3e7448e6097a7601b349ac5" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_COUNTER_WRAPPING</name>
        <initializer>-0x6B80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A counter would wrap (eg, too many messages exchanged). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="120" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1adbadeb512c769067a5dbe1de97a85ad5" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO</name>
        <initializer>-0x6B00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unexpected message at ServerHello in renegotiation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="122" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a18d6936a834082004d1b1d16fe0007a2" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</name>
        <initializer>-0x6A80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DTLS client must retry for hello verification </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="124" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad7215c366f66035c9b5a60918168e950" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name>
        <initializer>-0x6A00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A buffer is too small to receive or write a message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="126" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a67a1e093cf042831aa60bb567915b560" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_WANT_READ</name>
        <initializer>-0x6900</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>No data of requested type currently available on underlying transport. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="129" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_WANT_WRITE</name>
        <initializer>-0x6880</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection requires a write call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="131" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2fdb240812860402a1a946eae8264148" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_TIMEOUT</name>
        <initializer>-0x6800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The operation timed out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="133" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af930aa4014a4b702a00676a6a38bd33d" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CLIENT_RECONNECT</name>
        <initializer>-0x6780</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The client initiated a reconnect from the same port. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="135" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a7aa1bd782c1b11479ac950627e3c0c9b" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD</name>
        <initializer>-0x6700</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record header looks valid but is not expected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="137" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a15dd6290be1edd19d292ac31f595aaae" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_NON_FATAL</name>
        <initializer>-0x6680</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The alert message received indicates a non-fatal error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="139" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a84b35eab7b87797bd2ab3439c1463a3b" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_ILLEGAL_PARAMETER</name>
        <initializer>-0x6600</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A field in a message was incorrect or inconsistent with other fields. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="141" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5409673459de4e9b182b9763e8885cd3" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_CONTINUE_PROCESSING</name>
        <initializer>-0x6580</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal-only message signaling that further message-processing should be done </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="143" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</name>
        <initializer>-0x6500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The asynchronous operation is not completed yet. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="145" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1afee3c17ec14a8debd09140dced64fc76" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_EARLY_MESSAGE</name>
        <initializer>-0x6480</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal-only message signaling that a message arrived early. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="147" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad569d68d0cb64788c9c9eb4a344c25c2" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_UNEXPECTED_CID</name>
        <initializer>-0x6000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An encrypted DTLS-frame with an unexpected CID was received. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="157" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af6d4792c6b585d59c1e6479b6d1491e2" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_VERSION_MISMATCH</name>
        <initializer>-0x5F00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An operation failed due to an unexpected version or configuration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="159" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a10d86ed4d20a85062585c533b0824d12" prot="public" static="no">
        <name>MBEDTLS_ERR_SSL_BAD_CONFIG</name>
        <initializer>-0x5E80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid value in SSL config </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="161" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa81307d66cb27f4db67208d785403029" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_PSK_MODE_PURE</name>
        <initializer>0 /* Pure PSK-based exchange  */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="169" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a1680e05e8a01b76ecece6501f81d6715" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_PSK_MODE_ECDHE</name>
        <initializer>1 /* PSK+ECDHE-based exchange */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="170" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad477de1f8e1fbddb31acaca1ce01c639" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="192" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6550352f376b8355df7d8d6446fd3ae8" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP192K1</name>
        <initializer>0x0012</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="193" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a934b2d0dc80e9492bc0d732cd80d8a39" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP192R1</name>
        <initializer>0x0013</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="194" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aba040d7fd3ff441e0401b131e38465d5" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP224K1</name>
        <initializer>0x0014</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="195" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a32cee14afe2935fd3ee47c04fc76b36a" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP224R1</name>
        <initializer>0x0015</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="196" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab87ddf97b4343f0c6d41f5a3ac981d03" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP256K1</name>
        <initializer>0x0016</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="197" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa464e81938e56c8d70c79c4126aa088f" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP256R1</name>
        <initializer>0x0017</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="198" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a535595c0d22d9b42284a1c64f7e6e956" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP384R1</name>
        <initializer>0x0018</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="199" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a4d6221ca586ad95c668d1b0c95d17ccf" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_SECP521R1</name>
        <initializer>0x0019</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="200" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a703476da66da6d7c5902e949d7853bc6" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_BP256R1</name>
        <initializer>0x001A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="201" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ada2b13a1f20afe662a4a187f19df0f9e" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_BP384R1</name>
        <initializer>0x001B</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="202" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5d588f47e325c6cc1d9ad965f468a82e" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_BP512R1</name>
        <initializer>0x001C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="203" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a1e0b0ec0eb683a1ce7c8a5a486d58ce7" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_X25519</name>
        <initializer>0x001D</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="204" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a9ef5e5416b84bb3f2d158877deb4b847" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_X448</name>
        <initializer>0x001E</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="205" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad78f33d7caf21150650655eecd0bc3f0" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE2048</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="207" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a9f5e48759985b2f3148cc5808b1a8b45" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE3072</name>
        <initializer>0x0101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="208" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6c2003b808f36ebf4048ce5befb5adaa" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE4096</name>
        <initializer>0x0102</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="209" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a083585f9dae2a8fc682cc8e1b4d8b1d7" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE6144</name>
        <initializer>0x0103</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="210" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1abbfa359ccd498ca767fe4a5e7bc03e09" prot="public" static="no">
        <name>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE8192</name>
        <initializer>0x0104</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="211" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8fd596f4fa6cca69f25243ed585b8e55" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK</name>
        <initializer>(1u &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pure-PSK TLS 1.3 key exchange, encompassing both externally agreed PSKs as well as resumption PSKs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="222" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8956447545ffa046be2f2c659737cfb2" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL</name>
        <initializer>(1u &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pure-Ephemeral TLS 1.3 key exchanges, including for example ECDHE and DHE key exchanges. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="225" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae0dde63de7e8f3e4f989bc8aa23d4f88" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL</name>
        <initializer>(1u &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PSK-Ephemeral TLS 1.3 key exchanges, using both a PSK and an ephemeral key exchange. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="228" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aef912149d5bf7d2f90f1165f486adc09" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_ALL</name>
        <initializer>    (<ref refid="ssl_8h_1a8fd596f4fa6cca69f25243ed585b8e55" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK</ref>              |            \
     <ref refid="ssl_8h_1ae0dde63de7e8f3e4f989bc8aa23d4f88" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL</ref>    |            \
     <ref refid="ssl_8h_1a8956447545ffa046be2f2c659737cfb2" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All TLS 1.3 key exchanges <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="231" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a24c645a336748356706c89e131f6590b" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_ALL</name>
        <initializer>    (<ref refid="ssl_8h_1a8fd596f4fa6cca69f25243ed585b8e55" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK</ref>              |            \
     <ref refid="ssl_8h_1ae0dde63de7e8f3e4f989bc8aa23d4f88" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All PSK-based TLS 1.3 key exchanges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="235" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a802f53adc876b9fe455de4a4ea3e959d" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL_ALL</name>
        <initializer>    (<ref refid="ssl_8h_1a8956447545ffa046be2f2c659737cfb2" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL</ref>        |            \
     <ref refid="ssl_8h_1ae0dde63de7e8f3e4f989bc8aa23d4f88" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All ephemeral TLS 1.3 key exchanges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="238" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a3a5c5f6a0f2a83b872e28dabeecb4006" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_NONE</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="242" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a9d404d5f3b4c7ebe03da19aa1bf2f23e" prot="public" static="no">
        <name>MBEDTLS_SSL_MAJOR_VERSION_3</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="253" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a3c5a90b4b4aded2190f31f7d4c670cb4" prot="public" static="no">
        <name>MBEDTLS_SSL_MINOR_VERSION_3</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLS v1.2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="254" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a103234ebe429fa189e39db40f345d147" prot="public" static="no">
        <name>MBEDTLS_SSL_MINOR_VERSION_4</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLS v1.3 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="255" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acf690cf4772ff3e2df4b8295275e6fc7" prot="public" static="no">
        <name>MBEDTLS_SSL_TRANSPORT_STREAM</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TLS <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="258" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac00527bc4661e5d7f2df5e7e96a6a896" prot="public" static="no">
        <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DTLS <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="259" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aef622c5c0303bce83a09cb1a332c611c" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_HOST_NAME_LEN</name>
        <initializer>255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum host name defined in RFC 1035 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="261" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2fba55215d6262eab642fabaec628a3b" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_ALPN_NAME_LEN</name>
        <initializer>255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size in bytes of a protocol name in alpn ext., RFC 7301 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="262" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a1608a5b11d809e2e1a7e30759700bf81" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_ALPN_LIST_LEN</name>
        <initializer>65535</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size in bytes of list in alpn ext., RFC 7301 <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="264" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a952256aaeb342b5f8cb55fb39891b235" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_FRAG_LEN_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>don&apos;t use this extension <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="268" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a148f83e96299be6220fc3c922cfb58d5" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_FRAG_LEN_512</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MaxFragmentLength 2^9 <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="269" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad2d55e32e6514fb146b8681ea914b991" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_FRAG_LEN_1024</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MaxFragmentLength 2^10 <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="270" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a08a6eb65d87c8d6565f47689d4e80bd3" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_FRAG_LEN_2048</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MaxFragmentLength 2^11 <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="271" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1adfe756e3f577397f4a3328b0e927bb6a" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_FRAG_LEN_4096</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MaxFragmentLength 2^12 <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="272" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a256731a4bb52bb1960cc88ec4f350926" prot="public" static="no">
        <name>MBEDTLS_SSL_MAX_FRAG_LEN_INVALID</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>first invalid value <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="273" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2064e7d9ad950b5979d2d6bab6ddc739" prot="public" static="no">
        <name>MBEDTLS_SSL_IS_CLIENT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="275" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6eb28200b2a66fbc24cdb60e995cf82f" prot="public" static="no">
        <name>MBEDTLS_SSL_IS_SERVER</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="276" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5e3d5af18adf3deece8c6db552044e1f" prot="public" static="no">
        <name>MBEDTLS_SSL_EXTENDED_MS_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="278" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a71f29a4b71919584024896d2c06e2447" prot="public" static="no">
        <name>MBEDTLS_SSL_EXTENDED_MS_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="279" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a288bb09060f3fe4e62907a3e0668fc41" prot="public" static="no">
        <name>MBEDTLS_SSL_CID_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="281" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af6ddd5b383634049a49d0b5b56d15446" prot="public" static="no">
        <name>MBEDTLS_SSL_CID_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="282" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab96eb32c8181525f2d508a0d2feead01" prot="public" static="no">
        <name>MBEDTLS_SSL_ETM_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="284" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab46e22481503a76e5437e71be3c45f2d" prot="public" static="no">
        <name>MBEDTLS_SSL_ETM_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="285" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a676d13d335535176e2e75e4eee98833c" prot="public" static="no">
        <name>MBEDTLS_SSL_COMPRESS_NULL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="287" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a1976b5c76af7b8b8f76c6f302828b387" prot="public" static="no">
        <name>MBEDTLS_SSL_VERIFY_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="289" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a781032826cba362cda1c9201490d6f62" prot="public" static="no">
        <name>MBEDTLS_SSL_VERIFY_OPTIONAL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="290" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acc9ad7a06d7c65260e815a3187a5fb37" prot="public" static="no">
        <name>MBEDTLS_SSL_VERIFY_REQUIRED</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="291" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aedae08b9b939f56fd64763aa6df026ce" prot="public" static="no">
        <name>MBEDTLS_SSL_VERIFY_UNSET</name>
        <initializer>3 /* Used only for sni_authmode */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="292" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a700877ec0d00170fa21b419f23dff7da" prot="public" static="no">
        <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="294" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8fe0060cf903cffeb0da1f92abdfb2c3" prot="public" static="no">
        <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="295" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab2906fd989d6140e2e44156f3f4de539" prot="public" static="no">
        <name>MBEDTLS_SSL_RENEGOTIATION_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="297" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2c3d531d6f50c391c906fee2644d74e8" prot="public" static="no">
        <name>MBEDTLS_SSL_RENEGOTIATION_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="298" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a285e6b3a4779aca09553176120900001" prot="public" static="no">
        <name>MBEDTLS_SSL_ANTI_REPLAY_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="300" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a34dc22ba8832d5a5d72bb4e5d01ed0d9" prot="public" static="no">
        <name>MBEDTLS_SSL_ANTI_REPLAY_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="301" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2de1929e7819ed07965e08469ae7201f" prot="public" static="no">
        <name>MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="303" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af1b45662f14bb9dedf1a477ba6956123" prot="public" static="no">
        <name>MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="304" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8ce0943627aaacccb0df01c23075232e" prot="public" static="no">
        <name>MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="306" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acdc84b7b79f91d4e0628f6d20875d7ca" prot="public" static="no">
        <name>MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="307" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0c6431df5730ce2690f3f9af1979676b" prot="public" static="no">
        <name>MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="308" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5e4abda89afa299baa930e33891b00b9" prot="public" static="no">
        <name>MBEDTLS_SSL_TRUNC_HMAC_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="310" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0fa70647c55d669facfe3364e5d604e7" prot="public" static="no">
        <name>MBEDTLS_SSL_TRUNC_HMAC_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="311" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a299866ebaa08c8b37ece3c652dfb8082" prot="public" static="no">
        <name>MBEDTLS_SSL_TRUNCATED_HMAC_LEN</name>
        <initializer>10  /* 80 bits, rfc 6066 section 7 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="312" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a84702526473717a1c38f14fdbbe9967a" prot="public" static="no">
        <name>MBEDTLS_SSL_SESSION_TICKETS_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="314" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6575b4025d4f6586a36e639b78672d7c" prot="public" static="no">
        <name>MBEDTLS_SSL_SESSION_TICKETS_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="315" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1afb44a7bdf71d0a1472db0c70596599cb" prot="public" static="no">
        <name>MBEDTLS_SSL_PRESET_DEFAULT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="317" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a89fceac26c7341fe2e64cb4dd8ecd9f0" prot="public" static="no">
        <name>MBEDTLS_SSL_PRESET_SUITEB</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="318" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae117ccb725d2a67af4472db2bc14a49f" prot="public" static="no">
        <name>MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="320" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a25618afeff372f69c156cf00bb2b87b7" prot="public" static="no">
        <name>MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="321" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac32d38803a13fad07eb69d744dff8e0a" prot="public" static="no">
        <name>MBEDTLS_SSL_EARLY_DATA_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="323" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a71f076ae34cddbd5d36cfaf2f3f17927" prot="public" static="no">
        <name>MBEDTLS_SSL_EARLY_DATA_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="324" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab94daf7f8fddc9293ff6a078179ba727" prot="public" static="no">
        <name>MBEDTLS_SSL_DTLS_SRTP_MKI_UNSUPPORTED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="326" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a30d70b2f9d91d25295690a4d0193741f" prot="public" static="no">
        <name>MBEDTLS_SSL_DTLS_SRTP_MKI_SUPPORTED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="327" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a349e6ec56cf420f6c597a6e7eaefc27e" prot="public" static="no">
        <name>MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_CLIENT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="329" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af3c04d7c219396ebc7220a1c76b58e08" prot="public" static="no">
        <name>MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_SERVER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="330" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a965bbe2e720de40c5041b44753d8d863" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_TICKET_RESUMPTION_KEY_LEN</name>
        <initializer>48</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="334" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a50d609cafdb26f3d93ee79a233d13b24" prot="public" static="no">
        <name>MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="343" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad8876bbe6b4d64163299aa99c0977abe" prot="public" static="no">
        <name>MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX</name>
        <initializer>60000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="344" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a7bb4393075100dbfbb37008fb81c6d29" prot="public" static="no">
        <name>MBEDTLS_SSL_VERIFY_DATA_MAX_LEN</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="425" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1adcfcbbd2bb1a0d4c2a9589f371fd6b83" prot="public" static="no">
        <name>MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO</name>
        <initializer>0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>renegotiation info ext </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="430" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a3f42b17b50c1f2f83b6537e4db62548e" prot="public" static="no">
        <name>MBEDTLS_SSL_HASH_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="436" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a7a2d68114d36533bfe4005e9727033ff" prot="public" static="no">
        <name>MBEDTLS_SSL_HASH_MD5</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="437" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2b431c6897abb19d96c60e2642d66a39" prot="public" static="no">
        <name>MBEDTLS_SSL_HASH_SHA1</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="438" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5bfe188244e611233538b888cb74a3b7" prot="public" static="no">
        <name>MBEDTLS_SSL_HASH_SHA224</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="439" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a674cc54218acc7ea986608cc567040f3" prot="public" static="no">
        <name>MBEDTLS_SSL_HASH_SHA256</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="440" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aba929ac98d93a0e9248777e4a8688728" prot="public" static="no">
        <name>MBEDTLS_SSL_HASH_SHA384</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="441" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aecf70f5833670a2ac5821b57006aca16" prot="public" static="no">
        <name>MBEDTLS_SSL_HASH_SHA512</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="442" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac4da5bf751b2f10ce5cc889ecc65b9a1" prot="public" static="no">
        <name>MBEDTLS_SSL_SIG_ANON</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="444" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2ad0ae8214df337efb1bde3eb83673f1" prot="public" static="no">
        <name>MBEDTLS_SSL_SIG_RSA</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="445" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa87b5d7f48bfdd4eb2d936b138ddead3" prot="public" static="no">
        <name>MBEDTLS_SSL_SIG_ECDSA</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="446" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa8208575e78d3c38878173dbdbc114ce" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA256</name>
        <initializer>0x0401</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="454" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8b95fe91ca22ac91af52df1557c3e05f" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA384</name>
        <initializer>0x0501</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="455" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6b33ac12465a246ec12e2eb56ff4fee8" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA512</name>
        <initializer>0x0601</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="456" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a3d7a85340883dffa149cfe30800ab5bb" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_ECDSA_SECP256R1_SHA256</name>
        <initializer>0x0403</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="459" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a87d74699af4a4a8d6370d24628d90c76" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_ECDSA_SECP384R1_SHA384</name>
        <initializer>0x0503</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="460" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af0920298448171eedc25add7a7118e95" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_ECDSA_SECP521R1_SHA512</name>
        <initializer>0x0603</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="461" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a264defd5321c6cd88eee543a87b75172" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA256</name>
        <initializer>0x0804</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="464" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a3558da06429c43b9ee9b90e6cee78ae4" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA384</name>
        <initializer>0x0805</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="465" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab0adba274c99e4b90bf6d375453c5904" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA512</name>
        <initializer>0x0806</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="466" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae5c932e6c45739a6f46c23843b5f03f1" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_ED25519</name>
        <initializer>0x0807</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="469" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa99291b5c956893ff80cca55bd3d9a43" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_ED448</name>
        <initializer>0x0808</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="470" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aff6916bea87efbc433fdbaf0ea854056" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA256</name>
        <initializer>0x0809</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="473" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1abbea98138d74e2db2c958d105274d6a2" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA384</name>
        <initializer>0x080A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="474" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8a0a23199be45c92f2b1e5a237a4c223" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA512</name>
        <initializer>0x080B</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="475" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2d76df56a30d90bdd825b71d89382794" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA1</name>
        <initializer>0x0201</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="478" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aeed0a934b689e9d0cad7c5c1e485b6df" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_ECDSA_SHA1</name>
        <initializer>0x0203</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="479" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a067f54a2a9f393c68aa9b01ab0522393" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_SIG_NONE</name>
        <initializer>0x0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="481" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1abb389513e320bc337fa4a8fb75eb5f24" prot="public" static="no">
        <name>MBEDTLS_SSL_CERT_TYPE_RSA_SIGN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="487" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5dd842a86575ae2c2c6173379f4ce7c1" prot="public" static="no">
        <name>MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="488" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a80034e4bb6039b0fe59643ef73158685" prot="public" static="no">
        <name>MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="493" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8e7b8865c215ffd865b665e615cf2543" prot="public" static="no">
        <name>MBEDTLS_SSL_MSG_ALERT</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="494" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af9d460925507c3eb3c16afb4e479c4e6" prot="public" static="no">
        <name>MBEDTLS_SSL_MSG_HANDSHAKE</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="495" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a46568720d8bc2adb85639b43661e165d" prot="public" static="no">
        <name>MBEDTLS_SSL_MSG_APPLICATION_DATA</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="496" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aeeff4c1c13190f14ffe28b5a81effbb6" prot="public" static="no">
        <name>MBEDTLS_SSL_MSG_CID</name>
        <initializer>25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="497" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a23ca8f8544f9713e67abcb8ef55948bd" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="499" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8ad70eb6a9bae37818e795724675fbfb" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="500" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a4472901cb8f53faa48101c42b48e44de" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY</name>
        <initializer>0  /* 0x00 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="502" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab17a92a7d0512a71310b8a4841a64442" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE</name>
        <initializer>10  /* 0x0A */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="503" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0864fcf3359ee66e3959f5efb4c0505f" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC</name>
        <initializer>20  /* 0x14 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="504" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a4820ff3e880f3d96021c2aecde7c2887" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED</name>
        <initializer>21  /* 0x15 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="505" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a64774f767d912002125bee0ac3db1f5c" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW</name>
        <initializer>22  /* 0x16 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="506" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a1c54745afbef4c6aa6174f5f25ffd476" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE</name>
        <initializer>30  /* 0x1E */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="507" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a107264f1597432c595db416d1b9a0985" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE</name>
        <initializer>40  /* 0x28 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="508" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a722ddc936f841b4eb603fc5a39e88bbe" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_NO_CERT</name>
        <initializer>41  /* 0x29 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="509" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae6412b21ed10bc53eff53050f36d8ebe" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_BAD_CERT</name>
        <initializer>42  /* 0x2A */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="510" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a11b1fb765e3a67f5c51478f0ac60aea5" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT</name>
        <initializer>43  /* 0x2B */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="511" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac1463d5ac5ecdb318b8476e8626ae4ae" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED</name>
        <initializer>44  /* 0x2C */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="512" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a1f9e718b111b0d5feef358042e3b8056" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED</name>
        <initializer>45  /* 0x2D */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="513" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0ae60bd9af40ced069f670559a8ce79b" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN</name>
        <initializer>46  /* 0x2E */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="514" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a547c792d9f5ab56adc98af556b8e7cb3" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER</name>
        <initializer>47  /* 0x2F */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="515" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a70c944ab8ac62a1a4657ba0e1460a9fd" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA</name>
        <initializer>48  /* 0x30 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="516" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acd89a8eae2cbfbd2263bdcfa8248c285" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED</name>
        <initializer>49  /* 0x31 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="517" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a4e78bc53317a0dc97c85b0670d3ec47a" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR</name>
        <initializer>50  /* 0x32 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="518" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af7656ca08ca9231d9b5a1d96657f2ed4" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR</name>
        <initializer>51  /* 0x33 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="519" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0ead35e5ec582fde31ff2719a429b496" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION</name>
        <initializer>60  /* 0x3C */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="520" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2436b79c76bb7c9a64a19324938fe7f6" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION</name>
        <initializer>70  /* 0x46 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="521" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a60f137fca04f01dddc6cc415e6a102d0" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY</name>
        <initializer>71  /* 0x47 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="522" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a925ce2353fafc7b9b67f819de57fd828" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR</name>
        <initializer>80  /* 0x50 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="523" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a721eedb9c97af415079190c133c8085e" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK</name>
        <initializer>86  /* 0x56 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="524" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae0f3fcb8c4a447b421ab37200ab021de" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_USER_CANCELED</name>
        <initializer>90  /* 0x5A */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="525" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a919ba6ac88766715bd23402c8d5de2c3" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION</name>
        <initializer>100  /* 0x64 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="526" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a99d1bfec3e09d375d8557e17111b0e82" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_MISSING_EXTENSION</name>
        <initializer>109  /* 0x6d -- new in TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="527" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a9d6786a28a09997887960bbf49f237c6" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT</name>
        <initializer>110  /* 0x6E */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="528" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5003b563ba0fe6a695504fa56dc13c42" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME</name>
        <initializer>112  /* 0x70 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="529" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a2f5fe3554740f9d2d28b8b5265667a97" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY</name>
        <initializer>115  /* 0x73 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="530" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af1bc846be5228870c54de8c0e201c947" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_CERT_REQUIRED</name>
        <initializer>116  /* 0x74 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="531" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab595e62e10ccc2879c5a3fc6f90789af" prot="public" static="no">
        <name>MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL</name>
        <initializer>120 /* 0x78 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="532" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a706ff16a6c43733a7da65246859fc830" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_HELLO_REQUEST</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="534" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae768902fb94d3388219bf10f07a878ff" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_CLIENT_HELLO</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="535" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae64b6d9cb5a4c3f089f7239813e3908f" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_SERVER_HELLO</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="536" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac5f7ae374a1f79b8b6f5c2d698575757" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="537" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa6a45148b438c8269afa04e972db48ff" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_NEW_SESSION_TICKET</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="538" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a63ac646103b72f66fe90c495a75eb864" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_END_OF_EARLY_DATA</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="539" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6531f56dccb1bd406c2a562c6505ff08" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_ENCRYPTED_EXTENSIONS</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="540" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa27392833c81be2caee387ac7b619c52" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_CERTIFICATE</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="541" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8d7241ce99f979d7dff0a2b2217bfad4" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="542" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aed6cdea239c61bc37f2b8bbf68d2df28" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_CERTIFICATE_REQUEST</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="543" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a4f56b4e3a2aad3bd2872b9894b33adfd" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_SERVER_HELLO_DONE</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="544" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aae66986e57bfa975d82d6a445178ee9a" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_CERTIFICATE_VERIFY</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="545" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a068dedb465afb5170cffaab265f082e4" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="546" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6a08488cd4c6e2f8ec9e800779cc9e2d" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_FINISHED</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="547" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af53c3b9e76607b1dfebdac31369049b1" prot="public" static="no">
        <name>MBEDTLS_SSL_HS_MESSAGE_HASH</name>
        <initializer>254</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="548" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a942dee25d2dee550625b17f9d1a3a256" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SERVERNAME</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="553" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5d7028236245fee182f6243497b0398c" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="554" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a29f3ec6c787cf368ad28f19c78821179" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="556" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1afe71b85be37d12a7cfc9c0236c4d0bcf" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_TRUNCATED_HMAC</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="558" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5feea46541d2eb5ab4d5712870d6f45b" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_STATUS_REQUEST</name>
        <initializer>5 /* RFC 6066 TLS 1.2 and 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="559" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1affdee4d954541f35389c538c56a4a187" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="561" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a25b9f19a6bea5214c24a1b8f0e38ea1b" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SUPPORTED_GROUPS</name>
        <initializer>10 /* RFC 8422,7919 TLS 1.2 and 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="562" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac0b55c07d3c7a93799a6e7438b8feb09" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="563" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a633e991fcfa7e1121df9edc61901b62a" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SIG_ALG</name>
        <initializer>13 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="565" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af38f78f24a94d295e75dff6ad108a2ef" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_USE_SRTP</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="566" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acfc43f8a43029fd81a458931ab52c0ec" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_HEARTBEAT</name>
        <initializer>15 /* RFC 6520 TLS 1.2 and 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="567" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a56245d7f7abff26b28609d798bf75716" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_ALPN</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="568" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a8fbd1ed6a86c39876d238346b72db192" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SCT</name>
        <initializer>18 /* RFC 6962 TLS 1.2 and 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="570" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aa3515a0fab4f0cd0908208ff1ae92517" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_CLI_CERT_TYPE</name>
        <initializer>19 /* RFC 7250 TLS 1.2 and 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="571" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a12fe0d1edd3751f365f313542c6651d2" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SERV_CERT_TYPE</name>
        <initializer>20 /* RFC 7250 TLS 1.2 and 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="572" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6bcb37751a426403b4e077690b4d8247" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_PADDING</name>
        <initializer>21 /* RFC 7685 TLS 1.2 and 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="573" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a37fefdb5c274c60b7e9752d22faf6ceb" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC</name>
        <initializer>22 /* 0x16 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="574" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a7c0c6cc7f890739240584b50fdd637ca" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET</name>
        <initializer>0x0017 /* 23 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="575" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a7a09fff1b520ceedb16d6db14a8a8393" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_RECORD_SIZE_LIMIT</name>
        <initializer>28 /* RFC 8449 (implemented for TLS 1.3 only) */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="577" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a800c6b6b24b265e7dc48992a8614fc91" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SESSION_TICKET</name>
        <initializer>35</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="579" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a5af79b625c8a85d7eb15fbe5be5153b9" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_PRE_SHARED_KEY</name>
        <initializer>41 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="581" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab5f1ce01ce00efb710f366ebc9f931ec" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_EARLY_DATA</name>
        <initializer>42 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="582" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a1a6ba945dbaaa6703e9cdfcc72e72f4e" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SUPPORTED_VERSIONS</name>
        <initializer>43 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="583" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a0349f5a9ffc2f4af4d25fd70d7fe18d9" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_COOKIE</name>
        <initializer>44 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="584" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a6b81206c8bb9ad34988c237669387753" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_PSK_KEY_EXCHANGE_MODES</name>
        <initializer>45 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="585" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a49197d8992298c1ffdddea6fc35aadd6" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_CERT_AUTH</name>
        <initializer>47 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="587" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aed6984dfe3ff4aa11fec878760fbf2c7" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_OID_FILTERS</name>
        <initializer>48 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="588" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a985a82bb617f5129329a4f5ec33828b5" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_POST_HANDSHAKE_AUTH</name>
        <initializer>49 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="589" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a002c8e60b0171f51fe5d42c5a69140f9" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_SIG_ALG_CERT</name>
        <initializer>50 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="590" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1aca481d0c225b40125fea5c675f5af7cb" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_KEY_SHARE</name>
        <initializer>51 /* RFC 8446 TLS 1.3 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="591" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac101a507e09c252a9a8b1a0a46d6ca8f" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_CID</name>
        <initializer>54 /* RFC 9146 DTLS 1.2 CID */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="594" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a53429efaa97d62c94ec2cbd259e7fc58" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP</name>
        <initializer>256 /* experimental */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="599" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a57fb40ff7186bfa2512104fa793435aa" prot="public" static="no">
        <name>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO</name>
        <initializer>0xFF01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="601" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a084cb30b175a3d44b33e625cd56aab6e" prot="public" static="no">
        <name>MBEDTLS_PSK_MAX_LEN</name>
        <initializer>48 /* 384 bits */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="618" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad842f7de937285905b38ec3d5b5be387" prot="public" static="no">
        <name>MBEDTLS_PREMASTER_SIZE</name>
        <initializer>sizeof(union <ref refid="unionmbedtls__ssl__premaster__secret" kindref="compound">mbedtls_ssl_premaster_secret</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="658" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab93b6fad9a65041ff32063f28616808f" prot="public" static="no">
        <name>MBEDTLS_TLS1_3_MD_MAX_SIZE</name>
        <initializer><ref refid="crypto__sizes_8h_1a6ce1014efbbc0bcca286ef7f9a72cb29" kindref="member">PSA_HASH_MAX_SIZE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="660" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a520871f7ed32db9af63564771a61b82c" prot="public" static="no">
        <name>MBEDTLS_SSL_SEQUENCE_NUMBER_LEN</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="664" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1afd43849d89a2cbfde96100a424440b4c" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_RESUMPTION</name>
        <initializer><ref refid="ssl_8h_1a8fd596f4fa6cca69f25243ed585b8e55" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK</ref>                        /* 1U &lt;&lt; 0 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="835" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a410978b7f26c327381a786cd591670d8" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_EPHEMERAL_RESUMPTION</name>
        <initializer><ref refid="ssl_8h_1ae0dde63de7e8f3e4f989bc8aa23d4f88" kindref="member">MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL</ref>              /* 1U &lt;&lt; 2 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="837" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ae5632f497b52a251b554de64c8f675e6" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_EARLY_DATA</name>
        <initializer>(1U &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="839" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ac482b30e69fe356f86fd9ffd94531331" prot="public" static="no">
        <name>MBEDTLS_SSL_TLS1_3_TICKET_FLAGS_MASK</name>
        <initializer>    (<ref refid="ssl_8h_1afd43849d89a2cbfde96100a424440b4c" kindref="member">MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_RESUMPTION</ref>             |      \
     <ref refid="ssl_8h_1a410978b7f26c327381a786cd591670d8" kindref="member">MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_EPHEMERAL_RESUMPTION</ref>   |      \
     <ref refid="ssl_8h_1ae5632f497b52a251b554de64c8f675e6" kindref="member">MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_EARLY_DATA</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="841" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a3ca8e41a3bc9765d01a1c734827b28fb" prot="public" static="no">
        <name>MBEDTLS_TLS_SRTP_MAX_MKI_LENGTH</name>
        <initializer>255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1137" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1af071c01d95266bef4c10ecfbb43ab077" prot="public" static="no">
        <name>MBEDTLS_TLS_SRTP_MAX_PROFILE_LIST_LENGTH</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1138" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1acbe1cbb11fee2c0b6ef767f2bc4ff413" prot="public" static="no">
        <name>MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80</name>
        <initializer>((uint16_t) 0x0001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1148" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ab92698fa5b18c274b85c36445a2ac046" prot="public" static="no">
        <name>MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32</name>
        <initializer>((uint16_t) 0x0002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1149" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a3b5987dbe37a7398ea13c24f57e1e23c" prot="public" static="no">
        <name>MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_80</name>
        <initializer>((uint16_t) 0x0005)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1150" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a45f60d4d23068a07c1938b410a7887af" prot="public" static="no">
        <name>MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_32</name>
        <initializer>((uint16_t) 0x0006)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1151" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a745b2dae73a8beac74d39e69768100db" prot="public" static="no">
        <name>MBEDTLS_TLS_SRTP_UNSET</name>
        <initializer>((uint16_t) 0x0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1153" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1afd5c15d71f8c2b681e5c6ea6b2912461" prot="public" static="no">
        <name>MBEDTLS_SSL_UNEXPECTED_CID_IGNORE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3243" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="3243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a30269cdf6b9ded752c628287aba9cbad" prot="public" static="no">
        <name>MBEDTLS_SSL_UNEXPECTED_CID_FAIL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3244" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="3244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1ad3dce67d4c6868722be9bf3a10eec11b" prot="public" static="no">
        <name>MBEDTLS_SSL_EARLY_DATA_STATUS_NOT_SENT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5113" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="5113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1add00b16dbb05663657723d0583061e36" prot="public" static="no">
        <name>MBEDTLS_SSL_EARLY_DATA_STATUS_ACCEPTED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5114" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="5114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ssl_8h_1a4c5710c40ef00416938342d586ede58c" prot="public" static="no">
        <name>MBEDTLS_SSL_EARLY_DATA_STATUS_REJECTED</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5115" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="5115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_ssl_states</name>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ad0d0417e506d2c0dd9d3ba8f8ed16b98" prot="public">
          <name>MBEDTLS_SSL_HELLO_REQUEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a719dfc3139318a9433c982d5ad7e1da3" prot="public">
          <name>MBEDTLS_SSL_CLIENT_HELLO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a3a8fbf7a2b30a55fc54919f44ecec277" prot="public">
          <name>MBEDTLS_SSL_SERVER_HELLO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a75ce38da6d18a1bbb536e90545de25a2" prot="public">
          <name>MBEDTLS_SSL_SERVER_CERTIFICATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a2fa8d6dec9530663abd97f1e40a73048" prot="public">
          <name>MBEDTLS_SSL_SERVER_KEY_EXCHANGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a7ec5efe40ef7cd3eb2a1822c3e1f5835" prot="public">
          <name>MBEDTLS_SSL_CERTIFICATE_REQUEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a0f515cc56cbc0c9a361776b25076d585" prot="public">
          <name>MBEDTLS_SSL_SERVER_HELLO_DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ad9148742aef0e7d5dfc3347e7fcaac1c" prot="public">
          <name>MBEDTLS_SSL_CLIENT_CERTIFICATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a5665849f570a62c18646f929949c0a58" prot="public">
          <name>MBEDTLS_SSL_CLIENT_KEY_EXCHANGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a0585b241140cf6b0833b5c8bc77d154a" prot="public">
          <name>MBEDTLS_SSL_CERTIFICATE_VERIFY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0abba1c6f9a06c48dc59cabb38230b336f" prot="public">
          <name>MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a856895e8166b855be5e1655bc90a85ea" prot="public">
          <name>MBEDTLS_SSL_CLIENT_FINISHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a9ec83156132a2a9989c1639cabbf8862" prot="public">
          <name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a2f5c45008331d3bef3ee8b4830bb43d7" prot="public">
          <name>MBEDTLS_SSL_SERVER_FINISHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ade6250da8ee1486c5dc8adbd2bc4a176" prot="public">
          <name>MBEDTLS_SSL_FLUSH_BUFFERS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ab97eae0c72f041818f8af2cfafac7e5c" prot="public">
          <name>MBEDTLS_SSL_HANDSHAKE_WRAPUP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a221b50a0bf3643f2256b61ef22a26f15" prot="public">
          <name>MBEDTLS_SSL_NEW_SESSION_TICKET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0aa0a4ac1bd375ca695704302c09f6f116" prot="public">
          <name>MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae8666c581f188cf27f559ec435d583a8" prot="public">
          <name>MBEDTLS_SSL_HELLO_RETRY_REQUEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a36f36dc7cb3fb11cb4627368692f11f7" prot="public">
          <name>MBEDTLS_SSL_ENCRYPTED_EXTENSIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a181e9e3d5e571d56a176a654cc7efa77" prot="public">
          <name>MBEDTLS_SSL_END_OF_EARLY_DATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0abc15d3bb19b146113c75f8e416acf762" prot="public">
          <name>MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0aba527426b0b0f62fd381f880baeef8d7" prot="public">
          <name>MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a6b7557332cb138de29d27774ee9f680c" prot="public">
          <name>MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0afc7bed4793a544c04242606791ae5870" prot="public">
          <name>MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae52cf5231f3df8e36f8b10c49ba34f92" prot="public">
          <name>MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a4d494ffc47de7af33742337d212e00d8" prot="public">
          <name>MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a077633740a69a39daf3cd1366cf57f45" prot="public">
          <name>MBEDTLS_SSL_HANDSHAKE_OVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae7d4f4e6de5526910081bc4ca3a4e9c9" prot="public">
          <name>MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0adaaf5c347e1cce34d8f328a277b6ab38" prot="public">
          <name>MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="673" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="673" bodyend="705"/>
      </memberdef>
      <memberdef kind="enum" id="ssl_8h_1a40e713ddf44767b6592269e808204c02" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_ssl_protocol_version</name>
        <enumvalue id="ssl_8h_1a40e713ddf44767b6592269e808204c02af84b4b85a509c0da6fb939b4945e582b" prot="public">
          <name>MBEDTLS_SSL_VERSION_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Context not in use or version not yet negotiated. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a40e713ddf44767b6592269e808204c02a426622841e3954253628d2c68a7e7bfe" prot="public">
          <name>MBEDTLS_SSL_VERSION_TLS1_2</name>
          <initializer>= 0x0303</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(D)TLS 1.2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a40e713ddf44767b6592269e808204c02ac1b246eb232823889f62211380f64a37" prot="public">
          <name>MBEDTLS_SSL_VERSION_TLS1_3</name>
          <initializer>= 0x0304</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(D)TLS 1.3 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Human-friendly representation of the (D)TLS protocol version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1170" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1170" bodyend="1174"/>
      </memberdef>
      <memberdef kind="enum" id="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_tls_prf_types</name>
        <enumvalue id="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a862ad82e6785d64414f2ae2b288f8bae" prot="public">
          <name>MBEDTLS_SSL_TLS_PRF_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a36ea20e95c19764cc62470dedc039900" prot="public">
          <name>MBEDTLS_SSL_TLS_PRF_SHA384</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a5df29635475b9622c12df9ebcaf13eac" prot="public">
          <name>MBEDTLS_SSL_TLS_PRF_SHA256</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0aa357f2debc053e73dc15cd64c74538bf" prot="public">
          <name>MBEDTLS_SSL_HKDF_EXPAND_SHA384</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a49b284ea90fe0eaf2474a26ba00adc89" prot="public">
          <name>MBEDTLS_SSL_HKDF_EXPAND_SHA256</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1255" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1255" bodyend="1261"/>
      </memberdef>
      <memberdef kind="enum" id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0d" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_ssl_key_export_type</name>
        <enumvalue id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da123606af4ec6e4fa993c4d54dbf4e583" prot="public">
          <name>MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0daeaae4865bea6adbee974b0844f4d3b95" prot="public">
          <name>MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0daad6f2d9b3e4b21ffa7ad5cc4fba551c8" prot="public">
          <name>MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da82bafae198b16c88f8af2b22053698e5" prot="public">
          <name>MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da65617828528605df0ed0f1f6a8d249f5" prot="public">
          <name>MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da06ea6c724def80a334d8ab49ca72dbea" prot="public">
          <name>MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da290dcdeef30b5e3da47cf1358ebc1d79" prot="public">
          <name>MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1264" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1264" bodyend="1274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ssl_8h_1a38e2b400d361f42f85833cdc30b3916e" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_send_t(void *ctx, const unsigned char *buf, size_t len)</definition>
        <argsstring>(void *ctx, const unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_send_t</name>
        <briefdescription>
<para>Callback type: send data on the network. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>That callback may be either blocking or non-blocking.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the send callback (typically a file descriptor) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer holding the data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to send</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The callback must return the number of bytes sent if any, or a non-zero error code. If performing non-blocking I/O, <computeroutput>MBEDTLS_ERR_SSL_WANT_WRITE</computeroutput> must be returned when the operation would block.</para>
</simplesect>
<simplesect kind="note"><para>The callback is allowed to send fewer bytes than requested. It must always return the number of bytes actually sent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="725" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1ac06b19b96b643090c55f19b6c28b10c4" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_recv_t(void *ctx, unsigned char *buf, size_t len)</definition>
        <argsstring>(void *ctx, unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_recv_t</name>
        <briefdescription>
<para>Callback type: receive data from the network. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>That callback may be either blocking or non-blocking.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the receive callback (typically a file descriptor) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write the received data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the receive buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If data has been received, the positive number of bytes received. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the connection has been closed. </para>
</simplesect>
<simplesect kind="return"><para>If performing non-blocking I/O, <computeroutput>MBEDTLS_ERR_SSL_WANT_READ</computeroutput> must be returned when the operation would block. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failures.</para>
</simplesect>
<simplesect kind="note"><para>The callback may receive fewer bytes than the length of the buffer. It must always return the number of bytes actually received and written to the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="749" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a6d615ca95c8a67d7c5f9d7d256dc09e6" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_recv_timeout_t(void *ctx, unsigned char *buf, size_t len, uint32_t timeout)</definition>
        <argsstring>(void *ctx, unsigned char *buf, size_t len, uint32_t timeout)</argsstring>
        <name>mbedtls_ssl_recv_timeout_t</name>
        <briefdescription>
<para>Callback type: receive data from the network, with timeout. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>That callback must block until data is received, or the timeout delay expires, or the operation is interrupted by a signal.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the receive callback (typically a file descriptor) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write the received data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the receive buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of milliseconds to wait for data 0 means no timeout (potentially waiting forever)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The callback must return the number of bytes received, or a non-zero error code: <computeroutput>MBEDTLS_ERR_SSL_TIMEOUT</computeroutput> if the operation timed out, <computeroutput>MBEDTLS_ERR_SSL_WANT_READ</computeroutput> if interrupted by a signal.</para>
</simplesect>
<simplesect kind="note"><para>The callback may receive fewer bytes than the length of the buffer. It must always return the number of bytes actually received and written to the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="775" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a61c5d9ed63c50ee809eec98820d3f36c" prot="public" static="no">
        <type>void</type>
        <definition>typedef void mbedtls_ssl_set_timer_t(void *ctx, uint32_t int_ms, uint32_t fin_ms)</definition>
        <argsstring>(void *ctx, uint32_t int_ms, uint32_t fin_ms)</argsstring>
        <name>mbedtls_ssl_set_timer_t</name>
        <briefdescription>
<para>Callback type: set a pair of timers/delays to watch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Intermediate delay in milliseconds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fin_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Final delay in milliseconds 0 cancels the current timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This callback must at least store the necessary information for the associated <computeroutput>mbedtls_ssl_get_timer_t</computeroutput> callback to return correct information.</para>
</simplesect>
<simplesect kind="note"><para>If using an event-driven style of programming, an event must be generated when the final delay is passed. The event must cause a call to <computeroutput><ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref></computeroutput> with the proper SSL context to be scheduled. Care must be taken to ensure that at most one such call happens at a time.</para>
</simplesect>
<simplesect kind="note"><para>Only one timer at a time must be running. Calling this function while a timer is running must cancel it. Cancelled timers must not generate any event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="801" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1adea005600b532d788c05e9d01b42895b" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_get_timer_t(void *ctx)</definition>
        <argsstring>(void *ctx)</argsstring>
        <name>mbedtls_ssl_get_timer_t</name>
        <briefdescription>
<para>Callback type: get status of timers/delays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This callback must return: -1 if cancelled (fin_ms == 0), 0 if none of the delays have passed, 1 if only the intermediate delay has passed, 2 if the final delay has passed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a3a2ac45d548df527404c929bdce76ea6" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref></type>
        <definition>typedef struct mbedtls_ssl_session mbedtls_ssl_session</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_session</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a225b5187c17ee65d13a14450bf228068" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref></type>
        <definition>typedef struct mbedtls_ssl_context mbedtls_ssl_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1afc3ee8174ecf267f5ff42b278376a2fd" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref></type>
        <definition>typedef struct mbedtls_ssl_config mbedtls_ssl_config</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" prot="public" static="no">
        <type>struct <ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref></type>
        <definition>typedef struct mbedtls_ssl_transform mbedtls_ssl_transform</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_transform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a5c13e913e3b1de510e5d12c1b0ae9358" prot="public" static="no">
        <type>struct <ref refid="ssl_8h_1a5c13e913e3b1de510e5d12c1b0ae9358" kindref="member">mbedtls_ssl_handshake_params</ref></type>
        <definition>typedef struct mbedtls_ssl_handshake_params mbedtls_ssl_handshake_params</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_handshake_params</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a4ff9b096662c00c26b6d44d8bf4bc5d5" prot="public" static="no">
        <type>struct <ref refid="ssl_8h_1a4ff9b096662c00c26b6d44d8bf4bc5d5" kindref="member">mbedtls_ssl_sig_hash_set_t</ref></type>
        <definition>typedef struct mbedtls_ssl_sig_hash_set_t mbedtls_ssl_sig_hash_set_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_sig_hash_set_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1af06d98867191eb685ab0c7067840b6f3" prot="public" static="no">
        <type>struct <ref refid="ssl_8h_1af06d98867191eb685ab0c7067840b6f3" kindref="member">mbedtls_ssl_key_cert</ref></type>
        <definition>typedef struct mbedtls_ssl_key_cert mbedtls_ssl_key_cert</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_key_cert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1ac0357eb38b019a7638e34852ac90f6d7" prot="public" static="no">
        <type>struct <ref refid="ssl_8h_1ac0357eb38b019a7638e34852ac90f6d7" kindref="member">mbedtls_ssl_flight_item</ref></type>
        <definition>typedef struct mbedtls_ssl_flight_item mbedtls_ssl_flight_item</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_flight_item</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="816" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a0ed860c5a383e14f7448e82df1e52e3a" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_cache_get_t(void *data, unsigned char const *session_id, size_t session_id_len, mbedtls_ssl_session *session)</definition>
        <argsstring>(void *data, unsigned char const *session_id, size_t session_id_len, mbedtls_ssl_session *session)</argsstring>
        <name>mbedtls_ssl_cache_get_t</name>
        <briefdescription>
<para>Callback type: server-side session cache getter. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            The session cache is logically a key value store, with
            keys being session IDs and values being instances of
            mbedtls_ssl_session.

            This callback retrieves an entry in this key-value store.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the session cache structure to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the session ID to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session_id_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>session_id</computeroutput> in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the session structure to populate. It is initialized with mbdtls_ssl_session_init(), and the callback must always leave it in a state where it can safely be freed via <ref refid="ssl_8h_1ac085defe1a02ab784a0a2fb201bcc741" kindref="member">mbedtls_ssl_session_free()</ref> independent of the return code of this function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success </para>
</simplesect>
<simplesect kind="return"><para>A non-zero return value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="870" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1aacaaebff1203d11ba336eac1af7276b8" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_cache_set_t(void *data, unsigned char const *session_id, size_t session_id_len, const mbedtls_ssl_session *session)</definition>
        <argsstring>(void *data, unsigned char const *session_id, size_t session_id_len, const mbedtls_ssl_session *session)</argsstring>
        <name>mbedtls_ssl_cache_set_t</name>
        <briefdescription>
<para>Callback type: server-side session cache setter. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            The session cache is logically a key value store, with
            keys being session IDs and values being instances of
            mbedtls_ssl_session.

            This callback sets an entry in this key-value store.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the session cache structure to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the session ID to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session_id_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>session_id</computeroutput> in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the session to be stored in the session cache.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success </para>
</simplesect>
<simplesect kind="return"><para>A non-zero return value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="892" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1ad57308aa77db11dbc3551fd92deb2520" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_async_sign_t(mbedtls_ssl_context *ssl, mbedtls_x509_crt *cert, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len)</definition>
        <argsstring>(mbedtls_ssl_context *ssl, mbedtls_x509_crt *cert, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len)</argsstring>
        <name>mbedtls_ssl_async_sign_t</name>
        <briefdescription>
<para>Callback type: start external signature operation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             This callback is called during an SSL handshake to start
             a signature decryption operation using an
             external processor. The parameter \p cert contains
             the public key; it is up to the callback function to
             determine how to access the associated private key.

             This function typically sends or enqueues a request, and
             does not wait for the operation to complete. This allows
             the handshake step to be non-blocking.

             The parameters \p ssl and \p cert are guaranteed to remain
             valid throughout the handshake. On the other hand, this
             function must save the contents of \p hash if the value
             is needed for later processing, because the \p hash buffer
             is no longer valid after this function returns.

             This function may call mbedtls_ssl_set_async_operation_data()
             to store an operation context for later retrieval
             by the resume or cancel callback.
</verbatim></para>
<para><simplesect kind="note"><para>For RSA signatures, this function must produce output that is consistent with PKCS#1 v1.5 in the same way as <ref refid="rsa_8h_1ab04f3ae401918c1ef2a573603b373376" kindref="member">mbedtls_rsa_pkcs1_sign()</ref>. Before the private key operation, apply the padding steps described in RFC 8017, section 9.2 &quot;EMSA-PKCS1-v1_5&quot; as follows.<itemizedlist>
<listitem><para>If <computeroutput>md_alg</computeroutput> is <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, apply the PKCS#1 v1.5 encoding, treating <computeroutput>hash</computeroutput> as the DigestInfo to be padded. In other words, apply EMSA-PKCS1-v1_5 starting from step 3, with <computeroutput>T = hash</computeroutput> and <computeroutput>tLen = hash_len</computeroutput>.</para>
</listitem><listitem><para>If <computeroutput>md_alg != MBEDTLS_MD_NONE</computeroutput>, apply the PKCS#1 v1.5 encoding, treating <computeroutput>hash</computeroutput> as the hash to be encoded and padded. In other words, apply EMSA-PKCS1-v1_5 starting from step 2, with <computeroutput>digestAlgorithm</computeroutput> obtained by calling <ref refid="oid_8h_1a776c43adb7d25f3cae1b4ab48a70ee5b" kindref="member">mbedtls_oid_get_oid_by_md()</ref> on <computeroutput>md_alg</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>For ECDSA signatures, the output format is the DER encoding <computeroutput>Ecdsa-Sig-Value</computeroutput> defined in <ulink url="https://tools.ietf.org/html/rfc4492#section-5.4">RFC 4492 section 5.4</ulink>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL connection instance. It should not be modified other than via <ref refid="ssl_8h_1ac57fb2abf2a5cd821d0ec8c3d6c59daf" kindref="member">mbedtls_ssl_set_async_operation_data()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cert</parametername>
</parameternamelist>
<parameterdescription>
<para>Certificate containing the public key. In simple cases, this is one of the pointers passed to <ref refid="ssl_8h_1a4e54e9ace21beb608bae36ddb81a4fb0" kindref="member">mbedtls_ssl_conf_own_cert()</ref> when configuring the SSL connection. However, if other callbacks are used, this property may not hold. For example, if an SNI callback is registered with <ref refid="ssl_8h_1a38ee2c1e3f232444df5ba3952d7ded33" kindref="member">mbedtls_ssl_conf_sni()</ref>, then this callback determines what certificate is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the hash. This buffer is no longer valid when the function returns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>hash</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation was started successfully and the SSL stack should call the resume callback immediately. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> if the operation was started successfully and the SSL stack should return immediately without calling the resume callback yet. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1af9328fb82f9548f4fa6bf3a5e1254c65" kindref="member">MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH</ref> if the external processor does not support this key. The SSL stack will use the private key object instead. </para>
</simplesect>
<simplesect kind="return"><para>Any other error indicates a fatal failure and is propagated up the call chain. The callback should use <computeroutput>MBEDTLS_ERR_PK_xxx</computeroutput> error codes, and <bold>must not</bold> use <computeroutput>MBEDTLS_ERR_SSL_xxx</computeroutput> error codes except as directed in the documentation of this callback. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="970" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1ac18191035f2598e3311d24a3ae40a0fa" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_async_decrypt_t(mbedtls_ssl_context *ssl, mbedtls_x509_crt *cert, const unsigned char *input, size_t input_len)</definition>
        <argsstring>(mbedtls_ssl_context *ssl, mbedtls_x509_crt *cert, const unsigned char *input, size_t input_len)</argsstring>
        <name>mbedtls_ssl_async_decrypt_t</name>
        <briefdescription>
<para>Callback type: start external decryption operation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             This callback is called during an SSL handshake to start
             an RSA decryption operation using an
             external processor. The parameter \p cert contains
             the public key; it is up to the callback function to
             determine how to access the associated private key.

             This function typically sends or enqueues a request, and
             does not wait for the operation to complete. This allows
             the handshake step to be non-blocking.

             The parameters \p ssl and \p cert are guaranteed to remain
             valid throughout the handshake. On the other hand, this
             function must save the contents of \p input if the value
             is needed for later processing, because the \p input buffer
             is no longer valid after this function returns.

             This function may call mbedtls_ssl_set_async_operation_data()
             to store an operation context for later retrieval
             by the resume or cancel callback.
</verbatim></para>
<para><simplesect kind="warning"><para>RSA decryption as used in TLS is subject to a potential timing side channel attack first discovered by Bleichenbacher in 1998. This attack can be remotely exploitable in practice. To avoid this attack, you must ensure that if the callback performs an RSA decryption, the time it takes to execute and return the result does not depend on whether the RSA decryption succeeded or reported invalid padding.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL connection instance. It should not be modified other than via <ref refid="ssl_8h_1ac57fb2abf2a5cd821d0ec8c3d6c59daf" kindref="member">mbedtls_ssl_set_async_operation_data()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cert</parametername>
</parameternamelist>
<parameterdescription>
<para>Certificate containing the public key. In simple cases, this is one of the pointers passed to <ref refid="ssl_8h_1a4e54e9ace21beb608bae36ddb81a4fb0" kindref="member">mbedtls_ssl_conf_own_cert()</ref> when configuring the SSL connection. However, if other callbacks are used, this property may not hold. For example, if an SNI callback is registered with <ref refid="ssl_8h_1a38ee2c1e3f232444df5ba3952d7ded33" kindref="member">mbedtls_ssl_conf_sni()</ref>, then this callback determines what certificate is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the input ciphertext. This buffer is no longer valid when the function returns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>input</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation was started successfully and the SSL stack should call the resume callback immediately. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> if the operation was started successfully and the SSL stack should return immediately without calling the resume callback yet. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1af9328fb82f9548f4fa6bf3a5e1254c65" kindref="member">MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH</ref> if the external processor does not support this key. The SSL stack will use the private key object instead. </para>
</simplesect>
<simplesect kind="return"><para>Any other error indicates a fatal failure and is propagated up the call chain. The callback should use <computeroutput>MBEDTLS_ERR_PK_xxx</computeroutput> error codes, and <bold>must not</bold> use <computeroutput>MBEDTLS_ERR_SSL_xxx</computeroutput> error codes except as directed in the documentation of this callback. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1036" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a6a67de0c00f4aff4500ece33645a96cd" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_async_resume_t(mbedtls_ssl_context *ssl, unsigned char *output, size_t *output_len, size_t output_size)</definition>
        <argsstring>(mbedtls_ssl_context *ssl, unsigned char *output, size_t *output_len, size_t output_size)</argsstring>
        <name>mbedtls_ssl_async_resume_t</name>
        <briefdescription>
<para>Callback type: resume external operation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             This callback is called during an SSL handshake to resume
             an external operation started by the
             ::mbedtls_ssl_async_sign_t or
             ::mbedtls_ssl_async_decrypt_t callback.

             This function typically checks the status of a pending
             request or causes the request queue to make progress, and
             does not wait for the operation to complete. This allows
             the handshake step to be non-blocking.

             This function may call mbedtls_ssl_get_async_operation_data()
             to retrieve an operation context set by the start callback.
             It may call mbedtls_ssl_set_async_operation_data() to modify
             this context.

             Note that when this function returns a status other than
             #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS, it must free any
             resources associated with the operation.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL connection instance. It should not be modified other than via <ref refid="ssl_8h_1ac57fb2abf2a5cd821d0ec8c3d6c59daf" kindref="member">mbedtls_ssl_set_async_operation_data()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the output (signature or decrypted data) on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_len</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, number of bytes written to <computeroutput>output</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>output</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if output of the operation is available in the <computeroutput>output</computeroutput> buffer. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> if the operation is still in progress. Subsequent requests for progress on the SSL connection will call the resume callback again. </para>
</simplesect>
<simplesect kind="return"><para>Any other error means that the operation is aborted. The SSL handshake is aborted. The callback should use <computeroutput>MBEDTLS_ERR_PK_xxx</computeroutput> error codes, and <bold>must not</bold> use <computeroutput>MBEDTLS_ERR_SSL_xxx</computeroutput> error codes except as directed in the documentation of this callback. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1084" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a084ed94ac531cfde7dcd0d0c05d392bd" prot="public" static="no">
        <type>void</type>
        <definition>typedef void mbedtls_ssl_async_cancel_t(mbedtls_ssl_context *ssl)</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_async_cancel_t</name>
        <briefdescription>
<para>Callback type: cancel external operation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             This callback is called if an SSL connection is closed
             while an asynchronous operation is in progress. Note that
             this callback is not called if the
             ::mbedtls_ssl_async_resume_t callback has run and has
             returned a value other than
             #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS, since in that case
             the asynchronous operation has already completed.

             This function may call mbedtls_ssl_get_async_operation_data()
             to retrieve an operation context set by the start callback.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL connection instance. It should not be modified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1106" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t mbedtls_ssl_srtp_profile</definition>
        <argsstring></argsstring>
        <name>mbedtls_ssl_srtp_profile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1155" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1ab0bbb0afa620c3de5b545d36e5d944e8" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__dtls__srtp__info__t" kindref="compound">mbedtls_dtls_srtp_info_t</ref></type>
        <definition>typedef struct mbedtls_dtls_srtp_info_t mbedtls_dtls_srtp_info</definition>
        <argsstring></argsstring>
        <name>mbedtls_dtls_srtp_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1165" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a1bd58d7f5591861371f9e481b91bb36a" prot="public" static="no">
        <type>void</type>
        <definition>typedef void mbedtls_ssl_export_keys_t(void *p_expkey, mbedtls_ssl_key_export_type type, const unsigned char *secret, size_t secret_len, const unsigned char client_random[32], const unsigned char server_random[32], mbedtls_tls_prf_types tls_prf_type)</definition>
        <argsstring>(void *p_expkey, mbedtls_ssl_key_export_type type, const unsigned char *secret, size_t secret_len, const unsigned char client_random[32], const unsigned char server_random[32], mbedtls_tls_prf_types tls_prf_type)</argsstring>
        <name>mbedtls_ssl_export_keys_t</name>
        <briefdescription>
<para>Callback type: Export key alongside random values for session identification, and PRF for implementation of TLS key exporters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_expkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the key that is being exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secret</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the buffer holding the secret that&apos;s being exporterd. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secret_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>secret</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_random</parametername>
</parameternamelist>
<parameterdescription>
<para>The client random bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>server_random</parametername>
</parameternamelist>
<parameterdescription>
<para>The server random bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tls_prf_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier for the PRF used in the handshake to which the key belongs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1291" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a3ecbc39db6b88c518b26aa30f1397391" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* mbedtls_ssl_hs_cb_t) (mbedtls_ssl_context *ssl)</definition>
        <argsstring>)(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_hs_cb_t</name>
        <briefdescription>
<para>Callback type: generic handshake callback. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Callbacks may use user_data funcs to set/get app user data. See <computeroutput><ref refid="ssl_8h_1a96ca3df1ee1ef958f255a233a1b0f1e7" kindref="member">mbedtls_ssl_get_user_data_p()</ref></computeroutput> <computeroutput><ref refid="ssl_8h_1a2173920d384d3fb7bf4b3cbd1f5d05cb" kindref="member">mbedtls_ssl_get_user_data_n()</ref></computeroutput> <computeroutput><ref refid="ssl_8h_1a5035adf863e97a0999f2c94e875d6ef6" kindref="member">mbedtls_ssl_conf_get_user_data_p()</ref></computeroutput> <computeroutput><ref refid="ssl_8h_1a8998dea4168d751fb8bc5b4a6694ed27" kindref="member">mbedtls_ssl_conf_get_user_data_n()</ref></computeroutput> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref></computeroutput> on which the callback is run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value of the callback is 0 if successful, or a specific MBEDTLS_ERR_XXX code, which will cause the handshake to be aborted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1315" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a112d1fc2dd4db788592457d14c0c2899" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_ticket_write_t(void *p_ticket, const mbedtls_ssl_session *session, unsigned char *start, const unsigned char *end, size_t *tlen, uint32_t *lifetime)</definition>
        <argsstring>(void *p_ticket, const mbedtls_ssl_session *session, unsigned char *start, const unsigned char *end, size_t *tlen, uint32_t *lifetime)</argsstring>
        <name>mbedtls_ssl_ticket_write_t</name>
        <briefdescription>
<para>Callback type: generate and write session ticket. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This describes what a callback implementation should do. This callback should generate an encrypted and authenticated ticket for the session and write it to the output buffer. Here, ticket means the opaque ticket part of the NewSessionTicket structure of RFC 5077.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_ticket</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL session to be written in the ticket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of the output buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of the output buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlen</parametername>
</parameternamelist>
<parameterdescription>
<para>On exit, holds the length written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>On exit, holds the lifetime of the ticket in seconds</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific MBEDTLS_ERR_XXX code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2504" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a48aea353b22e86deece00933ef941536" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_ticket_parse_t(void *p_ticket, mbedtls_ssl_session *session, unsigned char *buf, size_t len)</definition>
        <argsstring>(void *p_ticket, mbedtls_ssl_session *session, unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_ticket_parse_t</name>
        <briefdescription>
<para>Callback type: parse and load session ticket. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This describes what a callback implementation should do. This callback should parse a session ticket as generated by the corresponding mbedtls_ssl_ticket_write_t function, and, if the ticket is authentic and valid, load the session.</para>
</simplesect>
<simplesect kind="note"><para>The implementation is allowed to modify the first len bytes of the input buffer, eg to use it as a temporary area for the decrypted ticket contents.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_ticket</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL session to be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of the buffer containing the ticket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the ticket.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_SSL_INVALID_MAC if not authentic, or MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED if expired, or any other non-zero code for other failures. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2534" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a536f8b89936f26732150b00639a47ff0" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_cookie_write_t(void *ctx, unsigned char **p, unsigned char *end, const unsigned char *info, size_t ilen)</definition>
        <argsstring>(void *ctx, unsigned char **p, unsigned char *end, const unsigned char *info, size_t ilen)</argsstring>
        <name>mbedtls_ssl_cookie_write_t</name>
        <briefdescription>
<para>Callback type: generate a cookie. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to, must be updated to point right after the cookie </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to one past the end of the output buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Client ID info that was passed to <computeroutput><ref refid="ssl_8h_1a15fab95c13a898f32fa69ff2065c1051" kindref="member">mbedtls_ssl_set_client_transport_id()</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of info in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The callback must return 0 on success, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2801" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ssl_8h_1a9cfda5aee70d6c2c19a8dfb5af900d80" prot="public" static="no">
        <type>int</type>
        <definition>typedef int mbedtls_ssl_cookie_check_t(void *ctx, const unsigned char *cookie, size_t clen, const unsigned char *info, size_t ilen)</definition>
        <argsstring>(void *ctx, const unsigned char *cookie, size_t clen, const unsigned char *info, size_t ilen)</argsstring>
        <name>mbedtls_ssl_cookie_check_t</name>
        <briefdescription>
<para>Callback type: verify a cookie. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for the callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Cookie to verify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cookie </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Client ID info that was passed to <computeroutput><ref refid="ssl_8h_1a15fab95c13a898f32fa69ff2065c1051" kindref="member">mbedtls_ssl_set_client_transport_id()</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of info in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The callback must return 0 if cookie is valid, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2818" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2818" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ssl_8h_1ada9a0169e4712521049117d29b91e1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mbedtls_ssl_get_ciphersuite_name</definition>
        <argsstring>(const int ciphersuite_id)</argsstring>
        <name>mbedtls_ssl_get_ciphersuite_name</name>
        <param>
          <type>const int</type>
          <declname>ciphersuite_id</declname>
        </param>
        <briefdescription>
<para>Return the name of the ciphersuite associated with the given ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphersuite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL ciphersuite ID</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string containing the ciphersuite name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1859" column="12" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1859" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a9914cdf5533e813e1ea7ca52981aa006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_ciphersuite_id</definition>
        <argsstring>(const char *ciphersuite_name)</argsstring>
        <name>mbedtls_ssl_get_ciphersuite_id</name>
        <param>
          <type>const char *</type>
          <declname>ciphersuite_name</declname>
        </param>
        <briefdescription>
<para>Return the ID of the ciphersuite associated with the given name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphersuite_name</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL ciphersuite name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the ID with the ciphersuite or 0 if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1869" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1869" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a8560dea66d7830a11874188727ec4c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_init</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_init</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Initialize an SSL context Just makes the context ready for <ref refid="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" kindref="member">mbedtls_ssl_setup()</ref> or <ref refid="ssl_8h_1a2dc104a181bcd11eafbbf7e6923978bc" kindref="member">mbedtls_ssl_free()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1878" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1878" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_setup</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const mbedtls_ssl_config *conf)</argsstring>
        <name>mbedtls_ssl_setup</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Set up an SSL context for use. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>No copy of the configuration context is made, it can be shared by many <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> structures.</para>
</simplesect>
<simplesect kind="warning"><para>The conf structure will be accessed during the session. It must not be modified or freed as long as the session is active.</para>
</simplesect>
<simplesect kind="warning"><para>This function must be called exactly once per context. Calling mbedtls_ssl_setup again is not supported, even if no session is active.</para>
</simplesect>
<simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration to use</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_SSL_ALLOC_FAILED if memory allocation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1904" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1904" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_session_reset</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_session_reset</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Reset an already initialized SSL context for re-use while retaining application-set variables, function pointers and data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_SSL_ALLOC_FAILED or MBEDTLS_ERR_SSL_HW_ACCEL_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1916" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1916" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a3a763e35d55c18e6792a3b756d825684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_endpoint</definition>
        <argsstring>(mbedtls_ssl_config *conf, int endpoint)</argsstring>
        <name>mbedtls_ssl_conf_endpoint</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endpoint</declname>
        </param>
        <briefdescription>
<para>Set the current endpoint type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>must be MBEDTLS_SSL_IS_CLIENT or MBEDTLS_SSL_IS_SERVER </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1924" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1924" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1afa2243cab294dc479e6a1fe02ae36f20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_ssl_conf_get_endpoint</definition>
        <argsstring>(const mbedtls_ssl_config *conf)</argsstring>
        <name>mbedtls_ssl_conf_get_endpoint</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Get the current endpoint type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Endpoint type, either MBEDTLS_SSL_IS_CLIENT or MBEDTLS_SSL_IS_SERVER </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1934" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="1934" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a2eb03afe9b2ca0f144a1c307100dc0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_transport</definition>
        <argsstring>(mbedtls_ssl_config *conf, int transport)</argsstring>
        <name>mbedtls_ssl_conf_transport</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>transport</declname>
        </param>
        <briefdescription>
<para>Set the transport type (TLS or DTLS). Default: TLS. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For DTLS, you must either provide a recv callback that doesn&apos;t block, or one that handles timeouts, see <computeroutput><ref refid="ssl_8h_1a8b7442420aef7f1a76fa8c5336362f9e" kindref="member">mbedtls_ssl_set_bio()</ref></computeroutput>. You also need to provide timer callbacks with <computeroutput><ref refid="ssl_8h_1a335ee78886daf7f8fb369fa925b3cca8" kindref="member">mbedtls_ssl_set_timer_cb()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transport</parametername>
</parameternamelist>
<parameterdescription>
<para>transport type: MBEDTLS_SSL_TRANSPORT_STREAM for TLS, MBEDTLS_SSL_TRANSPORT_DATAGRAM for DTLS. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1953" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1953" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5695285c9dbfefec295012b566290f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_authmode</definition>
        <argsstring>(mbedtls_ssl_config *conf, int authmode)</argsstring>
        <name>mbedtls_ssl_conf_authmode</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>authmode</declname>
        </param>
        <briefdescription>
<para>Set the certificate verification mode Default: NONE on server, REQUIRED on client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>authmode</parametername>
</parameternamelist>
<parameterdescription>
<para>can be:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
MBEDTLS_SSL_VERIFY_NONE: peer certificate is not checked (default on server) (insecure on client)</para>
<para>MBEDTLS_SSL_VERIFY_OPTIONAL: peer certificate is checked, however the handshake continues even if verification failed; <ref refid="ssl_8h_1a516064f1468d459159ef7cd6c496a026" kindref="member">mbedtls_ssl_get_verify_result()</ref> can be called after the handshake is complete.</para>
<para>MBEDTLS_SSL_VERIFY_REQUIRED: peer <emphasis>must</emphasis> present a valid certificate, handshake is aborted if verification failed. (default on client)</para>
<para><simplesect kind="note"><para>On client, MBEDTLS_SSL_VERIFY_REQUIRED is the recommended mode. With MBEDTLS_SSL_VERIFY_OPTIONAL, the user needs to call <ref refid="ssl_8h_1a516064f1468d459159ef7cd6c496a026" kindref="member">mbedtls_ssl_get_verify_result()</ref> at the right time(s), which may not be obvious, while REQUIRED always perform the verification as soon as possible. For example, REQUIRED was protecting against the &quot;triple handshake&quot; attack even before it was found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="1981" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="1981" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ab2245516a29f44f803c8a579aef7b40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_tls13_conf_early_data</definition>
        <argsstring>(mbedtls_ssl_config *conf, int early_data_enabled)</argsstring>
        <name>mbedtls_ssl_tls13_conf_early_data</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>early_data_enabled</declname>
        </param>
        <briefdescription>
<para>Set the early data mode Default: disabled on server and client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>early_data_enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>can be:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
MBEDTLS_SSL_EARLY_DATA_DISABLED: early data functionality is disabled This is the default on client and server.</para>
<para>MBEDTLS_SSL_EARLY_DATA_ENABLED: early data functionality is enabled and may be negotiated in the handshake. Application using early data functionality needs to be aware of the lack of replay protection of the early data application payloads.</para>
<para><simplesect kind="warning"><para>This interface is experimental and may change without notice. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2003" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2003" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a72875597697f96e1b626fb4c2664dabf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_tls13_conf_max_early_data_size</definition>
        <argsstring>(mbedtls_ssl_config *conf, uint32_t max_early_data_size)</argsstring>
        <name>mbedtls_ssl_tls13_conf_max_early_data_size</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_early_data_size</declname>
        </param>
        <briefdescription>
<para>Set the maximum amount of 0-RTT data in bytes Default: <ref refid="ssl_8h_1a61da138676b0f01dac6e045949ab4387" kindref="member">MBEDTLS_SSL_MAX_EARLY_DATA_SIZE</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the value of the max_early_data_size field of the early data indication extension included in the NewSessionTicket messages that the server may send.</para>
<para>The value defines the maximum amount of 0-RTT data in bytes that a client will be allowed to send when using one of the tickets defined by the NewSessionTicket messages.</para>
<para><simplesect kind="note"><para>When resuming a session using a ticket, if the server receives more early data than allowed for the ticket, it terminates the connection. The maximum amount of 0-RTT data should thus be large enough to allow a minimum of early data to be exchanged.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_early_data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of 0-RTT data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This interface is experimental and may change without notice. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2030" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2030" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1afc2b6b55d7ccaf38d84a4fbf1655f426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_verify</definition>
        <argsstring>(mbedtls_ssl_config *conf, int(*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *), void *p_vrfy)</argsstring>
        <name>mbedtls_ssl_conf_verify</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *, int, uint32_t *)</type>
          <declname>f_vrfy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_vrfy</declname>
        </param>
        <briefdescription>
<para>Set the verification callback (Optional). </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            If set, the provided verify callback is called for each
            certificate in the peer&apos;s CRT chain, including the trusted
            root. For more information, please see the documentation of
            \c mbedtls_x509_crt_verify().
</verbatim></para>
<para><simplesect kind="note"><para>For per context callbacks and contexts, please use <ref refid="ssl_8h_1a3a2ec5ab5a8a3f07973a3b2beabe5f7a" kindref="member">mbedtls_ssl_set_verify()</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The verification callback to use during CRT verification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The opaque context to be passed to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2052" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2052" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a469cd1c64bbba4be22347bf8874a017e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_rng</definition>
        <argsstring>(mbedtls_ssl_config *conf, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_ssl_conf_rng</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Set the random number generator callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function (mandatory) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2064" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2064" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ab15dcbe7c7fe2a5c118e7c486c07c921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_dbg</definition>
        <argsstring>(mbedtls_ssl_config *conf, void(*f_dbg)(void *, int, const char *, int, const char *), void *p_dbg)</argsstring>
        <name>mbedtls_ssl_conf_dbg</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>void(*)(void *, int, const char *, int, const char *)</type>
          <declname>f_dbg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_dbg</declname>
        </param>
        <briefdescription>
<para>Set the debug callback. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            The callback has the following argument:
            void *           opaque context for the callback
            int              debug level
            const char *     file name
            int              line number
            const char *     message
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_dbg</parametername>
</parameternamelist>
<parameterdescription>
<para>debug function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dbg</parametername>
</parameternamelist>
<parameterdescription>
<para>debug parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2082" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2082" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ab347323db386abdce5ec7c1ef600a418" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
        <definition>static const mbedtls_ssl_config* mbedtls_ssl_context_get_config</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_context_get_config</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the SSL configuration structure associated with the given SSL context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The pointer returned by this function is guaranteed to remain valid until the context is freed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the SSL configuration associated with <computeroutput>ssl</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2096" column="40" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2096" bodyend="2100"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a8b7442420aef7f1a76fa8c5336362f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_bio</definition>
        <argsstring>(mbedtls_ssl_context *ssl, void *p_bio, mbedtls_ssl_send_t *f_send, mbedtls_ssl_recv_t *f_recv, mbedtls_ssl_recv_timeout_t *f_recv_timeout)</argsstring>
        <name>mbedtls_ssl_set_bio</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_bio</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a38e2b400d361f42f85833cdc30b3916e" kindref="member">mbedtls_ssl_send_t</ref> *</type>
          <declname>f_send</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1ac06b19b96b643090c55f19b6c28b10c4" kindref="member">mbedtls_ssl_recv_t</ref> *</type>
          <declname>f_recv</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a6d615ca95c8a67d7c5f9d7d256dc09e6" kindref="member">mbedtls_ssl_recv_timeout_t</ref> *</type>
          <declname>f_recv_timeout</declname>
        </param>
        <briefdescription>
<para>Set the underlying BIO callbacks for write, read and read-with-timeout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bio</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter (context) shared by BIO callbacks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_send</parametername>
</parameternamelist>
<parameterdescription>
<para>write callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_recv</parametername>
</parameternamelist>
<parameterdescription>
<para>read callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_recv_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>blocking read callback with timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>One of f_recv or f_recv_timeout can be NULL, in which case the other is used. If both are non-NULL, f_recv_timeout is used and f_recv is ignored (as if it were NULL).</para>
</simplesect>
<simplesect kind="note"><para>The two most common use cases are:<itemizedlist>
<listitem><para>non-blocking I/O, f_recv != NULL, f_recv_timeout == NULL</para>
</listitem><listitem><para>blocking I/O, f_recv == NULL, f_recv_timeout != NULL</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>For DTLS, you need to provide either a non-NULL f_recv_timeout callback, or a f_recv that doesn&apos;t block.</para>
</simplesect>
<simplesect kind="note"><para>See the documentations of <computeroutput>mbedtls_ssl_send_t</computeroutput>, <computeroutput>mbedtls_ssl_recv_t</computeroutput> and <computeroutput>mbedtls_ssl_recv_timeout_t</computeroutput> for the conventions those callbacks must follow.</para>
</simplesect>
<simplesect kind="note"><para>On some platforms, net_sockets.c provides <computeroutput><ref refid="net__sockets_8h_1a4841afd0e14f1fd44b82c3a850961ab7" kindref="member">mbedtls_net_send()</ref></computeroutput>, <computeroutput><ref refid="net__sockets_8h_1a03af351ec420bbeb5e91357abcfb3663" kindref="member">mbedtls_net_recv()</ref></computeroutput> and <computeroutput><ref refid="net__sockets_8h_1a67810154d2328a80b146155d8cdecfd9" kindref="member">mbedtls_net_recv_timeout()</ref></computeroutput> that are suitable to be used here. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2132" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1afe94a33d384006339080fbd901cd806b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_cid</definition>
        <argsstring>(mbedtls_ssl_context *ssl, int enable, unsigned char const *own_cid, size_t own_cid_len)</argsstring>
        <name>mbedtls_ssl_set_cid</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>own_cid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>own_cid_len</declname>
        </param>
        <briefdescription>
<para>Configure the use of the Connection ID (CID) extension in the next handshake. </para>
        </briefdescription>
        <detaileddescription>
<para>Reference: RFC 9146 (or draft-ietf-tls-dtls-connection-id-05 <ulink url="https://tools.ietf.org/html/draft-ietf-tls-dtls-connection-id-05">https://tools.ietf.org/html/draft-ietf-tls-dtls-connection-id-05</ulink> for legacy version)</para>
<para>The DTLS CID extension allows the reliable association of DTLS records to DTLS connections across changes in the underlying transport (changed IP and Port metadata) by adding explicit connection identifiers (CIDs) to the headers of encrypted DTLS records. The desired CIDs are configured by the application layer and are exchanged in new <computeroutput>ClientHello</computeroutput> / <computeroutput>ServerHello</computeroutput> extensions during the handshake, where each side indicates the CID it wants the peer to use when writing encrypted messages. The CIDs are put to use once records get encrypted: the stack discards any incoming records that don&apos;t include the configured CID in their header, and adds the peer&apos;s requested CID to the headers of outgoing messages.</para>
<para>This API enables or disables the use of the CID extension in the next handshake and sets the value of the CID to be used for incoming messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to configure. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>This value determines whether the CID extension should be used or not. Possible values are:<itemizedlist>
<listitem><para>MBEDTLS_SSL_CID_ENABLED to enable the use of the CID.</para>
</listitem><listitem><para>MBEDTLS_SSL_CID_DISABLED (default) to disable the use of the CID. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>own_cid</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the readable buffer holding the CID we want the peer to use when sending encrypted messages to us. This may be <computeroutput>NULL</computeroutput> if <computeroutput>own_cid_len</computeroutput> is <computeroutput>0</computeroutput>. This parameter is unused if <computeroutput>enable</computeroutput> is set to MBEDTLS_SSL_CID_DISABLED. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>own_cid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>own_cid</computeroutput>. This parameter is unused if <computeroutput>enable</computeroutput> is set to MBEDTLS_SSL_CID_DISABLED.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value of <computeroutput>own_cid_len</computeroutput> must match the value of the <computeroutput>len</computeroutput> parameter passed to <ref refid="ssl_8h_1a8b3cdd39e60718056f4db139ac85c365" kindref="member">mbedtls_ssl_conf_cid()</ref> when configuring the <ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> that <computeroutput>ssl</computeroutput> is bound to.</para>
</simplesect>
<simplesect kind="note"><para>This CID configuration applies to subsequent handshakes performed on the SSL context <computeroutput>ssl</computeroutput>, but does not trigger one. You still have to call <computeroutput><ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref></computeroutput> (for the initial handshake) or <computeroutput><ref refid="ssl_8h_1a49b7a27a616495d5f0a4fabc3f550dbb" kindref="member">mbedtls_ssl_renegotiate()</ref></computeroutput> (for a renegotiation handshake) explicitly after a successful call to this function to run the handshake.</para>
</simplesect>
<simplesect kind="note"><para>This call cannot guarantee that the use of the CID will be successfully negotiated in the next handshake, because the peer might not support it. Specifically:<itemizedlist>
<listitem><para>On the Client, enabling the use of the CID through this call implies that the <computeroutput>ClientHello</computeroutput> in the next handshake will include the CID extension, thereby offering the use of the CID to the server. Only if the <computeroutput>ServerHello</computeroutput> contains the CID extension, too, the CID extension will actually be put to use.</para>
</listitem><listitem><para>On the Server, enabling the use of the CID through this call implies that the server will look for the CID extension in a <computeroutput>ClientHello</computeroutput> from the client, and, if present, reply with a CID extension in its <computeroutput>ServerHello</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>To check whether the use of the CID was negotiated after the subsequent handshake has completed, please use the API <ref refid="ssl_8h_1a7f19198119e077b70d014eac5252bf91" kindref="member">mbedtls_ssl_get_peer_cid()</ref>.</para>
</simplesect>
<simplesect kind="warning"><para>If the use of the CID extension is enabled in this call and the subsequent handshake negotiates its use, Mbed TLS will silently drop every packet whose CID does not match the CID configured in <computeroutput>own_cid</computeroutput>. It is the responsibility of the user to adapt the underlying transport to take care of CID-based demultiplexing before handing datagrams to Mbed TLS.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. In this case, the CID configuration applies to the next handshake. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2227" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2227" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a30eabe9aa5dcdfb157a336a1cc6f7aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_own_cid</definition>
        <argsstring>(mbedtls_ssl_context *ssl, int *enabled, unsigned char own_cid[MBEDTLS_SSL_CID_OUT_LEN_MAX], size_t *own_cid_len)</argsstring>
        <name>mbedtls_ssl_get_own_cid</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>enabled</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>own_cid</declname>
          <array>[MBEDTLS_SSL_CID_OUT_LEN_MAX]</array>
        </param>
        <param>
          <type>size_t *</type>
          <declname>own_cid_len</declname>
        </param>
        <briefdescription>
<para>Get information about our request for usage of the CID extension in the current connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store whether the CID extension is requested to be used or not. If the CID is requested, <computeroutput>*enabled</computeroutput> is set to MBEDTLS_SSL_CID_ENABLED; otherwise, it is set to MBEDTLS_SSL_CID_DISABLED. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>own_cid</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the buffer in which to store our own CID (if the CID extension is requested). This may be <computeroutput>NULL</computeroutput> in case the value of our CID isn&apos;t needed. If it is not <computeroutput>NULL</computeroutput>, <computeroutput>own_cid_len</computeroutput> must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>own_cid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the size of our own CID (if the CID extension is requested). This is also the number of Bytes in <computeroutput>own_cid</computeroutput> that have been written. This may be <computeroutput>NULL</computeroutput> in case the length of our own CID isn&apos;t needed. If it is <computeroutput>NULL</computeroutput>, <computeroutput>own_cid</computeroutput> must be <computeroutput>NULL</computeroutput>, too.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If we are requesting an empty CID this function sets <computeroutput>*enabled</computeroutput> to <ref refid="ssl_8h_1a288bb09060f3fe4e62907a3e0668fc41" kindref="member">MBEDTLS_SSL_CID_DISABLED</ref> (the rationale for this is that the resulting outcome is the same as if the CID extensions wasn&apos;t requested).</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2261" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2261" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a7f19198119e077b70d014eac5252bf91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_peer_cid</definition>
        <argsstring>(mbedtls_ssl_context *ssl, int *enabled, unsigned char peer_cid[MBEDTLS_SSL_CID_OUT_LEN_MAX], size_t *peer_cid_len)</argsstring>
        <name>mbedtls_ssl_get_peer_cid</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>enabled</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>peer_cid</declname>
          <array>[MBEDTLS_SSL_CID_OUT_LEN_MAX]</array>
        </param>
        <param>
          <type>size_t *</type>
          <declname>peer_cid_len</declname>
        </param>
        <briefdescription>
<para>Get information about the use of the CID extension in the current connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store whether the CID extension is currently in use or not. If the CID is in use, <computeroutput>*enabled</computeroutput> is set to MBEDTLS_SSL_CID_ENABLED; otherwise, it is set to MBEDTLS_SSL_CID_DISABLED. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_cid</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the buffer in which to store the CID chosen by the peer (if the CID extension is used). This may be <computeroutput>NULL</computeroutput> in case the value of peer CID isn&apos;t needed. If it is not <computeroutput>NULL</computeroutput>, <computeroutput>peer_cid_len</computeroutput> must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_cid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the size of the CID chosen by the peer (if the CID extension is used). This is also the number of Bytes in <computeroutput>peer_cid</computeroutput> that have been written. This may be <computeroutput>NULL</computeroutput> in case the length of the peer CID isn&apos;t needed. If it is <computeroutput>NULL</computeroutput>, <computeroutput>peer_cid</computeroutput> must be <computeroutput>NULL</computeroutput>, too.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This applies to the state of the CID negotiated in the last complete handshake. If a handshake is in progress, this function will attempt to complete the handshake first.</para>
</simplesect>
<simplesect kind="note"><para>If CID extensions have been exchanged but both client and server chose to use an empty CID, this function sets <computeroutput>*enabled</computeroutput> to <ref refid="ssl_8h_1a288bb09060f3fe4e62907a3e0668fc41" kindref="member">MBEDTLS_SSL_CID_DISABLED</ref> (the rationale for this is that the resulting communication is the same as if the CID extensions hadn&apos;t been used).</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2303" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2303" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a14ea71eb9f064d28fb5c393acc1e6975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_mtu</definition>
        <argsstring>(mbedtls_ssl_context *ssl, uint16_t mtu)</argsstring>
        <name>mbedtls_ssl_set_mtu</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>mtu</declname>
        </param>
        <briefdescription>
<para>Set the Maximum Transport Unit (MTU). Special value: 0 means unset (no limit). This represents the maximum size of a datagram payload handled by the transport layer (usually UDP) as determined by the network link and stack. In practice, this controls the maximum size datagram the DTLS layer will pass to the <computeroutput>f_send()</computeroutput> callback set using <computeroutput><ref refid="ssl_8h_1a8b7442420aef7f1a76fa8c5336362f9e" kindref="member">mbedtls_ssl_set_bio()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The limit on datagram size is converted to a limit on record payload by subtracting the current overhead of encapsulation and encryption/authentication if any.</para>
</simplesect>
<simplesect kind="note"><para>This can be called at any point during the connection, for example when a Path Maximum Transfer Unit (PMTU) estimate becomes available from other sources, such as lower (or higher) protocol layers.</para>
</simplesect>
<simplesect kind="note"><para>This setting only controls the size of the packets we send, and does not restrict the size of the datagrams we&apos;re willing to receive. Client-side, you can request the server to use smaller records with <computeroutput><ref refid="ssl_8h_1ac68fda83c26b3078e80f4dfc3b09bb94" kindref="member">mbedtls_ssl_conf_max_frag_len()</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>If both a MTU and a maximum fragment length have been configured (or negotiated with the peer), the resulting lower limit on record payload (see first note) is used.</para>
</simplesect>
<simplesect kind="note"><para>This can only be used to decrease the maximum size of datagrams (hence records, see first note) sent. It cannot be used to increase the maximum size of records over the limit set by <ref refid="ssl_8h_1ae6d6fb50d2997e49b202fa9fb4356158" kindref="member">MBEDTLS_SSL_OUT_CONTENT_LEN</ref>.</para>
</simplesect>
<simplesect kind="note"><para>Values lower than the current record layer expansion will result in an error when trying to send data.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the path MTU in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2349" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2349" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a3a2ec5ab5a8a3f07973a3b2beabe5f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_verify</definition>
        <argsstring>(mbedtls_ssl_context *ssl, int(*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *), void *p_vrfy)</argsstring>
        <name>mbedtls_ssl_set_verify</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *, int, uint32_t *)</type>
          <declname>f_vrfy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_vrfy</declname>
        </param>
        <briefdescription>
<para>Set a connection-specific verification callback (optional). </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            If set, the provided verify callback is called for each
            certificate in the peer&apos;s CRT chain, including the trusted
            root. For more information, please see the documentation of
            \c mbedtls_x509_crt_verify().
</verbatim></para>
<para><simplesect kind="note"><para>This call is analogous to <ref refid="ssl_8h_1afc2b6b55d7ccaf38d84a4fbf1655f426" kindref="member">mbedtls_ssl_conf_verify()</ref> but binds the verification callback and context to an SSL context as opposed to an SSL configuration. If <ref refid="ssl_8h_1afc2b6b55d7ccaf38d84a4fbf1655f426" kindref="member">mbedtls_ssl_conf_verify()</ref> and <ref refid="ssl_8h_1a3a2ec5ab5a8a3f07973a3b2beabe5f7a" kindref="member">mbedtls_ssl_set_verify()</ref> are both used, <ref refid="ssl_8h_1a3a2ec5ab5a8a3f07973a3b2beabe5f7a" kindref="member">mbedtls_ssl_set_verify()</ref> takes precedence.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The verification callback to use during CRT verification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The opaque context to be passed to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2371" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2371" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a0d925033b3a46a48b3f8acc1d743af90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_read_timeout</definition>
        <argsstring>(mbedtls_ssl_config *conf, uint32_t timeout)</argsstring>
        <name>mbedtls_ssl_conf_read_timeout</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set the timeout period for <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref> (Default: no timeout.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout value in milliseconds. Use 0 for no timeout (default).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>With blocking I/O, this will only work if a non-NULL <computeroutput>f_recv_timeout</computeroutput> was set with <computeroutput><ref refid="ssl_8h_1a8b7442420aef7f1a76fa8c5336362f9e" kindref="member">mbedtls_ssl_set_bio()</ref></computeroutput>. With non-blocking I/O, this will only work if timer callbacks were set with <computeroutput><ref refid="ssl_8h_1a335ee78886daf7f8fb369fa925b3cca8" kindref="member">mbedtls_ssl_set_timer_cb()</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>With non-blocking I/O, you may also skip this function altogether and handle timeouts at the application layer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2392" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2392" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a242658c828bf5f137102065e709703d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_check_record</definition>
        <argsstring>(mbedtls_ssl_context const *ssl, unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_ssl_check_record</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> const *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Check whether a buffer contains a valid and authentic record that has not been seen before. (DTLS only). </para>
        </briefdescription>
        <detaileddescription>
<para>This function does not change the user-visible state of the SSL context. Its sole purpose is to provide an indication of the legitimacy of an incoming record.</para>
<para>This can be useful e.g. in distributed server environments using the DTLS Connection ID feature, in which connections might need to be passed between service instances on a change of peer address, but where such disruptive operations should only happen after the validity of incoming records has been confirmed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the buffer holding the record to be checked. This must be a read/write buffer of length <computeroutput>buflen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This routine only checks whether the provided buffer begins with a valid and authentic record that has not been seen before, but does not check potential data following the initial record. In particular, it is possible to pass DTLS datagrams containing multiple records, in which case only the first record is checked.</para>
</simplesect>
<simplesect kind="note"><para>This function modifies the input buffer <computeroutput>buf</computeroutput>. If you need to preserve the original record, you have to maintain a copy.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the record is valid and authentic and has not been seen before. </para>
</simplesect>
<simplesect kind="return"><para>MBEDTLS_ERR_SSL_INVALID_MAC if the check completed successfully but the record was found to be not authentic. </para>
</simplesect>
<simplesect kind="return"><para>MBEDTLS_ERR_SSL_INVALID_RECORD if the check completed successfully but the record was found to be invalid for a reason different from authenticity checking. </para>
</simplesect>
<simplesect kind="return"><para>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD if the check completed successfully but the record was found to be unexpected in the state of the SSL context, including replayed records. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. In this case, the SSL context becomes unusable and needs to be freed or reset before reuse. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2438" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2438" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a335ee78886daf7f8fb369fa925b3cca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_timer_cb</definition>
        <argsstring>(mbedtls_ssl_context *ssl, void *p_timer, mbedtls_ssl_set_timer_t *f_set_timer, mbedtls_ssl_get_timer_t *f_get_timer)</argsstring>
        <name>mbedtls_ssl_set_timer_cb</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_timer</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a61c5d9ed63c50ee809eec98820d3f36c" kindref="member">mbedtls_ssl_set_timer_t</ref> *</type>
          <declname>f_set_timer</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1adea005600b532d788c05e9d01b42895b" kindref="member">mbedtls_ssl_get_timer_t</ref> *</type>
          <declname>f_get_timer</declname>
        </param>
        <briefdescription>
<para>Set the timer callbacks (Mandatory for DTLS.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_timer</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter (context) shared by timer callbacks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_set_timer</parametername>
</parameternamelist>
<parameterdescription>
<para>set timer callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_get_timer</parametername>
</parameternamelist>
<parameterdescription>
<para>get timer callback. Must return:</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See the documentation of <computeroutput>mbedtls_ssl_set_timer_t</computeroutput> and <computeroutput>mbedtls_ssl_get_timer_t</computeroutput> for the conventions this pair of callbacks must follow.</para>
</simplesect>
<simplesect kind="note"><para>On some platforms, timing.c provides <computeroutput><ref refid="timing_8h_1aeb3497ab85adabf7db89d81c34e2ef92" kindref="member">mbedtls_timing_set_delay()</ref></computeroutput> and <computeroutput><ref refid="timing_8h_1afb1705e8c4227b0ec03089aa7fc54d9b" kindref="member">mbedtls_timing_get_delay()</ref></computeroutput> that are suitable for using here, except if using an event-driven style.</para>
</simplesect>
<simplesect kind="note"><para>See also the &quot;DTLS tutorial&quot; article in our knowledge base. <ulink url="https://mbed-tls.readthedocs.io/en/latest/kb/how-to/dtls-tutorial">https://mbed-tls.readthedocs.io/en/latest/kb/how-to/dtls-tutorial</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2462" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2462" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a49e226cbc25b3da56a71d4ba057a48be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_conf_cert_cb</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_ssl_hs_cb_t f_cert_cb)</argsstring>
        <name>mbedtls_ssl_conf_cert_cb</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a3ecbc39db6b88c518b26aa30f1397391" kindref="member">mbedtls_ssl_hs_cb_t</ref></type>
          <declname>f_cert_cb</declname>
        </param>
        <briefdescription>
<para>Set the certificate selection callback (server-side only). </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             If set, the callback is always called for each handshake,
             after `ClientHello` processing has finished.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to register the callback with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_cert_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback for selecting server certificate after <computeroutput>ClientHello</computeroutput> processing has finished. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2478" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2478" bodyend="2482"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a73f028424df0b3a3b3360df0768df992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_session_tickets_cb</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_ssl_ticket_write_t *f_ticket_write, mbedtls_ssl_ticket_parse_t *f_ticket_parse, void *p_ticket)</argsstring>
        <name>mbedtls_ssl_conf_session_tickets_cb</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a112d1fc2dd4db788592457d14c0c2899" kindref="member">mbedtls_ssl_ticket_write_t</ref> *</type>
          <declname>f_ticket_write</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a48aea353b22e86deece00933ef941536" kindref="member">mbedtls_ssl_ticket_parse_t</ref> *</type>
          <declname>f_ticket_parse</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_ticket</declname>
        </param>
        <briefdescription>
<para>Configure SSL session ticket callbacks (server only). (Default: none.) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>On server, session tickets are enabled by providing non-NULL callbacks.</para>
</simplesect>
<simplesect kind="note"><para>On client, use <computeroutput><ref refid="ssl_8h_1a97e547f900979337f4083a8158918fcc" kindref="member">mbedtls_ssl_conf_session_tickets()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_ticket_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback for writing a ticket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_ticket_parse</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback for parsing a ticket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ticket</parametername>
</parameternamelist>
<parameterdescription>
<para>Context shared by the two callbacks </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2554" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2554" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1afd4d3fb215d25dea1726517b9fe0591d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_export_keys_cb</definition>
        <argsstring>(mbedtls_ssl_context *ssl, mbedtls_ssl_export_keys_t *f_export_keys, void *p_export_keys)</argsstring>
        <name>mbedtls_ssl_set_export_keys_cb</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a1bd58d7f5591861371f9e481b91bb36a" kindref="member">mbedtls_ssl_export_keys_t</ref> *</type>
          <declname>f_export_keys</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_export_keys</declname>
        </param>
        <briefdescription>
<para>Configure a key export callback. (Default: none.) </para>
        </briefdescription>
        <detaileddescription>
<para>This API can be used for two purposes:<itemizedlist>
<listitem><para>Debugging: Use this API to e.g. generate an NSSKeylog file and use it to inspect encrypted traffic in tools such as Wireshark.</para>
</listitem><listitem><para>Application-specific export: Use this API to implement key exporters, e.g. for EAP-TLS or DTLS-SRTP.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to which the export callback should be attached. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_export_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback for the key export. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_export_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>The opaque context pointer to be passed to the callback <computeroutput>f_export_keys</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2578" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2578" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ad7da6e1777902c3e3bbdf03de85c4623" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_conf_set_user_data_p</definition>
        <argsstring>(mbedtls_ssl_config *conf, void *p)</argsstring>
        <name>mbedtls_ssl_conf_set_user_data_p</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Set the user data in an SSL configuration to a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>You can retrieve this value later with <ref refid="ssl_8h_1a5035adf863e97a0999f2c94e875d6ef6" kindref="member">mbedtls_ssl_conf_get_user_data_p()</ref>.</para>
<para><simplesect kind="note"><para>The library stores <computeroutput>p</computeroutput> without accessing it. It is the responsibility of the caller to ensure that the pointer remains valid.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration context to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the user data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2592" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2592" bodyend="2597"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a2260d0d36e74fdb528a33435f8272b04" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_conf_set_user_data_n</definition>
        <argsstring>(mbedtls_ssl_config *conf, uintptr_t n)</argsstring>
        <name>mbedtls_ssl_conf_set_user_data_n</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set the user data in an SSL configuration to an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>You can retrieve this value later with <ref refid="ssl_8h_1a8998dea4168d751fb8bc5b4a6694ed27" kindref="member">mbedtls_ssl_conf_get_user_data_n()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration context to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the user data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2606" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2606" bodyend="2611"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5035adf863e97a0999f2c94e875d6ef6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* mbedtls_ssl_conf_get_user_data_p</definition>
        <argsstring>(mbedtls_ssl_config *conf)</argsstring>
        <name>mbedtls_ssl_conf_get_user_data_p</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Retrieve the user data in an SSL configuration as a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the value last set with <ref refid="ssl_8h_1ad7da6e1777902c3e3bbdf03de85c4623" kindref="member">mbedtls_ssl_conf_set_user_data_p()</ref>, or <computeroutput>NULL</computeroutput> if <ref refid="ssl_8h_1ad7da6e1777902c3e3bbdf03de85c4623" kindref="member">mbedtls_ssl_conf_set_user_data_p()</ref> has not previously been called. The value is undefined if <ref refid="ssl_8h_1a2260d0d36e74fdb528a33435f8272b04" kindref="member">mbedtls_ssl_conf_set_user_data_n()</ref> has been called without a subsequent call to <ref refid="ssl_8h_1ad7da6e1777902c3e3bbdf03de85c4623" kindref="member">mbedtls_ssl_conf_set_user_data_p()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration context to modify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current value of the user data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2623" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2623" bodyend="2627"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a8998dea4168d751fb8bc5b4a6694ed27" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>static uintptr_t mbedtls_ssl_conf_get_user_data_n</definition>
        <argsstring>(mbedtls_ssl_config *conf)</argsstring>
        <name>mbedtls_ssl_conf_get_user_data_n</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Retrieve the user data in an SSL configuration as an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the value last set with <ref refid="ssl_8h_1a2260d0d36e74fdb528a33435f8272b04" kindref="member">mbedtls_ssl_conf_set_user_data_n()</ref>, or <computeroutput>0</computeroutput> if <ref refid="ssl_8h_1a2260d0d36e74fdb528a33435f8272b04" kindref="member">mbedtls_ssl_conf_set_user_data_n()</ref> has not previously been called. The value is undefined if <ref refid="ssl_8h_1ad7da6e1777902c3e3bbdf03de85c4623" kindref="member">mbedtls_ssl_conf_set_user_data_p()</ref> has been called without a subsequent call to <ref refid="ssl_8h_1a2260d0d36e74fdb528a33435f8272b04" kindref="member">mbedtls_ssl_conf_set_user_data_n()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration context to modify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current value of the user data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2639" column="25" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2639" bodyend="2643"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_set_user_data_p</definition>
        <argsstring>(mbedtls_ssl_context *ssl, void *p)</argsstring>
        <name>mbedtls_ssl_set_user_data_p</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Set the user data in an SSL context to a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>You can retrieve this value later with <ref refid="ssl_8h_1a96ca3df1ee1ef958f255a233a1b0f1e7" kindref="member">mbedtls_ssl_get_user_data_p()</ref>.</para>
<para><simplesect kind="note"><para>The library stores <computeroutput>p</computeroutput> without accessing it. It is the responsibility of the caller to ensure that the pointer remains valid.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the user data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2655" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2655" bodyend="2660"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_set_user_data_n</definition>
        <argsstring>(mbedtls_ssl_context *ssl, uintptr_t n)</argsstring>
        <name>mbedtls_ssl_set_user_data_n</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set the user data in an SSL context to an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>You can retrieve this value later with <ref refid="ssl_8h_1a2173920d384d3fb7bf4b3cbd1f5d05cb" kindref="member">mbedtls_ssl_get_user_data_n()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the user data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2669" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2669" bodyend="2674"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a96ca3df1ee1ef958f255a233a1b0f1e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* mbedtls_ssl_get_user_data_p</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_user_data_p</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Retrieve the user data in an SSL context as a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the value last set with <ref refid="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" kindref="member">mbedtls_ssl_set_user_data_p()</ref>, or <computeroutput>NULL</computeroutput> if <ref refid="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" kindref="member">mbedtls_ssl_set_user_data_p()</ref> has not previously been called. The value is undefined if <ref refid="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" kindref="member">mbedtls_ssl_set_user_data_n()</ref> has been called without a subsequent call to <ref refid="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" kindref="member">mbedtls_ssl_set_user_data_p()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to modify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current value of the user data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2686" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2686" bodyend="2690"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a2173920d384d3fb7bf4b3cbd1f5d05cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>static uintptr_t mbedtls_ssl_get_user_data_n</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_user_data_n</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Retrieve the user data in an SSL context as an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the value last set with <ref refid="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" kindref="member">mbedtls_ssl_set_user_data_n()</ref>, or <computeroutput>0</computeroutput> if <ref refid="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" kindref="member">mbedtls_ssl_set_user_data_n()</ref> has not previously been called. The value is undefined if <ref refid="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" kindref="member">mbedtls_ssl_set_user_data_p()</ref> has been called without a subsequent call to <ref refid="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" kindref="member">mbedtls_ssl_set_user_data_n()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to modify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current value of the user data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2702" column="25" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="2702" bodyend="2706"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a0675aed5a2b2b9ff219a62ed28b50819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_async_private_cb</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_ssl_async_sign_t *f_async_sign, mbedtls_ssl_async_decrypt_t *f_async_decrypt, mbedtls_ssl_async_resume_t *f_async_resume, mbedtls_ssl_async_cancel_t *f_async_cancel, void *config_data)</argsstring>
        <name>mbedtls_ssl_conf_async_private_cb</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1ad57308aa77db11dbc3551fd92deb2520" kindref="member">mbedtls_ssl_async_sign_t</ref> *</type>
          <declname>f_async_sign</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1ac18191035f2598e3311d24a3ae40a0fa" kindref="member">mbedtls_ssl_async_decrypt_t</ref> *</type>
          <declname>f_async_decrypt</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a6a67de0c00f4aff4500ece33645a96cd" kindref="member">mbedtls_ssl_async_resume_t</ref> *</type>
          <declname>f_async_resume</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a084ed94ac531cfde7dcd0d0c05d392bd" kindref="member">mbedtls_ssl_async_cancel_t</ref> *</type>
          <declname>f_async_cancel</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>config_data</declname>
        </param>
        <briefdescription>
<para>Configure asynchronous private key operation callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_async_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to start a signature operation. See the description of <ref refid="ssl_8h_1ad57308aa77db11dbc3551fd92deb2520" kindref="member">mbedtls_ssl_async_sign_t</ref> for more information. This may be <computeroutput>NULL</computeroutput> if the external processor does not support any signature operation; in this case the private key object associated with the certificate will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_async_decrypt</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to start a decryption operation. See the description of <ref refid="ssl_8h_1ac18191035f2598e3311d24a3ae40a0fa" kindref="member">mbedtls_ssl_async_decrypt_t</ref> for more information. This may be <computeroutput>NULL</computeroutput> if the external processor does not support any decryption operation; in this case the private key object associated with the certificate will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_async_resume</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to resume an asynchronous operation. See the description of <ref refid="ssl_8h_1a6a67de0c00f4aff4500ece33645a96cd" kindref="member">mbedtls_ssl_async_resume_t</ref> for more information. This may not be <computeroutput>NULL</computeroutput> unless <computeroutput>f_async_sign</computeroutput> and <computeroutput>f_async_decrypt</computeroutput> are both <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_async_cancel</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to cancel an asynchronous operation. See the description of <ref refid="ssl_8h_1a084ed94ac531cfde7dcd0d0c05d392bd" kindref="member">mbedtls_ssl_async_cancel_t</ref> for more information. This may be <computeroutput>NULL</computeroutput> if no cleanup is needed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to configuration data which can be retrieved with <ref refid="ssl_8h_1a374a41575f2f8a478bda3479772f943c" kindref="member">mbedtls_ssl_conf_get_async_config_data()</ref>. The library stores this value without dereferencing it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2739" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2739" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a374a41575f2f8a478bda3479772f943c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mbedtls_ssl_conf_get_async_config_data</definition>
        <argsstring>(const mbedtls_ssl_config *conf)</argsstring>
        <name>mbedtls_ssl_conf_get_async_config_data</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Retrieve the configuration data set by <ref refid="ssl_8h_1a0675aed5a2b2b9ff219a62ed28b50819" kindref="member">mbedtls_ssl_conf_async_private_cb()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The configuration data set by <ref refid="ssl_8h_1a0675aed5a2b2b9ff219a62ed28b50819" kindref="member">mbedtls_ssl_conf_async_private_cb()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2754" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2754" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a7e424db2d8ccc9f0d5fe4ed0a9a5bab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mbedtls_ssl_get_async_operation_data</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_async_operation_data</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Retrieve the asynchronous operation user context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function may only be called while a handshake is in progress.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to access.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The asynchronous operation user context that was last set during the current handshake. If <ref refid="ssl_8h_1ac57fb2abf2a5cd821d0ec8c3d6c59daf" kindref="member">mbedtls_ssl_set_async_operation_data()</ref> has not yet been called during the current handshake, this function returns <computeroutput>NULL</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2770" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2770" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac57fb2abf2a5cd821d0ec8c3d6c59daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_async_operation_data</definition>
        <argsstring>(mbedtls_ssl_context *ssl, void *ctx)</argsstring>
        <name>mbedtls_ssl_set_async_operation_data</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieve the asynchronous operation user context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function may only be called while a handshake is in progress.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to access. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the asynchronous operation user context. Call <ref refid="ssl_8h_1a7e424db2d8ccc9f0d5fe4ed0a9a5bab2" kindref="member">mbedtls_ssl_get_async_operation_data()</ref> later during the same handshake to retrieve this value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2783" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2783" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5865631bc70b4511c25f558d5221fd65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_dtls_cookies</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_ssl_cookie_write_t *f_cookie_write, mbedtls_ssl_cookie_check_t *f_cookie_check, void *p_cookie)</argsstring>
        <name>mbedtls_ssl_conf_dtls_cookies</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a536f8b89936f26732150b00639a47ff0" kindref="member">mbedtls_ssl_cookie_write_t</ref> *</type>
          <declname>f_cookie_write</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a9cfda5aee70d6c2c19a8dfb5af900d80" kindref="member">mbedtls_ssl_cookie_check_t</ref> *</type>
          <declname>f_cookie_check</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_cookie</declname>
        </param>
        <briefdescription>
<para>Register callbacks for DTLS cookies (Server only. DTLS only.) </para>
        </briefdescription>
        <detaileddescription>
<para>Default: dummy callbacks that fail, in order to force you to register working callbacks (and initialize their context).</para>
<para>To disable HelloVerifyRequest, register NULL callbacks.</para>
<para><simplesect kind="warning"><para>Disabling hello verification allows your server to be used for amplification in DoS attacks against other hosts. Only disable if you known this can&apos;t happen in your particular environment.</para>
</simplesect>
<simplesect kind="note"><para>See comments on <computeroutput><ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref></computeroutput> about handling the MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED that is expected on the first handshake attempt when this is enabled.</para>
</simplesect>
<simplesect kind="note"><para>This is also necessary to handle client reconnection from the same port as described in RFC 6347 section 4.2.8 (only the variant with cookies is supported currently). See comments on <computeroutput><ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref></computeroutput> for details.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_cookie_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Cookie write callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_cookie_check</parametername>
</parameternamelist>
<parameterdescription>
<para>Cookie check callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Context for both callbacks </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2851" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2851" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a15fab95c13a898f32fa69ff2065c1051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_client_transport_id</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const unsigned char *info, size_t ilen)</argsstring>
        <name>mbedtls_ssl_set_client_transport_id</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
<para>Set client&apos;s transport-level identification info. (Server only. DTLS only.) </para>
        </briefdescription>
        <detaileddescription>
<para>This is usually the IP address (and port), but could be anything identify the client depending on the underlying network stack. Used for HelloVerifyRequest with DTLS. This is <emphasis>not</emphasis> used to route the actual packets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Transport-level info identifying the client (eg IP + port) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of info in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>An internal copy is made, so the info buffer can be reused.</para>
</simplesect>
<simplesect kind="return"><para>0 on success, MBEDTLS_ERR_SSL_BAD_INPUT_DATA if used on client, MBEDTLS_ERR_SSL_ALLOC_FAILED if out of memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2875" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2875" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a46d919254eafef2ae642fb692c5e560a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_dtls_anti_replay</definition>
        <argsstring>(mbedtls_ssl_config *conf, char mode)</argsstring>
        <name>mbedtls_ssl_conf_dtls_anti_replay</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Enable or disable anti-replay protection for DTLS. (DTLS only, no effect on TLS.) Default: enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>MBEDTLS_SSL_ANTI_REPLAY_ENABLED or MBEDTLS_SSL_ANTI_REPLAY_DISABLED.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Disabling this is a security risk unless the application protocol handles duplicated packets in a safe way. You should not disable this without careful consideration. However, if your application already detects duplicated packets and needs information about them to adjust its transmission strategy, then you&apos;ll want to disable this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2897" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2897" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a9baa37a4b839319d00d8b43c8d266719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_dtls_badmac_limit</definition>
        <argsstring>(mbedtls_ssl_config *conf, unsigned limit)</argsstring>
        <name>mbedtls_ssl_conf_dtls_badmac_limit</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Set a limit on the number of records with a bad MAC before terminating the connection. (DTLS only, no effect on TLS.) Default: 0 (disabled). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit, or 0 to disable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If the limit is N, then the connection is terminated when the Nth non-authentic record is seen.</para>
</simplesect>
<simplesect kind="note"><para>Records with an invalid header are not counted, only the ones going through the authentication-decryption phase.</para>
</simplesect>
<simplesect kind="note"><para>This is a security trade-off related to the fact that it&apos;s often relatively easy for an active attacker to inject UDP datagrams. On one hand, setting a low limit here makes it easier for such an attacker to forcibly terminated a connection. On the other hand, a high limit or no limit might make us waste resources checking authentication on many bogus packets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2923" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2923" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a84238750762b8cf8a6ca25d08efcc1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_datagram_packing</definition>
        <argsstring>(mbedtls_ssl_context *ssl, unsigned allow_packing)</argsstring>
        <name>mbedtls_ssl_set_datagram_packing</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>allow_packing</declname>
        </param>
        <briefdescription>
<para>Allow or disallow packing of multiple handshake records within a single datagram. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to configure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_packing</parametername>
</parameternamelist>
<parameterdescription>
<para>This determines whether datagram packing may be used or not. A value of <computeroutput>0</computeroutput> means that every record will be sent in a separate datagram; a value of <computeroutput>1</computeroutput> means that, if space permits, multiple handshake messages (including CCS) belonging to a single flight may be packed within a single datagram.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is enabled by default and should only be disabled for test purposes, or if datagram packing causes interoperability issues with peers that don&apos;t support it.</para>
</simplesect>
<simplesect kind="note"><para>Allowing datagram packing reduces the network load since there&apos;s less overhead if multiple messages share the same datagram. Also, it increases the handshake efficiency since messages belonging to a single datagram will not be reordered in transit, and so future message buffering or flight retransmission (if no buffering is used) as means to deal with reordering are needed less frequently.</para>
</simplesect>
<simplesect kind="note"><para>Application records are not affected by this option and are currently always sent in separate datagrams. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2955" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2955" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a6625bc4e7ffd535900ef53259cc21651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_handshake_timeout</definition>
        <argsstring>(mbedtls_ssl_config *conf, uint32_t min, uint32_t max)</argsstring>
        <name>mbedtls_ssl_conf_handshake_timeout</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Set retransmit timeout values for the DTLS handshake. (DTLS only, no effect on TLS.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial timeout value in milliseconds. Default: 1000 (1 second). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum timeout value in milliseconds. Default: 60000 (60 seconds).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Default values are from RFC 6347 section 4.2.4.1.</para>
</simplesect>
<simplesect kind="note"><para>The &apos;min&apos; value should typically be slightly above the expected round-trip time to your peer, plus whatever time it takes for the peer to process the message. For example, if your RTT is about 600ms and you peer needs up to 1s to do the cryptographic operations in the handshake, then you should set &apos;min&apos; slightly above 1600. Lower values of &apos;min&apos; might cause spurious resends which waste network resources, while larger value of &apos;min&apos; will increase overall latency on unreliable network links.</para>
</simplesect>
<simplesect kind="note"><para>The more unreliable your network connection is, the larger your max / min ratio needs to be in order to achieve reliable handshakes.</para>
</simplesect>
<simplesect kind="note"><para>Messages are retransmitted up to log2(ceil(max/min)) times. For example, if min = 1s and max = 5s, the retransmit plan goes: send ... 1s -&gt; resend ... 2s -&gt; resend ... 4s -&gt; resend ... 5s -&gt; give up and return a timeout error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="2989" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="2989" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a97c606d9c7ec31bb3078346b6f4d9cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_session_cache</definition>
        <argsstring>(mbedtls_ssl_config *conf, void *p_cache, mbedtls_ssl_cache_get_t *f_get_cache, mbedtls_ssl_cache_set_t *f_set_cache)</argsstring>
        <name>mbedtls_ssl_conf_session_cache</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_cache</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a0ed860c5a383e14f7448e82df1e52e3a" kindref="member">mbedtls_ssl_cache_get_t</ref> *</type>
          <declname>f_get_cache</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1aacaaebff1203d11ba336eac1af7276b8" kindref="member">mbedtls_ssl_cache_set_t</ref> *</type>
          <declname>f_set_cache</declname>
        </param>
        <briefdescription>
<para>Set the session cache callbacks (server-side only) If not set, no session resuming is done (except if session tickets are enabled too). </para>
        </briefdescription>
        <detaileddescription>
<para>The session cache has the responsibility to check for stale entries based on timeout. See RFC 5246 for recommendations.</para>
<para>Warning: session.peer_cert is cleared by the SSL/TLS layer on connection shutdown, so do not cache the pointer! Either set it to NULL or make a full copy of the certificate.</para>
<para>The get callback is called once during the initial handshake to enable session resuming. The get function has the following parameters: (void *parameter, <ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *session) If a valid entry is found, it should fill the master of the session object with the cached values and return 0, return 1 otherwise. Optionally peer_cert can be set as well if it is properly present in cache entry.</para>
<para>The set callback is called once during the initial handshake to enable session resuming after the entire handshake has been finished. The set function has the following parameters: (void *parameter, const <ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *session). The function should create a cache entry for future retrieval based on the data in the session structure and should keep in mind that the <ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> object presented (and all its referenced data) is cleared by the SSL/TLS layer when the connection is terminated. It is recommended to add metadata to determine if an entry is still valid in the future. Return 0 if successfully cached, return 1 otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter (context) for both callbacks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_get_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>session get callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_set_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>session set callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3030" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3030" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a91be5c606b9f7c1e44b3e507a4fe7b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_session</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const mbedtls_ssl_session *session)</argsstring>
        <name>mbedtls_ssl_set_session</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Load a session for session resumption. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            Sessions loaded through this call will be considered
            for session resumption in the next handshake.
</verbatim></para>
<para><simplesect kind="note"><para>Even if this call succeeds, it is not guaranteed that the next handshake will indeed be shortened through the use of session resumption: The server is always free to reject any attempt for resumption and fall back to a full handshake.</para>
</simplesect>
<simplesect kind="note"><para>This function can handle a variety of mechanisms for session resumption: For TLS 1.2, both session ID-based resumption and ticket-based resumption will be considered. For TLS 1.3, once implemented, sessions equate to tickets, and loading one or more sessions via this call will lead to their corresponding tickets being advertised as resumption PSKs by the client.</para>
</simplesect>
<simplesect kind="note"><para>Calling this function multiple times will only be useful once TLS 1.3 is supported. For TLS 1.2 connections, this function should be called at most once.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context representing the connection which should be attempted to be setup using session resumption. This must be initialized via <ref refid="ssl_8h_1a8560dea66d7830a11874188727ec4c45" kindref="member">mbedtls_ssl_init()</ref> and bound to an SSL configuration via <ref refid="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" kindref="member">mbedtls_ssl_setup()</ref>, but the handshake must not yet have been started. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session to be considered for session resumption. This must be a session previously exported via <ref refid="ssl_8h_1ad617a178adfaf259db89c4fe092ad6e1" kindref="member">mbedtls_ssl_get_session()</ref>, and potentially serialized and deserialized through <ref refid="ssl_8h_1a1fa5a82a8c4a33b69578d563e8922dcf" kindref="member">mbedtls_ssl_session_save()</ref> and <ref refid="ssl_8h_1a53026dd189f4abed9ee805d4baefac28" kindref="member">mbedtls_ssl_session_load()</ref> in the meantime.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</computeroutput> if the session could not be loaded because of an implementation limitation. This error is non-fatal, and has no observable effect on the SSL context or the session that was attempted to be loaded. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1ad617a178adfaf259db89c4fe092ad6e1" kindref="member">mbedtls_ssl_get_session()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a53026dd189f4abed9ee805d4baefac28" kindref="member">mbedtls_ssl_session_load()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3082" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3082" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a53026dd189f4abed9ee805d4baefac28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_session_load</definition>
        <argsstring>(mbedtls_ssl_session *session, const unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_session_load</name>
        <param>
          <type><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Load serialized session data into a session structure. On client, this can be used for loading saved sessions before resuming them with <ref refid="ssl_8h_1a91be5c606b9f7c1e44b3e507a4fe7b66" kindref="member">mbedtls_ssl_set_session()</ref>. On server, this can be used for alternative implementations of session cache or session tickets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If a peer certificate chain is associated with the session, the serialized state will only contain the peer&apos;s end-entity certificate and the result of the chain verification (unless verification was disabled), but not the rest of the chain.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a1fa5a82a8c4a33b69578d563e8922dcf" kindref="member">mbedtls_ssl_session_save()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a91be5c606b9f7c1e44b3e507a4fe7b66" kindref="member">mbedtls_ssl_set_session()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session structure to be populated. It must have been initialised with <ref refid="ssl_8h_1a7980469655c1cdb8fd7e966bffe1fd02" kindref="member">mbedtls_ssl_session_init()</ref> but not populated yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the serialized session data. It must be a readable buffer of at least <computeroutput>len</computeroutput> bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the serialized data in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a701ee611f7a16a261b306466c8602177" kindref="member">MBEDTLS_ERR_SSL_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> if input data is invalid. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1af6d4792c6b585d59c1e6479b6d1491e2" kindref="member">MBEDTLS_ERR_SSL_VERSION_MISMATCH</ref> if the serialized data was generated in a different version or configuration of Mbed TLS. </para>
</simplesect>
<simplesect kind="return"><para>Another negative value for other kinds of errors (for example, unsupported features in the embedded certificate). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3117" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3117" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a1fa5a82a8c4a33b69578d563e8922dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_session_save</definition>
        <argsstring>(const mbedtls_ssl_session *session, unsigned char *buf, size_t buf_len, size_t *olen)</argsstring>
        <name>mbedtls_ssl_session_save</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <briefdescription>
<para>Save session structure as serialized data in a buffer. On client, this can be used for saving session data, potentially in non-volatile storage, for resuming later. On server, this can be used for alternative implementations of session cache or session tickets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="ssl_8h_1a53026dd189f4abed9ee805d4baefac28" kindref="member">mbedtls_ssl_session_load()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The session structure to be saved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write the serialized data to. It must be a writeable buffer of at least <computeroutput>buf_len</computeroutput> bytes, or may be <computeroutput>NULL</computeroutput> if <computeroutput>buf_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes available for writing in <computeroutput>buf</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of the data that has been or would have been written. It must point to a valid <computeroutput>size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>olen</computeroutput> is updated to the correct value regardless of whether <computeroutput>buf_len</computeroutput> was large enough. This makes it possible to determine the necessary size by calling this function with <computeroutput>buf</computeroutput> set to <computeroutput>NULL</computeroutput> and <computeroutput>buf_len</computeroutput> to <computeroutput>0</computeroutput>.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1ad7215c366f66035c9b5a60918168e950" kindref="member">MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</ref> if <computeroutput>buf</computeroutput> is too small. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3146" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3146" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac8e4df37cadda8f743ed45501a51fec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_ciphersuites</definition>
        <argsstring>(mbedtls_ssl_config *conf, const int *ciphersuites)</argsstring>
        <name>mbedtls_ssl_conf_ciphersuites</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ciphersuites</declname>
        </param>
        <briefdescription>
<para>Set the list of allowed ciphersuites and the preference order. First in the list has the highest preference. </para>
        </briefdescription>
        <detaileddescription>
<para>For TLS 1.2, the notion of ciphersuite determines both the key exchange mechanism and the suite of symmetric algorithms to be used during and after the handshake.</para>
<para>For TLS 1.3 (in development), the notion of ciphersuite only determines the suite of symmetric algorithms to be used during and after the handshake, while key exchange mechanisms are configured separately.</para>
<para>In Mbed TLS, ciphersuites for both TLS 1.2 and TLS 1.3 are configured via this function. For users of TLS 1.3, there will be separate API for the configuration of key exchange mechanisms.</para>
<para>The list of ciphersuites passed to this function may contain a mixture of TLS 1.2 and TLS 1.3 ciphersuite identifiers. This is useful if negotiation of TLS 1.3 should be attempted, but a fallback to TLS 1.2 would be tolerated.</para>
<para><simplesect kind="note"><para>By default, the server chooses its preferred ciphersuite among those that the client supports. If <ref refid="ssl_8h_1a5d677c775316cc743bf57869a80c5fe8" kindref="member">mbedtls_ssl_conf_preference_order()</ref> is called to prefer the client&apos;s preferences, the server instead chooses the client&apos;s preferred ciphersuite among those that the server supports.</para>
</simplesect>
<simplesect kind="warning"><para>The ciphersuites array <computeroutput>ciphersuites</computeroutput> is not copied. It must remain valid for the lifetime of the SSL configuration <computeroutput>conf</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphersuites</parametername>
</parameternamelist>
<parameterdescription>
<para>A 0-terminated list of IANA identifiers of supported ciphersuites, accessible through <computeroutput>MBEDTLS_TLS_XXX</computeroutput> and <computeroutput>MBEDTLS_TLS1_3_XXX</computeroutput> macros defined in <ref refid="ssl__ciphersuites_8h" kindref="compound">ssl_ciphersuites.h</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3192" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3192" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1af1b755dac4dcda27b59d3a6a0012eed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_tls13_key_exchange_modes</definition>
        <argsstring>(mbedtls_ssl_config *conf, const int kex_modes)</argsstring>
        <name>mbedtls_ssl_conf_tls13_key_exchange_modes</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>kex_modes</declname>
        </param>
        <briefdescription>
<para>Set the supported key exchange modes for TLS 1.3 connections. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   In contrast to TLS 1.2, the ciphersuite concept in TLS 1.3 does not
   include the choice of key exchange mechanism. It is therefore not
   covered by the API mbedtls_ssl_conf_ciphersuites(). See the
   documentation of mbedtls_ssl_conf_ciphersuites() for more
   information on the ciphersuite concept in TLS 1.2 and TLS 1.3.

   The present function is specific to TLS 1.3 and allows users to
   configure the set of supported key exchange mechanisms in TLS 1.3.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration the change should apply to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kex_modes</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitwise combination of one or more of the following:<itemizedlist>
<listitem><para>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK This flag enables pure-PSK key exchanges.</para>
</listitem><listitem><para>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL This flag enables combined PSK-ephemeral key exchanges.</para>
</listitem><listitem><para>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL This flag enables pure-ephemeral key exchanges. For convenience, the following pre-defined macros are available for combinations of the above:</para>
</listitem><listitem><para>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_ALL Includes all of pure-PSK, PSK-ephemeral and pure-ephemeral.</para>
</listitem><listitem><para>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_ALL Includes both pure-PSK and combined PSK-ephemeral key exchanges, but excludes pure-ephemeral key exchanges.</para>
</listitem><listitem><para>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL_ALL Includes both pure-ephemeral and combined PSK-ephemeral key exchanges.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If a PSK-based key exchange mode shall be supported, applications must also use the APIs <ref refid="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" kindref="member">mbedtls_ssl_conf_psk()</ref> or <ref refid="ssl_8h_1a1b804626a236e493316c58b048ab5937" kindref="member">mbedtls_ssl_conf_psk_cb()</ref> or <ref refid="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" kindref="member">mbedtls_ssl_conf_psk_opaque()</ref> to configure the PSKs to be used.</para>
</simplesect>
<simplesect kind="note"><para>If a pure-ephemeral key exchange mode shall be supported, server-side applications must also provide a certificate via <ref refid="ssl_8h_1a4e54e9ace21beb608bae36ddb81a4fb0" kindref="member">mbedtls_ssl_conf_own_cert()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3238" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3238" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a8b3cdd39e60718056f4db139ac85c365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_cid</definition>
        <argsstring>(mbedtls_ssl_config *conf, size_t len, int ignore_other_cids)</argsstring>
        <name>mbedtls_ssl_conf_cid</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ignore_other_cids</declname>
        </param>
        <briefdescription>
<para>Specify the length of Connection IDs for incoming encrypted DTLS records, as well as the behaviour on unexpected CIDs. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, the CID length is set to <computeroutput>0</computeroutput>, and unexpected CIDs are silently ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in Bytes of the CID fields in encrypted DTLS records using the CID mechanism. This must not be larger than <ref refid="ssl_8h_1a17df67385a32a5648a5c3d85777cdc8e" kindref="member">MBEDTLS_SSL_CID_OUT_LEN_MAX</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore_other_cids</parametername>
</parameternamelist>
<parameterdescription>
<para>This determines the stack&apos;s behaviour when receiving a record with an unexpected CID. Possible values are:<itemizedlist>
<listitem><para><ref refid="ssl_8h_1afd5c15d71f8c2b681e5c6ea6b2912461" kindref="member">MBEDTLS_SSL_UNEXPECTED_CID_IGNORE</ref> In this case, the record is silently ignored.</para>
</listitem><listitem><para><ref refid="ssl_8h_1a30269cdf6b9ded752c628287aba9cbad" kindref="member">MBEDTLS_SSL_UNEXPECTED_CID_FAIL</ref> In this case, the stack fails with the specific error code <ref refid="ssl_8h_1ad569d68d0cb64788c9c9eb4a344c25c2" kindref="member">MBEDTLS_ERR_SSL_UNEXPECTED_CID</ref>.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The CID specification allows implementations to either use a common length for all incoming connection IDs or allow variable-length incoming IDs. Mbed TLS currently requires a common length for all connections sharing the same SSL configuration; this allows simpler parsing of record headers.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> if <computeroutput>len</computeroutput> is too large. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3277" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3277" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a76dc3c312ffd51f6d0ca127b322307bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_cert_profile</definition>
        <argsstring>(mbedtls_ssl_config *conf, const mbedtls_x509_crt_profile *profile)</argsstring>
        <name>mbedtls_ssl_conf_cert_profile</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref> *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
<para>Set the X.509 security profile used for verification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The restrictions are enforced for all certificates in the chain. However, signatures in the handshake are not covered by this setting but by <bold><ref refid="ssl_8h_1a20175f0d49dc6fedf474b0b6351f434b" kindref="member">mbedtls_ssl_conf_sig_hashes()</ref></bold>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile</parametername>
</parameternamelist>
<parameterdescription>
<para>Profile to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3292" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3292" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a85c3bb6b682ba361d13de1c0a1eb69fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_ca_chain</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_x509_crt *ca_chain, mbedtls_x509_crl *ca_crl)</argsstring>
        <name>mbedtls_ssl_conf_ca_chain</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>ca_chain</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>ca_crl</declname>
        </param>
        <briefdescription>
<para>Set the data required to verify peer certificate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>See <computeroutput><ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref></computeroutput> for notes regarding the parameters ca_chain (maps to trust_ca for that function) and ca_crl.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_chain</parametername>
</parameternamelist>
<parameterdescription>
<para>trusted CA chain (meaning all fully trusted top-level CAs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_crl</parametername>
</parameternamelist>
<parameterdescription>
<para>trusted CA CRLs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3306" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3306" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a767ba2c8bd54d2d5f74415f73238e8a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_conf_dn_hints</definition>
        <argsstring>(mbedtls_ssl_config *conf, const mbedtls_x509_crt *crt)</argsstring>
        <name>mbedtls_ssl_conf_dn_hints</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <briefdescription>
<para>Set DN hints sent to client in CertificateRequest message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If not set, subject distinguished names (DNs) are taken from <computeroutput><ref refid="ssl_8h_1a85c3bb6b682ba361d13de1c0a1eb69fb" kindref="member">mbedtls_ssl_conf_ca_chain()</ref></computeroutput> or <computeroutput><ref refid="ssl_8h_1a33a781dcdc16bd649ea0346a598e9656" kindref="member">mbedtls_ssl_set_hs_ca_chain()</ref></computeroutput>)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>crt chain whose subject DNs are issuer DNs of client certs from which the client should select client peer certificate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3323" column="6" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="3323" bodyend="3327"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aaff29509e19ba559c9228e4ee8a49e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_ca_cb</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_x509_crt_ca_cb_t f_ca_cb, void *p_ca_cb)</argsstring>
        <name>mbedtls_ssl_conf_ca_cb</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="group__x509__module_1ga76b0dd21c9c8ab66a4577e8bd5afa736" kindref="member">mbedtls_x509_crt_ca_cb_t</ref></type>
          <declname>f_ca_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_ca_cb</declname>
        </param>
        <briefdescription>
<para>Set the trusted certificate callback. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            This API allows to register the set of trusted certificates
            through a callback, instead of a linked list as configured
            by mbedtls_ssl_conf_ca_chain().

            This is useful for example in contexts where a large number
            of CAs are used, and the inefficiency of maintaining them
            in a linked list cannot be tolerated. It is also useful when
            the set of trusted CAs needs to be modified frequently.

            See the documentation of `mbedtls_x509_crt_ca_cb_t` for
            more information.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to register the callback with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_ca_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The trusted certificate callback to use when verifying certificate chains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ca_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be passed to <computeroutput>f_ca_cb</computeroutput> (for example, a reference to a trusted CA database).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This API is incompatible with <ref refid="ssl_8h_1a85c3bb6b682ba361d13de1c0a1eb69fb" kindref="member">mbedtls_ssl_conf_ca_chain()</ref>: Any call to this function overwrites the values set through earlier calls to <ref refid="ssl_8h_1a85c3bb6b682ba361d13de1c0a1eb69fb" kindref="member">mbedtls_ssl_conf_ca_chain()</ref> or <ref refid="ssl_8h_1aaff29509e19ba559c9228e4ee8a49e32" kindref="member">mbedtls_ssl_conf_ca_cb()</ref>.</para>
</simplesect>
<simplesect kind="note"><para>This API is incompatible with CA indication in CertificateRequest messages: A server-side SSL context which is bound to an SSL configuration that uses a CA callback configured via <ref refid="ssl_8h_1aaff29509e19ba559c9228e4ee8a49e32" kindref="member">mbedtls_ssl_conf_ca_cb()</ref>, and which requires client authentication, will send an empty CA list in the corresponding CertificateRequest message.</para>
</simplesect>
<simplesect kind="note"><para>This API is incompatible with <ref refid="ssl_8h_1a33a781dcdc16bd649ea0346a598e9656" kindref="member">mbedtls_ssl_set_hs_ca_chain()</ref>: If an SSL context is bound to an SSL configuration which uses CA callbacks configured via <ref refid="ssl_8h_1aaff29509e19ba559c9228e4ee8a49e32" kindref="member">mbedtls_ssl_conf_ca_cb()</ref>, then calls to <ref refid="ssl_8h_1a33a781dcdc16bd649ea0346a598e9656" kindref="member">mbedtls_ssl_set_hs_ca_chain()</ref> have no effect.</para>
</simplesect>
<simplesect kind="note"><para>The use of this API disables the use of restartable ECC during X.509 CRT signature verification (but doesn&apos;t affect other uses).</para>
</simplesect>
<simplesect kind="warning"><para>This API is incompatible with the use of CRLs. Any call to <ref refid="ssl_8h_1aaff29509e19ba559c9228e4ee8a49e32" kindref="member">mbedtls_ssl_conf_ca_cb()</ref> unsets CRLs configured through earlier calls to <ref refid="ssl_8h_1a85c3bb6b682ba361d13de1c0a1eb69fb" kindref="member">mbedtls_ssl_conf_ca_chain()</ref>.</para>
</simplesect>
<simplesect kind="warning"><para>In multi-threaded environments, the callback <computeroutput>f_ca_cb</computeroutput> must be thread-safe, and it is the user&apos;s responsibility to guarantee this (for example through a mutex contained in the callback context pointed to by <computeroutput>p_ca_cb</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3382" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3382" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a4e54e9ace21beb608bae36ddb81a4fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_own_cert</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_x509_crt *own_cert, mbedtls_pk_context *pk_key)</argsstring>
        <name>mbedtls_ssl_conf_own_cert</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>own_cert</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>pk_key</declname>
        </param>
        <briefdescription>
<para>Set own certificate chain and private key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>own_cert should contain in order from the bottom up your certificate chain. The top certificate (self-signed) can be omitted.</para>
</simplesect>
<simplesect kind="note"><para>On server, this function can be called multiple times to provision more than one cert/key pair (eg one ECDSA, one RSA with SHA-256, one RSA with SHA-1). An adequate certificate will be selected according to the client&apos;s advertised capabilities. In case multiple certificates are adequate, preference is given to the one set by the first call to this function, then second, etc.</para>
</simplesect>
<simplesect kind="note"><para>On client, only the first call has any effect. That is, only one client certificate can be provisioned. The server&apos;s preferences in its CertificateRequest message will be ignored and our only cert will be sent regardless of whether it matches those preferences - the server can then decide what it wants to do with it.</para>
</simplesect>
<simplesect kind="note"><para>The provided <computeroutput>pk_key</computeroutput> needs to match the public key in the first certificate in <computeroutput>own_cert</computeroutput>, or all handshakes using that certificate will fail. It is your responsibility to ensure that; this function will not perform any check. You may use <ref refid="pk_8h_1a1296db060fd790f713a73a6cb23197e8" kindref="member">mbedtls_pk_check_pair()</ref> in order to perform this check yourself, but be aware that this function can be computationally expensive on some key types.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>own_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>own public certificate chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk_key</parametername>
</parameternamelist>
<parameterdescription>
<para>own private key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or MBEDTLS_ERR_SSL_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3423" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3423" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_psk</definition>
        <argsstring>(mbedtls_ssl_config *conf, const unsigned char *psk, size_t psk_len, const unsigned char *psk_identity, size_t psk_identity_len)</argsstring>
        <name>mbedtls_ssl_conf_psk</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>psk</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>psk_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>psk_identity</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>psk_identity_len</declname>
        </param>
        <briefdescription>
<para>Configure pre-shared keys (PSKs) and their identities to be used in PSK-based ciphersuites. </para>
        </briefdescription>
        <detaileddescription>
<para>Only one PSK can be registered, through either <ref refid="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" kindref="member">mbedtls_ssl_conf_psk()</ref> or <ref refid="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" kindref="member">mbedtls_ssl_conf_psk_opaque()</ref>. If you attempt to register more than one PSK, this function fails, though this may change in future versions, which may add support for multiple PSKs.</para>
<para><simplesect kind="note"><para>This is mainly useful for clients. Servers will usually want to use <computeroutput><ref refid="ssl_8h_1a1b804626a236e493316c58b048ab5937" kindref="member">mbedtls_ssl_conf_psk_cb()</ref></computeroutput> instead.</para>
</simplesect>
<simplesect kind="note"><para>A PSK set by <computeroutput><ref refid="ssl_8h_1a50f8bb06a3ec75f6fec4ccc2c1aad151" kindref="member">mbedtls_ssl_set_hs_psk()</ref></computeroutput> in the PSK callback takes precedence over a PSK configured by this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to register the PSK with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the pre-shared key to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the pre-shared key in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk_identity</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the pre-shared key identity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk_identity_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the pre-shared key identity in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The PSK and its identity are copied internally and hence need not be preserved by the caller for the lifetime of the SSL configuration.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1aea8b7e95c7e547959c10e9cad5f46043" kindref="member">MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</ref> if no more PSKs can be configured. In this case, the old PSK(s) remain intact. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3461" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3461" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_psk_opaque</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_svc_key_id_t psk, const unsigned char *psk_identity, size_t psk_identity_len)</argsstring>
        <name>mbedtls_ssl_conf_psk_opaque</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>psk</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>psk_identity</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>psk_identity_len</declname>
        </param>
        <briefdescription>
<para>Configure one or more opaque pre-shared keys (PSKs) and their identities to be used in PSK-based ciphersuites. </para>
        </briefdescription>
        <detaileddescription>
<para>Only one PSK can be registered, through either <ref refid="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" kindref="member">mbedtls_ssl_conf_psk()</ref> or <ref refid="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" kindref="member">mbedtls_ssl_conf_psk_opaque()</ref>. If you attempt to register more than one PSK, this function fails, though this may change in future versions, which may add support for multiple PSKs.</para>
<para><simplesect kind="note"><para>This is mainly useful for clients. Servers will usually want to use <computeroutput><ref refid="ssl_8h_1a1b804626a236e493316c58b048ab5937" kindref="member">mbedtls_ssl_conf_psk_cb()</ref></computeroutput> instead.</para>
</simplesect>
<simplesect kind="note"><para>An opaque PSK set by <computeroutput><ref refid="ssl_8h_1a05facf7eea954b48d1be171d1bd6cbe9" kindref="member">mbedtls_ssl_set_hs_psk_opaque()</ref></computeroutput> in the PSK callback takes precedence over an opaque PSK configured by this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to register the PSK with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key slot holding the PSK. Until <computeroutput>conf</computeroutput> is destroyed or this function is successfully called again, the key slot <computeroutput>psk</computeroutput> must be populated with a key of type PSA_ALG_CATEGORY_KEY_DERIVATION whose policy allows its use for the key derivation algorithm applied in the handshake. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk_identity</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the pre-shared key identity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk_identity_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the pre-shared key identity in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The PSK identity hint is copied internally and hence need not be preserved by the caller for the lifetime of the SSL configuration.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1aea8b7e95c7e547959c10e9cad5f46043" kindref="member">MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</ref> if no more PSKs can be configured. In this case, the old PSK(s) remain intact. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3503" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3503" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a50f8bb06a3ec75f6fec4ccc2c1aad151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_hs_psk</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const unsigned char *psk, size_t psk_len)</argsstring>
        <name>mbedtls_ssl_set_hs_psk</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>psk</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>psk_len</declname>
        </param>
        <briefdescription>
<para>Set the pre-shared Key (PSK) for the current handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This should only be called inside the PSK callback, i.e. the function passed to <computeroutput><ref refid="ssl_8h_1a1b804626a236e493316c58b048ab5937" kindref="member">mbedtls_ssl_conf_psk_cb()</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>A PSK set by this function takes precedence over a PSK configured by <computeroutput><ref refid="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" kindref="member">mbedtls_ssl_conf_psk()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to configure a PSK for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the pre-shared key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the pre-shared key in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_SSL_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3525" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3525" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a05facf7eea954b48d1be171d1bd6cbe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_hs_psk_opaque</definition>
        <argsstring>(mbedtls_ssl_context *ssl, mbedtls_svc_key_id_t psk)</argsstring>
        <name>mbedtls_ssl_set_hs_psk_opaque</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>psk</declname>
        </param>
        <briefdescription>
<para>Set an opaque pre-shared Key (PSK) for the current handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This should only be called inside the PSK callback, i.e. the function passed to <computeroutput><ref refid="ssl_8h_1a1b804626a236e493316c58b048ab5937" kindref="member">mbedtls_ssl_conf_psk_cb()</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>An opaque PSK set by this function takes precedence over an opaque PSK configured by <computeroutput><ref refid="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" kindref="member">mbedtls_ssl_conf_psk_opaque()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to configure a PSK for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key slot holding the PSK. For the duration of the current handshake, the key slot must be populated with a key of type PSA_ALG_CATEGORY_KEY_DERIVATION whose policy allows its use for the key derivation algorithm applied in the handshake.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_SSL_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3549" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3549" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a1b804626a236e493316c58b048ab5937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_psk_cb</definition>
        <argsstring>(mbedtls_ssl_config *conf, int(*f_psk)(void *, mbedtls_ssl_context *, const unsigned char *, size_t), void *p_psk)</argsstring>
        <name>mbedtls_ssl_conf_psk_cb</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *, const unsigned char *, size_t)</type>
          <declname>f_psk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_psk</declname>
        </param>
        <briefdescription>
<para>Set the PSK callback (server-side only). </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            If set, the PSK callback is called for each
            handshake where a PSK-based ciphersuite was negotiated.
            The caller provides the identity received and wants to
            receive the actual PSK data and length.

            The callback has the following parameters:
            - \c void*: The opaque pointer \p p_psk.
            - \c mbedtls_ssl_context*: The SSL context to which
                                       the operation applies.
            - \c const unsigned char*: The PSK identity
                                       selected by the client.
            - \c size_t: The length of the PSK identity
                         selected by the client.

            If a valid PSK identity is found, the callback should use
            \c mbedtls_ssl_set_hs_psk() or
            \c mbedtls_ssl_set_hs_psk_opaque()
            on the SSL context to set the correct PSK and return \c 0.
            Any other return value will result in a denied PSK identity.
</verbatim></para>
<para><simplesect kind="note"><para>A dynamic PSK (i.e. set by the PSK callback) takes precedence over a static PSK (i.e. set by <computeroutput><ref refid="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" kindref="member">mbedtls_ssl_conf_psk()</ref></computeroutput> or <computeroutput><ref refid="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" kindref="member">mbedtls_ssl_conf_psk_opaque()</ref></computeroutput>). This means that if you set a PSK callback using this function, you don&apos;t need to set a PSK using <computeroutput><ref refid="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" kindref="member">mbedtls_ssl_conf_psk()</ref></computeroutput> or <computeroutput><ref refid="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" kindref="member">mbedtls_ssl_conf_psk_opaque()</ref></computeroutput>).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to register the callback with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_psk</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback for selecting and setting the PSK based in the PSK identity chosen by the client. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_psk</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an opaque structure to be passed to the callback, for example a PSK store. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3592" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3592" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a457078c76cf96c9696fd226c8efe0674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_dh_param_bin</definition>
        <argsstring>(mbedtls_ssl_config *conf, const unsigned char *dhm_P, size_t P_len, const unsigned char *dhm_G, size_t G_len)</argsstring>
        <name>mbedtls_ssl_conf_dh_param_bin</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>dhm_P</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>P_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>dhm_G</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>G_len</declname>
        </param>
        <briefdescription>
<para>Set the Diffie-Hellman public P and G values from big-endian binary presentations. (Default values: MBEDTLS_DHM_RFC3526_MODP_2048_[PG]_BIN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhm_P</parametername>
</parameternamelist>
<parameterdescription>
<para>Diffie-Hellman-Merkle modulus in big-endian binary form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of DHM modulus </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhm_G</parametername>
</parameternamelist>
<parameterdescription>
<para>Diffie-Hellman-Merkle generator in big-endian binary form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>G_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of DHM generator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3613" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3613" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aec6d67681da3a0d5cb259137af176d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_dh_param_ctx</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_dhm_context *dhm_ctx)</argsstring>
        <name>mbedtls_ssl_conf_dh_param_ctx</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__dhm__context" kindref="compound">mbedtls_dhm_context</ref> *</type>
          <declname>dhm_ctx</declname>
        </param>
        <briefdescription>
<para>Set the Diffie-Hellman public P and G values, read from existing context (server-side only) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhm_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Diffie-Hellman-Merkle context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3626" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3626" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a9dd56f07a798d344dba5bcf33376edfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_dhm_min_bitlen</definition>
        <argsstring>(mbedtls_ssl_config *conf, unsigned int bitlen)</argsstring>
        <name>mbedtls_ssl_conf_dhm_min_bitlen</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>bitlen</declname>
        </param>
        <briefdescription>
<para>Set the minimum length for Diffie-Hellman parameters. (Client-side only.) (Default: 1024 bits.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum bit length of the DHM prime </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3638" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3638" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa5f57bc7af0a5584764ef083be319c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref></type>
        <definition>void MBEDTLS_DEPRECATED mbedtls_ssl_conf_curves</definition>
        <argsstring>(mbedtls_ssl_config *conf, const mbedtls_ecp_group_id *curves)</argsstring>
        <name>mbedtls_ssl_conf_curves</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const <ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref> *</type>
          <declname>curves</declname>
        </param>
        <briefdescription>
<para>Set the allowed curves in order of preference. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            On server: this only affects selection of the ECDHE curve;
            the curves used for ECDH and ECDSA are determined by the
            list of available certificates instead.

            On client: this affects the list of curves offered for any
            use. The server can override our preference order.

            Both sides: limits the set of curves accepted for use in
            ECDHE and in the peer&apos;s end-entity certificate.
</verbatim></para>
<para><xrefsect id="deprecated_1_deprecated000010"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Superseded by <ref refid="ssl_8h_1aa9101dc3ad40fc232ac5de4f163b15ab" kindref="member">mbedtls_ssl_conf_groups()</ref>.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>This has no influence on which curves are allowed inside the certificate chains, see <computeroutput><ref refid="ssl_8h_1a76dc3c312ffd51f6d0ca127b322307bb" kindref="member">mbedtls_ssl_conf_cert_profile()</ref></computeroutput> for that. For the end-entity certificate however, the key will be accepted only if it is allowed both by this list and by the cert profile.</para>
</simplesect>
<simplesect kind="note"><para>This list should be ordered by decreasing preference (preferred curve first).</para>
</simplesect>
<simplesect kind="note"><para>The default list is the same set of curves that <ref refid="group__x509__module_1ga9cd2de10ffeff0f339abcc1ba7e26fdf" kindref="member">mbedtls_x509_crt_profile_default</ref> allows, plus ECDHE-only curves selected according to the same criteria. The order favors curves with the lowest resource usage.</para>
</simplesect>
<simplesect kind="note"><para>New minor versions of Mbed TLS may extend this list, for example if new curves are added to the library. New minor versions of Mbed TLS will not remove items from this list unless serious security concerns require it. New minor versions of Mbed TLS may change the order in keeping with the general principle of favoring the lowest resource usage.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curves</parametername>
</parameternamelist>
<parameterdescription>
<para>Ordered list of allowed curves, terminated by MBEDTLS_ECP_DP_NONE. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3685" column="25" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3685" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa9101dc3ad40fc232ac5de4f163b15ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_groups</definition>
        <argsstring>(mbedtls_ssl_config *conf, const uint16_t *groups)</argsstring>
        <name>mbedtls_ssl_conf_groups</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>groups</declname>
        </param>
        <briefdescription>
<para>Set the allowed groups in order of preference. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            On server: This only affects the choice of key agreement mechanism

            On client: this affects the list of groups offered for any
            use. The server can override our preference order.

            Both sides: limits the set of groups accepted for use in
            key sharing.
</verbatim></para>
<para><simplesect kind="note"><para>This function replaces the deprecated <ref refid="ssl_8h_1aa5f57bc7af0a5584764ef083be319c7e" kindref="member">mbedtls_ssl_conf_curves()</ref>, which only allows ECP curves to be configured.</para>
</simplesect>
<simplesect kind="note"><para>The most recent invocation of either <ref refid="ssl_8h_1aa5f57bc7af0a5584764ef083be319c7e" kindref="member">mbedtls_ssl_conf_curves()</ref> or <ref refid="ssl_8h_1aa9101dc3ad40fc232ac5de4f163b15ab" kindref="member">mbedtls_ssl_conf_groups()</ref> nullifies all previous invocations of both.</para>
</simplesect>
<simplesect kind="note"><para>This list should be ordered by decreasing preference (preferred group first).</para>
</simplesect>
<simplesect kind="note"><para>When this function is not called, a default list is used, consisting of all supported curves at 255 bits and above, and all supported finite fields at 2048 bits and above. The order favors groups with the lowest resource usage.</para>
</simplesect>
<simplesect kind="note"><para>New minor versions of Mbed TLS will not remove items from the default list unless serious security concerns require it. New minor versions of Mbed TLS may change the order in keeping with the general principle of favoring the lowest resource usage.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groups</parametername>
</parameternamelist>
<parameterdescription>
<para>List of allowed groups ordered by preference, terminated by 0. Must contain valid IANA NamedGroup IDs (provided via either an integer or using MBEDTLS_TLS1_3_NAMED_GROUP_XXX macros). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3727" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3727" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a20175f0d49dc6fedf474b0b6351f434b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref></type>
        <definition>void MBEDTLS_DEPRECATED mbedtls_ssl_conf_sig_hashes</definition>
        <argsstring>(mbedtls_ssl_config *conf, const int *hashes)</argsstring>
        <name>mbedtls_ssl_conf_sig_hashes</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>hashes</declname>
        </param>
        <briefdescription>
<para>Set the allowed hashes for signatures during the handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This only affects which hashes are offered and can be used for signatures during the handshake. Hashes for message authentication and the TLS PRF are controlled by the ciphersuite, see <computeroutput><ref refid="ssl_8h_1ac8e4df37cadda8f743ed45501a51fec1" kindref="member">mbedtls_ssl_conf_ciphersuites()</ref></computeroutput>. Hashes used for certificate signature are controlled by the verification profile, see <computeroutput><ref refid="ssl_8h_1a76dc3c312ffd51f6d0ca127b322307bb" kindref="member">mbedtls_ssl_conf_cert_profile()</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>This list should be ordered by decreasing preference (preferred hash first).</para>
</simplesect>
<simplesect kind="note"><para>By default, all supported hashes whose length is at least 256 bits are allowed. This is the same set as the default for certificate verification (<ref refid="group__x509__module_1ga9cd2de10ffeff0f339abcc1ba7e26fdf" kindref="member">mbedtls_x509_crt_profile_default</ref>). The preference order is currently unspecified and may change in future versions.</para>
</simplesect>
<simplesect kind="note"><para>New minor versions of Mbed TLS may extend this list, for example if new curves are added to the library. New minor versions of Mbed TLS will not remove items from this list unless serious security concerns require it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashes</parametername>
</parameternamelist>
<parameterdescription>
<para>Ordered list of allowed signature hashes, terminated by <computeroutput>MBEDTLS_MD_NONE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3761" column="25" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3761" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a6cb9455721f800026271b795844265a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_sig_algs</definition>
        <argsstring>(mbedtls_ssl_config *conf, const uint16_t *sig_algs)</argsstring>
        <name>mbedtls_ssl_conf_sig_algs</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>sig_algs</declname>
        </param>
        <briefdescription>
<para>Configure allowed signature algorithms for use in TLS 1.3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_algs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of allowed IANA values for TLS 1.3 signature algorithms, terminated by <computeroutput>MBEDTLS_TLS1_3_SIG_NONE</computeroutput>. The list must remain available throughout the lifetime of the conf object. Supported values are available as <computeroutput>MBEDTLS_TLS1_3_SIG_XXXX</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3774" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3774" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa659024cf89e20d6d2248c0626db7ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_hostname</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const char *hostname)</argsstring>
        <name>mbedtls_ssl_set_hostname</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>hostname</declname>
        </param>
        <briefdescription>
<para>Set or reset the hostname to check against the received server certificate. It sets the ServerName TLS extension, too, if that extension is enabled. (client-side only) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>the server hostname, may be NULL to clear hostname</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Maximum hostname length MBEDTLS_SSL_MAX_HOST_NAME_LEN.</para>
</simplesect>
<simplesect kind="return"><para>0 if successful, MBEDTLS_ERR_SSL_ALLOC_FAILED on allocation failure, MBEDTLS_ERR_SSL_BAD_INPUT_DATA on too long input hostname.</para>
</simplesect>
Hostname set to the one provided on success (cleared when NULL). On allocation failure hostname is cleared. On too long input failure, old hostname is unchanged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3797" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3797" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a9a830459dbac8aa7955d16aa3e8325e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* mbedtls_ssl_get_hostname</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_hostname</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Get the hostname that checked against the received server certificate. It is used to set the ServerName TLS extension, too, if that extension is enabled. (client-side only) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const pointer to the hostname value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3809" column="26" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="3809" bodyend="3812"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aadce27d91f422f8f6fbd8c96a7cd0ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* mbedtls_ssl_get_hs_sni</definition>
        <argsstring>(mbedtls_ssl_context *ssl, size_t *name_len)</argsstring>
        <name>mbedtls_ssl_get_hs_sni</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>name_len</declname>
        </param>
        <briefdescription>
<para>Retrieve SNI extension value for the current handshake. Available in <computeroutput>f_cert_cb</computeroutput> of <computeroutput><ref refid="ssl_8h_1a49e226cbc25b3da56a71d4ba057a48be" kindref="member">mbedtls_ssl_conf_cert_cb()</ref></computeroutput>, this is the same value passed to <computeroutput>f_sni</computeroutput> callback of <computeroutput><ref refid="ssl_8h_1a38ee2c1e3f232444df5ba3952d7ded33" kindref="member">mbedtls_ssl_conf_sni()</ref></computeroutput> and may be used instead of <computeroutput><ref refid="ssl_8h_1a38ee2c1e3f232444df5ba3952d7ded33" kindref="member">mbedtls_ssl_conf_sni()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_len</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer into which to store length of returned value. 0 if SNI extension is not present or not yet processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const pointer to SNI extension value.<itemizedlist>
<listitem><para>value is valid only when called in <computeroutput>f_cert_cb</computeroutput> registered with <computeroutput><ref refid="ssl_8h_1a49e226cbc25b3da56a71d4ba057a48be" kindref="member">mbedtls_ssl_conf_cert_cb()</ref></computeroutput>.</para>
</listitem><listitem><para>value is NULL if SNI extension is not present.</para>
</listitem><listitem><para>value is not &apos;\0&apos;-terminated. Use <computeroutput>name_len</computeroutput> for len.</para>
</listitem><listitem><para>value must not be freed. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3834" column="21" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3834" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa0353666974b1cd19dafb2c2b165d2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_hs_own_cert</definition>
        <argsstring>(mbedtls_ssl_context *ssl, mbedtls_x509_crt *own_cert, mbedtls_pk_context *pk_key)</argsstring>
        <name>mbedtls_ssl_set_hs_own_cert</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>own_cert</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>pk_key</declname>
        </param>
        <briefdescription>
<para>Set own certificate and key for the current handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Same as <computeroutput><ref refid="ssl_8h_1a4e54e9ace21beb608bae36ddb81a4fb0" kindref="member">mbedtls_ssl_conf_own_cert()</ref></computeroutput> but for use within the SNI callback or the certificate selection callback.</para>
</simplesect>
<simplesect kind="note"><para>Passing null <computeroutput>own_cert</computeroutput> clears the certificate list for the current handshake.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>own_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>own public certificate chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk_key</parametername>
</parameternamelist>
<parameterdescription>
<para>own private key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or MBEDTLS_ERR_SSL_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3852" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3852" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a33a781dcdc16bd649ea0346a598e9656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_hs_ca_chain</definition>
        <argsstring>(mbedtls_ssl_context *ssl, mbedtls_x509_crt *ca_chain, mbedtls_x509_crl *ca_crl)</argsstring>
        <name>mbedtls_ssl_set_hs_ca_chain</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>ca_chain</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>ca_crl</declname>
        </param>
        <briefdescription>
<para>Set the data required to verify peer certificate for the current handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Same as <computeroutput><ref refid="ssl_8h_1a85c3bb6b682ba361d13de1c0a1eb69fb" kindref="member">mbedtls_ssl_conf_ca_chain()</ref></computeroutput> but for use within the SNI callback or the certificate selection callback.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_chain</parametername>
</parameternamelist>
<parameterdescription>
<para>trusted CA chain (meaning all fully trusted top-level CAs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_crl</parametername>
</parameternamelist>
<parameterdescription>
<para>trusted CA CRLs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3867" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3867" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a087cbd7a4eb0532fee61c4002a5d9fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_hs_dn_hints</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const mbedtls_x509_crt *crt)</argsstring>
        <name>mbedtls_ssl_set_hs_dn_hints</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <briefdescription>
<para>Set DN hints sent to client in CertificateRequest message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Same as <computeroutput><ref refid="ssl_8h_1a767ba2c8bd54d2d5f74415f73238e8a6" kindref="member">mbedtls_ssl_conf_dn_hints()</ref></computeroutput> but for use within the SNI callback or the certificate selection callback.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>crt chain whose subject DNs are issuer DNs of client certs from which the client should select client peer certificate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3882" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3882" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a8366b49e25054078b5be139c0ce560d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_set_hs_authmode</definition>
        <argsstring>(mbedtls_ssl_context *ssl, int authmode)</argsstring>
        <name>mbedtls_ssl_set_hs_authmode</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>authmode</declname>
        </param>
        <briefdescription>
<para>Set authmode for the current handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Same as <computeroutput><ref refid="ssl_8h_1a5695285c9dbfefec295012b566290f37" kindref="member">mbedtls_ssl_conf_authmode()</ref></computeroutput> but for use within the SNI callback or the certificate selection callback.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>authmode</parametername>
</parameternamelist>
<parameterdescription>
<para>MBEDTLS_SSL_VERIFY_NONE, MBEDTLS_SSL_VERIFY_OPTIONAL or MBEDTLS_SSL_VERIFY_REQUIRED </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3896" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3896" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a38ee2c1e3f232444df5ba3952d7ded33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_sni</definition>
        <argsstring>(mbedtls_ssl_config *conf, int(*f_sni)(void *, mbedtls_ssl_context *, const unsigned char *, size_t), void *p_sni)</argsstring>
        <name>mbedtls_ssl_conf_sni</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *, const unsigned char *, size_t)</type>
          <declname>f_sni</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_sni</declname>
        </param>
        <briefdescription>
<para>Set server side ServerName TLS extension callback (optional, server-side only). </para>
        </briefdescription>
        <detaileddescription>
<para>If set, the ServerName callback is called whenever the server receives a ServerName TLS extension from the client during a handshake. The ServerName callback has the following parameters: (void *parameter, <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *ssl, const unsigned char *hostname, size_t len). If a suitable certificate is found, the callback must set the certificate(s) and key(s) to use with <computeroutput><ref refid="ssl_8h_1aa0353666974b1cd19dafb2c2b165d2f2" kindref="member">mbedtls_ssl_set_hs_own_cert()</ref></computeroutput> (can be called repeatedly), and may optionally adjust the CA and associated CRL with <computeroutput><ref refid="ssl_8h_1a33a781dcdc16bd649ea0346a598e9656" kindref="member">mbedtls_ssl_set_hs_ca_chain()</ref></computeroutput> as well as the client authentication mode with <computeroutput><ref refid="ssl_8h_1a8366b49e25054078b5be139c0ce560d7" kindref="member">mbedtls_ssl_set_hs_authmode()</ref></computeroutput>, then must return 0. If no matching name is found, the callback may return non-zero to abort the handshake.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_sni</parametername>
</parameternamelist>
<parameterdescription>
<para>verification function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_sni</parametername>
</parameternamelist>
<parameterdescription>
<para>verification parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3921" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3921" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a36ec09a4ebfcc3676807a0c83985bf15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_hs_ecjpake_password</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const unsigned char *pw, size_t pw_len)</argsstring>
        <name>mbedtls_ssl_set_hs_ecjpake_password</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pw</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pw_len</declname>
        </param>
        <briefdescription>
<para>Set the EC J-PAKE password for current handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>An internal copy is made, and destroyed as soon as the handshake is completed, or when the SSL context is reset or freed.</para>
</simplesect>
<simplesect kind="note"><para>The SSL context needs to be already set up. The right place to call this function is between <computeroutput><ref refid="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" kindref="member">mbedtls_ssl_setup()</ref></computeroutput> or <computeroutput>mbedtls_ssl_reset()</computeroutput> and <computeroutput><ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref></computeroutput>. Password cannot be empty (see RFC 8236).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pw</parametername>
</parameternamelist>
<parameterdescription>
<para>EC J-PAKE password (pre-shared secret). It cannot be empty </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pw_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of pw in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3946" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3946" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a0b92805cc9e755124177fc926daff5ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_set_hs_ecjpake_password_opaque</definition>
        <argsstring>(mbedtls_ssl_context *ssl, mbedtls_svc_key_id_t pwd)</argsstring>
        <name>mbedtls_ssl_set_hs_ecjpake_password_opaque</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>pwd</declname>
        </param>
        <briefdescription>
<para>Set the EC J-PAKE opaque password for current handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The key must remain valid until the handshake is over.</para>
</simplesect>
<simplesect kind="note"><para>The SSL context needs to be already set up. The right place to call this function is between <computeroutput><ref refid="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" kindref="member">mbedtls_ssl_setup()</ref></computeroutput> or <computeroutput>mbedtls_ssl_reset()</computeroutput> and <computeroutput><ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwd</parametername>
</parameternamelist>
<parameterdescription>
<para>EC J-PAKE opaque password</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3964" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3964" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ae21135dddd89b2ef273c13e140097f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_alpn_protocols</definition>
        <argsstring>(mbedtls_ssl_config *conf, const char **protos)</argsstring>
        <name>mbedtls_ssl_conf_alpn_protocols</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>protos</declname>
        </param>
        <briefdescription>
<para>Set the supported Application Layer Protocols. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protos</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a NULL-terminated list of supported protocols, in decreasing preference order. The pointer to the list is recorded by the library for later reference as required, so the lifetime of the table must be at least as long as the lifetime of the SSL configuration structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or MBEDTLS_ERR_SSL_BAD_INPUT_DATA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3981" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3981" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ad1ab606db1a9307b4aacccdcd1d1a6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mbedtls_ssl_get_alpn_protocol</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_alpn_protocol</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Get the name of the negotiated Application Layer Protocol. This function should be called after the handshake is completed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Protocol name, or NULL if no protocol was negotiated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3992" column="12" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="3992" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a439e726a9ed64a6737831cbe4126f35c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* mbedtls_ssl_get_srtp_profile_as_string</definition>
        <argsstring>(mbedtls_ssl_srtp_profile profile)</argsstring>
        <name>mbedtls_ssl_get_srtp_profile_as_string</name>
        <param>
          <type><ref refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" kindref="member">mbedtls_ssl_srtp_profile</ref></type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="3997" column="26" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="3997" bodyend="4011"/>
        <references refid="ssl_8h_1ab92698fa5b18c274b85c36445a2ac046" compoundref="ssl_8h" startline="1149">MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32</references>
        <references refid="ssl_8h_1acbe1cbb11fee2c0b6ef767f2bc4ff413" compoundref="ssl_8h" startline="1148">MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80</references>
        <references refid="ssl_8h_1a45f60d4d23068a07c1938b410a7887af" compoundref="ssl_8h" startline="1151">MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_32</references>
        <references refid="ssl_8h_1a3b5987dbe37a7398ea13c24f57e1e23c" compoundref="ssl_8h" startline="1150">MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_80</references>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a68839316ac505aed63bccc0f57164e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_srtp_mki_value_supported</definition>
        <argsstring>(mbedtls_ssl_config *conf, int support_mki_value)</argsstring>
        <name>mbedtls_ssl_conf_srtp_mki_value_supported</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>support_mki_value</declname>
        </param>
        <briefdescription>
<para>Manage support for mki(master key id) value in use_srtp extension. MKI is an optional part of SRTP used for key management and re-keying. See RFC3711 section 3.1 for details. The default value is <ref refid="ssl_8h_1ab94daf7f8fddc9293ff6a078179ba727" kindref="member">MBEDTLS_SSL_DTLS_SRTP_MKI_UNSUPPORTED</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL configuration to manage mki support. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>support_mki_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable or disable mki usage. Values are <ref refid="ssl_8h_1ab94daf7f8fddc9293ff6a078179ba727" kindref="member">MBEDTLS_SSL_DTLS_SRTP_MKI_UNSUPPORTED</ref> or <ref refid="ssl_8h_1a30d70b2f9d91d25295690a4d0193741f" kindref="member">MBEDTLS_SSL_DTLS_SRTP_MKI_SUPPORTED</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4026" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4026" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a60708396eb994ce23136821a9943ed45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_dtls_srtp_protection_profiles</definition>
        <argsstring>(mbedtls_ssl_config *conf, const mbedtls_ssl_srtp_profile *profiles)</argsstring>
        <name>mbedtls_ssl_conf_dtls_srtp_protection_profiles</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const <ref refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" kindref="member">mbedtls_ssl_srtp_profile</ref> *</type>
          <declname>profiles</declname>
        </param>
        <briefdescription>
<para>Set the supported DTLS-SRTP protection profiles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profiles</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a List of MBEDTLS_TLS_SRTP_UNSET terminated supported protection profiles in decreasing preference order. The pointer to the list is recorded by the library for later reference as required, so the lifetime of the table must be at least as long as the lifetime of the SSL configuration structure. The list must not hold more than MBEDTLS_TLS_SRTP_MAX_PROFILE_LIST_LENGTH elements (excluding the terminating MBEDTLS_TLS_SRTP_UNSET).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> when the list of protection profiles is incorrect. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4048" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4048" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac7e62a744fac6eaa7a70210099f22daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_dtls_srtp_set_mki_value</definition>
        <argsstring>(mbedtls_ssl_context *ssl, unsigned char *mki_value, uint16_t mki_len)</argsstring>
        <name>mbedtls_ssl_dtls_srtp_set_mki_value</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>mki_value</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>mki_len</declname>
        </param>
        <briefdescription>
<para>Set the mki_value for the current DTLS-SRTP session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mki_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The MKI value to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mki_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the MKI value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function is relevant on client side only. The server discovers the mki value during handshake. A mki value set on server side using this function is ignored.</para>
</simplesect>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1aea8b7e95c7e547959c10e9cad5f46043" kindref="member">MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4068" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4068" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a72c3a974f3f1ae2337cb731653fd2230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_get_dtls_srtp_negotiation_result</definition>
        <argsstring>(const mbedtls_ssl_context *ssl, mbedtls_dtls_srtp_info *dtls_srtp_info)</argsstring>
        <name>mbedtls_ssl_get_dtls_srtp_negotiation_result</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1ab0bbb0afa620c3de5b545d36e5d944e8" kindref="member">mbedtls_dtls_srtp_info</ref> *</type>
          <declname>dtls_srtp_info</declname>
        </param>
        <briefdescription>
<para>Get the negotiated DTLS-SRTP information: Protection profile and MKI value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function must be called after the handshake is completed. The value returned by this function must not be trusted or acted upon before the handshake completes.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtls_srtp_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The negotiated DTLS-SRTP information:<itemizedlist>
<listitem><para>Protection profile in use. A direct mapping of the iana defined value for protection profile on an uint16_t. <ulink url="http://www.iana.org/assignments/srtp-protection/srtp-protection.xhtml">http://www.iana.org/assignments/srtp-protection/srtp-protection.xhtml</ulink> <ref refid="ssl_8h_1a745b2dae73a8beac74d39e69768100db" kindref="member">MBEDTLS_TLS_SRTP_UNSET</ref> if the use of SRTP was not negotiated or peer&apos;s Hello packet was not parsed yet.</para>
</listitem><listitem><para>mki size and value( if size is &gt; 0 ). </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4089" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4089" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa95636131005f78f42da512e275340bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref></type>
        <definition>void MBEDTLS_DEPRECATED mbedtls_ssl_conf_max_version</definition>
        <argsstring>(mbedtls_ssl_config *conf, int major, int minor)</argsstring>
        <name>mbedtls_ssl_conf_max_version</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>major</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minor</declname>
        </param>
        <briefdescription>
<para>Set the maximum supported version sent from the client side and/or accepted at the server side. </para>
        </briefdescription>
        <detaileddescription>
<para>See also the documentation of <ref refid="ssl_8h_1ad7cb4288b75f7b25ca4ca37e59ed5f04" kindref="member">mbedtls_ssl_conf_min_version()</ref>.</para>
<para><simplesect kind="note"><para>This ignores ciphersuites from higher versions.</para>
</simplesect>
<simplesect kind="note"><para>This function is deprecated and has been replaced by <computeroutput><ref refid="ssl_8h_1abacdd7ffcbec7930ea429059ea9cfbb3" kindref="member">mbedtls_ssl_conf_max_tls_version()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>major</parametername>
</parameternamelist>
<parameterdescription>
<para>Major version number (<ref refid="ssl_8h_1a9d404d5f3b4c7ebe03da19aa1bf2f23e" kindref="member">MBEDTLS_SSL_MAJOR_VERSION_3</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor version number (<ref refid="ssl_8h_1a3c5a90b4b4aded2190f31f7d4c670cb4" kindref="member">MBEDTLS_SSL_MINOR_VERSION_3</ref> for (D)TLS 1.2, <ref refid="ssl_8h_1a103234ebe429fa189e39db40f345d147" kindref="member">MBEDTLS_SSL_MINOR_VERSION_4</ref> for TLS 1.3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4111" column="25" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4111" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1abacdd7ffcbec7930ea429059ea9cfbb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_conf_max_tls_version</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_ssl_protocol_version tls_version)</argsstring>
        <name>mbedtls_ssl_conf_max_tls_version</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref></type>
          <declname>tls_version</declname>
        </param>
        <briefdescription>
<para>Set the maximum supported version sent from the client side and/or accepted at the server side. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>After the handshake, you can call <ref refid="ssl_8h_1a5592d00ccf7eae76faef598b393e53ab" kindref="member">mbedtls_ssl_get_version_number()</ref> to see what version was negotiated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tls_version</parametername>
</parameternamelist>
<parameterdescription>
<para>TLS protocol version number (<computeroutput>mbedtls_ssl_protocol_version</computeroutput>) (<ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02af84b4b85a509c0da6fb939b4945e582b" kindref="member">MBEDTLS_SSL_VERSION_UNKNOWN</ref> is not valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4127" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="4127" bodyend="4131"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ad7cb4288b75f7b25ca4ca37e59ed5f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref></type>
        <definition>void MBEDTLS_DEPRECATED mbedtls_ssl_conf_min_version</definition>
        <argsstring>(mbedtls_ssl_config *conf, int major, int minor)</argsstring>
        <name>mbedtls_ssl_conf_min_version</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>major</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minor</declname>
        </param>
        <briefdescription>
<para>Set the minimum accepted SSL/TLS protocol version. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>By default, all supported versions are accepted. Future versions of the library may disable older protocol versions by default if they become deprecated.</para>
</simplesect>
<simplesect kind="note"><para>The following versions are supported (if enabled at compile time):<itemizedlist>
<listitem><para>(D)TLS 1.2: <computeroutput>major</computeroutput> = <ref refid="ssl_8h_1a9d404d5f3b4c7ebe03da19aa1bf2f23e" kindref="member">MBEDTLS_SSL_MAJOR_VERSION_3</ref>, <computeroutput>minor</computeroutput> = <ref refid="ssl_8h_1a3c5a90b4b4aded2190f31f7d4c670cb4" kindref="member">MBEDTLS_SSL_MINOR_VERSION_3</ref></para>
</listitem><listitem><para>TLS 1.3: <computeroutput>major</computeroutput> = <ref refid="ssl_8h_1a9d404d5f3b4c7ebe03da19aa1bf2f23e" kindref="member">MBEDTLS_SSL_MAJOR_VERSION_3</ref>, <computeroutput>minor</computeroutput> = <ref refid="ssl_8h_1a103234ebe429fa189e39db40f345d147" kindref="member">MBEDTLS_SSL_MINOR_VERSION_4</ref></para>
</listitem></itemizedlist>
</para>
</simplesect>
Note that the numbers in the constant names are the TLS internal protocol numbers, and the minor versions differ by one from the human-readable versions!</para>
<para><simplesect kind="note"><para>Input outside of the SSL_MAX_XXXXX_VERSION and SSL_MIN_XXXXX_VERSION range is ignored.</para>
</simplesect>
<simplesect kind="note"><para>After the handshake, you can call <ref refid="ssl_8h_1a5592d00ccf7eae76faef598b393e53ab" kindref="member">mbedtls_ssl_get_version_number()</ref> to see what version was negotiated.</para>
</simplesect>
<simplesect kind="note"><para>This function is deprecated and has been replaced by <computeroutput><ref refid="ssl_8h_1aeec500f3fb971169591dfe17cd8e963b" kindref="member">mbedtls_ssl_conf_min_tls_version()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>major</parametername>
</parameternamelist>
<parameterdescription>
<para>Major version number (<ref refid="ssl_8h_1a9d404d5f3b4c7ebe03da19aa1bf2f23e" kindref="member">MBEDTLS_SSL_MAJOR_VERSION_3</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor version number (<ref refid="ssl_8h_1a3c5a90b4b4aded2190f31f7d4c670cb4" kindref="member">MBEDTLS_SSL_MINOR_VERSION_3</ref> for (D)TLS 1.2, <ref refid="ssl_8h_1a103234ebe429fa189e39db40f345d147" kindref="member">MBEDTLS_SSL_MINOR_VERSION_4</ref> for TLS 1.3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4168" column="25" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4168" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aeec500f3fb971169591dfe17cd8e963b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void mbedtls_ssl_conf_min_tls_version</definition>
        <argsstring>(mbedtls_ssl_config *conf, mbedtls_ssl_protocol_version tls_version)</argsstring>
        <name>mbedtls_ssl_conf_min_tls_version</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref></type>
          <declname>tls_version</declname>
        </param>
        <briefdescription>
<para>Set the minimum supported version sent from the client side and/or accepted at the server side. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>After the handshake, you can call <ref refid="ssl_8h_1a5592d00ccf7eae76faef598b393e53ab" kindref="member">mbedtls_ssl_get_version_number()</ref> to see what version was negotiated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tls_version</parametername>
</parameternamelist>
<parameterdescription>
<para>TLS protocol version number (<computeroutput>mbedtls_ssl_protocol_version</computeroutput>) (<ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02af84b4b85a509c0da6fb939b4945e582b" kindref="member">MBEDTLS_SSL_VERSION_UNKNOWN</ref> is not valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4184" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="4184" bodyend="4188"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1afa8a1d55630fec25f2247fc9958eaa53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_encrypt_then_mac</definition>
        <argsstring>(mbedtls_ssl_config *conf, char etm)</argsstring>
        <name>mbedtls_ssl_conf_encrypt_then_mac</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>etm</declname>
        </param>
        <briefdescription>
<para>Enable or disable Encrypt-then-MAC (Default: MBEDTLS_SSL_ETM_ENABLED) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This should always be enabled, it is a security improvement, and should not cause any interoperability issue (used only if the peer supports it too).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>etm</parametername>
</parameternamelist>
<parameterdescription>
<para>MBEDTLS_SSL_ETM_ENABLED or MBEDTLS_SSL_ETM_DISABLED </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4202" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4202" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a133db91d4a1dd44d212ac57e386c23b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_extended_master_secret</definition>
        <argsstring>(mbedtls_ssl_config *conf, char ems)</argsstring>
        <name>mbedtls_ssl_conf_extended_master_secret</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ems</declname>
        </param>
        <briefdescription>
<para>Enable or disable Extended Master Secret negotiation. (Default: MBEDTLS_SSL_EXTENDED_MS_ENABLED) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This should always be enabled, it is a security fix to the protocol, and should not cause any interoperability issue (used only if the peer supports it too).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ems</parametername>
</parameternamelist>
<parameterdescription>
<para>MBEDTLS_SSL_EXTENDED_MS_ENABLED or MBEDTLS_SSL_EXTENDED_MS_DISABLED </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4217" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4217" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a05492293c43910a64f746af8f71efb2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_cert_req_ca_list</definition>
        <argsstring>(mbedtls_ssl_config *conf, char cert_req_ca_list)</argsstring>
        <name>mbedtls_ssl_conf_cert_req_ca_list</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>cert_req_ca_list</declname>
        </param>
        <briefdescription>
<para>Whether to send a list of acceptable CAs in CertificateRequest messages. (Default: do send) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cert_req_ca_list</parametername>
</parameternamelist>
<parameterdescription>
<para>MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED or MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4230" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4230" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac68fda83c26b3078e80f4dfc3b09bb94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_conf_max_frag_len</definition>
        <argsstring>(mbedtls_ssl_config *conf, unsigned char mfl_code)</argsstring>
        <name>mbedtls_ssl_conf_max_frag_len</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>mfl_code</declname>
        </param>
        <briefdescription>
<para>Set the maximum fragment length to emit and/or negotiate. (Typical: the smaller of <ref refid="ssl_8h_1aabb3c84cb377d3d0291225ad6aab6ade" kindref="member">MBEDTLS_SSL_IN_CONTENT_LEN</ref> and <ref refid="ssl_8h_1ae6d6fb50d2997e49b202fa9fb4356158" kindref="member">MBEDTLS_SSL_OUT_CONTENT_LEN</ref>, usually <computeroutput>2^14</computeroutput> bytes) (Server: set maximum fragment length to emit, usually negotiated by the client during handshake) (Client: set maximum fragment length to emit <emphasis>and</emphasis> negotiate with the server during handshake) (Default: <ref refid="ssl_8h_1a952256aaeb342b5f8cb55fb39891b235" kindref="member">MBEDTLS_SSL_MAX_FRAG_LEN_NONE</ref>) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>On the client side, the maximum fragment length extension <emphasis>will not</emphasis> be used, unless the maximum fragment length has been set via this function to a value different than <ref refid="ssl_8h_1a952256aaeb342b5f8cb55fb39891b235" kindref="member">MBEDTLS_SSL_MAX_FRAG_LEN_NONE</ref>.</para>
</simplesect>
<simplesect kind="note"><para>With TLS, this currently only affects ApplicationData (sent with <computeroutput><ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref></computeroutput>), not handshake messages. With DTLS, this affects both ApplicationData and handshake.</para>
</simplesect>
<simplesect kind="note"><para>This sets the maximum length for a record&apos;s payload, excluding record overhead that will be added to it, see <computeroutput><ref refid="ssl_8h_1a935f3ebfb31f988e24a8bf9bcb0fd26b" kindref="member">mbedtls_ssl_get_record_expansion()</ref></computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>For DTLS, it is also possible to set a limit for the total size of datagrams passed to the transport layer, including record overhead, see <computeroutput><ref refid="ssl_8h_1a14ea71eb9f064d28fb5c393acc1e6975" kindref="member">mbedtls_ssl_set_mtu()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mfl_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code for maximum fragment length (allowed values: MBEDTLS_SSL_MAX_FRAG_LEN_512, MBEDTLS_SSL_MAX_FRAG_LEN_1024, MBEDTLS_SSL_MAX_FRAG_LEN_2048, MBEDTLS_SSL_MAX_FRAG_LEN_4096)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful or MBEDTLS_ERR_SSL_BAD_INPUT_DATA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4269" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4269" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5d677c775316cc743bf57869a80c5fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_preference_order</definition>
        <argsstring>(mbedtls_ssl_config *conf, int order)</argsstring>
        <name>mbedtls_ssl_conf_preference_order</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Pick the ciphersuites order according to the second parameter in the SSL Server module (MBEDTLS_SSL_SRV_C). (Default, if never called: MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_SERVER) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Server or client (MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_SERVER or MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_CLIENT) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4282" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4282" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a97e547f900979337f4083a8158918fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_session_tickets</definition>
        <argsstring>(mbedtls_ssl_config *conf, int use_tickets)</argsstring>
        <name>mbedtls_ssl_conf_session_tickets</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_tickets</declname>
        </param>
        <briefdescription>
<para>Enable / Disable session tickets (client only). (Default: MBEDTLS_SSL_SESSION_TICKETS_ENABLED.) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>On server, use <computeroutput><ref refid="ssl_8h_1a73f028424df0b3a3b3360df0768df992" kindref="member">mbedtls_ssl_conf_session_tickets_cb()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_tickets</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable or disable (MBEDTLS_SSL_SESSION_TICKETS_ENABLED or MBEDTLS_SSL_SESSION_TICKETS_DISABLED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4297" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4297" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a4ef70ff9e2d6385b14a050609a8a2614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_new_session_tickets</definition>
        <argsstring>(mbedtls_ssl_config *conf, uint16_t num_tickets)</argsstring>
        <name>mbedtls_ssl_conf_new_session_tickets</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>num_tickets</declname>
        </param>
        <briefdescription>
<para>Number of NewSessionTicket messages for the server to send after handshake completion. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The default value is <computeroutput>MBEDTLS_SSL_TLS1_3_DEFAULT_NEW_SESSION_TICKETS</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>In case of a session resumption, this setting only partially apply. At most one ticket is sent in that case to just renew the pool of tickets of the client. The rationale is to avoid the number of tickets on the server to become rapidly out of control when the server has the same configuration for all its connection instances.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_tickets</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of NewSessionTicket. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4321" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4321" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aad4f50fc1c0a018fd5eb18fd9621d0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_renegotiation</definition>
        <argsstring>(mbedtls_ssl_config *conf, int renegotiation)</argsstring>
        <name>mbedtls_ssl_conf_renegotiation</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>renegotiation</declname>
        </param>
        <briefdescription>
<para>Enable / Disable renegotiation support for connection when initiated by peer (Default: MBEDTLS_SSL_RENEGOTIATION_DISABLED) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is recommended to always disable renegotiation unless you know you need it and you know what you&apos;re doing. In the past, there have been several issues associated with renegotiation or a poor understanding of its properties.</para>
</simplesect>
<simplesect kind="note"><para>Server-side, enabling renegotiation also makes the server susceptible to a resource DoS by a malicious client.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renegotiation</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable or disable (MBEDTLS_SSL_RENEGOTIATION_ENABLED or MBEDTLS_SSL_RENEGOTIATION_DISABLED) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4345" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4345" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a193c7bf368780f485e20170c807709e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_legacy_renegotiation</definition>
        <argsstring>(mbedtls_ssl_config *conf, int allow_legacy)</argsstring>
        <name>mbedtls_ssl_conf_legacy_renegotiation</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>allow_legacy</declname>
        </param>
        <briefdescription>
<para>Prevent or allow legacy renegotiation. (Default: MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION) </para>
        </briefdescription>
        <detaileddescription>
<para>MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION allows connections to be established even if the peer does not support secure renegotiation, but does not allow renegotiation to take place if not secure. (Interoperable and secure option)</para>
<para>MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION allows renegotiations with non-upgraded peers. Allowing legacy renegotiation makes the connection vulnerable to specific man in the middle attacks. (See RFC 5746) (Most interoperable and least secure option)</para>
<para>MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE breaks off connections if peer does not support secure renegotiation. Results in interoperability issues with non-upgraded peers that do not support renegotiation altogether. (Most secure option, interoperability issues)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_legacy</parametername>
</parameternamelist>
<parameterdescription>
<para>Prevent or allow (SSL_NO_LEGACY_RENEGOTIATION, SSL_ALLOW_LEGACY_RENEGOTIATION or MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4375" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4375" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a2d193b15941a556baaf2cb94138d66df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_renegotiation_enforced</definition>
        <argsstring>(mbedtls_ssl_config *conf, int max_records)</argsstring>
        <name>mbedtls_ssl_conf_renegotiation_enforced</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_records</declname>
        </param>
        <briefdescription>
<para>Enforce renegotiation requests. (Default: enforced, max_records = 16) </para>
        </briefdescription>
        <detaileddescription>
<para>When we request a renegotiation, the peer can comply or ignore the request. This function allows us to decide whether to enforce our renegotiation requests by closing the connection if the peer doesn&apos;t comply.</para>
<para>However, records could already be in transit from the peer when the request is emitted. In order to increase reliability, we can accept a number of records before the expected handshake records.</para>
<para>The optimal value is highly dependent on the specific usage scenario.</para>
<para><simplesect kind="note"><para>With DTLS and server-initiated renegotiation, the HelloRequest is retransmitted every time <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref> times out or receives Application Data, until:<itemizedlist>
<listitem><para>max_records records have beens seen, if it is &gt;= 0, or</para>
</listitem><listitem><para>the number of retransmits that would happen during an actual handshake has been reached. Please remember the request might be lost a few times if you consider setting max_records to a really low value.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="warning"><para>On client, the grace period can only happen during <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref>, as opposed to <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref> and <ref refid="ssl_8h_1a49b7a27a616495d5f0a4fabc3f550dbb" kindref="member">mbedtls_ssl_renegotiate()</ref> which always behave as if max_record was 0. The reason is, if we receive application data from the server, we need a place to write it, which only happens during <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_records</parametername>
</parameternamelist>
<parameterdescription>
<para>Use MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED if you don&apos;t want to enforce renegotiation, or a non-negative value to enforce it but allow for a grace period of max_records records. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4415" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4415" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a1785faa0640bd6190c1c17a94b408e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_conf_renegotiation_period</definition>
        <argsstring>(mbedtls_ssl_config *conf, const unsigned char period[8])</argsstring>
        <name>mbedtls_ssl_conf_renegotiation_period</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>period</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Set record counter threshold for periodic renegotiation. (Default: 2^48 - 1) </para>
        </briefdescription>
        <detaileddescription>
<para>Renegotiation is automatically triggered when a record counter (outgoing or incoming) crosses the defined threshold. The default value is meant to prevent the connection from being closed when the counter is about to reached its maximal value (it is not allowed to wrap).</para>
<para>Lower values can be used to enforce policies such as &quot;keys
                must be refreshed every N packets with cipher X&quot;.</para>
<para>The renegotiation period can be disabled by setting conf-&gt;disable_renegotiation to MBEDTLS_SSL_RENEGOTIATION_DISABLED.</para>
<para><simplesect kind="note"><para>When the configured transport is MBEDTLS_SSL_TRANSPORT_DATAGRAM the maximum renegotiation period is 2^48 - 1, and for MBEDTLS_SSL_TRANSPORT_STREAM, the maximum renegotiation period is 2^64 - 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold value: a big-endian 64-bit number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4442" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4442" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a4075f7de9877fd667bcfa2e819e33426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_check_pending</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_check_pending</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Check if there is data already read from the underlying transport but not yet processed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if nothing&apos;s pending, 1 otherwise.</para>
</simplesect>
<simplesect kind="note"><para>This is different in purpose and behaviour from <computeroutput>mbedtls_ssl_get_bytes_avail</computeroutput> in that it considers any kind of unprocessed data, not only unread application data. If <computeroutput>mbedtls_ssl_get_bytes</computeroutput> returns a non-zero value, this function will also signal pending data, but the converse does not hold. For example, in DTLS there might be further records waiting to be processed from the current underlying transport&apos;s datagram.</para>
</simplesect>
<simplesect kind="note"><para>If this function returns 1 (data pending), this does not imply that a subsequent call to <computeroutput>mbedtls_ssl_read</computeroutput> will provide any data; e.g., the unprocessed data might turn out to be an alert or a handshake message.</para>
</simplesect>
<simplesect kind="note"><para>This function is useful in the following situation: If the SSL/TLS module successfully returns from an operation - e.g. a handshake or an application record read - and you&apos;re awaiting incoming data next, you must not immediately idle on the underlying transport to have data ready, but you need to check the value of this function first. The reason is that the desired data might already be read but not yet processed. If, in contrast, a previous call to the SSL/TLS module returned MBEDTLS_ERR_SSL_WANT_READ, it is not necessary to call this function, as the latter error code entails that all internal data has been processed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4484" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4484" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ad43142085f3182e9b0dc967ec582032b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mbedtls_ssl_get_bytes_avail</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_bytes_avail</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the number of application data bytes remaining to be read from the current record. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>How many bytes are available in the application data record read buffer.</para>
</simplesect>
<simplesect kind="note"><para>When working over a datagram transport, this is useful to detect the current datagram&apos;s boundary in case <computeroutput>mbedtls_ssl_read</computeroutput> has written the maximal amount of data fitting into the input buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4501" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4501" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a516064f1468d459159ef7cd6c496a026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t mbedtls_ssl_get_verify_result</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_verify_result</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the result of the certificate verification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the certificate verification was successful. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>-1u</computeroutput> if the result is not available. This may happen e.g. if the handshake aborts early, or a verification callback returned a fatal error. </para>
</simplesect>
<simplesect kind="return"><para>A bitwise combination of <computeroutput>MBEDTLS_X509_BADCERT_XXX</computeroutput> and <computeroutput>MBEDTLS_X509_BADCRL_XXX</computeroutput> failure flags; see <ref refid="x509_8h" kindref="compound">x509.h</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4515" column="10" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4515" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac80127ff0d28583c0a6ab9d29e752b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_ciphersuite_id_from_ssl</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_ciphersuite_id_from_ssl</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the id of the current ciphersuite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a ciphersuite id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4524" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4524" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a18739598df499461369020b8ea6fff1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mbedtls_ssl_get_ciphersuite</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_ciphersuite</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the name of the current ciphersuite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string containing the ciphersuite name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4533" column="12" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4533" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5592d00ccf7eae76faef598b393e53ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref></type>
        <definition>static mbedtls_ssl_protocol_version mbedtls_ssl_get_version_number</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_version_number</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the (D)TLS protocol version negotiated in the given connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If you call this function too early during the initial handshake, before the two sides have agreed on a version, this function returns <ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02af84b4b85a509c0da6fb939b4945e582b" kindref="member">MBEDTLS_SSL_VERSION_UNKNOWN</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The negotiated protocol version. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4547" column="44" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="4547" bodyend="4551"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a1ee2e52fe2ae9620af84df97a0347ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mbedtls_ssl_get_version</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_version</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the current TLS version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string containing the TLS version </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4560" column="12" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4560" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a935f3ebfb31f988e24a8bf9bcb0fd26b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_record_expansion</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_record_expansion</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the (maximum) number of bytes added by the record layer: header + encryption/MAC overhead (inc. padding) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current maximum record expansion in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4570" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4570" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a58a7ddcf453791f2947bc7f99503047d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_max_out_record_payload</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_max_out_record_payload</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the current maximum outgoing record payload in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The logic to determine the maximum outgoing record payload is version-specific. It takes into account various factors, such as the <ref refid="mbedtls__config_8h" kindref="compound">mbedtls_config.h</ref> setting <computeroutput>MBEDTLS_SSL_OUT_CONTENT_LEN</computeroutput>, extensions such as the max fragment length or record size limit extension if used, and for DTLS the path MTU as configured and current record expansion.</para>
</simplesect>
<simplesect kind="note"><para>With DTLS, <computeroutput><ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref></computeroutput> will return an error if called with a larger length value. With TLS, <computeroutput><ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref></computeroutput> will fragment the input if necessary and return the number of bytes written; it is up to the caller to call <computeroutput><ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref></computeroutput> again in order to send the remaining bytes if any.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a58a7ddcf453791f2947bc7f99503047d" kindref="member">mbedtls_ssl_get_max_out_record_payload()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a935f3ebfb31f988e24a8bf9bcb0fd26b" kindref="member">mbedtls_ssl_get_record_expansion()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current maximum payload for an outgoing record, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4597" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4597" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5c681b9af0ae2195ca5a7a5d9c162d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_max_in_record_payload</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_max_in_record_payload</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the current maximum incoming record payload in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The logic to determine the maximum incoming record payload is version-specific. It takes into account various factors, such as the <ref refid="mbedtls__config_8h" kindref="compound">mbedtls_config.h</ref> setting <computeroutput>MBEDTLS_SSL_IN_CONTENT_LEN</computeroutput>, extensions such as the max fragment length extension or record size limit extension if used, and the current record expansion.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a14ea71eb9f064d28fb5c393acc1e6975" kindref="member">mbedtls_ssl_set_mtu()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a5c681b9af0ae2195ca5a7a5d9c162d70" kindref="member">mbedtls_ssl_get_max_in_record_payload()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a935f3ebfb31f988e24a8bf9bcb0fd26b" kindref="member">mbedtls_ssl_get_record_expansion()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current maximum payload for an incoming record, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4617" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4617" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa7ab0ac8d8341063a0f815ee99337831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
        <definition>const mbedtls_x509_crt* mbedtls_ssl_get_peer_cert</definition>
        <argsstring>(const mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_peer_cert</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Return the peer certificate from the current connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to use. This must be initialized and setup.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current peer certificate, if available. The returned certificate is owned by the SSL context and is valid only until the next call to the SSL API. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>NULL</computeroutput> if no peer certificate is available. This might be because the chosen ciphersuite doesn&apos;t use CRTs (PSK-based ciphersuites, for example), or because <ref refid="mbedtls__config_8h_1ae46bbbec93735b6d601991c5ff22b767" kindref="member">MBEDTLS_SSL_KEEP_PEER_CERTIFICATE</ref> has been disabled, allowing the stack to free the peer&apos;s CRT to save memory.</para>
</simplesect>
<simplesect kind="note"><para>For one-time inspection of the peer&apos;s certificate during the handshake, consider registering an X.509 CRT verification callback through <ref refid="ssl_8h_1afc2b6b55d7ccaf38d84a4fbf1655f426" kindref="member">mbedtls_ssl_conf_verify()</ref> instead of calling this function. Using <ref refid="ssl_8h_1afc2b6b55d7ccaf38d84a4fbf1655f426" kindref="member">mbedtls_ssl_conf_verify()</ref> also comes at the benefit of allowing you to influence the verification process, for example by masking expected and tolerated verification failures.</para>
</simplesect>
<simplesect kind="warning"><para>You must not use the pointer returned by this function after any further call to the SSL API, including <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref> and <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref>; this is because the pointer might change during renegotiation, which happens transparently to the user. If you want to use the certificate across API calls, you must make a copy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4650" column="24" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4650" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ad617a178adfaf259db89c4fe092ad6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_session</definition>
        <argsstring>(const mbedtls_ssl_context *ssl, mbedtls_ssl_session *session)</argsstring>
        <name>mbedtls_ssl_get_session</name>
        <param>
          <type>const <ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Export a session in order to resume it later. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context representing the connection for which to to export a session structure for later resumption. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>The target structure in which to store the exported session. This must have been initialized with mbedtls_ssl_init_session() but otherwise be unused.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function can handle a variety of mechanisms for session resumption: For TLS 1.2, both session ID-based resumption and ticket-based resumption will be considered. For TLS 1.3, once implemented, sessions equate to tickets, and calling this function multiple times will export the available tickets one a time until no further tickets are available, in which case MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE will be returned.</para>
</simplesect>
<simplesect kind="note"><para>Calling this function multiple times will only be useful once TLS 1.3 is supported. For TLS 1.2 connections, this function should be called at most once.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. In this case, <computeroutput>session</computeroutput> can be used for session resumption by passing it to <ref refid="ssl_8h_1a91be5c606b9f7c1e44b3e507a4fe7b66" kindref="member">mbedtls_ssl_set_session()</ref>, and serialized for storage via <ref refid="ssl_8h_1a1fa5a82a8c4a33b69578d563e8922dcf" kindref="member">mbedtls_ssl_session_save()</ref>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1aea8b7e95c7e547959c10e9cad5f46043" kindref="member">MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</ref> if no further session is available for export. This error is a non-fatal, and has no observable effect on the SSL context or the destination session. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a91be5c606b9f7c1e44b3e507a4fe7b66" kindref="member">mbedtls_ssl_set_session()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="ssl_8h_1a1fa5a82a8c4a33b69578d563e8922dcf" kindref="member">mbedtls_ssl_session_save()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4688" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4688" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_handshake</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_handshake</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Perform the SSL handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref> or <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref> if the handshake is incomplete and waiting for data to be available for reading from or writing to the underlying transport - in this case you must call this function again when the underlying transport is ready for the operation. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> if an asynchronous operation is in progress (see <ref refid="ssl_8h_1a0675aed5a2b2b9ff219a62ed28b50819" kindref="member">mbedtls_ssl_conf_async_private_cb()</ref>) - in this case you must call this function again when the operation is ready. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref> if a cryptographic operation is in progress (see <ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref>) - in this case you must call this function again to complete the handshake when you&apos;re done attending other tasks. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a18d6936a834082004d1b1d16fe0007a2" kindref="member">MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</ref> if DTLS is in use and the client did not demonstrate reachability yet - in this case you must stop using the context (see below). </para>
</simplesect>
<simplesect kind="return"><para>Another SSL error code - in this case you must stop using the context (see below).</para>
</simplesect>
<simplesect kind="warning"><para>If this function returns something other than <computeroutput>0</computeroutput>, <ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref>, <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref>, <ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> or <ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref>, you must stop using the SSL context for reading or writing, and either free it or call <computeroutput><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref></computeroutput> on it before re-using it for a new connection; the current connection must be closed.</para>
</simplesect>
<simplesect kind="note"><para>If DTLS is in use, then you may choose to handle <ref refid="ssl_8h_1a18d6936a834082004d1b1d16fe0007a2" kindref="member">MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</ref> specially for logging purposes, as it is an expected return value rather than an actual error, but you still need to reset/free the context.</para>
</simplesect>
<simplesect kind="note"><para>Remarks regarding event-driven DTLS: If the function returns <ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref>, no datagram from the underlying transport layer is currently being processed, and it is safe to idle until the timer or the underlying transport signal a new event. This is not true for a successful handshake, in which case the datagram of the underlying transport that is currently being processed might or might not contain further DTLS records.</para>
</simplesect>
<simplesect kind="note"><para>If the context is configured to allow TLS 1.3, or if <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4747" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4747" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a443d1e3523563e85d32910e29ee7109b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_ssl_is_handshake_over</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_is_handshake_over</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>After calling <ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref> to start the SSL handshake you can call this function to check whether the handshake is over for a given SSL context. This function should be also used to determine when to stop calling mbedtls_handshake_step() for that context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if handshake is over, <computeroutput>0</computeroutput> if it is still ongoing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4760" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" bodystart="4760" bodyend="4763"/>
        <references refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a077633740a69a39daf3cd1366cf57f45" compoundref="ssl_8h" startline="702">MBEDTLS_SSL_HANDSHAKE_OVER</references>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aac1583fe56eda081580742999968bbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_handshake_step</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_handshake_step</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Perform a single step of the SSL handshake. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The state of the context (ssl-&gt;state) will be at the next state after this function returns <computeroutput>0</computeroutput>. Do not call this function if <ref refid="ssl_8h_1a443d1e3523563e85d32910e29ee7109b" kindref="member">mbedtls_ssl_is_handshake_over()</ref> returns <computeroutput>1</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>Whilst in the past you may have used direct access to the context state (ssl-&gt;state) in order to ascertain when to stop calling this function and although you can still do so with something like ssl-&gt;<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE(state)</ref> or by defining MBEDTLS_ALLOW_PRIVATE_ACCESS, this is now considered deprecated and could be broken in any future release. If you still find you have good reason for such direct access, then please do contact the team to explain this (raise an issue or post to the mailing list), so that we can add a solution to your problem that will be guaranteed to work in the future.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See <ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref>.</para>
</simplesect>
<simplesect kind="warning"><para>If this function returns something other than <computeroutput>0</computeroutput>, <ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref>, <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref>, <ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> or <ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref>, you must stop using the SSL context for reading or writing, and either free it or call <computeroutput><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref></computeroutput> on it before re-using it for a new connection; the current connection must be closed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4798" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4798" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a49b7a27a616495d5f0a4fabc3f550dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_renegotiate</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_renegotiate</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Initiate an SSL renegotiation on the running connection. Client: perform the renegotiation right now. Server: request renegotiation, which will be performed during the next call to <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref> if honored by client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or any <ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref> return value except <ref refid="ssl_8h_1af930aa4014a4b702a00676a6a38bd33d" kindref="member">MBEDTLS_ERR_SSL_CLIENT_RECONNECT</ref> that can&apos;t happen during a renegotiation.</para>
</simplesect>
<simplesect kind="warning"><para>If this function returns something other than <computeroutput>0</computeroutput>, <ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref>, <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref>, <ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> or <ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref>, you must stop using the SSL context for reading or writing, and either free it or call <computeroutput><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref></computeroutput> on it before re-using it for a new connection; the current connection must be closed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4824" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4824" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_read</definition>
        <argsstring>(mbedtls_ssl_context *ssl, unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_read</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read at most &apos;len&apos; application data bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer that will hold the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (positive) number of bytes read if successful. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the read end of the underlying transport was closed without sending a CloseNotify beforehand, which might happen because of various reasons (internal error of an underlying stack, non-conformant peer not sending a CloseNotify and such) - in this case you must stop using the context (see below). </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1ac5e16e4c94a7e4ba0cf6b95c4547ddb1" kindref="member">MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY</ref> if the underlying transport is still functional, but the peer has acknowledged to not send anything anymore. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref> or <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref> if the handshake is incomplete and waiting for data to be available for reading from or writing to the underlying transport - in this case you must call this function again when the underlying transport is ready for the operation. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> if an asynchronous operation is in progress (see <ref refid="ssl_8h_1a0675aed5a2b2b9ff219a62ed28b50819" kindref="member">mbedtls_ssl_conf_async_private_cb()</ref>) - in this case you must call this function again when the operation is ready. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref> if a cryptographic operation is in progress (see <ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref>) - in this case you must call this function again to complete the handshake when you&apos;re done attending other tasks. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1af930aa4014a4b702a00676a6a38bd33d" kindref="member">MBEDTLS_ERR_SSL_CLIENT_RECONNECT</ref> if we&apos;re at the server side of a DTLS connection and the client is initiating a new connection using the same source port. See below. </para>
</simplesect>
<simplesect kind="return"><para>Another SSL error code - in this case you must stop using the context (see below).</para>
</simplesect>
<simplesect kind="warning"><para>If this function returns something other than a positive value, <ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref>, <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref>, <ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref>, <ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref> or <ref refid="ssl_8h_1af930aa4014a4b702a00676a6a38bd33d" kindref="member">MBEDTLS_ERR_SSL_CLIENT_RECONNECT</ref>, you must stop using the SSL context for reading or writing, and either free it or call <computeroutput><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref></computeroutput> on it before re-using it for a new connection; the current connection must be closed.</para>
</simplesect>
<simplesect kind="note"><para>When this function returns <ref refid="ssl_8h_1af930aa4014a4b702a00676a6a38bd33d" kindref="member">MBEDTLS_ERR_SSL_CLIENT_RECONNECT</ref> (which can only happen server-side), it means that a client is initiating a new connection using the same source port. You can either treat that as a connection close and wait for the client to resend a ClientHello, or directly continue with <computeroutput><ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref></computeroutput> with the same context (as it has been reset internally). Either way, you must make sure this is seen by the application as a new connection: application state, if any, should be reset, and most importantly the identity of the client must be checked again. WARNING: not validating the identity of the client again, or not transmitting the new identity to the application layer, would allow authentication bypass!</para>
</simplesect>
<simplesect kind="note"><para>Remarks regarding event-driven DTLS:<itemizedlist>
<listitem><para>If the function returns <ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref>, no datagram from the underlying transport layer is currently being processed, and it is safe to idle until the timer or the underlying transport signal a new event.</para>
</listitem><listitem><para>This function may return MBEDTLS_ERR_SSL_WANT_READ even if data was initially available on the underlying transport, as this data may have been only e.g. duplicated messages or a renegotiation request. Therefore, you must be prepared to receive MBEDTLS_ERR_SSL_WANT_READ even when reacting to an incoming-data event from the underlying transport.</para>
</listitem><listitem><para>On success, the datagram of the underlying transport that is currently being processed may contain further DTLS records. You should call <computeroutput>mbedtls_ssl_check_pending</computeroutput> to check for remaining records. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4904" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4904" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5bbda87d484de82df730758b475f32e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_write</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_write</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Try to write exactly &apos;len&apos; application data bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function will do partial writes in some cases. If the return value is non-negative but less than length, the function must be called again with updated arguments: buf + ret, len - ret (if ret is the return value) until it returns a value equal to the last &apos;len&apos; argument.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>how many bytes must be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (non-negative) number of bytes actually written if successful (may be less than <computeroutput>len</computeroutput>). </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref> or <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref> if the handshake is incomplete and waiting for data to be available for reading from or writing to the underlying transport - in this case you must call this function again when the underlying transport is ready for the operation. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> if an asynchronous operation is in progress (see <ref refid="ssl_8h_1a0675aed5a2b2b9ff219a62ed28b50819" kindref="member">mbedtls_ssl_conf_async_private_cb()</ref>) - in this case you must call this function again when the operation is ready. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref> if a cryptographic operation is in progress (see <ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref>) - in this case you must call this function again to complete the handshake when you&apos;re done attending other tasks. </para>
</simplesect>
<simplesect kind="return"><para>Another SSL error code - in this case you must stop using the context (see below).</para>
</simplesect>
<simplesect kind="warning"><para>If this function returns something other than a non-negative value, <ref refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" kindref="member">MBEDTLS_ERR_SSL_WANT_READ</ref>, <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref>, <ref refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" kindref="member">MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS</ref> or <ref refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" kindref="member">MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS</ref>, you must stop using the SSL context for reading or writing, and either free it or call <computeroutput><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref></computeroutput> on it before re-using it for a new connection; the current connection must be closed.</para>
</simplesect>
<simplesect kind="note"><para>When this function returns <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref>/READ, it must be called later with the <emphasis>same</emphasis> arguments, until it returns a value greater than or equal to 0. When the function returns <ref refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" kindref="member">MBEDTLS_ERR_SSL_WANT_WRITE</ref> there may be some partial data in the output buffer, however this is not yet sent.</para>
</simplesect>
<simplesect kind="note"><para>If the requested length is greater than the maximum fragment length (either the built-in limit or the one set or negotiated with the peer), then:<itemizedlist>
<listitem><para>with TLS, less bytes than requested are written.</para>
</listitem><listitem><para>with DTLS, MBEDTLS_ERR_SSL_BAD_INPUT_DATA is returned. <computeroutput><ref refid="ssl_8h_1a58a7ddcf453791f2947bc7f99503047d" kindref="member">mbedtls_ssl_get_max_out_record_payload()</ref></computeroutput> may be used to query the active maximum fragment length.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>Attempting to write 0 bytes will result in an empty TLS application record being sent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4966" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4966" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a431e67252731a34bd9b5f2c9222f4c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_send_alert_message</definition>
        <argsstring>(mbedtls_ssl_context *ssl, unsigned char level, unsigned char message)</argsstring>
        <name>mbedtls_ssl_send_alert_message</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>level</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send an alert message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The alert level of the message (MBEDTLS_SSL_ALERT_LEVEL_WARNING or MBEDTLS_SSL_ALERT_LEVEL_FATAL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The alert message (SSL_ALERT_MSG_*)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific SSL error code.</para>
</simplesect>
<simplesect kind="note"><para>If this function returns something other than 0 or MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using the SSL context for reading or writing, and either free it or call <computeroutput><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref></computeroutput> on it before re-using it for a new connection; the current connection must be closed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="4984" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="4984" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac2c1b17128ead2df3082e27b603deb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_close_notify</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_close_notify</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Notify the peer that the connection is being closed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific SSL error code.</para>
</simplesect>
<simplesect kind="note"><para>If this function returns something other than 0 or MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using the SSL context for reading or writing, and either free it or call <computeroutput><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref></computeroutput> on it before re-using it for a new connection; the current connection must be closed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5000" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5000" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac20ed299fda6adbb70b341bf45b8a6fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_read_early_data</definition>
        <argsstring>(mbedtls_ssl_context *ssl, unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_read_early_data</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Read at most &apos;len&apos; application data bytes while performing the handshake (early data). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function behaves mainly as <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref>. The specification of <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref> relevant to TLS 1.3 (thus not the parts specific to (D)TLS 1.2) applies to this function and the present documentation is restricted to the differences with <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer that will hold the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One additional specific return value: <ref refid="ssl_8h_1addd67a6fff1bf4256267dec1b3127546" kindref="member">MBEDTLS_ERR_SSL_CANNOT_READ_EARLY_DATA</ref>.</para>
</simplesect>
<ref refid="ssl_8h_1addd67a6fff1bf4256267dec1b3127546" kindref="member">MBEDTLS_ERR_SSL_CANNOT_READ_EARLY_DATA</ref> is returned when it is not possible to read early data for the SSL context <computeroutput>ssl</computeroutput>.</para>
<para>It may have been possible and it is not possible anymore because the server received the End of Early Data message or the maximum number of allowed early data for the PSK in use has been reached.</para>
<para>It may never have been possible and will never be possible for the SSL context <computeroutput>ssl</computeroutput> because the use of early data is disabled for that context or more generally the context is not suitably configured to enable early data or the client does not use early data or the first call to the function was done while the handshake was already too advanced to gather and accept early data.</para>
<para>It is not possible to read early data for the SSL context <computeroutput>ssl</computeroutput> but this does not preclude for using it with <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref>, <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref> or <ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref>.</para>
<para><simplesect kind="note"><para>When a server wants to retrieve early data, it is expected that this function starts the handshake for the SSL context <computeroutput>ssl</computeroutput>. But this is not mandatory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5049" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5049" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a89b4d9f646ae0c24983082057c41d72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_write_early_data</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_write_early_data</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Try to write exactly &apos;len&apos; application data bytes while performing the handshake (early data). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function behaves mainly as <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref>. The specification of <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref> relevant to TLS 1.3 (thus not the parts specific to (D)TLS1.2) applies to this function and the present documentation is restricted to the differences with <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>how many bytes must be written</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One additional specific return value: <ref refid="ssl_8h_1a036eb294f38b65208be7b82c797f93de" kindref="member">MBEDTLS_ERR_SSL_CANNOT_WRITE_EARLY_DATA</ref>.</para>
</simplesect>
<ref refid="ssl_8h_1a036eb294f38b65208be7b82c797f93de" kindref="member">MBEDTLS_ERR_SSL_CANNOT_WRITE_EARLY_DATA</ref> is returned when it is not possible to write early data for the SSL context <computeroutput>ssl</computeroutput>.</para>
<para>It may have been possible and it is not possible anymore because the client received the server Finished message, the server rejected early data or the maximum number of allowed early data for the PSK in use has been reached.</para>
<para>It may never have been possible and will never be possible for the SSL context <computeroutput>ssl</computeroutput> because the use of early data is disabled for that context or more generally the context is not suitably configured to enable early data or the first call to the function was done while the handshake was already completed.</para>
<para>It is not possible to write early data for the SSL context <computeroutput>ssl</computeroutput> but this does not preclude for using it with <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref>, <ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read()</ref> or <ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake()</ref>.</para>
<para><simplesect kind="note"><para>This function may write early data only if the SSL context has been configured for the handshake with a PSK for which early data is allowed.</para>
</simplesect>
<simplesect kind="note"><para>To maximize the number of early data that can be written in the course of the handshake, it is expected that this function starts the handshake for the SSL context <computeroutput>ssl</computeroutput>. But this is not mandatory.</para>
</simplesect>
<simplesect kind="note"><para>This function does not provide any information on whether the server has accepted or will accept early data or not. When it returns a positive value, it just means that it has written early data to the server. To know whether the server has accepted early data or not, you should call <ref refid="ssl_8h_1a5ed57c572d0453d3e997d7c46ed7b606" kindref="member">mbedtls_ssl_get_early_data_status()</ref> with the handshake completed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5110" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5110" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a5ed57c572d0453d3e997d7c46ed7b606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_get_early_data_status</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_get_early_data_status</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Get the status of the negotiation of the use of early data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> if this function is called from the server-side.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> if this function is called prior to completion of the handshake.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1ad3dce67d4c6868722be9bf3a10eec11b" kindref="member">MBEDTLS_SSL_EARLY_DATA_STATUS_NOT_SENT</ref> if the client has not indicated the use of early data to the server.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1add00b16dbb05663657723d0583061e36" kindref="member">MBEDTLS_SSL_EARLY_DATA_STATUS_ACCEPTED</ref> if the client has indicated the use of early data and the server has accepted it.</para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a4c5710c40ef00416938342d586ede58c" kindref="member">MBEDTLS_SSL_EARLY_DATA_STATUS_REJECTED</ref> if the client has indicated the use of early data but the server has rejected it. In this situation, the client may want to re-send the early data it may have tried to send by calling <ref refid="ssl_8h_1a89b4d9f646ae0c24983082057c41d72e" kindref="member">mbedtls_ssl_write_early_data()</ref> as ordinary post-handshake application data by calling <ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5142" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5142" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a2dc104a181bcd11eafbbf7e6923978bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_free</definition>
        <argsstring>(mbedtls_ssl_context *ssl)</argsstring>
        <name>mbedtls_ssl_free</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Free referenced items in an SSL context and clear memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5152" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5152" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1abd110552b6306e31617e85d4dffe9e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_context_save</definition>
        <argsstring>(mbedtls_ssl_context *ssl, unsigned char *buf, size_t buf_len, size_t *olen)</argsstring>
        <name>mbedtls_ssl_context_save</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_len</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <briefdescription>
<para>Save an active connection as serialized data in a buffer. This allows the freeing or re-using of the SSL context while still picking up the connection later in a way that it entirely transparent to the peer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="ssl_8h_1a8351242a219e04475cf0f0f871954f12" kindref="member">mbedtls_ssl_context_load()</ref></para>
</simplesect>
<simplesect kind="note"><para>The serialized data only contains the data that is necessary to resume the connection: negotiated protocol options, session identifier, keys, etc. Loading a saved SSL context does not restore settings and state related to how the application accesses the context, such as configured callback functions, user data, pending incoming or outgoing data, etc.</para>
</simplesect>
<simplesect kind="note"><para>This feature is currently only available under certain conditions, see the documentation of the return value <ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> for details.</para>
</simplesect>
<simplesect kind="note"><para>When this function succeeds, it calls <ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref> on <computeroutput>ssl</computeroutput> which as a result is no longer associated with the connection that has been serialized. This avoids creating copies of the connection state. You&apos;re then free to either re-use the context structure for a different connection, or call <ref refid="ssl_8h_1a2dc104a181bcd11eafbbf7e6923978bc" kindref="member">mbedtls_ssl_free()</ref> on it. See the documentation of <ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref> for more details.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context to save. On success, it is no longer associated with the connection that has been serialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write the serialized data to. It must be a writeable buffer of at least <computeroutput>buf_len</computeroutput> bytes, or may be <computeroutput>NULL</computeroutput> if <computeroutput>buf_len</computeroutput> is <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes available for writing in <computeroutput>buf</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of the data that has been or would have been written. It must point to a valid <computeroutput>size_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>olen</computeroutput> is updated to the correct value regardless of whether <computeroutput>buf_len</computeroutput> was large enough. This makes it possible to determine the necessary size by calling this function with <computeroutput>buf</computeroutput> set to <computeroutput>NULL</computeroutput> and <computeroutput>buf_len</computeroutput> to <computeroutput>0</computeroutput>. However, the value of <computeroutput>olen</computeroutput> is only guaranteed to be correct when the function returns <ref refid="ssl_8h_1ad7215c366f66035c9b5a60918168e950" kindref="member">MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</ref> or <computeroutput>0</computeroutput>. If the return value is different, then the value of <computeroutput>olen</computeroutput> is undefined.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1ad7215c366f66035c9b5a60918168e950" kindref="member">MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</ref> if <computeroutput>buf</computeroutput> is too small. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a701ee611f7a16a261b306466c8602177" kindref="member">MBEDTLS_ERR_SSL_ALLOC_FAILED</ref> if memory allocation failed while resetting the context. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> if a handshake is in progress, or there is pending data for reading or sending, or the connection does not use DTLS 1.2 with an AEAD ciphersuite, or renegotiation is enabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5211" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5211" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a8351242a219e04475cf0f0f871954f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_context_load</definition>
        <argsstring>(mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_ssl_context_load</name>
        <param>
          <type><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref> *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Load serialized connection data to an SSL context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="ssl_8h_1abd110552b6306e31617e85d4dffe9e13" kindref="member">mbedtls_ssl_context_save()</ref></para>
</simplesect>
<simplesect kind="warning"><para>The same serialized data must never be loaded into more that one context. In order to ensure that, after successfully loading serialized data to an SSL context, you should immediately destroy or invalidate all copies of the serialized data that was loaded. Loading the same data in more than one context would cause severe security failures including but not limited to loss of confidentiality.</para>
</simplesect>
<simplesect kind="note"><para>Before calling this function, the SSL context must be prepared in one of the two following ways. The first way is to take a context freshly initialised with <ref refid="ssl_8h_1a8560dea66d7830a11874188727ec4c45" kindref="member">mbedtls_ssl_init()</ref> and call <ref refid="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" kindref="member">mbedtls_ssl_setup()</ref> on it with the same <ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> structure that was used in the original connection. The second way is to call <ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref> on a context that was previously prepared as above but used in the meantime. Either way, you must not use the context to perform a handshake between calling <ref refid="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" kindref="member">mbedtls_ssl_setup()</ref> or <ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref> and calling this function. You may however call other setter functions in that time frame as indicated in the note below.</para>
</simplesect>
<simplesect kind="note"><para>Before or after calling this function successfully, you also need to configure some connection-specific callbacks and settings before you can use the connection again (unless they were already set before calling <ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset()</ref> and the values are suitable for the present connection). Specifically, you want to call at least <ref refid="ssl_8h_1a8b7442420aef7f1a76fa8c5336362f9e" kindref="member">mbedtls_ssl_set_bio()</ref>, <ref refid="ssl_8h_1a335ee78886daf7f8fb369fa925b3cca8" kindref="member">mbedtls_ssl_set_timer_cb()</ref>, and <ref refid="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" kindref="member">mbedtls_ssl_set_user_data_n()</ref> or <ref refid="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" kindref="member">mbedtls_ssl_set_user_data_p()</ref> if they were set originally. All other SSL setter functions are not necessary to call, either because they&apos;re only used in handshakes, or because the setting is already saved. You might choose to call them anyway, for example in order to share code between the cases of establishing a new connection and the case of loading an already-established connection.</para>
</simplesect>
<simplesect kind="note"><para>If you have new information about the path MTU, you want to call <ref refid="ssl_8h_1a14ea71eb9f064d28fb5c393acc1e6975" kindref="member">mbedtls_ssl_set_mtu()</ref> after calling this function, as otherwise this function would overwrite your newly-configured value with the value that was active when the context was saved.</para>
</simplesect>
<simplesect kind="note"><para>When this function returns an error code, it calls <ref refid="ssl_8h_1a2dc104a181bcd11eafbbf7e6923978bc" kindref="member">mbedtls_ssl_free()</ref> on <computeroutput>ssl</computeroutput>. In this case, you need to prepare the context with the usual sequence starting with a call to <ref refid="ssl_8h_1a8560dea66d7830a11874188727ec4c45" kindref="member">mbedtls_ssl_init()</ref> if you want to use it again.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>The SSL context structure to be populated. It must have been prepared as described in the note above. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the serialized connection data. It must be a readable buffer of at least <computeroutput>len</computeroutput> bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the serialized data in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a701ee611f7a16a261b306466c8602177" kindref="member">MBEDTLS_ERR_SSL_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1af6d4792c6b585d59c1e6479b6d1491e2" kindref="member">MBEDTLS_ERR_SSL_VERSION_MISMATCH</ref> if the serialized data comes from a different Mbed TLS version or build. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" kindref="member">MBEDTLS_ERR_SSL_BAD_INPUT_DATA</ref> if input data is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5284" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5284" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aba55bcda50a47e83803e31a8db7c9a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_config_init</definition>
        <argsstring>(mbedtls_ssl_config *conf)</argsstring>
        <name>mbedtls_ssl_config_init</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Initialize an SSL configuration context Just makes the context ready for <ref refid="ssl_8h_1aa1335b65ba57e81accc91ef95454d5a6" kindref="member">mbedtls_ssl_config_defaults()</ref> or <ref refid="ssl_8h_1a7655f025440a6c5ccd4fc13832abb1dd" kindref="member">mbedtls_ssl_config_free()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>You need to call <ref refid="ssl_8h_1aa1335b65ba57e81accc91ef95454d5a6" kindref="member">mbedtls_ssl_config_defaults()</ref> unless you manually set all of the relevant fields yourself.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5299" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1aa1335b65ba57e81accc91ef95454d5a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_config_defaults</definition>
        <argsstring>(mbedtls_ssl_config *conf, int endpoint, int transport, int preset)</argsstring>
        <name>mbedtls_ssl_config_defaults</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>transport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>preset</declname>
        </param>
        <briefdescription>
<para>Load reasonable default SSL configuration values. (You need to call <ref refid="ssl_8h_1aba55bcda50a47e83803e31a8db7c9a86" kindref="member">mbedtls_ssl_config_init()</ref> first.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>MBEDTLS_SSL_IS_CLIENT or MBEDTLS_SSL_IS_SERVER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transport</parametername>
</parameternamelist>
<parameterdescription>
<para>MBEDTLS_SSL_TRANSPORT_STREAM for TLS, or MBEDTLS_SSL_TRANSPORT_DATAGRAM for DTLS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preset</parametername>
</parameternamelist>
<parameterdescription>
<para>a MBEDTLS_SSL_PRESET_XXX value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See <computeroutput><ref refid="ssl_8h_1a2eb03afe9b2ca0f144a1c307100dc0ca" kindref="member">mbedtls_ssl_conf_transport()</ref></computeroutput> for notes on DTLS.</para>
</simplesect>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_XXX_ALLOC_FAILED on memory allocation error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5316" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5316" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a7655f025440a6c5ccd4fc13832abb1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_config_free</definition>
        <argsstring>(mbedtls_ssl_config *conf)</argsstring>
        <name>mbedtls_ssl_config_free</name>
        <param>
          <type><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref> *</type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>Free an SSL configuration context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conf</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL configuration context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5324" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5324" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1a7980469655c1cdb8fd7e966bffe1fd02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_session_init</definition>
        <argsstring>(mbedtls_ssl_session *session)</argsstring>
        <name>mbedtls_ssl_session_init</name>
        <param>
          <type><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Initialize SSL session structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL session </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5331" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5331" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1ac085defe1a02ab784a0a2fb201bcc741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ssl_session_free</definition>
        <argsstring>(mbedtls_ssl_session *session)</argsstring>
        <name>mbedtls_ssl_session_free</name>
        <param>
          <type><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref> *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
<para>Free referenced items in an SSL session including the peer certificate and clear memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A session object can be freed even if the SSL context that was used to retrieve the session is still in use.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>session</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL session </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5342" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5342" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ssl_8h_1abf341c6825ac6f30dfdeb1287b5a1ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ssl_tls_prf</definition>
        <argsstring>(const mbedtls_tls_prf_types prf, const unsigned char *secret, size_t slen, const char *label, const unsigned char *random, size_t rlen, unsigned char *dstbuf, size_t dlen)</argsstring>
        <name>mbedtls_ssl_tls_prf</name>
        <param>
          <type>const <ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0" kindref="member">mbedtls_tls_prf_types</ref></type>
          <declname>prf</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>secret</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>slen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rlen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>dstbuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dlen</declname>
        </param>
        <briefdescription>
<para>TLS-PRF function for key derivation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prf</parametername>
</parameternamelist>
<parameterdescription>
<para>The tls_prf type function type to be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secret</parametername>
</parameternamelist>
<parameterdescription>
<para>Secret for the key derivation function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the secret. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>String label for the key derivation function, terminated with null character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>random</parametername>
</parameternamelist>
<parameterdescription>
<para>Random bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the random bytes buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the derived key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the output buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success. An SSL specific error on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" line="5359" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h" declline="5359" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SSL/TLS functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_SSL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="platform__util_8h" kindref="compound">mbedtls/platform_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bignum_8h" kindref="compound">mbedtls/bignum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecp_8h" kindref="compound">mbedtls/ecp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ssl__ciphersuites_8h" kindref="compound">mbedtls/ssl_ciphersuites.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="x509__crt_8h" kindref="compound">mbedtls/x509_crt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="x509__crl_8h" kindref="compound">mbedtls/x509_crl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_DHM_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dhm_8h" kindref="compound">mbedtls/dhm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="md_8h" kindref="compound">mbedtls/md.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_SOME_ECDH_OR_ECDHE_ANY_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecdh_8h" kindref="compound">mbedtls/ecdh.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_HAVE_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="platform__time_8h" kindref="compound">mbedtls/platform_time.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto_8h" kindref="compound">psa/crypto.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>SSL<sp/>Error<sp/>codes</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="47" refid="ssl_8h_1a6516299349393931e8d17957f9b80eca" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="ssl_8h_1aea8b7e95c7e547959c10e9cad5f46043" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7080</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="ssl_8h_1a665997e4474e4ce0db5ef408c9c6b5ce" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="ssl_8h_1ac88e465f67430fba26abeb44f2ac28d5" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_INVALID_MAC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="ssl_8h_1aad21f6b8a740ef21dd162d91b809e3a4" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_INVALID_RECORD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="ssl_8h_1ab82e0253b53fa62fab94b98ef9eb97f9" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CONN_EOF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7280</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="ssl_8h_1afc098d478516dfc8f6cbcdfb29e1f663" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_DECODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7300</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight></codeline>
<codeline lineno="62" refid="ssl_8h_1aebfdb35dab3c9928c1db296b7b7140ab" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_NO_RNG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="ssl_8h_1aaa160d753b94b4ecf6e22a1415450e8f" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7480</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="ssl_8h_1acf1e86f4ffb6ff35b65f2d37a63fe129" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_UNSUPPORTED_EXTENSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="ssl_8h_1a6991d6a617c79c1c5ad3162f18ffd2ff" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_NO_APPLICATION_PROTOCOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7580</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="ssl_8h_1a4c40a91dc331782b9aaa82812fc38eb4" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="ssl_8h_1a31bcc2bfd103177e3e76e04219e0497f" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7680</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="ssl_8h_1ada7521232ac79a0cc64e8f5325fc7574" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7700</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="ssl_8h_1acc37a34787c5c5484a993ff64c3a1634" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7780</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="ssl_8h_1a0965a4adfeb38e6ca6a72aa83e3f4aaa" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_UNRECOGNIZED_NAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="ssl_8h_1ac5e16e4c94a7e4ba0cf6b95c4547ddb1" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7880</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight></codeline>
<codeline lineno="84" refid="ssl_8h_1a0393b67a084dd92dcd80fe62ee06813d" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_BAD_CERTIFICATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7A00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight></codeline>
<codeline lineno="90" refid="ssl_8h_1a789622e6961edd0fade001480c7a887c" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_RECEIVED_NEW_SESSION_TICKET<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7B00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="ssl_8h_1addd67a6fff1bf4256267dec1b3127546" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CANNOT_READ_EARLY_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7B80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="ssl_8h_1a036eb294f38b65208be7b82c797f93de" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CANNOT_WRITE_EARLY_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7C00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight></codeline>
<codeline lineno="100" refid="ssl_8h_1a8aacd7800641540018eccacb43c822cc" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CACHE_ENTRY_NOT_FOUND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7E80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="ssl_8h_1a701ee611f7a16a261b306466c8602177" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_ALLOC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7F00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="ssl_8h_1aef773c241760a00e92c239a917e4868e" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x7F80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="ssl_8h_1af9328fb82f9548f4fa6bf3a5e1254c65" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6F80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="ssl_8h_1ac478dec79a014adf7a236d242cf35ebc" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_BAD_PROTOCOL_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6E80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="ssl_8h_1aa7770a6157a4477542b51e4732aba0a0" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6E00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="ssl_8h_1a8b1558e0b749f8b5f856d73d8b9869e9" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6D80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="ssl_8h_1acfee5259b88126fa1f8fc5437a089f57" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6D00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="ssl_8h_1adf3630ee46adcea979db9519225d0519" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6C80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="ssl_8h_1af06cd02b5bcd36592925c2f63d80f43f" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_INTERNAL_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6C00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="ssl_8h_1ae8cfe8ffb3e7448e6097a7601b349ac5" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_COUNTER_WRAPPING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6B80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="ssl_8h_1adbadeb512c769067a5dbe1de97a85ad5" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6B00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="ssl_8h_1a18d6936a834082004d1b1d16fe0007a2" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6A80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="ssl_8h_1ad7215c366f66035c9b5a60918168e950" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6A00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight></codeline>
<codeline lineno="129" refid="ssl_8h_1a67a1e093cf042831aa60bb567915b560" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_WANT_READ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="ssl_8h_1a674bde213fbbf602e04bbc131dd2dc33" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_WANT_WRITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6880</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="ssl_8h_1a2fdb240812860402a1a946eae8264148" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="ssl_8h_1af930aa4014a4b702a00676a6a38bd33d" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CLIENT_RECONNECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6780</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="ssl_8h_1a7aa1bd782c1b11479ac950627e3c0c9b" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6700</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="ssl_8h_1a15dd6290be1edd19d292ac31f595aaae" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_NON_FATAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6680</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="ssl_8h_1a84b35eab7b87797bd2ab3439c1463a3b" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_ILLEGAL_PARAMETER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="ssl_8h_1a5409673459de4e9b182b9763e8885cd3" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_CONTINUE_PROCESSING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6580</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="ssl_8h_1a5f88f78114fdd3f8ddd408e9f5beee9f" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="ssl_8h_1afee3c17ec14a8debd09140dced64fc76" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_EARLY_MESSAGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6480</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>space<sp/>gap<sp/>*/</highlight></codeline>
<codeline lineno="157" refid="ssl_8h_1ad569d68d0cb64788c9c9eb4a344c25c2" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_UNEXPECTED_CID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x6000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="ssl_8h_1af6d4792c6b585d59c1e6479b6d1491e2" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_VERSION_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x5F00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="ssl_8h_1a10d86ed4d20a85062585c533b0824d12" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_SSL_BAD_CONFIG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x5E80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>Constants<sp/>from<sp/>RFC<sp/>8446<sp/>for<sp/>TLS<sp/>1.3<sp/>PSK<sp/>modes</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>Those<sp/>are<sp/>used<sp/>in<sp/>the<sp/>Pre-Shared<sp/>Key<sp/>Exchange<sp/>Modes<sp/>extension.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>See<sp/>Section<sp/>4.2.9<sp/>in<sp/>RFC<sp/>8446.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="ssl_8h_1aa81307d66cb27f4db67208d785403029" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_PSK_MODE_PURE<sp/><sp/>0<sp/></highlight><highlight class="comment">/*<sp/>Pure<sp/>PSK-based<sp/>exchange<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="ssl_8h_1a1680e05e8a01b76ecece6501f81d6715" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_PSK_MODE_ECDHE<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>PSK+ECDHE-based<sp/>exchange<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>TLS<sp/>1.3<sp/>NamedGroup<sp/>values</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>From<sp/>RF<sp/>8446</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>enum<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Elliptic<sp/>Curve<sp/>Groups<sp/>(ECDHE)</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256r1(0x0017),<sp/>secp384r1(0x0018),<sp/>secp521r1(0x0019),</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x25519(0x001D),<sp/>x448(0x001E),</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Finite<sp/>Field<sp/>Groups<sp/>(DHE)</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffdhe2048(0x0100),<sp/>ffdhe3072(0x0101),<sp/>ffdhe4096(0x0102),</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffdhe6144(0x0103),<sp/>ffdhe8192(0x0104),</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Reserved<sp/>Code<sp/>Points</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffdhe_private_use(0x01FC..0x01FF),</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ecdhe_private_use(0xFE00..0xFEFF),</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xFFFF)</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>}<sp/>NamedGroup;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Elliptic<sp/>Curve<sp/>Groups<sp/>(ECDHE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="ssl_8h_1ad477de1f8e1fbddb31acaca1ce01c639" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="ssl_8h_1a6550352f376b8355df7d8d6446fd3ae8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP192K1<sp/><sp/><sp/><sp/><sp/>0x0012</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="ssl_8h_1a934b2d0dc80e9492bc0d732cd80d8a39" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP192R1<sp/><sp/><sp/><sp/><sp/>0x0013</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="ssl_8h_1aba040d7fd3ff441e0401b131e38465d5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP224K1<sp/><sp/><sp/><sp/><sp/>0x0014</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="ssl_8h_1a32cee14afe2935fd3ee47c04fc76b36a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP224R1<sp/><sp/><sp/><sp/><sp/>0x0015</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="ssl_8h_1ab87ddf97b4343f0c6d41f5a3ac981d03" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP256K1<sp/><sp/><sp/><sp/><sp/>0x0016</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="ssl_8h_1aa464e81938e56c8d70c79c4126aa088f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP256R1<sp/><sp/><sp/><sp/><sp/>0x0017</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="ssl_8h_1a535595c0d22d9b42284a1c64f7e6e956" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP384R1<sp/><sp/><sp/><sp/><sp/>0x0018</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="ssl_8h_1a4d6221ca586ad95c668d1b0c95d17ccf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_SECP521R1<sp/><sp/><sp/><sp/><sp/>0x0019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="ssl_8h_1a703476da66da6d7c5902e949d7853bc6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_BP256R1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x001A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="ssl_8h_1ada2b13a1f20afe662a4a187f19df0f9e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_BP384R1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x001B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="ssl_8h_1a5d588f47e325c6cc1d9ad965f468a82e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_BP512R1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x001C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="ssl_8h_1a1e0b0ec0eb683a1ce7c8a5a486d58ce7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_X25519<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x001D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="ssl_8h_1a9ef5e5416b84bb3f2d158877deb4b847" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_X448<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x001E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Finite<sp/>Field<sp/>Groups<sp/>(DHE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="ssl_8h_1ad78f33d7caf21150650655eecd0bc3f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE2048<sp/><sp/><sp/><sp/><sp/>0x0100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="ssl_8h_1a9f5e48759985b2f3148cc5808b1a8b45" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE3072<sp/><sp/><sp/><sp/><sp/>0x0101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="ssl_8h_1a6c2003b808f36ebf4048ce5befb5adaa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE4096<sp/><sp/><sp/><sp/><sp/>0x0102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="ssl_8h_1a083585f9dae2a8fc682cc8e1b4d8b1d7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE6144<sp/><sp/><sp/><sp/><sp/>0x0103</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="ssl_8h_1abbfa359ccd498ca767fe4a5e7bc03e09" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE8192<sp/><sp/><sp/><sp/><sp/>0x0104</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>TLS<sp/>1.3<sp/>Key<sp/>Exchange<sp/>Modes</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>Mbed<sp/>TLS<sp/>internal<sp/>identifiers<sp/>for<sp/>use<sp/>with<sp/>the<sp/>SSL<sp/>configuration<sp/>API</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>mbedtls_ssl_conf_tls13_key_exchange_modes().</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="ssl_8h_1a8fd596f4fa6cca69f25243ed585b8e55" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>0)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223" refid="ssl_8h_1a8956447545ffa046be2f2c659737cfb2" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL<sp/><sp/><sp/><sp/><sp/><sp/>(1u<sp/>&lt;&lt;<sp/>1)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226" refid="ssl_8h_1ae0dde63de7e8f3e4f989bc8aa23d4f88" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL<sp/><sp/>(1u<sp/>&lt;&lt;<sp/>2)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Convenience<sp/>macros<sp/>for<sp/>sets<sp/>of<sp/>key<sp/>exchanges.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="ssl_8h_1aef912149d5bf7d2f90f1165f486adc09" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235" refid="ssl_8h_1a24c645a336748356706c89e131f6590b" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL)<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238" refid="ssl_8h_1a802f53adc876b9fe455de4a4ea3e959d" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_EPHEMERAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL)<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242" refid="ssl_8h_1a3a5c5f6a0f2a83b872e28dabeecb4006" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_NONE<sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>Various<sp/>constants</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>are<sp/>the<sp/>high<sp/>and<sp/>low<sp/>bytes<sp/>of<sp/>ProtocolVersion<sp/>as<sp/>defined<sp/>by:</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>-<sp/>RFC<sp/>5246:<sp/>ProtocolVersion<sp/>version<sp/>=<sp/>{<sp/>3,<sp/>3<sp/>};<sp/><sp/><sp/><sp/><sp/>//<sp/>TLS<sp/>v1.2</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>-<sp/>RFC<sp/>8446:<sp/>see<sp/>section<sp/>4.2.1</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="ssl_8h_1a9d404d5f3b4c7ebe03da19aa1bf2f23e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAJOR_VERSION_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="ssl_8h_1a3c5a90b4b4aded2190f31f7d4c670cb4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MINOR_VERSION_3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255" refid="ssl_8h_1a103234ebe429fa189e39db40f345d147" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MINOR_VERSION_4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DEPRECATED_REMOVED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="ssl_8h_1acf690cf4772ff3e2df4b8295275e6fc7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TRANSPORT_STREAM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259" refid="ssl_8h_1ac00527bc4661e5d7f2df5e7e96a6a896" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TRANSPORT_DATAGRAM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261" refid="ssl_8h_1aef622c5c0303bce83a09cb1a332c611c" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_HOST_NAME_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>255<sp/></highlight></codeline>
<codeline lineno="262" refid="ssl_8h_1a2fba55215d6262eab642fabaec628a3b" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_ALPN_NAME_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>255<sp/></highlight></codeline>
<codeline lineno="264" refid="ssl_8h_1a1608a5b11d809e2e1a7e30759700bf81" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_ALPN_LIST_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>65535<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>RFC<sp/>6066<sp/>section<sp/>4,<sp/>see<sp/>also<sp/>mfl_code_to_length<sp/>in<sp/>ssl_tls.c</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>NONE<sp/>must<sp/>be<sp/>zero<sp/>so<sp/>that<sp/>memset()ing<sp/>structure<sp/>to<sp/>zero<sp/>works<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="ssl_8h_1a952256aaeb342b5f8cb55fb39891b235" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_FRAG_LEN_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269" refid="ssl_8h_1a148f83e96299be6220fc3c922cfb58d5" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_FRAG_LEN_512<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270" refid="ssl_8h_1ad2d55e32e6514fb146b8681ea914b991" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_FRAG_LEN_1024<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271" refid="ssl_8h_1a08a6eb65d87c8d6565f47689d4e80bd3" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_FRAG_LEN_2048<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="272" refid="ssl_8h_1adfe756e3f577397f4a3328b0e927bb6a" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_FRAG_LEN_4096<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273" refid="ssl_8h_1a256731a4bb52bb1960cc88ec4f350926" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_FRAG_LEN_INVALID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275" refid="ssl_8h_1a2064e7d9ad950b5979d2d6bab6ddc739" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IS_CLIENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="ssl_8h_1a6eb28200b2a66fbc24cdb60e995cf82f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IS_SERVER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="ssl_8h_1a5e3d5af18adf3deece8c6db552044e1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EXTENDED_MS_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="ssl_8h_1a71f29a4b71919584024896d2c06e2447" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EXTENDED_MS_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="ssl_8h_1a288bb09060f3fe4e62907a3e0668fc41" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CID_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="ssl_8h_1af6ddd5b383634049a49d0b5b56d15446" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CID_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="ssl_8h_1ab96eb32c8181525f2d508a0d2feead01" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ETM_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="ssl_8h_1ab46e22481503a76e5437e71be3c45f2d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ETM_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="ssl_8h_1a676d13d335535176e2e75e4eee98833c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_COMPRESS_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="ssl_8h_1a1976b5c76af7b8b8f76c6f302828b387" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_VERIFY_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="ssl_8h_1a781032826cba362cda1c9201490d6f62" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_VERIFY_OPTIONAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="ssl_8h_1acc9ad7a06d7c65260e815a3187a5fb37" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_VERIFY_REQUIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="ssl_8h_1aedae08b9b939f56fd64763aa6df026ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_VERIFY_UNSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/></highlight><highlight class="comment">/*<sp/>Used<sp/>only<sp/>for<sp/>sni_authmode<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="ssl_8h_1a700877ec0d00170fa21b419f23dff7da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_LEGACY_RENEGOTIATION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="ssl_8h_1a8fe0060cf903cffeb0da1f92abdfb2c3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SECURE_RENEGOTIATION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="ssl_8h_1ab2906fd989d6140e2e44156f3f4de539" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_RENEGOTIATION_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="ssl_8h_1a2c3d531d6f50c391c906fee2644d74e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_RENEGOTIATION_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="ssl_8h_1a285e6b3a4779aca09553176120900001" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ANTI_REPLAY_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="ssl_8h_1a34dc22ba8832d5a5d72bb4e5d01ed0d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ANTI_REPLAY_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="ssl_8h_1a2de1929e7819ed07965e08469ae7201f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED<sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="ssl_8h_1af1b45662f14bb9dedf1a477ba6956123" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT<sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="ssl_8h_1a8ce0943627aaacccb0df01c23075232e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION<sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="ssl_8h_1acdc84b7b79f91d4e0628f6d20875d7ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="ssl_8h_1a0c6431df5730ce2690f3f9af1979676b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="ssl_8h_1a5e4abda89afa299baa930e33891b00b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TRUNC_HMAC_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="ssl_8h_1a0fa70647c55d669facfe3364e5d604e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TRUNC_HMAC_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="ssl_8h_1a299866ebaa08c8b37ece3c652dfb8082" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TRUNCATED_HMAC_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10<sp/><sp/></highlight><highlight class="comment">/*<sp/>80<sp/>bits,<sp/>rfc<sp/>6066<sp/>section<sp/>7<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="ssl_8h_1a84702526473717a1c38f14fdbbe9967a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SESSION_TICKETS_DISABLED<sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="ssl_8h_1a6575b4025d4f6586a36e639b78672d7c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SESSION_TICKETS_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="ssl_8h_1afb44a7bdf71d0a1472db0c70596599cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PRESET_DEFAULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="ssl_8h_1a89fceac26c7341fe2e64cb4dd8ecd9f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PRESET_SUITEB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="ssl_8h_1ae117ccb725d2a67af4472db2bc14a49f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="ssl_8h_1a25618afeff372f69c156cf00bb2b87b7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="ssl_8h_1ac32d38803a13fad07eb69d744dff8e0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EARLY_DATA_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="ssl_8h_1a71f076ae34cddbd5d36cfaf2f3f17927" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EARLY_DATA_ENABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="ssl_8h_1ab94daf7f8fddc9293ff6a078179ba727" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_DTLS_SRTP_MKI_UNSUPPORTED<sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="ssl_8h_1a30d70b2f9d91d25295690a4d0193741f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_DTLS_SRTP_MKI_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="ssl_8h_1a349e6ec56cf420f6c597a6e7eaefc27e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_CLIENT<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="ssl_8h_1af3c04d7c219396ebc7220a1c76b58e08" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SRV_CIPHERSUITE_ORDER_SERVER<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_ALG_SHA_384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="ssl_8h_1a965bbe2e720de40c5041b44753d8d863" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_RESUMPTION_KEY_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PSA_WANT_ALG_SHA_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_RESUMPTION_KEY_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>Default<sp/>range<sp/>for<sp/>DTLS<sp/>retransmission<sp/>timer<sp/>value,<sp/>in<sp/>milliseconds.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>RFC<sp/>6347<sp/>4.2.4.1<sp/>says<sp/>from<sp/>1<sp/>second<sp/>to<sp/>60<sp/>seconds.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="ssl_8h_1a50d609cafdb26f3d93ee79a233d13b24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN<sp/><sp/><sp/><sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="ssl_8h_1ad8876bbe6b4d64163299aa99c0977abe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX<sp/><sp/><sp/>60000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>fragment<sp/>length<sp/>in<sp/>bytes,</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>determines<sp/>the<sp/>size<sp/>of<sp/>each<sp/>of<sp/>the<sp/>two<sp/>internal<sp/>I/O<sp/>buffers.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>Note:<sp/>the<sp/>RFC<sp/>defines<sp/>the<sp/>default<sp/>size<sp/>of<sp/>SSL<sp/>/<sp/>TLS<sp/>messages.<sp/>If<sp/>you</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>change<sp/>the<sp/>value<sp/>here,<sp/>other<sp/>clients<sp/>/<sp/>servers<sp/>may<sp/>not<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>communicate<sp/>with<sp/>you<sp/>anymore.<sp/>Only<sp/>change<sp/>this<sp/>value<sp/>if<sp/>you<sp/>control</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>both<sp/>sides<sp/>of<sp/>the<sp/>connection<sp/>and<sp/>have<sp/>it<sp/>reduced<sp/>at<sp/>both<sp/>sides,<sp/>or</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>if<sp/>you&apos;re<sp/>using<sp/>the<sp/>Max<sp/>Fragment<sp/>Length<sp/>extension<sp/>and<sp/>you<sp/>know<sp/>all<sp/>your</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>peers<sp/>are<sp/>using<sp/>it<sp/>too!</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_IN_CONTENT_LEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="ssl_8h_1aabb3c84cb377d3d0291225ad6aab6ade" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_IN_CONTENT_LEN<sp/>16384</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_OUT_CONTENT_LEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="ssl_8h_1ae6d6fb50d2997e49b202fa9fb4356158" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_OUT_CONTENT_LEN<sp/>16384</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>number<sp/>of<sp/>heap-allocated<sp/>bytes<sp/>for<sp/>the<sp/>purpose<sp/>of</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>DTLS<sp/>handshake<sp/>message<sp/>reassembly<sp/>and<sp/>future<sp/>message<sp/>buffering.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_DTLS_MAX_BUFFERING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="ssl_8h_1a2eee1c4027ef23dfcd764101c9e95edf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_DTLS_MAX_BUFFERING<sp/>32768</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>length<sp/>of<sp/>CIDs<sp/>for<sp/>incoming<sp/>and<sp/>outgoing<sp/>messages.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_CID_IN_LEN_MAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="ssl_8h_1a326a31352ca97afdc7a94bac39577d2e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CID_IN_LEN_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_CID_OUT_LEN_MAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="ssl_8h_1a17df67385a32a5648a5c3d85777cdc8e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CID_OUT_LEN_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_CID_TLS1_3_PADDING_GRANULARITY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="ssl_8h_1a6c3638ed1c6c9a77ca62b35b8fa82597" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CID_TLS1_3_PADDING_GRANULARITY<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_MAX_EARLY_DATA_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="ssl_8h_1a61da138676b0f01dac6e045949ab4387" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MAX_EARLY_DATA_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_TLS1_3_TICKET_AGE_TOLERANCE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="ssl_8h_1a809f2bc417bb651aec1218f4448ee174" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_AGE_TOLERANCE<sp/>6000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_TLS1_3_TICKET_NONCE_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="ssl_8h_1a7fa88207224d12b4b8819468dc573a68" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_NONCE_LENGTH<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_SSL_TLS1_3_DEFAULT_NEW_SESSION_TICKETS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="ssl_8h_1a9e73436ef33056d4f74db72d484dea6e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_DEFAULT_NEW_SESSION_TICKETS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>Default<sp/>to<sp/>standard<sp/>CID<sp/>mode</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(MBEDTLS_SSL_DTLS_CONNECTION_ID_COMPAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID_COMPAT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>Length<sp/>of<sp/>the<sp/>verify<sp/>data<sp/>for<sp/>secure<sp/>renegotiation</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="ssl_8h_1a7bb4393075100dbfbb37008fb81c6d29" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_VERIFY_DATA_MAX_LEN<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>Signaling<sp/>ciphersuite<sp/>values<sp/>(SCSV)</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="ssl_8h_1adcfcbbd2bb1a0d4c2a9589f371fd6b83" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO<sp/><sp/><sp/><sp/>0xFF<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/>Supported<sp/>Signature<sp/>and<sp/>Hash<sp/>algorithms<sp/>(For<sp/>TLS<sp/>1.2)</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>RFC<sp/>5246<sp/>section<sp/>7.4.1.4.1</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="ssl_8h_1a3f42b17b50c1f2f83b6537e4db62548e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HASH_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="ssl_8h_1a7a2d68114d36533bfe4005e9727033ff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HASH_MD5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="ssl_8h_1a2b431c6897abb19d96c60e2642d66a39" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HASH_SHA1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="ssl_8h_1a5bfe188244e611233538b888cb74a3b7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HASH_SHA224<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="ssl_8h_1a674cc54218acc7ea986608cc567040f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HASH_SHA256<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="ssl_8h_1aba929ac98d93a0e9248777e4a8688728" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HASH_SHA384<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="ssl_8h_1aecf70f5833670a2ac5821b57006aca16" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HASH_SHA512<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="ssl_8h_1ac4da5bf751b2f10ce5cc889ecc65b9a1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SIG_ANON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="ssl_8h_1a2ad0ae8214df337efb1bde3eb83673f1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SIG_RSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="ssl_8h_1aa87b5d7f48bfdd4eb2d936b138ddead3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SIG_ECDSA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>TLS<sp/>1.3<sp/>signature<sp/>algorithms</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>RFC<sp/>8446,<sp/>Section<sp/>4.2.2</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RSASSA-PKCS1-v1_5<sp/>algorithms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="ssl_8h_1aa8208575e78d3c38878173dbdbc114ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA256<sp/>0x0401</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="ssl_8h_1a8b95fe91ca22ac91af52df1557c3e05f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA384<sp/>0x0501</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="ssl_8h_1a6b33ac12465a246ec12e2eb56ff4fee8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA512<sp/>0x0601</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ECDSA<sp/>algorithms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="ssl_8h_1a3d7a85340883dffa149cfe30800ab5bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_ECDSA_SECP256R1_SHA256<sp/>0x0403</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="ssl_8h_1a87d74699af4a4a8d6370d24628d90c76" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_ECDSA_SECP384R1_SHA384<sp/>0x0503</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="ssl_8h_1af0920298448171eedc25add7a7118e95" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_ECDSA_SECP521R1_SHA512<sp/>0x0603</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RSASSA-PSS<sp/>algorithms<sp/>with<sp/>public<sp/>key<sp/>OID<sp/>rsaEncryption<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="ssl_8h_1a264defd5321c6cd88eee543a87b75172" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA256<sp/>0x0804</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="ssl_8h_1a3558da06429c43b9ee9b90e6cee78ae4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA384<sp/>0x0805</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="ssl_8h_1ab0adba274c99e4b90bf6d375453c5904" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PSS_RSAE_SHA512<sp/>0x0806</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>EdDSA<sp/>algorithms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="ssl_8h_1ae5c932e6c45739a6f46c23843b5f03f1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_ED25519<sp/>0x0807</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="ssl_8h_1aa99291b5c956893ff80cca55bd3d9a43" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_ED448<sp/>0x0808</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RSASSA-PSS<sp/>algorithms<sp/>with<sp/>public<sp/>key<sp/>OID<sp/>RSASSA-PSS<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="ssl_8h_1aff6916bea87efbc433fdbaf0ea854056" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA256<sp/>0x0809</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="ssl_8h_1abbea98138d74e2db2c958d105274d6a2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA384<sp/>0x080A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="ssl_8h_1a8a0a23199be45c92f2b1e5a237a4c223" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PSS_PSS_SHA512<sp/>0x080B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>LEGACY<sp/>ALGORITHMS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="ssl_8h_1a2d76df56a30d90bdd825b71d89382794" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_RSA_PKCS1_SHA1<sp/>0x0201</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="ssl_8h_1aeed0a934b689e9d0cad7c5c1e485b6df" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_ECDSA_SHA1<sp/><sp/><sp/><sp/><sp/>0x0203</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="ssl_8h_1a067f54a2a9f393c68aa9b01ab0522393" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_SIG_NONE<sp/>0x0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>Client<sp/>Certificate<sp/>Types</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>RFC<sp/>5246<sp/>section<sp/>7.4.4<sp/>plus<sp/>RFC<sp/>4492<sp/>section<sp/>5.5</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="ssl_8h_1abb389513e320bc337fa4a8fb75eb5f24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CERT_TYPE_RSA_SIGN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="ssl_8h_1a5dd842a86575ae2c2c6173379f4ce7c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN<sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>Message,<sp/>alert<sp/>and<sp/>handshake<sp/>types</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="ssl_8h_1a80034e4bb6039b0fe59643ef73158685" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC<sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="ssl_8h_1a8e7b8865c215ffd865b665e615cf2543" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MSG_ALERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="ssl_8h_1af9d460925507c3eb3c16afb4e479c4e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MSG_HANDSHAKE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="ssl_8h_1a46568720d8bc2adb85639b43661e165d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MSG_APPLICATION_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="ssl_8h_1aeeff4c1c13190f14ffe28b5a81effbb6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_MSG_CID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="ssl_8h_1a23ca8f8544f9713e67abcb8ef55948bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_LEVEL_WARNING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="ssl_8h_1a8ad70eb6a9bae37818e795724675fbfb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_LEVEL_FATAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="ssl_8h_1a4472901cb8f53faa48101c42b48e44de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x00<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="ssl_8h_1ab17a92a7d0512a71310b8a4841a64442" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE<sp/><sp/><sp/><sp/>10<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x0A<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="ssl_8h_1a0864fcf3359ee66e3959f5efb4c0505f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x14<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="ssl_8h_1a4820ff3e880f3d96021c2aecde7c2887" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED<sp/><sp/><sp/><sp/><sp/>21<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x15<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="ssl_8h_1a64774f767d912002125bee0ac3db1f5c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW<sp/><sp/><sp/><sp/><sp/><sp/><sp/>22<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x16<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="ssl_8h_1a1c54745afbef4c6aa6174f5f25ffd476" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE<sp/>30<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x1E<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="ssl_8h_1a107264f1597432c595db416d1b9a0985" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE<sp/><sp/><sp/><sp/><sp/>40<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x28<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="ssl_8h_1a722ddc936f841b4eb603fc5a39e88bbe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_NO_CERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x29<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="ssl_8h_1ae6412b21ed10bc53eff53050f36d8ebe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_BAD_CERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>42<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x2A<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="ssl_8h_1a11b1fb765e3a67f5c51478f0ac60aea5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT<sp/><sp/><sp/><sp/><sp/><sp/>43<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x2B<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="ssl_8h_1ac1463d5ac5ecdb318b8476e8626ae4ae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>44<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x2C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="ssl_8h_1a1f9e718b111b0d5feef358042e3b8056" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>45<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x2D<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="ssl_8h_1a0ae60bd9af40ced069f670559a8ce79b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>46<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x2E<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="ssl_8h_1a547c792d9f5ab56adc98af556b8e7cb3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER<sp/><sp/><sp/><sp/><sp/>47<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x2F<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="ssl_8h_1a70c944ab8ac62a1a4657ba0e1460a9fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>48<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x30<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="ssl_8h_1acd89a8eae2cbfbd2263bdcfa8248c285" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x31<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="ssl_8h_1a4e78bc53317a0dc97c85b0670d3ec47a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x32<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="ssl_8h_1af7656ca08ca9231d9b5a1d96657f2ed4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>51<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x33<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="ssl_8h_1a0ead35e5ec582fde31ff2719a429b496" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION<sp/><sp/><sp/><sp/>60<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x3C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="ssl_8h_1a2436b79c76bb7c9a64a19324938fe7f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION<sp/><sp/><sp/><sp/><sp/><sp/>70<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x46<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="ssl_8h_1a60f137fca04f01dddc6cc415e6a102d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY<sp/>71<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x47<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="ssl_8h_1a925ce2353fafc7b9b67f819de57fd828" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>80<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x50<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="ssl_8h_1a721eedb9c97af415079190c133c8085e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK<sp/>86<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x56<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="ssl_8h_1ae0f3fcb8c4a447b421ab37200ab021de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_USER_CANCELED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>90<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x5A<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="ssl_8h_1a919ba6ac88766715bd23402c8d5de2c3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION<sp/><sp/><sp/><sp/><sp/>100<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x64<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="ssl_8h_1a99d1bfec3e09d375d8557e17111b0e82" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_MISSING_EXTENSION<sp/><sp/><sp/><sp/>109<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x6d<sp/>--<sp/>new<sp/>in<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="ssl_8h_1a9d6786a28a09997887960bbf49f237c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT<sp/><sp/><sp/><sp/><sp/><sp/>110<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x6E<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="ssl_8h_1a5003b563ba0fe6a695504fa56dc13c42" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME<sp/><sp/><sp/><sp/>112<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x70<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="ssl_8h_1a2f5fe3554740f9d2d28b8b5265667a97" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY<sp/>115<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x73<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="ssl_8h_1af1bc846be5228870c54de8c0e201c947" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_CERT_REQUIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>116<sp/><sp/></highlight><highlight class="comment">/*<sp/>0x74<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="ssl_8h_1ab595e62e10ccc2879c5a3fc6f90789af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL<sp/>120<sp/></highlight><highlight class="comment">/*<sp/>0x78<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="ssl_8h_1a706ff16a6c43733a7da65246859fc830" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_HELLO_REQUEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="ssl_8h_1ae768902fb94d3388219bf10f07a878ff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_CLIENT_HELLO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="ssl_8h_1ae64b6d9cb5a4c3f089f7239813e3908f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_SERVER_HELLO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="ssl_8h_1ac5f7ae374a1f79b8b6f5c2d698575757" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="ssl_8h_1aa6a45148b438c8269afa04e972db48ff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_NEW_SESSION_TICKET<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="ssl_8h_1a63ac646103b72f66fe90c495a75eb864" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_END_OF_EARLY_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="ssl_8h_1a6531f56dccb1bd406c2a562c6505ff08" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_ENCRYPTED_EXTENSIONS<sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="ssl_8h_1aa27392833c81be2caee387ac7b619c52" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_CERTIFICATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="ssl_8h_1a8d7241ce99f979d7dff0a2b2217bfad4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE<sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="ssl_8h_1aed6cdea239c61bc37f2b8bbf68d2df28" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_CERTIFICATE_REQUEST<sp/><sp/><sp/><sp/><sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="ssl_8h_1a4f56b4e3a2aad3bd2872b9894b33adfd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_SERVER_HELLO_DONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="ssl_8h_1aae66986e57bfa975d82d6a445178ee9a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_CERTIFICATE_VERIFY<sp/><sp/><sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="ssl_8h_1a068dedb465afb5170cffaab265f082e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE<sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="ssl_8h_1a6a08488cd4c6e2f8ec9e800779cc9e2d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_FINISHED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="ssl_8h_1af53c3b9e76607b1dfebdac31369049b1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_HS_MESSAGE_HASH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>254</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>TLS<sp/>extensions</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="ssl_8h_1a942dee25d2dee550625b17f9d1a3a256" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SERVERNAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="ssl_8h_1a5d7028236245fee182f6243497b0398c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="ssl_8h_1a29f3ec6c787cf368ad28f19c78821179" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="ssl_8h_1afe71b85be37d12a7cfc9c0236c4d0bcf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_TRUNCATED_HMAC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="ssl_8h_1a5feea46541d2eb5ab4d5712870d6f45b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_STATUS_REQUEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>6066<sp/>TLS<sp/>1.2<sp/>and<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="ssl_8h_1affdee4d954541f35389c538c56a4a187" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES<sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="ssl_8h_1a25b9f19a6bea5214c24a1b8f0e38ea1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SUPPORTED_GROUPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8422,7919<sp/>TLS<sp/>1.2<sp/>and<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="ssl_8h_1ac0b55c07d3c7a93799a6e7438b8feb09" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS<sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565" refid="ssl_8h_1a633e991fcfa7e1121df9edc61901b62a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SIG_ALG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="ssl_8h_1af38f78f24a94d295e75dff6ad108a2ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_USE_SRTP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="ssl_8h_1acfc43f8a43029fd81a458931ab52c0ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_HEARTBEAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>6520<sp/>TLS<sp/>1.2<sp/>and<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="ssl_8h_1a56245d7f7abff26b28609d798bf75716" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_ALPN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="ssl_8h_1a8fbd1ed6a86c39876d238346b72db192" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SCT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>6962<sp/>TLS<sp/>1.2<sp/>and<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="ssl_8h_1aa3515a0fab4f0cd0908208ff1ae92517" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_CLI_CERT_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>7250<sp/>TLS<sp/>1.2<sp/>and<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="ssl_8h_1a12fe0d1edd3751f365f313542c6651d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SERV_CERT_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>7250<sp/>TLS<sp/>1.2<sp/>and<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="ssl_8h_1a6bcb37751a426403b4e077690b4d8247" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_PADDING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>7685<sp/>TLS<sp/>1.2<sp/>and<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574" refid="ssl_8h_1a37fefdb5c274c60b7e9752d22faf6ceb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22<sp/></highlight><highlight class="comment">/*<sp/>0x16<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575" refid="ssl_8h_1a7c0c6cc7f890739240584b50fdd637ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET<sp/><sp/>0x0017<sp/></highlight><highlight class="comment">/*<sp/>23<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="ssl_8h_1a7a09fff1b520ceedb16d6db14a8a8393" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_RECORD_SIZE_LIMIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>28<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8449<sp/>(implemented<sp/>for<sp/>TLS<sp/>1.3<sp/>only)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="ssl_8h_1a800c6b6b24b265e7dc48992a8614fc91" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SESSION_TICKET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>35</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="ssl_8h_1a5af79b625c8a85d7eb15fbe5be5153b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_PRE_SHARED_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="ssl_8h_1ab5f1ce01ce00efb710f366ebc9f931ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_EARLY_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>42<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="ssl_8h_1a1a6ba945dbaaa6703e9cdfcc72e72f4e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SUPPORTED_VERSIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>43<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="ssl_8h_1a0349f5a9ffc2f4af4d25fd70d7fe18d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_COOKIE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>44<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="ssl_8h_1a6b81206c8bb9ad34988c237669387753" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_PSK_KEY_EXCHANGE_MODES<sp/><sp/><sp/><sp/><sp/><sp/>45<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587" refid="ssl_8h_1a49197d8992298c1ffdddea6fc35aadd6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_CERT_AUTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>47<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="ssl_8h_1aed6984dfe3ff4aa11fec878760fbf2c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_OID_FILTERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>48<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="ssl_8h_1a985a82bb617f5129329a4f5ec33828b5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_POST_HANDSHAKE_AUTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="ssl_8h_1a002c8e60b0171f51fe5d42c5a69140f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_SIG_ALG_CERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="ssl_8h_1aca481d0c225b40125fea5c675f5af7cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_KEY_SHARE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>51<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>8446<sp/>TLS<sp/>1.3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID_COMPAT<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594" refid="ssl_8h_1ac101a507e09c252a9a8b1a0a46d6ca8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_CID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>54<sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>9146<sp/>DTLS<sp/>1.2<sp/>CID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_CID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>254<sp/></highlight><highlight class="comment">/*<sp/>Pre-RFC<sp/>9146<sp/>DTLS<sp/>1.2<sp/>CID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="ssl_8h_1a53429efaa97d62c94ec2cbd259e7fc58" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_ECJPAKE_KKPP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>256<sp/></highlight><highlight class="comment">/*<sp/>experimental<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601" refid="ssl_8h_1a57fb40ff7186bfa2512104fa793435aa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO<sp/><sp/><sp/><sp/><sp/><sp/>0xFF01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>Size<sp/>defines</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PSK_MAX_LEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>library<sp/>supports<sp/>TLS<sp/>1.3<sp/>tickets<sp/>and<sp/>the<sp/>cipher<sp/>suite</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>TLS1-3-AES-256-GCM-SHA384,<sp/>set<sp/>the<sp/>PSK<sp/>maximum<sp/>length<sp/>to<sp/>48<sp/>instead<sp/>of<sp/>32.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>That<sp/>way,<sp/>the<sp/>TLS<sp/>1.3<sp/>client<sp/>and<sp/>server<sp/>are<sp/>able<sp/>to<sp/>resume<sp/>sessions<sp/>where</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>the<sp/>cipher<sp/>suite<sp/>is<sp/>TLS1-3-AES-256-GCM-SHA384<sp/>(pre-shared<sp/>keys<sp/>are<sp/>48</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*<sp/>bytes<sp/>long<sp/>in<sp/>that<sp/>case).</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_AES_C)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_GCM_C)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_MD_CAN_SHA384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="ssl_8h_1a084cb30b175a3d44b33e625cd56aab6e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PSK_MAX_LEN<sp/>48<sp/></highlight><highlight class="comment">/*<sp/>384<sp/>bits<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PSK_MAX_LEN<sp/>32<sp/></highlight><highlight class="comment">/*<sp/>256<sp/>bits<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_PSK_MAX_LEN<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Dummy<sp/>type<sp/>used<sp/>only<sp/>for<sp/>its<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="unionmbedtls__ssl__premaster__secret" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionmbedtls__ssl__premaster__secret" kindref="compound">mbedtls_ssl_premaster_secret</ref><sp/>{</highlight></codeline>
<codeline lineno="626" refid="unionmbedtls__ssl__premaster__secret_1a940bca86f28dbc0947953034dd07b7b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1a940bca86f28dbc0947953034dd07b7b4" kindref="member">dummy</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>the<sp/>union<sp/>non-empty<sp/>even<sp/>with<sp/>SSL<sp/>disabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="unionmbedtls__ssl__premaster__secret_1aa81cb4c88b891c552a5382460eb32f94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1aa81cb4c88b891c552a5382460eb32f94" kindref="member">_pms_rsa</ref>[48];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>5246<sp/>8.1.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="unionmbedtls__ssl__premaster__secret_1a4d40cce21beb555ce7c4064bf330237c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1a4d40cce21beb555ce7c4064bf330237c" kindref="member">_pms_dhm</ref>[<ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref>];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>5246<sp/>8.1.2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)<sp/><sp/><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)<sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)<sp/><sp/><sp/><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="unionmbedtls__ssl__premaster__secret_1af35264f678322dccd349d3486fa3645e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1af35264f678322dccd349d3486fa3645e" kindref="member">_pms_ecdh</ref>[<ref refid="ecp_8h_1aba9fdfc8a8dd423182616e5708abf607" kindref="member">MBEDTLS_ECP_MAX_BYTES</ref>];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>4492<sp/>5.10<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640" refid="unionmbedtls__ssl__premaster__secret_1a61b5f1e012670e08b564867e2a5aa84b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1a61b5f1e012670e08b564867e2a5aa84b" kindref="member">_pms_psk</ref>[4<sp/>+<sp/>2<sp/>*<sp/><ref refid="ssl_8h_1a084cb30b175a3d44b33e625cd56aab6e" kindref="member">MBEDTLS_PSK_MAX_LEN</ref>];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>4279<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1ad3ec56031a020dfc72ca356eadb4cc9a" kindref="member">_pms_dhe_psk</ref>[4<sp/>+<sp/><ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref></highlight></codeline>
<codeline lineno="644" refid="unionmbedtls__ssl__premaster__secret_1ad3ec56031a020dfc72ca356eadb4cc9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="ssl_8h_1a084cb30b175a3d44b33e625cd56aab6e" kindref="member">MBEDTLS_PSK_MAX_LEN</ref>];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>4279<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="unionmbedtls__ssl__premaster__secret_1a6f84cacb8dfa3313b0fab5c72055c5e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1a6f84cacb8dfa3313b0fab5c72055c5e1" kindref="member">_pms_rsa_psk</ref>[52<sp/>+<sp/><ref refid="ssl_8h_1a084cb30b175a3d44b33e625cd56aab6e" kindref="member">MBEDTLS_PSK_MAX_LEN</ref>];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>4279<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1a118de301deea6334c6ddc5338e828251" kindref="member">_pms_ecdhe_psk</ref>[4<sp/>+<sp/><ref refid="ecp_8h_1aba9fdfc8a8dd423182616e5708abf607" kindref="member">MBEDTLS_ECP_MAX_BYTES</ref></highlight></codeline>
<codeline lineno="651" refid="unionmbedtls__ssl__premaster__secret_1a118de301deea6334c6ddc5338e828251" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="ssl_8h_1a084cb30b175a3d44b33e625cd56aab6e" kindref="member">MBEDTLS_PSK_MAX_LEN</ref>];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>5489<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654" refid="unionmbedtls__ssl__premaster__secret_1a3909a45c8aecdd94e0aada901ac9a635" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionmbedtls__ssl__premaster__secret_1a3909a45c8aecdd94e0aada901ac9a635" kindref="member">_pms_ecjpake</ref>[32];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Thread<sp/>spec:<sp/>SHA-256<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal">};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="ssl_8h_1ad842f7de937285905b38ec3d5b5be387" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PREMASTER_SIZE<sp/><sp/><sp/><sp/><sp/>sizeof(union<sp/>mbedtls_ssl_premaster_secret)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660" refid="ssl_8h_1ab93b6fad9a65041ff32063f28616808f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS1_3_MD_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_HASH_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Length<sp/>in<sp/>number<sp/>of<sp/>bytes<sp/>of<sp/>the<sp/>TLS<sp/>sequence<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="ssl_8h_1a520871f7ed32db9af63564771a61b82c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_SEQUENCE_NUMBER_LEN<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>SSL<sp/>state<sp/>machine</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="674" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ad0d0417e506d2c0dd9d3ba8f8ed16b98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ad0d0417e506d2c0dd9d3ba8f8ed16b98" kindref="member">MBEDTLS_SSL_HELLO_REQUEST</ref>,</highlight></codeline>
<codeline lineno="675" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a719dfc3139318a9433c982d5ad7e1da3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a719dfc3139318a9433c982d5ad7e1da3" kindref="member">MBEDTLS_SSL_CLIENT_HELLO</ref>,</highlight></codeline>
<codeline lineno="676" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a3a8fbf7a2b30a55fc54919f44ecec277" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a3a8fbf7a2b30a55fc54919f44ecec277" kindref="member">MBEDTLS_SSL_SERVER_HELLO</ref>,</highlight></codeline>
<codeline lineno="677" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a75ce38da6d18a1bbb536e90545de25a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a75ce38da6d18a1bbb536e90545de25a2" kindref="member">MBEDTLS_SSL_SERVER_CERTIFICATE</ref>,</highlight></codeline>
<codeline lineno="678" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a2fa8d6dec9530663abd97f1e40a73048" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a2fa8d6dec9530663abd97f1e40a73048" kindref="member">MBEDTLS_SSL_SERVER_KEY_EXCHANGE</ref>,</highlight></codeline>
<codeline lineno="679" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a7ec5efe40ef7cd3eb2a1822c3e1f5835" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a7ec5efe40ef7cd3eb2a1822c3e1f5835" kindref="member">MBEDTLS_SSL_CERTIFICATE_REQUEST</ref>,</highlight></codeline>
<codeline lineno="680" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a0f515cc56cbc0c9a361776b25076d585" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a0f515cc56cbc0c9a361776b25076d585" kindref="member">MBEDTLS_SSL_SERVER_HELLO_DONE</ref>,</highlight></codeline>
<codeline lineno="681" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ad9148742aef0e7d5dfc3347e7fcaac1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ad9148742aef0e7d5dfc3347e7fcaac1c" kindref="member">MBEDTLS_SSL_CLIENT_CERTIFICATE</ref>,</highlight></codeline>
<codeline lineno="682" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a5665849f570a62c18646f929949c0a58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a5665849f570a62c18646f929949c0a58" kindref="member">MBEDTLS_SSL_CLIENT_KEY_EXCHANGE</ref>,</highlight></codeline>
<codeline lineno="683" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a0585b241140cf6b0833b5c8bc77d154a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a0585b241140cf6b0833b5c8bc77d154a" kindref="member">MBEDTLS_SSL_CERTIFICATE_VERIFY</ref>,</highlight></codeline>
<codeline lineno="684" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0abba1c6f9a06c48dc59cabb38230b336f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0abba1c6f9a06c48dc59cabb38230b336f" kindref="member">MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC</ref>,</highlight></codeline>
<codeline lineno="685" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a856895e8166b855be5e1655bc90a85ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a856895e8166b855be5e1655bc90a85ea" kindref="member">MBEDTLS_SSL_CLIENT_FINISHED</ref>,</highlight></codeline>
<codeline lineno="686" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a9ec83156132a2a9989c1639cabbf8862" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a9ec83156132a2a9989c1639cabbf8862" kindref="member">MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</ref>,</highlight></codeline>
<codeline lineno="687" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a2f5c45008331d3bef3ee8b4830bb43d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a2f5c45008331d3bef3ee8b4830bb43d7" kindref="member">MBEDTLS_SSL_SERVER_FINISHED</ref>,</highlight></codeline>
<codeline lineno="688" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ade6250da8ee1486c5dc8adbd2bc4a176" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ade6250da8ee1486c5dc8adbd2bc4a176" kindref="member">MBEDTLS_SSL_FLUSH_BUFFERS</ref>,</highlight></codeline>
<codeline lineno="689" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ab97eae0c72f041818f8af2cfafac7e5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ab97eae0c72f041818f8af2cfafac7e5c" kindref="member">MBEDTLS_SSL_HANDSHAKE_WRAPUP</ref>,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a221b50a0bf3643f2256b61ef22a26f15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a221b50a0bf3643f2256b61ef22a26f15" kindref="member">MBEDTLS_SSL_NEW_SESSION_TICKET</ref>,</highlight></codeline>
<codeline lineno="692" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0aa0a4ac1bd375ca695704302c09f6f116" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0aa0a4ac1bd375ca695704302c09f6f116" kindref="member">MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT</ref>,</highlight></codeline>
<codeline lineno="693" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae8666c581f188cf27f559ec435d583a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae8666c581f188cf27f559ec435d583a8" kindref="member">MBEDTLS_SSL_HELLO_RETRY_REQUEST</ref>,</highlight></codeline>
<codeline lineno="694" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a36f36dc7cb3fb11cb4627368692f11f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a36f36dc7cb3fb11cb4627368692f11f7" kindref="member">MBEDTLS_SSL_ENCRYPTED_EXTENSIONS</ref>,</highlight></codeline>
<codeline lineno="695" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a181e9e3d5e571d56a176a654cc7efa77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a181e9e3d5e571d56a176a654cc7efa77" kindref="member">MBEDTLS_SSL_END_OF_EARLY_DATA</ref>,</highlight></codeline>
<codeline lineno="696" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0abc15d3bb19b146113c75f8e416acf762" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0abc15d3bb19b146113c75f8e416acf762" kindref="member">MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY</ref>,</highlight></codeline>
<codeline lineno="697" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0aba527426b0b0f62fd381f880baeef8d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0aba527426b0b0f62fd381f880baeef8d7" kindref="member">MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED</ref>,</highlight></codeline>
<codeline lineno="698" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a6b7557332cb138de29d27774ee9f680c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a6b7557332cb138de29d27774ee9f680c" kindref="member">MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO</ref>,</highlight></codeline>
<codeline lineno="699" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0afc7bed4793a544c04242606791ae5870" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0afc7bed4793a544c04242606791ae5870" kindref="member">MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO</ref>,</highlight></codeline>
<codeline lineno="700" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae52cf5231f3df8e36f8b10c49ba34f92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae52cf5231f3df8e36f8b10c49ba34f92" kindref="member">MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO</ref>,</highlight></codeline>
<codeline lineno="701" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a4d494ffc47de7af33742337d212e00d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a4d494ffc47de7af33742337d212e00d8" kindref="member">MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST</ref>,</highlight></codeline>
<codeline lineno="702" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a077633740a69a39daf3cd1366cf57f45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a077633740a69a39daf3cd1366cf57f45" kindref="member">MBEDTLS_SSL_HANDSHAKE_OVER</ref>,</highlight></codeline>
<codeline lineno="703" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae7d4f4e6de5526910081bc4ca3a4e9c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0ae7d4f4e6de5526910081bc4ca3a4e9c9" kindref="member">MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET</ref>,</highlight></codeline>
<codeline lineno="704" refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0adaaf5c347e1cce34d8f328a277b6ab38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0adaaf5c347e1cce34d8f328a277b6ab38" kindref="member">MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH</ref>,</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0" kindref="member">mbedtls_ssl_states</ref>;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="ssl_8h_1a38e2b400d361f42f85833cdc30b3916e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a38e2b400d361f42f85833cdc30b3916e" kindref="member">mbedtls_ssl_send_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="ssl_8h_1ac06b19b96b643090c55f19b6c28b10c4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac06b19b96b643090c55f19b6c28b10c4" kindref="member">mbedtls_ssl_recv_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="ssl_8h_1a6d615ca95c8a67d7c5f9d7d256dc09e6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a6d615ca95c8a67d7c5f9d7d256dc09e6" kindref="member">mbedtls_ssl_recv_timeout_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="801" refid="ssl_8h_1a61c5d9ed63c50ee809eec98820d3f36c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a61c5d9ed63c50ee809eec98820d3f36c" kindref="member">mbedtls_ssl_set_timer_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>int_ms,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fin_ms);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="816" refid="ssl_8h_1adea005600b532d788c05e9d01b42895b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1adea005600b532d788c05e9d01b42895b" kindref="member">mbedtls_ssl_get_timer_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defined<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="ssl_8h_1a3a2ac45d548df527404c929bdce76ea6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref>;</highlight></codeline>
<codeline lineno="820" refid="ssl_8h_1a225b5187c17ee65d13a14450bf228068" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref>;</highlight></codeline>
<codeline lineno="821" refid="ssl_8h_1afc3ee8174ecf267f5ff42b278376a2fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref>;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defined<sp/>in<sp/>library/ssl_misc.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824" refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref><sp/><ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref>;</highlight></codeline>
<codeline lineno="825" refid="ssl_8h_1a5c13e913e3b1de510e5d12c1b0ae9358" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="ssl_8h_1a5c13e913e3b1de510e5d12c1b0ae9358" kindref="member">mbedtls_ssl_handshake_params</ref><sp/><ref refid="ssl_8h_1a5c13e913e3b1de510e5d12c1b0ae9358" kindref="member">mbedtls_ssl_handshake_params</ref>;</highlight></codeline>
<codeline lineno="826" refid="ssl_8h_1a4ff9b096662c00c26b6d44d8bf4bc5d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="ssl_8h_1a4ff9b096662c00c26b6d44d8bf4bc5d5" kindref="member">mbedtls_ssl_sig_hash_set_t</ref><sp/><ref refid="ssl_8h_1a4ff9b096662c00c26b6d44d8bf4bc5d5" kindref="member">mbedtls_ssl_sig_hash_set_t</ref>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="ssl_8h_1af06d98867191eb685ab0c7067840b6f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="ssl_8h_1af06d98867191eb685ab0c7067840b6f3" kindref="member">mbedtls_ssl_key_cert</ref><sp/><ref refid="ssl_8h_1af06d98867191eb685ab0c7067840b6f3" kindref="member">mbedtls_ssl_key_cert</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_DTLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831" refid="ssl_8h_1ac0357eb38b019a7638e34852ac90f6d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="ssl_8h_1ac0357eb38b019a7638e34852ac90f6d7" kindref="member">mbedtls_ssl_flight_item</ref><sp/><ref refid="ssl_8h_1ac0357eb38b019a7638e34852ac90f6d7" kindref="member">mbedtls_ssl_flight_item</ref>;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835" refid="ssl_8h_1afd43849d89a2cbfde96100a424440b4c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_RESUMPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1U<sp/>&lt;&lt;<sp/>0<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837" refid="ssl_8h_1a410978b7f26c327381a786cd591670d8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_EPHEMERAL_RESUMPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_PSK_EPHEMERAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1U<sp/>&lt;&lt;<sp/>2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839" refid="ssl_8h_1ae5632f497b52a251b554de64c8f675e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_EARLY_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U<sp/>&lt;&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="ssl_8h_1ac482b30e69fe356f86fd9ffd94531331" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_TLS1_3_TICKET_FLAGS_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_RESUMPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_PSK_EPHEMERAL_RESUMPTION<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_TLS1_3_TICKET_ALLOW_EARLY_DATA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="ssl_8h_1a0ed860c5a383e14f7448e82df1e52e3a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a0ed860c5a383e14f7448e82df1e52e3a" kindref="member">mbedtls_ssl_cache_get_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*session_id,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>session_id_len,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session);</highlight></codeline>
<codeline lineno="892" refid="ssl_8h_1aacaaebff1203d11ba336eac1af7276b8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aacaaebff1203d11ba336eac1af7276b8" kindref="member">mbedtls_ssl_cache_set_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*session_id,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>session_id_len,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ASYNC_PRIVATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="970" refid="ssl_8h_1ad57308aa77db11dbc3551fd92deb2520" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ad57308aa77db11dbc3551fd92deb2520" kindref="member">mbedtls_ssl_async_sign_t</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*cert,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036" refid="ssl_8h_1ac18191035f2598e3311d24a3ae40a0fa" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac18191035f2598e3311d24a3ae40a0fa" kindref="member">mbedtls_ssl_async_decrypt_t</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*cert,</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_len);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084" refid="ssl_8h_1a6a67de0c00f4aff4500ece33645a96cd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a6a67de0c00f4aff4500ece33645a96cd" kindref="member">mbedtls_ssl_async_resume_t</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_len,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_size);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106" refid="ssl_8h_1a084ed94ac531cfde7dcd0d0c05d392bd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a084ed94ac531cfde7dcd0d0c05d392bd" kindref="member">mbedtls_ssl_async_cancel_t</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_ASYNC_PRIVATE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_WITH_CERT_ENABLED)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(MBEDTLS_SSL_KEEP_PEER_CERTIFICATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PEER_CERT_DIGEST_MAX_LEN<sp/><sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_MD_CAN_SHA256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_TYPE<sp/>MBEDTLS_MD_SHA256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_LEN<sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_MD_CAN_SHA384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_TYPE<sp/>MBEDTLS_MD_SHA384</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_LEN<sp/><sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_MD_CAN_SHA1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_TYPE<sp/>MBEDTLS_MD_SHA1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_LEN<sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>already<sp/>checked<sp/>in<sp/>check_config.h,<sp/>but<sp/>be<sp/>sure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Bad<sp/>configuration<sp/>-<sp/>need<sp/>SHA-1,<sp/>SHA-256<sp/>or<sp/>SHA-512<sp/>enabled<sp/>to<sp/>compute<sp/>digest<sp/>of<sp/>peer<sp/>CRT.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_KEY_EXCHANGE_WITH_CERT_ENABLED<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!MBEDTLS_SSL_KEEP_PEER_CERTIFICATE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128" refid="structmbedtls__ssl__tls13__application__secrets" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1129" refid="structmbedtls__ssl__tls13__application__secrets_1abb94afe9afbdd0a53d0d721ad5a0008d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>client_application_traffic_secret_N[<ref refid="ssl_8h_1ab93b6fad9a65041ff32063f28616808f" kindref="member">MBEDTLS_TLS1_3_MD_MAX_SIZE</ref>];</highlight></codeline>
<codeline lineno="1130" refid="structmbedtls__ssl__tls13__application__secrets_1aba5b654cbb9ba08756c2c4de3d0edb15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>server_application_traffic_secret_N[<ref refid="ssl_8h_1ab93b6fad9a65041ff32063f28616808f" kindref="member">MBEDTLS_TLS1_3_MD_MAX_SIZE</ref>];</highlight></codeline>
<codeline lineno="1131" refid="structmbedtls__ssl__tls13__application__secrets_1a04efb678c3b76f6d25c116d108d4d8a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>exporter_master_secret[<ref refid="ssl_8h_1ab93b6fad9a65041ff32063f28616808f" kindref="member">MBEDTLS_TLS1_3_MD_MAX_SIZE</ref>];</highlight></codeline>
<codeline lineno="1132" refid="structmbedtls__ssl__tls13__application__secrets_1a3e87efea42d393931a1ea99db1d75666" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resumption_master_secret[<ref refid="ssl_8h_1ab93b6fad9a65041ff32063f28616808f" kindref="member">MBEDTLS_TLS1_3_MD_MAX_SIZE</ref>];</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}<sp/><ref refid="structmbedtls__ssl__tls13__application__secrets" kindref="compound">mbedtls_ssl_tls13_application_secrets</ref>;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_SRTP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="ssl_8h_1a3ca8e41a3bc9765d01a1c734827b28fb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_SRTP_MAX_MKI_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138" refid="ssl_8h_1af071c01d95266bef4c10ecfbb43ab077" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_SRTP_MAX_PROFILE_LIST_LENGTH<sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/>*<sp/>For<sp/>code<sp/>readability<sp/>use<sp/>a<sp/>typedef<sp/>for<sp/>DTLS-SRTP<sp/>profiles</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/>*<sp/>Use_srtp<sp/>extension<sp/>protection<sp/>profiles<sp/>values<sp/>as<sp/>defined<sp/>in</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/>*<sp/>http://www.iana.org/assignments/srtp-protection/srtp-protection.xhtml</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/>*<sp/>Reminder:<sp/>if<sp/>this<sp/>list<sp/>is<sp/>expanded<sp/>mbedtls_ssl_check_srtp_profile_value</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>updated<sp/>too.</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="ssl_8h_1acbe1cbb11fee2c0b6ef767f2bc4ff413" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80<sp/><sp/><sp/><sp/><sp/>((uint16_t)<sp/>0x0001)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149" refid="ssl_8h_1ab92698fa5b18c274b85c36445a2ac046" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32<sp/><sp/><sp/><sp/><sp/>((uint16_t)<sp/>0x0002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150" refid="ssl_8h_1a3b5987dbe37a7398ea13c24f57e1e23c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_80<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)<sp/>0x0005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="ssl_8h_1a45f60d4d23068a07c1938b410a7887af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)<sp/>0x0006)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>one<sp/>is<sp/>not<sp/>iana<sp/>defined,<sp/>but<sp/>for<sp/>code<sp/>readability.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="ssl_8h_1a745b2dae73a8beac74d39e69768100db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TLS_SRTP_UNSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)<sp/>0x0000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155" refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" kindref="member">mbedtls_ssl_srtp_profile</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157" refid="structmbedtls__dtls__srtp__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__dtls__srtp__info__t" kindref="compound">mbedtls_dtls_srtp_info_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1159" refid="structmbedtls__dtls__srtp__info__t_1a4a120af924107fe053700c23147c73ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" kindref="member">mbedtls_ssl_srtp_profile</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(chosen_dtls_srtp_profile);</highlight></codeline>
<codeline lineno="1161" refid="structmbedtls__dtls__srtp__info__t_1ac189b74cb39e219b11b140251edda223" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mki_len);</highlight></codeline>
<codeline lineno="1163" refid="structmbedtls__dtls__srtp__info__t_1a4b9648ab59ae8147ed5eb5abbcc8fd9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mki_value)[<ref refid="ssl_8h_1a3ca8e41a3bc9765d01a1c734827b28fb" kindref="member">MBEDTLS_TLS_SRTP_MAX_MKI_LENGTH</ref>];</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><ref refid="ssl_8h_1ab0bbb0afa620c3de5b545d36e5d944e8" kindref="member">mbedtls_dtls_srtp_info</ref>;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_SRTP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170" refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1171" refid="ssl_8h_1a40e713ddf44767b6592269e808204c02af84b4b85a509c0da6fb939b4945e582b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02af84b4b85a509c0da6fb939b4945e582b" kindref="member">MBEDTLS_SSL_VERSION_UNKNOWN</ref>,<sp/></highlight></codeline>
<codeline lineno="1172" refid="ssl_8h_1a40e713ddf44767b6592269e808204c02a426622841e3954253628d2c68a7e7bfe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02a426622841e3954253628d2c68a7e7bfe" kindref="member">MBEDTLS_SSL_VERSION_TLS1_2</ref><sp/>=<sp/>0x0303,<sp/></highlight></codeline>
<codeline lineno="1173" refid="ssl_8h_1a40e713ddf44767b6592269e808204c02ac1b246eb232823889f62211380f64a37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02ac1b246eb232823889f62211380f64a37" kindref="member">MBEDTLS_SSL_VERSION_TLS1_3</ref><sp/>=<sp/>0x0304,<sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">}<sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref>;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"><sp/>*<sp/>This<sp/>structure<sp/>is<sp/>used<sp/>for<sp/>storing<sp/>current<sp/>session<sp/>data.</highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"><sp/>*<sp/>Note:<sp/>when<sp/>changing<sp/>this<sp/>definition,<sp/>we<sp/>need<sp/>to<sp/>check<sp/>and<sp/>update:</highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>in<sp/>tests/suites/test_suite_ssl.function:</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ssl_populate_session()<sp/>and<sp/>ssl_serialize_session_save_load()</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>in<sp/>library/ssl_tls.c:</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>mbedtls_ssl_session_init()<sp/>and<sp/>mbedtls_ssl_session_free()</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>mbedtls_ssl_session_save()<sp/>and<sp/>ssl_session_load()</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ssl_session_copy()</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187" refid="structmbedtls__ssl__session" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189" refid="structmbedtls__ssl__session_1abbc64068a1ca21c4539aae561c7ebd80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mfl_code);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1190"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192" refid="structmbedtls__ssl__session_1aef0badda6979cefa4bd63e458ed28791" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(exported);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197" refid="structmbedtls__ssl__session_1ad67eb0e7c2cae146b1cf0624e0c7a794" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(tls_version);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_HAVE_TIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200" refid="structmbedtls__ssl__session_1a3c3313d762b90c78a1eda4fbbb5e69ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__time_8h_1a867121bdcdb8233c28c1cca32cf0839f" kindref="member">mbedtls_time_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(start);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1201"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202" refid="structmbedtls__ssl__session_1a2598db2d11ab5ce4d357a2c469c75606" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ciphersuite);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1203" refid="structmbedtls__ssl__session_1a45930f5285cc35dacb03fdb4c1198c76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(id_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1204" refid="structmbedtls__ssl__session_1a85b097808028d1c2f8dc806144c6e1da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1205" refid="structmbedtls__ssl__session_1ab0dd6fe9bbd0e888c99c43d2b5948c83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(master)[48];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1207"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_KEEP_PEER_CERTIFICATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209" refid="structmbedtls__ssl__session_1a55b48e20600a66929d3c90e49840d9a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(peer_cert);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1210"><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_KEEP_PEER_CERTIFICATE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(peer_cert_digest);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(peer_cert_digest_len);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(peer_cert_digest_type);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_SSL_KEEP_PEER_CERTIFICATE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218" refid="structmbedtls__ssl__session_1aef30372eadc7f90ef99e31d66771fda8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(verify_result);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1220"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221" refid="structmbedtls__ssl__session_1aa66b694c9a75fa8c1d4eaf40c43e7ac0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ticket);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1222" refid="structmbedtls__ssl__session_1a43f1c45e7c4e79c700feadb314ec7385" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ticket_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1223" refid="structmbedtls__ssl__session_1ad42997d6ed497c58fdab195a2986984b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ticket_lifetime);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227" refid="structmbedtls__ssl__session_1a33005fe7f68fc2df87d10fadd2939e9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(endpoint);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1228" refid="structmbedtls__ssl__session_1a61e5d95da1af23d6c68be2a7c9e84dbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ticket_flags);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1229" refid="structmbedtls__ssl__session_1ae17b51677af1f6b6303fb2c682e8ce33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ticket_age_add);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1230" refid="structmbedtls__ssl__session_1a94533538d6bddfa404c98e92df383886" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(resumption_key_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1231" refid="structmbedtls__ssl__session_1acde2dc3d7381677aba484cba48641db2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(resumption_key)[<ref refid="ssl_8h_1a965bbe2e720de40c5041b44753d8d863" kindref="member">MBEDTLS_SSL_TLS1_3_TICKET_RESUMPTION_KEY_LEN</ref>];</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234" refid="structmbedtls__ssl__session_1a95d2100f5503df4fe49c3e24a526bc7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(hostname);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SERVER_NAME_INDICATION<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_HAVE_TIME)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238" refid="structmbedtls__ssl__session_1a5395dbaaf6b45d060a51c1c50b67c6ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="platform__time_8h_1a867121bdcdb8233c28c1cca32cf0839f" kindref="member">mbedtls_time_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ticket_received);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_HAVE_TIME<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/><sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244" refid="structmbedtls__ssl__session_1a57bc8efb5b51977bd626e9e216a1f5c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(encrypt_then_mac);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1245"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="structmbedtls__ssl__session_1a8d844bfa5da78a37e87653e340c57515" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__tls13__application__secrets" kindref="compound">mbedtls_ssl_tls13_application_secrets</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(app_secrets);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/>*<sp/>Identifiers<sp/>for<sp/>PRFs<sp/>used<sp/>in<sp/>various<sp/>versions<sp/>of<sp/>TLS.</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255" refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1256" refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a862ad82e6785d64414f2ae2b288f8bae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a862ad82e6785d64414f2ae2b288f8bae" kindref="member">MBEDTLS_SSL_TLS_PRF_NONE</ref>,</highlight></codeline>
<codeline lineno="1257" refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a36ea20e95c19764cc62470dedc039900" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a36ea20e95c19764cc62470dedc039900" kindref="member">MBEDTLS_SSL_TLS_PRF_SHA384</ref>,</highlight></codeline>
<codeline lineno="1258" refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a5df29635475b9622c12df9ebcaf13eac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a5df29635475b9622c12df9ebcaf13eac" kindref="member">MBEDTLS_SSL_TLS_PRF_SHA256</ref>,</highlight></codeline>
<codeline lineno="1259" refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0aa357f2debc053e73dc15cd64c74538bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0aa357f2debc053e73dc15cd64c74538bf" kindref="member">MBEDTLS_SSL_HKDF_EXPAND_SHA384</ref>,</highlight></codeline>
<codeline lineno="1260" refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a49b284ea90fe0eaf2474a26ba00adc89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0a49b284ea90fe0eaf2474a26ba00adc89" kindref="member">MBEDTLS_SSL_HKDF_EXPAND_SHA256</ref></highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0" kindref="member">mbedtls_tls_prf_types</ref>;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1265" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da123606af4ec6e4fa993c4d54dbf4e583" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da123606af4ec6e4fa993c4d54dbf4e583" kindref="member">MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0daeaae4865bea6adbee974b0844f4d3b95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0daeaae4865bea6adbee974b0844f4d3b95" kindref="member">MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET</ref>,</highlight></codeline>
<codeline lineno="1268" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0daad6f2d9b3e4b21ffa7ad5cc4fba551c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0daad6f2d9b3e4b21ffa7ad5cc4fba551c8" kindref="member">MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET</ref>,</highlight></codeline>
<codeline lineno="1269" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da82bafae198b16c88f8af2b22053698e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da82bafae198b16c88f8af2b22053698e5" kindref="member">MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET</ref>,</highlight></codeline>
<codeline lineno="1270" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da65617828528605df0ed0f1f6a8d249f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da65617828528605df0ed0f1f6a8d249f5" kindref="member">MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET</ref>,</highlight></codeline>
<codeline lineno="1271" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da06ea6c724def80a334d8ab49ca72dbea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da06ea6c724def80a334d8ab49ca72dbea" kindref="member">MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET</ref>,</highlight></codeline>
<codeline lineno="1272" refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da290dcdeef30b5e3da47cf1358ebc1d79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0da290dcdeef30b5e3da47cf1358ebc1d79" kindref="member">MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET</ref>,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}<sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0d" kindref="member">mbedtls_ssl_key_export_type</ref>;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291" refid="ssl_8h_1a1bd58d7f5591861371f9e481b91bb36a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a1bd58d7f5591861371f9e481b91bb36a" kindref="member">mbedtls_ssl_export_keys_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_expkey,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a52fc3a95fe4c7b163703d07b249c9f0d" kindref="member">mbedtls_ssl_key_export_type</ref><sp/>type,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*secret,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>secret_len,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>client_random[32],</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>server_random[32],</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0" kindref="member">mbedtls_tls_prf_types</ref><sp/>tls_prf_type);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315" refid="ssl_8h_1a3ecbc39db6b88c518b26aa30f1397391" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="ssl_8h_1a3ecbc39db6b88c518b26aa30f1397391" kindref="member">mbedtls_ssl_hs_cb_t</ref>)(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>type<sp/>for<sp/>storing<sp/>user<sp/>data<sp/>in<sp/>a<sp/>library<sp/>structure.</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/>*<sp/>The<sp/>representation<sp/>of<sp/>type<sp/>may<sp/>change<sp/>in<sp/>future<sp/>versions<sp/>of<sp/>the<sp/>library.</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/>*<sp/>Only<sp/>the<sp/>behaviors<sp/>guaranteed<sp/>by<sp/>documented<sp/>accessor<sp/>functions<sp/>are</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/>*<sp/>guaranteed<sp/>to<sp/>remain<sp/>stable.</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324" refid="unionmbedtls__ssl__user__data__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1325" refid="unionmbedtls__ssl__user__data__t_1a6993f9ab9e42d384657488c9705610a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="unionmbedtls__ssl__user__data__t_1a6993f9ab9e42d384657488c9705610a7" kindref="member">n</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>typically<sp/>a<sp/>handle<sp/>to<sp/>an<sp/>associated<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326" refid="unionmbedtls__ssl__user__data__t_1ad0d496b3288ad2c849a96e223762cc1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="unionmbedtls__ssl__user__data__t_1ad0d496b3288ad2c849a96e223762cc1b" kindref="member">p</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>typically<sp/>a<sp/>pointer<sp/>to<sp/>extra<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}<sp/><ref refid="unionmbedtls__ssl__user__data__t" kindref="compound">mbedtls_ssl_user_data_t</ref>;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332" refid="structmbedtls__ssl__config" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Group<sp/>items<sp/>mostly<sp/>by<sp/>size.<sp/>This<sp/>helps<sp/>to<sp/>reduce<sp/>memory<sp/>wasted<sp/>to</highlight></codeline>
<codeline lineno="1334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>padding.<sp/>It<sp/>also<sp/>helps<sp/>to<sp/>keep<sp/>smaller<sp/>fields<sp/>early<sp/>in<sp/>the<sp/>structure,</highlight></codeline>
<codeline lineno="1335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>that<sp/>elements<sp/>tend<sp/>to<sp/>be<sp/>in<sp/>the<sp/>128-element<sp/>direct<sp/>access<sp/>window</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>on<sp/>Arm<sp/>Thumb,<sp/>which<sp/>reduces<sp/>the<sp/>code<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338" refid="structmbedtls__ssl__config_1a980c03cbad8c61cf7b1ae0b6b6806d3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(max_tls_version);<sp/><sp/></highlight></codeline>
<codeline lineno="1339" refid="structmbedtls__ssl__config_1aaec06d3a6bf2cd372c463d8d277189f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(min_tls_version);<sp/><sp/></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Flags<sp/>(could<sp/>be<sp/>bit-fields<sp/>to<sp/>save<sp/>RAM,<sp/>but<sp/>separate<sp/>bytes<sp/>make</highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>code<sp/>smaller<sp/>on<sp/>architectures<sp/>with<sp/>an<sp/>instruction<sp/>for<sp/>direct</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>byte<sp/>access).</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347" refid="structmbedtls__ssl__config_1a19edf7579de435c7f6ee214eb1b58862" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(endpoint);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1348" refid="structmbedtls__ssl__config_1a3e170554ed620095b2bdd3b38adc4d23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(transport);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1349" refid="structmbedtls__ssl__config_1a2be56b219a79500b31b83f2c28fb4b23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(authmode);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>needed<sp/>even<sp/>with<sp/>renego<sp/>disabled<sp/>for<sp/>LEGACY_BREAK_HANDSHAKE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351" refid="structmbedtls__ssl__config_1a19c6388710e43ad41112c7b1f21f57a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(allow_legacy_renegotiation);<sp/></highlight></codeline>
<codeline lineno="1352"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353" refid="structmbedtls__ssl__config_1a2732651eeb8dfec6bc912cd994f759d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mfl_code);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1355"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357" refid="structmbedtls__ssl__config_1a8f521cfe14001a83afcae141f026fcf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(encrypt_then_mac);<sp/></highlight></codeline>
<codeline lineno="1358"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360" refid="structmbedtls__ssl__config_1a4fcfc891599f925b58c19cb3c9e05d21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(extended_ms);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363" refid="structmbedtls__ssl__config_1a9aea2064472daee29650b4d4af51c09b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(anti_replay);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1364"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_RENEGOTIATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366" refid="structmbedtls__ssl__config_1ab3b04c8cfcb429f070e7a626127b8f68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(disable_renegotiation);<sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370" refid="structmbedtls__ssl__config_1ad68e77eb3d000377b7cc308b78f3036a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(session_tickets);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1371"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_SSL_SRV_C)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376" refid="structmbedtls__ssl__config_1a2d4bc4cd43cf0ce52d4cca94b0cc8fa9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(new_session_tickets_count);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1377"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380" refid="structmbedtls__ssl__config_1a90806bd0204ac51b2310d358ee1637e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cert_req_ca_list);<sp/><sp/></highlight></codeline>
<codeline lineno="1382" refid="structmbedtls__ssl__config_1a0599793b1a44a5daabfa9c0ec9893da3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(respect_cli_pref);<sp/><sp/></highlight></codeline>
<codeline lineno="1385"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387" refid="structmbedtls__ssl__config_1a48f2675e896ab668c97507e59d587f37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ignore_unexpected_cid);<sp/></highlight></codeline>
<codeline lineno="1390"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_SRTP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392" refid="structmbedtls__ssl__config_1ab5e54efc75c0f47e1d717b98e8ed54ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dtls_srtp_mki_support);<sp/></highlight><highlight class="comment">/*<sp/>support<sp/>having<sp/>mki_value</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>use_srtp<sp/>extension?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Pointers</highlight></codeline>
<codeline lineno="1398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401" refid="structmbedtls__ssl__config_1a2eb6466b23598841861ad67b15407dc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ciphersuite_list);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405" refid="structmbedtls__ssl__config_1ae84db363337e3d40b098b7398794edfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(tls13_kex_modes);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409" refid="structmbedtls__ssl__config_1a22737e53c02e11068ae1333bbac08fc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_dbg))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="1410" refid="structmbedtls__ssl__config_1ad3fbb5a5ab445f3a9b95c9dd2d0d1442" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_dbg);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1413" refid="structmbedtls__ssl__config_1a467a40012995368b11ab4147e976d2be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_rng))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t);</highlight></codeline>
<codeline lineno="1414" refid="structmbedtls__ssl__config_1a34d8d07b55cf514f222258ae288f535a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_rng);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1417" refid="structmbedtls__ssl__config_1a24f8ae014a6a6b4c899002274c54b955" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a0ed860c5a383e14f7448e82df1e52e3a" kindref="member">mbedtls_ssl_cache_get_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_get_cache);</highlight></codeline>
<codeline lineno="1419" refid="structmbedtls__ssl__config_1a54431ac5290f345cecd9e2983f47d926" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1aacaaebff1203d11ba336eac1af7276b8" kindref="member">mbedtls_ssl_cache_set_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_set_cache);</highlight></codeline>
<codeline lineno="1420" refid="structmbedtls__ssl__config_1a9eacd8fee08dec8fad2f1b6f969bc390" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_cache);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1422"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424" refid="structmbedtls__ssl__config_1a56636cfe86b757c2b1b93d98645d3859" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_sni))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t);</highlight></codeline>
<codeline lineno="1425" refid="structmbedtls__ssl__config_1a7272e13a360c92e3a86ecac45182c507" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_sni);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1426"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430" refid="structmbedtls__ssl__config_1ad6cca79d26961ad99f3540e19560f0d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_vrfy))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*,<sp/>int,<sp/>uint32_t<sp/>*);</highlight></codeline>
<codeline lineno="1431" refid="structmbedtls__ssl__config_1a5bdb95c14bb65e37de5f2b7fb791e0b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_vrfy);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1432"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_HANDSHAKE_WITH_PSK_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437" refid="structmbedtls__ssl__config_1a3bc951663ec3420948fb154a4008cc7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_psk))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t);</highlight></codeline>
<codeline lineno="1438" refid="structmbedtls__ssl__config_1ad78c5fe4223e7de129f67396d3c5d7bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_psk);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1439"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444" refid="structmbedtls__ssl__config_1a7f7012078202c343080917a412005f97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_cookie_write))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t);</highlight></codeline>
<codeline lineno="1447" refid="structmbedtls__ssl__config_1aa9b61ebbfb859f402e70b7fe56a28b66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_cookie_check))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t);</highlight></codeline>
<codeline lineno="1449" refid="structmbedtls__ssl__config_1ae41f2d7b78add745becf0459c88fd168" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_cookie);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1450"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454" refid="structmbedtls__ssl__config_1a570f6ea4c765fb7e4409c37702544e4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_ticket_write))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*,</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*);</highlight></codeline>
<codeline lineno="1458" refid="structmbedtls__ssl__config_1ad511a48f7f373ae560b6c35280ef4501" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_ticket_parse))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t);</highlight></codeline>
<codeline lineno="1459" refid="structmbedtls__ssl__config_1a47e7936f522021d980ab8a78dc1846f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_ticket);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1460"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462" refid="structmbedtls__ssl__config_1acfe78a84822abd10477bbb3b11c03d66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cid_len);<sp/></highlight></codeline>
<codeline lineno="1463"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466" refid="structmbedtls__ssl__config_1acdc8991c9d7b523fe61b217aae32a7fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cert_profile);<sp/></highlight></codeline>
<codeline lineno="1467" refid="structmbedtls__ssl__config_1ade101a63a08e22b103d74b92ff75a39a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1af06d98867191eb685ab0c7067840b6f3" kindref="member">mbedtls_ssl_key_cert</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(key_cert);<sp/></highlight></codeline>
<codeline lineno="1468" refid="structmbedtls__ssl__config_1aaad71d1fd6740f88596dded5b82a604d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ca_chain);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1469" refid="structmbedtls__ssl__config_1ab6b89f7beaaf4ac72ec3bb3a7c579ddc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ca_crl);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1470"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_TRUSTED_CERTIFICATE_CALLBACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471" refid="structmbedtls__ssl__config_1a30689695941960eba915dfd67c8c4269" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__x509__module_1ga76b0dd21c9c8ab66a4577e8bd5afa736" kindref="member">mbedtls_x509_crt_ca_cb_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_ca_cb);</highlight></codeline>
<codeline lineno="1472" refid="structmbedtls__ssl__config_1ac165dca418875ab1b3d5abe1afbd6d01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_ca_cb);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_TRUSTED_CERTIFICATE_CALLBACK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ASYNC_PRIVATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478" refid="structmbedtls__ssl__config_1aefef729f444e2abc4db011558c286b71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1ad57308aa77db11dbc3551fd92deb2520" kindref="member">mbedtls_ssl_async_sign_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_async_sign_start);<sp/></highlight></codeline>
<codeline lineno="1479" refid="structmbedtls__ssl__config_1a64e1b0fc672fdadb8b04410c285f1c84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1ac18191035f2598e3311d24a3ae40a0fa" kindref="member">mbedtls_ssl_async_decrypt_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_async_decrypt_start);<sp/></highlight></codeline>
<codeline lineno="1480"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481" refid="structmbedtls__ssl__config_1a2d08fb307a0b31934cd0dccdb52e7e34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a6a67de0c00f4aff4500ece33645a96cd" kindref="member">mbedtls_ssl_async_resume_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_async_resume);<sp/></highlight></codeline>
<codeline lineno="1482" refid="structmbedtls__ssl__config_1a7412eddc7fc0449c0e9bf8ff6eb4d03e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a084ed94ac531cfde7dcd0d0c05d392bd" kindref="member">mbedtls_ssl_async_cancel_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_async_cancel);<sp/></highlight></codeline>
<codeline lineno="1483" refid="structmbedtls__ssl__config_1a9a543ee970138d1d732fa1fb2239c0c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_async_config_data);<sp/></highlight></codeline>
<codeline lineno="1484"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_ASYNC_PRIVATE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_HANDSHAKE_WITH_CERT_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489" refid="structmbedtls__ssl__config_1aa2aff807bc1ebc5bf1e981a40389ee97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(sig_hashes);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1490"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491" refid="structmbedtls__ssl__config_1a21f71c998cffbffa54e129b00dfb44ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(sig_algs);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1492"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_HANDSHAKE_WITH_CERT_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_C)<sp/>&amp;&amp;<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495" refid="structmbedtls__ssl__config_1aa51f6c384e78a154c72e1c40e6cb3c72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(curve_list);<sp/></highlight></codeline>
<codeline lineno="1496"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498" refid="structmbedtls__ssl__config_1a64f8752c6c2d80d7908f4c7420d85867" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(group_list);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1500"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_DHM_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501" refid="structmbedtls__ssl__config_1ae549b6397c3fb9f76f4b69cfec7247be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dhm_P);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1502" refid="structmbedtls__ssl__config_1abdca1ae9d19bf51a8abf9d7371104bbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dhm_G);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1503"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_HANDSHAKE_WITH_PSK_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508" refid="structmbedtls__ssl__config_1afe48334ee683e1cba2870dfcd1a17977" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(psk_opaque);<sp/></highlight></codeline>
<codeline lineno="1514"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515" refid="structmbedtls__ssl__config_1a09491e878ee67835341800c8dd918b78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(psk);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1519" refid="structmbedtls__ssl__config_1ac3c17662a636ba505419a32c021522f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(psk_len);<sp/><sp/></highlight></codeline>
<codeline lineno="1525" refid="structmbedtls__ssl__config_1a03f3bbcc6d21ed71d142cbb490070bbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(psk_identity);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1530" refid="structmbedtls__ssl__config_1ab604a4ab32ea198d93860f286434dada" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(psk_identity_len);</highlight></codeline>
<codeline lineno="1536"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_HANDSHAKE_WITH_PSK_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_EARLY_DATA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539" refid="structmbedtls__ssl__config_1afa7b86e0b4bd093684f2a1498e93f7a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(early_data_enabled);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1543"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>amount<sp/>of<sp/>0-RTT<sp/>data.<sp/>RFC<sp/>8446<sp/>section<sp/>4.6.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545" refid="structmbedtls__ssl__config_1a9d7e7de29763461276a4d3ba64a30070" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(max_early_data_size);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_EARLY_DATA<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ALPN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551" refid="structmbedtls__ssl__config_1a6c299cdd207b3373e9e297e2d9fb72c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alpn_list);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1552"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_SRTP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556" refid="structmbedtls__ssl__config_1a2aa50443da3bbec1b9d4fe0f4d47b6c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" kindref="member">mbedtls_ssl_srtp_profile</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dtls_srtp_profile_list);</highlight></codeline>
<codeline lineno="1558" refid="structmbedtls__ssl__config_1a738f82d891178ae63c19db0ead6c2dc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dtls_srtp_profile_list_len);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_SRTP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Numerical<sp/>settings<sp/>(int)</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565" refid="structmbedtls__ssl__config_1ac437d1b09cbc9ecb8c9ddfe5147a8d21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(read_timeout);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1567"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_DTLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568" refid="structmbedtls__ssl__config_1afe08aa2aff8b403fb71816350bec2988" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(hs_timeout_min);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1570" refid="structmbedtls__ssl__config_1ae197217dc3c2e4d00be838a342d3f3ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(hs_timeout_max);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1572"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_RENEGOTIATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575" refid="structmbedtls__ssl__config_1ae673b9f4f85c423ce59f8c62f2c0ffdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(renego_max_records);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1576" refid="structmbedtls__ssl__config_1a98929df2eb224498a5cc9a5497171f28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(renego_period)[8];<sp/></highlight></codeline>
<codeline lineno="1578"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580" refid="structmbedtls__ssl__config_1aa805833bbfa9afec4110b02e139712a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(badmac_limit);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1582"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_DHM_C)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583" refid="structmbedtls__ssl__config_1a3cd887f47f322283394336acd12de117" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dhm_min_bitlen);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1584"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591" refid="structmbedtls__ssl__config_1a1adfd2ec621556ba295e08c3912da0bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmbedtls__ssl__user__data__t" kindref="compound">mbedtls_ssl_user_data_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(user_data);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594" refid="structmbedtls__ssl__config_1a198cc14c0e2e7c2e8194fddeceb53da5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a3ecbc39db6b88c518b26aa30f1397391" kindref="member">mbedtls_ssl_hs_cb_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_cert_cb);<sp/><sp/></highlight></codeline>
<codeline lineno="1595"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_CERT_REQ_ALLOWED_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598" refid="structmbedtls__ssl__config_1ab45e8b622382d2002c8225b6dba451bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dn_hints);</highlight></codeline>
<codeline lineno="1599"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602" refid="structmbedtls__ssl__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>{</highlight></codeline>
<codeline lineno="1603" refid="structmbedtls__ssl__context_1afc02d1df8a57e1f838ad86b2c14033f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(conf);<sp/></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Miscellaneous</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608" refid="structmbedtls__ssl__context_1a4b175cb38e9e91d6797d0bebe9bed000" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(state);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1609"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_RENEGOTIATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610" refid="structmbedtls__ssl__context_1a85048dfb727179d70edaabf02a29fa6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(renego_status);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1611" refid="structmbedtls__ssl__context_1a1640699327bede9a6ef20391c5fbea16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(renego_records_seen);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1614"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_RENEGOTIATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632" refid="structmbedtls__ssl__context_1a4bfedf4d230f543cfcedf2d5c29004d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(tls_version);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634" refid="structmbedtls__ssl__context_1a1f5626d8a803dd79bdc47c5fac7eb98d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(badmac_seen);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1636"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638" refid="structmbedtls__ssl__context_1a72fb1493de3d87f23db884d4408a737b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_vrfy))(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*,<sp/>int,<sp/>uint32_t<sp/>*);</highlight></codeline>
<codeline lineno="1639" refid="structmbedtls__ssl__context_1aa80dbe7c58ace04e6d9009902b13dde3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_vrfy);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1640"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642" refid="structmbedtls__ssl__context_1a3a38c3fc33a2a1b35360ab3522dc2e99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38e2b400d361f42f85833cdc30b3916e" kindref="member">mbedtls_ssl_send_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_send);<sp/></highlight></codeline>
<codeline lineno="1643" refid="structmbedtls__ssl__context_1a062ad3e75391ca9e534fcc8f24885155" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1ac06b19b96b643090c55f19b6c28b10c4" kindref="member">mbedtls_ssl_recv_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_recv);<sp/></highlight></codeline>
<codeline lineno="1644" refid="structmbedtls__ssl__context_1acb3df5e0a0e3291fd2850f067bc37c15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a6d615ca95c8a67d7c5f9d7d256dc09e6" kindref="member">mbedtls_ssl_recv_timeout_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_recv_timeout);</highlight></codeline>
<codeline lineno="1647" refid="structmbedtls__ssl__context_1a01b909a3cb88e7abc7faa772a1d77fec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_bio);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Session<sp/>layer</highlight></codeline>
<codeline lineno="1651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652" refid="structmbedtls__ssl__context_1a49137e211d6e17743ebabe7a7b2cb6fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(session_in);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1653" refid="structmbedtls__ssl__context_1ac93535e6fa6ec67128fdee25823c7347" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(session_out);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1654" refid="structmbedtls__ssl__context_1a370d3c56da1db90f387814b6077f7271" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(session);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1655" refid="structmbedtls__ssl__context_1a09bd5addd514eb1e3944041a15c7456e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(session_negotiate);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1657" refid="structmbedtls__ssl__context_1a8c17b93814b7e5c42133cbf4d26807e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a5c13e913e3b1de510e5d12c1b0ae9358" kindref="member">mbedtls_ssl_handshake_params</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(handshake);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Record<sp/>layer<sp/>transformations</highlight></codeline>
<codeline lineno="1662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663" refid="structmbedtls__ssl__context_1a489e7d56b5447ae1a560f058bb65f8e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(transform_in);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1666" refid="structmbedtls__ssl__context_1a17c54f9bb7a5fe79526c028997809d11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(transform_out);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1669" refid="structmbedtls__ssl__context_1a224defda6e4f2ae3d7c8d97230f28667" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(transform);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1672"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673" refid="structmbedtls__ssl__context_1a1fc464c6e2041ff6b090f3feb414c04b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(transform_negotiate);<sp/></highlight></codeline>
<codeline lineno="1676"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681" refid="structmbedtls__ssl__context_1ae3b7cb27a0a3edc8f699d17a1fdf2603" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a265603a8d5d7e22cbe95c9a7588395f6" kindref="member">mbedtls_ssl_transform</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(transform_application);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Timers</highlight></codeline>
<codeline lineno="1686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687" refid="structmbedtls__ssl__context_1a609fee4f51aad712999ac1c64069d9ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_timer);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1689" refid="structmbedtls__ssl__context_1a4b71ea2d0271757e6ea8b52731e40ea5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a61c5d9ed63c50ee809eec98820d3f36c" kindref="member">mbedtls_ssl_set_timer_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_set_timer);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1690" refid="structmbedtls__ssl__context_1a6ef83e8c55dca83426c679842f1f69cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1adea005600b532d788c05e9d01b42895b" kindref="member">mbedtls_ssl_get_timer_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_get_timer);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Record<sp/>layer<sp/>(incoming<sp/>data)</highlight></codeline>
<codeline lineno="1694"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695" refid="structmbedtls__ssl__context_1a27b10a9bc0a87383c5ded4d72a033789" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_buf);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1696" refid="structmbedtls__ssl__context_1a6858023a300a8b7c287522622f1bface" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_ctr);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1699" refid="structmbedtls__ssl__context_1a6a733ebb4931dea09732fda04ab11a6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_hdr);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1700"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701" refid="structmbedtls__ssl__context_1ad414dfb7b194055f968d8b5c25b99c59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_cid);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1703"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704" refid="structmbedtls__ssl__context_1af12b62b213697d52999d72f8bddb6fc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_len);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1705" refid="structmbedtls__ssl__context_1af4d04ccc710be9becfa8f8b56e6a4f4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_iv);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1706" refid="structmbedtls__ssl__context_1aba305987419b20d6896128e81dbc48ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_msg);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1707" refid="structmbedtls__ssl__context_1a3fd2b7bdcb3172f3ef6c40ce97507bfe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_offt);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1709" refid="structmbedtls__ssl__context_1a2c7d4a67be5d8064b171d15795ebe444" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_msgtype);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1710" refid="structmbedtls__ssl__context_1a1e19e24168e2f0fb6aed76b264b40462" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_msglen);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1711" refid="structmbedtls__ssl__context_1ab9db1e0c5340b5242048731f3c2c7635" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_left);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1712"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_VARIABLE_BUFFER_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713" refid="structmbedtls__ssl__context_1a3542a77435801d177581f299546b3761" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_buf_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1714"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_DTLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716" refid="structmbedtls__ssl__context_1a93f77196aa231ace2fa778c45fc16617" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_epoch);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1717" refid="structmbedtls__ssl__context_1af692203ed492a1f36a1bb97b704c8ac0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(next_record_offset);<sp/><sp/></highlight></codeline>
<codeline lineno="1719"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_DTLS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721" refid="structmbedtls__ssl__context_1abcda50ea2d8111b062a18393c6bafa3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_window_top);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1722" refid="structmbedtls__ssl__context_1a4218e8c42b37739c60965fdbae388d22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_window);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1723"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_ANTI_REPLAY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725" refid="structmbedtls__ssl__context_1ab9b56145260e819da100ed25d884f77d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(in_hslen);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1727" refid="structmbedtls__ssl__context_1a92246b743f43a3f63a06e0cb16d7fb9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(nb_zero);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1729" refid="structmbedtls__ssl__context_1a4a477b561180a952679a33bd95b1aa6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(keep_current_message);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>three<sp/>variables<sp/>indicate<sp/>if<sp/>and,<sp/>if<sp/>yes,</highlight></codeline>
<codeline lineno="1733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>what<sp/>kind<sp/>of<sp/>alert<sp/>is<sp/>pending<sp/>to<sp/>be<sp/>sent.</highlight></codeline>
<codeline lineno="1734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735" refid="structmbedtls__ssl__context_1a372ef18c3d925f8ffbddd848b086d6e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(send_alert);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1739" refid="structmbedtls__ssl__context_1ae5c8b20a9549a589c10f1997e6d43afc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alert_type);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1741" refid="structmbedtls__ssl__context_1abf00b1b2ad40ca0bd0b7e9a820dec616" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alert_reason);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1745"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_DTLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746" refid="structmbedtls__ssl__context_1a4dcfe6b3de1e746115aac4d10dc426dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(disable_datagram_packing);<sp/><sp/></highlight></codeline>
<codeline lineno="1748"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_DTLS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Record<sp/>layer<sp/>(outgoing<sp/>data)</highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753" refid="structmbedtls__ssl__context_1ae22ae21abd27fe9dec01347e2a812e57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_buf);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1754" refid="structmbedtls__ssl__context_1a5a688b68e10ae665c1096aa90fd35ef2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_ctr);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1755" refid="structmbedtls__ssl__context_1a292909ba4c19a0cc30a96f0c373cd9cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_hdr);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1756"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757" refid="structmbedtls__ssl__context_1a485dd8e2c55abdd1929ca30990f5d0a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_cid);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1759"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760" refid="structmbedtls__ssl__context_1a1ef053951ebe8d07e2222a7308840652" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_len);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1761" refid="structmbedtls__ssl__context_1a4c8966b5558e9250f7a9ffd044bc7053" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_iv);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1762" refid="structmbedtls__ssl__context_1aecbedef1898bf0b628c2c5e29a70f115" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_msg);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1764" refid="structmbedtls__ssl__context_1af2a902a1589a46ec453f4bbce8a6a912" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_msgtype);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1765" refid="structmbedtls__ssl__context_1af7e6865f1c945f0b5af87fdd58427fff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_msglen);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1766" refid="structmbedtls__ssl__context_1a3263e4927c19ab7291999f557f25cf42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_left);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1767"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_VARIABLE_BUFFER_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768" refid="structmbedtls__ssl__context_1a6550d4cdeeda0a23e97f0f761c6a89f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(out_buf_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1769"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771" refid="structmbedtls__ssl__context_1a19c6653806e54258af348be79a3b88b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cur_out_ctr)[<ref refid="ssl_8h_1a520871f7ed32db9af63564771a61b82c" kindref="member">MBEDTLS_SSL_SEQUENCE_NUMBER_LEN</ref>];<sp/></highlight></codeline>
<codeline lineno="1773"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_DTLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774" refid="structmbedtls__ssl__context_1a8414210d9175bfa217a572a827f7c2a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(mtu);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1775"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_DTLS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>User<sp/>settings</highlight></codeline>
<codeline lineno="1779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781" refid="structmbedtls__ssl__context_1ab93f9e2e3fcb053aed680558e55fd284" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(hostname);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1783"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ALPN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786" refid="structmbedtls__ssl__context_1a81eafe1e1e9c65834b5d783291526fac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alpn_chosen);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1787"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_ALPN<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_SRTP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>use_srtp<sp/>extension</highlight></codeline>
<codeline lineno="1792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793" refid="structmbedtls__ssl__context_1a83d37d1687e9a96cff602a061aa0b9f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__dtls__srtp__info__t" kindref="compound">mbedtls_dtls_srtp_info</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dtls_srtp_info);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_SRTP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Information<sp/>for<sp/>DTLS<sp/>hello<sp/>verify</highlight></codeline>
<codeline lineno="1798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800" refid="structmbedtls__ssl__context_1aa4cc855fe575ad0ad21992eec4933de6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cli_id);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1801" refid="structmbedtls__ssl__context_1a1a72d0f99639b506f59d85054232d8ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cli_id_len);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1802"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_HELLO_VERIFY<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Secure<sp/>renegotiation</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>needed<sp/>to<sp/>know<sp/>when<sp/>to<sp/>send<sp/>extension<sp/>on<sp/>server<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808" refid="structmbedtls__ssl__context_1a96821d061ff5445630a4b881c6d90705" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(secure_renegotiation);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1810"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_RENEGOTIATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811" refid="structmbedtls__ssl__context_1a8f09b28f74ca96da07b47c997be05e49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(verify_data_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1812" refid="structmbedtls__ssl__context_1a902b3249f34ee64e079b64a039adbc2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(own_verify_data)[<ref refid="ssl_8h_1a7bb4393075100dbfbb37008fb81c6d29" kindref="member">MBEDTLS_SSL_VERIFY_DATA_MAX_LEN</ref>];<sp/></highlight></codeline>
<codeline lineno="1813" refid="structmbedtls__ssl__context_1ab468d6feb512327f4f47bcffcc1b84df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(peer_verify_data)[<ref refid="ssl_8h_1a7bb4393075100dbfbb37008fb81c6d29" kindref="member">MBEDTLS_SSL_VERIFY_DATA_MAX_LEN</ref>];<sp/></highlight></codeline>
<codeline lineno="1814"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_RENEGOTIATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CID<sp/>configuration<sp/>to<sp/>use<sp/>in<sp/>subsequent<sp/>handshakes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823" refid="structmbedtls__ssl__context_1ab6a1d969374a3c51fd875542b99a3b7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(own_cid)[<ref refid="ssl_8h_1a326a31352ca97afdc7a94bac39577d2e" kindref="member">MBEDTLS_SSL_CID_IN_LEN_MAX</ref>];</highlight></codeline>
<codeline lineno="1824" refid="structmbedtls__ssl__context_1ab33dad386d18661ac76f2f1f77e64271" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(own_cid_len);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1825" refid="structmbedtls__ssl__context_1a35378e0855bfcc3c9c106b077d2e1657" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(negotiate_cid);<sp/></highlight></codeline>
<codeline lineno="1829"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_EARLY_DATA)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832" refid="structmbedtls__ssl__context_1a4492bd038215ec9b81f3d0ee05f6fd41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(early_data_status);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_EARLY_DATA<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836" refid="structmbedtls__ssl__context_1ad8fc975f15a6fbd5eba836134181f3a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a1bd58d7f5591861371f9e481b91bb36a" kindref="member">mbedtls_ssl_export_keys_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(f_export_keys);</highlight></codeline>
<codeline lineno="1837" refid="structmbedtls__ssl__context_1a70f7218dd4fc533b112602bfd10f7aff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p_export_keys);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1848" refid="structmbedtls__ssl__context_1a5826132fedf502cbf2ba8c5628dc26d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionmbedtls__ssl__user__data__t" kindref="compound">mbedtls_ssl_user_data_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(user_data);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1ada9a0169e4712521049117d29b91e1e5" kindref="member">mbedtls_ssl_get_ciphersuite_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ciphersuite_id);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a9914cdf5533e813e1ea7ca52981aa006" kindref="member">mbedtls_ssl_get_ciphersuite_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ciphersuite_name);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a8560dea66d7830a11874188727ec4c45" kindref="member">mbedtls_ssl_init</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1af79cb539a0ee6ac20cf9c574f4c3b343" kindref="member">mbedtls_ssl_setup</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a21432367cbce428f10dcb62d9456fa7e" kindref="member">mbedtls_ssl_session_reset</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a3a763e35d55c18e6792a3b756d825684" kindref="member">mbedtls_ssl_conf_endpoint</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endpoint);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934" refid="ssl_8h_1afa2243cab294dc479e6a1fe02ae36f20" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1afa2243cab294dc479e6a1fe02ae36f20" kindref="member">mbedtls_ssl_conf_get_endpoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf)</highlight></codeline>
<codeline lineno="1935"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conf-&gt;MBEDTLS_PRIVATE(endpoint);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a2eb03afe9b2ca0f144a1c307100dc0ca" kindref="member">mbedtls_ssl_conf_transport</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>transport);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a5695285c9dbfefec295012b566290f37" kindref="member">mbedtls_ssl_conf_authmode</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>authmode);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_EARLY_DATA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ab2245516a29f44f803c8a579aef7b40e" kindref="member">mbedtls_ssl_tls13_conf_early_data</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>early_data_enabled);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a72875597697f96e1b626fb4c2664dabf" kindref="member">mbedtls_ssl_tls13_conf_max_early_data_size</ref>(</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/>uint32_t<sp/>max_early_data_size);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_EARLY_DATA<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1afc2b6b55d7ccaf38d84a4fbf1655f426" kindref="member">mbedtls_ssl_conf_verify</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_vrfy)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>uint32_t<sp/>*),</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_vrfy);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a469cd1c64bbba4be22347bf8874a017e" kindref="member">mbedtls_ssl_conf_rng</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ab15dcbe7c7fe2a5c118e7c486c07c921" kindref="member">mbedtls_ssl_conf_dbg</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*f_dbg)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*p_dbg);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096" refid="ssl_8h_1ab347323db386abdce5ec7c1ef600a418" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*<ref refid="ssl_8h_1ab347323db386abdce5ec7c1ef600a418" kindref="member">mbedtls_ssl_context_get_config</ref>(</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl)</highlight></codeline>
<codeline lineno="2098"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ssl-&gt;MBEDTLS_PRIVATE(conf);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a8b7442420aef7f1a76fa8c5336362f9e" kindref="member">mbedtls_ssl_set_bio</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_bio,</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a38e2b400d361f42f85833cdc30b3916e" kindref="member">mbedtls_ssl_send_t</ref><sp/>*f_send,</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1ac06b19b96b643090c55f19b6c28b10c4" kindref="member">mbedtls_ssl_recv_t</ref><sp/>*f_recv,</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a6d615ca95c8a67d7c5f9d7d256dc09e6" kindref="member">mbedtls_ssl_recv_timeout_t</ref><sp/>*f_recv_timeout);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_DTLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1afe94a33d384006339080fbd901cd806b" kindref="member">mbedtls_ssl_set_cid</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*own_cid,</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>own_cid_len);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a30eabe9aa5dcdfb157a336a1cc6f7aaa" kindref="member">mbedtls_ssl_get_own_cid</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*enabled,</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>own_cid[<ref refid="ssl_8h_1a17df67385a32a5648a5c3d85777cdc8e" kindref="member">MBEDTLS_SSL_CID_OUT_LEN_MAX</ref>],</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*own_cid_len);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a7f19198119e077b70d014eac5252bf91" kindref="member">mbedtls_ssl_get_peer_cid</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*enabled,</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>peer_cid[<ref refid="ssl_8h_1a17df67385a32a5648a5c3d85777cdc8e" kindref="member">MBEDTLS_SSL_CID_OUT_LEN_MAX</ref>],</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*peer_cid_len);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a14ea71eb9f064d28fb5c393acc1e6975" kindref="member">mbedtls_ssl_set_mtu</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,<sp/>uint16_t<sp/>mtu);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_DTLS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a3a2ec5ab5a8a3f07973a3b2beabe5f7a" kindref="member">mbedtls_ssl_set_verify</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_vrfy)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>uint32_t<sp/>*),</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_vrfy);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a0d925033b3a46a48b3f8acc1d743af90" kindref="member">mbedtls_ssl_conf_read_timeout</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a242658c828bf5f137102065e709703d8" kindref="member">mbedtls_ssl_check_record</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ssl,</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a335ee78886daf7f8fb369fa925b3cca8" kindref="member">mbedtls_ssl_set_timer_cb</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_timer,</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a61c5d9ed63c50ee809eec98820d3f36c" kindref="member">mbedtls_ssl_set_timer_t</ref><sp/>*f_set_timer,</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1adea005600b532d788c05e9d01b42895b" kindref="member">mbedtls_ssl_get_timer_t</ref><sp/>*f_get_timer);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478" refid="ssl_8h_1a49e226cbc25b3da56a71d4ba057a48be" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a49e226cbc25b3da56a71d4ba057a48be" kindref="member">mbedtls_ssl_conf_cert_cb</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a3ecbc39db6b88c518b26aa30f1397391" kindref="member">mbedtls_ssl_hs_cb_t</ref><sp/>f_cert_cb)</highlight></codeline>
<codeline lineno="2480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>conf-&gt;MBEDTLS_PRIVATE(f_cert_cb)<sp/>=<sp/>f_cert_cb;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504" refid="ssl_8h_1a112d1fc2dd4db788592457d14c0c2899" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a112d1fc2dd4db788592457d14c0c2899" kindref="member">mbedtls_ssl_ticket_write_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_ticket,</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session,</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*tlen,</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*lifetime);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534" refid="ssl_8h_1a48aea353b22e86deece00933ef941536" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a48aea353b22e86deece00933ef941536" kindref="member">mbedtls_ssl_ticket_parse_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_ticket,</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session,</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a73f028424df0b3a3b3360df0768df992" kindref="member">mbedtls_ssl_conf_session_tickets_cb</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a112d1fc2dd4db788592457d14c0c2899" kindref="member">mbedtls_ssl_ticket_write_t</ref><sp/>*f_ticket_write,</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a48aea353b22e86deece00933ef941536" kindref="member">mbedtls_ssl_ticket_parse_t</ref><sp/>*f_ticket_parse,</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_ticket);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1afd4d3fb215d25dea1726517b9fe0591d" kindref="member">mbedtls_ssl_set_export_keys_cb</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a1bd58d7f5591861371f9e481b91bb36a" kindref="member">mbedtls_ssl_export_keys_t</ref><sp/>*f_export_keys,</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_export_keys);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592" refid="ssl_8h_1ad7da6e1777902c3e3bbdf03de85c4623" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ad7da6e1777902c3e3bbdf03de85c4623" kindref="member">mbedtls_ssl_conf_set_user_data_p</ref>(</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="2595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>conf-&gt;MBEDTLS_PRIVATE(user_data).p<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606" refid="ssl_8h_1a2260d0d36e74fdb528a33435f8272b04" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a2260d0d36e74fdb528a33435f8272b04" kindref="member">mbedtls_ssl_conf_set_user_data_n</ref>(</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>n)</highlight></codeline>
<codeline lineno="2609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>conf-&gt;MBEDTLS_PRIVATE(user_data).n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2623" refid="ssl_8h_1a5035adf863e97a0999f2c94e875d6ef6" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a5035adf863e97a0999f2c94e875d6ef6" kindref="member">mbedtls_ssl_conf_get_user_data_p</ref>(</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf)</highlight></codeline>
<codeline lineno="2625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conf-&gt;MBEDTLS_PRIVATE(user_data).p;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639" refid="ssl_8h_1a8998dea4168d751fb8bc5b4a6694ed27" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="ssl_8h_1a8998dea4168d751fb8bc5b4a6694ed27" kindref="member">mbedtls_ssl_conf_get_user_data_n</ref>(</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf)</highlight></codeline>
<codeline lineno="2641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>conf-&gt;MBEDTLS_PRIVATE(user_data).n;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655" refid="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1afa0fb249c5fb0d478911070eebe7f07e" kindref="member">mbedtls_ssl_set_user_data_p</ref>(</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="2658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>ssl-&gt;MBEDTLS_PRIVATE(user_data).p<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669" refid="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ae837d3fc39b78327d557afc14d97dd40" kindref="member">mbedtls_ssl_set_user_data_n</ref>(</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>n)</highlight></codeline>
<codeline lineno="2672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/>ssl-&gt;MBEDTLS_PRIVATE(user_data).n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686" refid="ssl_8h_1a96ca3df1ee1ef958f255a233a1b0f1e7" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a96ca3df1ee1ef958f255a233a1b0f1e7" kindref="member">mbedtls_ssl_get_user_data_p</ref>(</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl)</highlight></codeline>
<codeline lineno="2688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ssl-&gt;MBEDTLS_PRIVATE(user_data).p;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2702" refid="ssl_8h_1a2173920d384d3fb7bf4b3cbd1f5d05cb" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="ssl_8h_1a2173920d384d3fb7bf4b3cbd1f5d05cb" kindref="member">mbedtls_ssl_get_user_data_n</ref>(</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl)</highlight></codeline>
<codeline lineno="2704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ssl-&gt;MBEDTLS_PRIVATE(user_data).n;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ASYNC_PRIVATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a0675aed5a2b2b9ff219a62ed28b50819" kindref="member">mbedtls_ssl_conf_async_private_cb</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1ad57308aa77db11dbc3551fd92deb2520" kindref="member">mbedtls_ssl_async_sign_t</ref><sp/>*f_async_sign,</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1ac18191035f2598e3311d24a3ae40a0fa" kindref="member">mbedtls_ssl_async_decrypt_t</ref><sp/>*f_async_decrypt,</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a6a67de0c00f4aff4500ece33645a96cd" kindref="member">mbedtls_ssl_async_resume_t</ref><sp/>*f_async_resume,</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a084ed94ac531cfde7dcd0d0c05d392bd" kindref="member">mbedtls_ssl_async_cancel_t</ref><sp/>*f_async_cancel,</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*config_data);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a374a41575f2f8a478bda3479772f943c" kindref="member">mbedtls_ssl_conf_get_async_config_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf);</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a7e424db2d8ccc9f0d5fe4ed0a9a5bab2" kindref="member">mbedtls_ssl_get_async_operation_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac57fb2abf2a5cd821d0ec8c3d6c59daf" kindref="member">mbedtls_ssl_set_async_operation_data</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_ASYNC_PRIVATE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801" refid="ssl_8h_1a536f8b89936f26732150b00639a47ff0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a536f8b89936f26732150b00639a47ff0" kindref="member">mbedtls_ssl_cookie_write_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*info,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818" refid="ssl_8h_1a9cfda5aee70d6c2c19a8dfb5af900d80" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a9cfda5aee70d6c2c19a8dfb5af900d80" kindref="member">mbedtls_ssl_cookie_check_t</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cookie,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>clen,</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*info,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen);</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a5865631bc70b4511c25f558d5221fd65" kindref="member">mbedtls_ssl_conf_dtls_cookies</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a536f8b89936f26732150b00639a47ff0" kindref="member">mbedtls_ssl_cookie_write_t</ref><sp/>*f_cookie_write,</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a9cfda5aee70d6c2c19a8dfb5af900d80" kindref="member">mbedtls_ssl_cookie_check_t</ref><sp/>*f_cookie_check,</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_cookie);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a15fab95c13a898f32fa69ff2065c1051" kindref="member">mbedtls_ssl_set_client_transport_id</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*info,</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_HELLO_VERIFY<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a46d919254eafef2ae642fb692c5e560a" kindref="member">mbedtls_ssl_conf_dtls_anti_replay</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_ANTI_REPLAY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a9baa37a4b839319d00d8b43c8d266719" kindref="member">mbedtls_ssl_conf_dtls_badmac_limit</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>limit);</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_DTLS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a84238750762b8cf8a6ca25d08efcc1ab" kindref="member">mbedtls_ssl_set_datagram_packing</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>allow_packing);</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a6625bc4e7ffd535900ef53259cc21651" kindref="member">mbedtls_ssl_conf_handshake_timeout</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/>uint32_t<sp/>min,<sp/>uint32_t<sp/>max);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_DTLS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a97c606d9c7ec31bb3078346b6f4d9cba" kindref="member">mbedtls_ssl_conf_session_cache</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_cache,</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a0ed860c5a383e14f7448e82df1e52e3a" kindref="member">mbedtls_ssl_cache_get_t</ref><sp/>*f_get_cache,</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1aacaaebff1203d11ba336eac1af7276b8" kindref="member">mbedtls_ssl_cache_set_t</ref><sp/>*f_set_cache);</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a91be5c606b9f7c1e44b3e507a4fe7b66" kindref="member">mbedtls_ssl_set_session</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session);</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a53026dd189f4abed9ee805d4baefac28" kindref="member">mbedtls_ssl_session_load</ref>(<ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session,</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a1fa5a82a8c4a33b69578d563e8922dcf" kindref="member">mbedtls_ssl_session_save</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session,</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len,</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac8e4df37cadda8f743ed45501a51fec1" kindref="member">mbedtls_ssl_conf_ciphersuites</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ciphersuites);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1af1b755dac4dcda27b59d3a6a0012eed9" kindref="member">mbedtls_ssl_conf_tls13_key_exchange_modes</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kex_modes);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_PROTO_TLS1_3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3243" refid="ssl_8h_1afd5c15d71f8c2b681e5c6ea6b2912461" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_UNEXPECTED_CID_IGNORE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244" refid="ssl_8h_1a30269cdf6b9ded752c628287aba9cbad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_UNEXPECTED_CID_FAIL<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a8b3cdd39e60718056f4db139ac85c365" kindref="member">mbedtls_ssl_conf_cid</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ignore_other_cids);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_CONNECTION_ID<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a76dc3c312ffd51f6d0ca127b322307bb" kindref="member">mbedtls_ssl_conf_cert_profile</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref><sp/>*profile);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a85c3bb6b682ba361d13de1c0a1eb69fb" kindref="member">mbedtls_ssl_conf_ca_chain</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*ca_chain,</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref><sp/>*ca_crl);</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_CERT_REQ_ALLOWED_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323" refid="ssl_8h_1a767ba2c8bd54d2d5f74415f73238e8a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a767ba2c8bd54d2d5f74415f73238e8a6" kindref="member">mbedtls_ssl_conf_dn_hints</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*crt)</highlight></codeline>
<codeline lineno="3325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>conf-&gt;MBEDTLS_PRIVATE(dn_hints)<sp/>=<sp/>crt;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_KEY_EXCHANGE_CERT_REQ_ALLOWED_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_TRUSTED_CERTIFICATE_CALLBACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aaff29509e19ba559c9228e4ee8a49e32" kindref="member">mbedtls_ssl_conf_ca_cb</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__x509__module_1ga76b0dd21c9c8ab66a4577e8bd5afa736" kindref="member">mbedtls_x509_crt_ca_cb_t</ref><sp/>f_ca_cb,</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_ca_cb);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_TRUSTED_CERTIFICATE_CALLBACK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a4e54e9ace21beb608bae36ddb81a4fb0" kindref="member">mbedtls_ssl_conf_own_cert</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*own_cert,</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*pk_key);</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_HANDSHAKE_WITH_PSK_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a1e185199e3ff613bdd1c8231a19e24fc" kindref="member">mbedtls_ssl_conf_psk</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psk,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psk_len,</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psk_identity,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psk_identity_len);</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1addf772fd2fcdd5b408a86c316e6d00a7" kindref="member">mbedtls_ssl_conf_psk_opaque</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>psk,</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psk_identity,</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psk_identity_len);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a50f8bb06a3ec75f6fec4ccc2c1aad151" kindref="member">mbedtls_ssl_set_hs_psk</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*psk,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psk_len);</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a05facf7eea954b48d1be171d1bd6cbe9" kindref="member">mbedtls_ssl_set_hs_psk_opaque</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>psk);</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a1b804626a236e493316c58b048ab5937" kindref="member">mbedtls_ssl_conf_psk_cb</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_psk)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_psk);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_HANDSHAKE_WITH_PSK_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_DHM_C)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a457078c76cf96c9696fd226c8efe0674" kindref="member">mbedtls_ssl_conf_dh_param_bin</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dhm_P,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>P_len,</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dhm_G,<sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>G_len);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aec6d67681da3a0d5cb259137af176d56" kindref="member">mbedtls_ssl_conf_dh_param_ctx</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/><ref refid="structmbedtls__dhm__context" kindref="compound">mbedtls_dhm_context</ref><sp/>*dhm_ctx);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DHM_C<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_SRV_C)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_DHM_C)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a9dd56f07a798d344dba5bcf33376edfd" kindref="member">mbedtls_ssl_conf_dhm_min_bitlen</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitlen);</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DHM_C<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref><sp/><ref refid="ssl_8h_1aa5f57bc7af0a5584764ef083be319c7e" kindref="member">mbedtls_ssl_conf_curves</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>*curves);</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DEPRECATED_REMOVED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aa9101dc3ad40fc232ac5de4f163b15ab" kindref="member">mbedtls_ssl_conf_groups</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*groups);</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_HANDSHAKE_WITH_CERT_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_SSL_PROTO_TLS1_2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref><sp/><ref refid="ssl_8h_1a20175f0d49dc6fedf474b0b6351f434b" kindref="member">mbedtls_ssl_conf_sig_hashes</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*hashes);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_DEPRECATED_REMOVED<sp/>&amp;&amp;<sp/>MBEDTLS_SSL_PROTO_TLS1_2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a6cb9455721f800026271b795844265a2" kindref="member">mbedtls_ssl_conf_sig_algs</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*sig_algs);</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_HANDSHAKE_WITH_CERT_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aa659024cf89e20d6d2248c0626db7ef2" kindref="member">mbedtls_ssl_set_hostname</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809" refid="ssl_8h_1a9a830459dbac8aa7955d16aa3e8325e4" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a9a830459dbac8aa7955d16aa3e8325e4" kindref="member">mbedtls_ssl_get_hostname</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl)</highlight></codeline>
<codeline lineno="3810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ssl-&gt;MBEDTLS_PRIVATE(hostname);</highlight></codeline>
<codeline lineno="3812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1aadce27d91f422f8f6fbd8c96a7cd0ed8" kindref="member">mbedtls_ssl_get_hs_sni</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*name_len);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aa0353666974b1cd19dafb2c2b165d2f2" kindref="member">mbedtls_ssl_set_hs_own_cert</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*own_cert,</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*pk_key);</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a33a781dcdc16bd649ea0346a598e9656" kindref="member">mbedtls_ssl_set_hs_ca_chain</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*ca_chain,</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref><sp/>*ca_crl);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_CERT_REQ_ALLOWED_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a087cbd7a4eb0532fee61c4002a5d9fae" kindref="member">mbedtls_ssl_set_hs_dn_hints</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*crt);</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_KEY_EXCHANGE_CERT_REQ_ALLOWED_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a8366b49e25054078b5be139c0ce560d7" kindref="member">mbedtls_ssl_set_hs_authmode</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>authmode);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a38ee2c1e3f232444df5ba3952d7ded33" kindref="member">mbedtls_ssl_conf_sni</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_sni)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_sni);</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SERVER_NAME_INDICATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a36ec09a4ebfcc3676807a0c83985bf15" kindref="member">mbedtls_ssl_set_hs_ecjpake_password</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pw,</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pw_len);</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a0b92805cc9e755124177fc926daff5ad" kindref="member">mbedtls_ssl_set_hs_ecjpake_password_opaque</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>pwd);</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ALPN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ae21135dddd89b2ef273c13e140097f5a" kindref="member">mbedtls_ssl_conf_alpn_protocols</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**protos);</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1ad1ab606db1a9307b4aacccdcd1d1a6ef" kindref="member">mbedtls_ssl_get_alpn_protocol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_ALPN<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_DTLS_SRTP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_DEBUG_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3997" refid="ssl_8h_1a439e726a9ed64a6737831cbe4126f35c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a439e726a9ed64a6737831cbe4126f35c" kindref="member">mbedtls_ssl_get_srtp_profile_as_string</ref>(<ref refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" kindref="member">mbedtls_ssl_srtp_profile</ref><sp/>profile)</highlight></codeline>
<codeline lineno="3998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(profile)<sp/>{</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1acbe1cbb11fee2c0b6ef767f2bc4ff413" kindref="member">MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80</ref>:</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ab92698fa5b18c274b85c36445a2ac046" kindref="member">MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32</ref>:</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a3b5987dbe37a7398ea13c24f57e1e23c" kindref="member">MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_80</ref>:</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_80&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a45f60d4d23068a07c1938b410a7887af" kindref="member">MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_32</ref>:</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MBEDTLS_TLS_SRTP_NULL_HMAC_SHA1_32&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DEBUG_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a68839316ac505aed63bccc0f57164e89" kindref="member">mbedtls_ssl_conf_srtp_mki_value_supported</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>support_mki_value);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a60708396eb994ce23136821a9943ed45" kindref="member">mbedtls_ssl_conf_dtls_srtp_protection_profiles</ref></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ad521c5938b7f7548fc7d854ca0d118ab" kindref="member">mbedtls_ssl_srtp_profile</ref><sp/>*profiles);</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac7e62a744fac6eaa7a70210099f22daf" kindref="member">mbedtls_ssl_dtls_srtp_set_mki_value</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mki_value,</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>mki_len);</highlight></codeline>
<codeline lineno="4089"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a72c3a974f3f1ae2337cb731653fd2230" kindref="member">mbedtls_ssl_get_dtls_srtp_negotiation_result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__dtls__srtp__info__t" kindref="compound">mbedtls_dtls_srtp_info</ref><sp/>*dtls_srtp_info);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_DTLS_SRTP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref><sp/><ref refid="ssl_8h_1aa95636131005f78f42da512e275340bd" kindref="member">mbedtls_ssl_conf_max_version</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>major,</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minor);</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DEPRECATED_REMOVED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4127" refid="ssl_8h_1abacdd7ffcbec7930ea429059ea9cfbb3" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1abacdd7ffcbec7930ea429059ea9cfbb3" kindref="member">mbedtls_ssl_conf_max_tls_version</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref><sp/>tls_version)</highlight></codeline>
<codeline lineno="4129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/>conf-&gt;MBEDTLS_PRIVATE(max_tls_version)<sp/>=<sp/>tls_version;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_DEPRECATED_REMOVED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref><sp/><ref refid="ssl_8h_1ad7cb4288b75f7b25ca4ca37e59ed5f04" kindref="member">mbedtls_ssl_conf_min_version</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>major,</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minor);</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_DEPRECATED_REMOVED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4184" refid="ssl_8h_1aeec500f3fb971169591dfe17cd8e963b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aeec500f3fb971169591dfe17cd8e963b" kindref="member">mbedtls_ssl_conf_min_tls_version</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref><sp/>tls_version)</highlight></codeline>
<codeline lineno="4186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/>conf-&gt;MBEDTLS_PRIVATE(min_tls_version)<sp/>=<sp/>tls_version;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1afa8a1d55630fec25f2247fc9958eaa53" kindref="member">mbedtls_ssl_conf_encrypt_then_mac</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>etm);</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_ENCRYPT_THEN_MAC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a133db91d4a1dd44d212ac57e386c23b3" kindref="member">mbedtls_ssl_conf_extended_master_secret</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ems);</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_EXTENDED_MASTER_SECRET<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a05492293c43910a64f746af8f71efb2f" kindref="member">mbedtls_ssl_conf_cert_req_ca_list</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cert_req_ca_list);</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac68fda83c26b3078e80f4dfc3b09bb94" kindref="member">mbedtls_ssl_conf_max_frag_len</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mfl_code);</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a5d677c775316cc743bf57869a80c5fe8" kindref="member">mbedtls_ssl_conf_preference_order</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order);</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="4286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a97e547f900979337f4083a8158918fcc" kindref="member">mbedtls_ssl_conf_session_tickets</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_tickets);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SESSION_TICKETS)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="4302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_SSL_SRV_C)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="4303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_SSL_PROTO_TLS1_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a4ef70ff9e2d6385b14a050609a8a2614" kindref="member">mbedtls_ssl_conf_new_session_tickets</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>num_tickets);</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SESSION_TICKETS<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_SRV_C<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_SSL_PROTO_TLS1_3*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_RENEGOTIATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aad4f50fc1c0a018fd5eb18fd9621d0d3" kindref="member">mbedtls_ssl_conf_renegotiation</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>renegotiation);</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_RENEGOTIATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a193c7bf368780f485e20170c807709e5" kindref="member">mbedtls_ssl_conf_legacy_renegotiation</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allow_legacy);</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_RENEGOTIATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a2d193b15941a556baaf2cb94138d66df" kindref="member">mbedtls_ssl_conf_renegotiation_enforced</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_records);</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a1785faa0640bd6190c1c17a94b408e31" kindref="member">mbedtls_ssl_conf_renegotiation_period</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>period[8]);</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_RENEGOTIATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4484"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a4075f7de9877fd667bcfa2e819e33426" kindref="member">mbedtls_ssl_check_pending</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ad43142085f3182e9b0dc967ec582032b" kindref="member">mbedtls_ssl_get_bytes_avail</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal">uint32_t<sp/><ref refid="ssl_8h_1a516064f1468d459159ef7cd6c496a026" kindref="member">mbedtls_ssl_get_verify_result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac80127ff0d28583c0a6ab9d29e752b81" kindref="member">mbedtls_ssl_get_ciphersuite_id_from_ssl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a18739598df499461369020b8ea6fff1c" kindref="member">mbedtls_ssl_get_ciphersuite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight></codeline>
<codeline lineno="4547" refid="ssl_8h_1a5592d00ccf7eae76faef598b393e53ab" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a40e713ddf44767b6592269e808204c02" kindref="member">mbedtls_ssl_protocol_version</ref><sp/><ref refid="ssl_8h_1a5592d00ccf7eae76faef598b393e53ab" kindref="member">mbedtls_ssl_get_version_number</ref>(</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl)</highlight></codeline>
<codeline lineno="4549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ssl-&gt;MBEDTLS_PRIVATE(tls_version);</highlight></codeline>
<codeline lineno="4551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"></highlight></codeline>
<codeline lineno="4560"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ssl_8h_1a1ee2e52fe2ae9620af84df97a0347ce3" kindref="member">mbedtls_ssl_get_version</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a935f3ebfb31f988e24a8bf9bcb0fd26b" kindref="member">mbedtls_ssl_get_record_expansion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a58a7ddcf453791f2947bc7f99503047d" kindref="member">mbedtls_ssl_get_max_out_record_payload</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a5c681b9af0ae2195ca5a7a5d9c162d70" kindref="member">mbedtls_ssl_get_max_in_record_payload</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_X509_CRT_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref><sp/>*<ref refid="ssl_8h_1aa7ab0ac8d8341063a0f815ee99337831" kindref="member">mbedtls_ssl_get_peer_cert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_X509_CRT_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ad617a178adfaf259db89c4fe092ad6e1" kindref="member">mbedtls_ssl_get_session</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a4a37e497cd08c896870a42b1b618186e" kindref="member">mbedtls_ssl_handshake</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4760" refid="ssl_8h_1a443d1e3523563e85d32910e29ee7109b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a443d1e3523563e85d32910e29ee7109b" kindref="member">mbedtls_ssl_is_handshake_over</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl)</highlight></codeline>
<codeline lineno="4761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ssl-&gt;MBEDTLS_PRIVATE(state)<sp/>&gt;=<sp/><ref refid="ssl_8h_1a38f2ea5d01dc38dc852a1dd3af6988b0a077633740a69a39daf3cd1366cf57f45" kindref="member">MBEDTLS_SSL_HANDSHAKE_OVER</ref>;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aac1583fe56eda081580742999968bbcf" kindref="member">mbedtls_ssl_handshake_step</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_RENEGOTIATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a49b7a27a616495d5f0a4fabc3f550dbb" kindref="member">mbedtls_ssl_renegotiate</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_RENEGOTIATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4904"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aa2c29eeb1deaf5ad9f01a7515006ede5" kindref="member">mbedtls_ssl_read</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a5bbda87d484de82df730758b475f32e5" kindref="member">mbedtls_ssl_write</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight></codeline>
<codeline lineno="4984"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a431e67252731a34bd9b5f2c9222f4c43" kindref="member">mbedtls_ssl_send_alert_message</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message);</highlight></codeline>
<codeline lineno="5000"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac2c1b17128ead2df3082e27b603deb4c" kindref="member">mbedtls_ssl_close_notify</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_EARLY_DATA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_SRV_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac20ed299fda6adbb70b341bf45b8a6fc" kindref="member">mbedtls_ssl_read_early_data</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_SRV_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_CLI_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a89b4d9f646ae0c24983082057c41d72e" kindref="member">mbedtls_ssl_write_early_data</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"></highlight></codeline>
<codeline lineno="5113" refid="ssl_8h_1ad3dce67d4c6868722be9bf3a10eec11b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EARLY_DATA_STATUS_NOT_SENT<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5114" refid="ssl_8h_1add00b16dbb05663657723d0583061e36" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EARLY_DATA_STATUS_ACCEPTED<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115" refid="ssl_8h_1a4c5710c40ef00416938342d586ede58c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_SSL_EARLY_DATA_STATUS_REJECTED<sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"></highlight></codeline>
<codeline lineno="5142"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a5ed57c572d0453d3e997d7c46ed7b606" kindref="member">mbedtls_ssl_get_early_data_status</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_CLI_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_EARLY_DATA<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a2dc104a181bcd11eafbbf7e6923978bc" kindref="member">mbedtls_ssl_free</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl);</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"></highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SSL_CONTEXT_SERIALIZATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal"></highlight></codeline>
<codeline lineno="5211"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1abd110552b6306e31617e85d4dffe9e13" kindref="member">mbedtls_ssl_context_save</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_len,</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5284"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a8351242a219e04475cf0f0f871954f12" kindref="member">mbedtls_ssl_context_load</ref>(<ref refid="structmbedtls__ssl__context" kindref="compound">mbedtls_ssl_context</ref><sp/>*ssl,</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SSL_CONTEXT_SERIALIZATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aba55bcda50a47e83803e31a8db7c9a86" kindref="member">mbedtls_ssl_config_init</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf);</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1aa1335b65ba57e81accc91ef95454d5a6" kindref="member">mbedtls_ssl_config_defaults</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf,</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endpoint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>transport,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>preset);</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a7655f025440a6c5ccd4fc13832abb1dd" kindref="member">mbedtls_ssl_config_free</ref>(<ref refid="structmbedtls__ssl__config" kindref="compound">mbedtls_ssl_config</ref><sp/>*conf);</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a7980469655c1cdb8fd7e966bffe1fd02" kindref="member">mbedtls_ssl_session_init</ref>(<ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session);</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1ac085defe1a02ab784a0a2fb201bcc741" kindref="member">mbedtls_ssl_session_free</ref>(<ref refid="structmbedtls__ssl__session" kindref="compound">mbedtls_ssl_session</ref><sp/>*session);</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight></codeline>
<codeline lineno="5359"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ssl_8h_1abf341c6825ac6f30dfdeb1287b5a1ad0" kindref="member">mbedtls_ssl_tls_prf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ssl_8h_1a35b637af8e1ec0d010b858e2e68b53a0" kindref="member">mbedtls_tls_prf_types</ref><sp/>prf,</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*secret,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>slen,</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label,</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*random,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rlen,</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dstbuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlen);</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ssl.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ssl.h"/>
  </compounddef>
</doxygen>
