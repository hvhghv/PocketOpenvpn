<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__import__export" kind="group">
    <compoundname>import_export</compoundname>
    <title>Key import and export</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__import__export_1ga0336ea76bf30587ab204a8296462327b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_import_key</definition>
        <argsstring>(const psa_key_attributes_t *attributes, const uint8_t *data, size_t data_length, mbedtls_svc_key_id_t *key)</argsstring>
        <name>psa_import_key</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_length</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Import a key in binary format. </para>
        </briefdescription>
        <detaileddescription>
<para>This function supports any output from <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref>. Refer to the documentation of <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> for the format of public keys and to the documentation of <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> for the format for other key types.</para>
<para>The key data determines the key size. The attributes may optionally specify a key size; in this case it must match the size determined from the key data. A key size of 0 in <computeroutput>attributes</computeroutput> indicates that the key size is solely determined by the key data.</para>
<para>Implementations must reject an attempt to import a key of size 0.</para>
<para>This specification supports a single format for each key type. Implementations may support other formats as long as the standard format is supported. Implementations that support other formats should ensure that the formats are clearly unambiguous so as to minimize the risk that an invalid input is accidentally interpreted according to a different format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attributes for the new key. The key size is always determined from the <computeroutput>data</computeroutput> buffer. If the key size in <computeroutput>attributes</computeroutput> is nonzero, it must be equal to the size from <computeroutput>data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, an identifier to the newly created key. For persistent keys, this is the key identifier defined in <computeroutput>attributes</computeroutput>. <computeroutput>0</computeroutput> on failure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the key data. The content of this buffer is interpreted according to the type declared in <computeroutput>attributes</computeroutput>. All implementations must support at least the format described in the documentation of <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> or <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref> for the chosen type. Implementations may allow other formats, but should be conservative: implementations should err on the side of rejecting content if it may be erroneous (e.g. wrong type or truncated data). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. If the key is persistent, the key material and the key&apos;s metadata have been saved to persistent storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gaf2b34cc87edc72f3ba90071a08210d20" kindref="member">PSA_ERROR_ALREADY_EXISTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is an attempt to create a persistent key, and there is already a persistent key with the given identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key type or key size is not supported, either by the implementation in general or in this particular persistent location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key attributes, as a whole, are invalid, or the key data is not correctly formatted, or the size in <computeroutput>attributes</computeroutput> is nonzero and does not match the size of the key data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga897a45eb206a6f6b7be7ffbe36f0d766" kindref="member">PSA_ERROR_INSUFFICIENT_STORAGE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="639" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="639" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_export_key</definition>
        <argsstring>(mbedtls_svc_key_id_t key, uint8_t *data, size_t data_size, size_t *data_length)</argsstring>
        <name>psa_export_key</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
<para>Export a key in binary format. </para>
        </briefdescription>
        <detaileddescription>
<para>The output of this function can be passed to <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key()</ref> to create an equivalent object.</para>
<para>If the implementation of <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key()</ref> supports other formats beyond the format specified here, the output from <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref> must use the representation specified here, not the original representation.</para>
<para>For standard key types, the output format is as follows:</para>
<para><itemizedlist>
<listitem><para>For symmetric keys (including MAC keys), the format is the raw bytes of the key.</para>
</listitem><listitem><para>For DES, the key data consists of 8 bytes. The parity bits must be correct.</para>
</listitem><listitem><para>For Triple-DES, the format is the concatenation of the two or three DES keys.</para>
</listitem><listitem><para>For RSA key pairs (<ref refid="group__crypto__types_1ga11745b110166e927e2abeabc7d532051" kindref="member">PSA_KEY_TYPE_RSA_KEY_PAIR</ref>), the format is the non-encrypted DER encoding of the representation defined by PKCS#1 (RFC 8017) as <computeroutput>RSAPrivateKey</computeroutput>, version 0. <programlisting><codeline><highlight class="normal">RSAPrivateKey<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>must<sp/>be<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>modulus<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>n</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>publicExponent<sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>e</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>privateExponent<sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>d</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>prime1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>p</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>prime2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>q</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>exponent1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>d<sp/>mod<sp/>(p-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>exponent2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>d<sp/>mod<sp/>(q-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>coefficient<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/>--<sp/>(inverse<sp/>of<sp/>q)<sp/>mod<sp/>p</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>For elliptic curve key pairs (key types for which <ref refid="group__crypto__types_1gab00289ec3d84a469950a4d8c10fb8cc6" kindref="member">PSA_KEY_TYPE_IS_ECC_KEY_PAIR</ref> is true), the format is a representation of the private value as a <computeroutput>ceiling(m/8)</computeroutput>-byte string where <computeroutput>m</computeroutput> is the bit size associated with the curve, i.e. the bit size of the order of the curve&apos;s coordinate field. This byte string is in little-endian order for Montgomery curves (curve types <computeroutput>PSA_ECC_FAMILY_CURVEXXX</computeroutput>), and in big-endian order for Weierstrass curves (curve types <computeroutput>PSA_ECC_FAMILY_SECTXXX</computeroutput>, <computeroutput>PSA_ECC_FAMILY_SECPXXX</computeroutput> and <computeroutput>PSA_ECC_FAMILY_BRAINPOOL_PXXX</computeroutput>). For Weierstrass curves, this is the content of the <computeroutput>privateKey</computeroutput> field of the <computeroutput>ECPrivateKey</computeroutput> format defined by RFC 5915. For Montgomery curves, the format is defined by RFC 7748, and output is masked according to §5. For twisted Edwards curves, the private key is as defined by RFC 8032 (a 32-byte string for Edwards25519, a 57-byte string for Edwards448).</para>
</listitem><listitem><para>For Diffie-Hellman key exchange key pairs (key types for which <ref refid="group__crypto__types_1gabb9dd614786fe328df4e485c1a61ed25" kindref="member">PSA_KEY_TYPE_IS_DH_KEY_PAIR</ref> is true), the format is the representation of the private key <computeroutput>x</computeroutput> as a big-endian byte string. The length of the byte string is the private key size in bytes (leading zeroes are not stripped).</para>
</listitem><listitem><para>For public keys (key types for which <ref refid="group__crypto__types_1gac674a0f059bc0cb72b47f0c517b4f45b" kindref="member">PSA_KEY_TYPE_IS_PUBLIC_KEY</ref> is true), the format is the same as for <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>.</para>
</listitem></itemizedlist>
</para>
<para>The policy on the key must have the usage flag <ref refid="group__policy_1ga7dddccdd1303176e87a4d20c87b589ed" kindref="member">PSA_KEY_USAGE_EXPORT</ref> set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to export. It must allow the usage <ref refid="group__policy_1ga7dddccdd1303176e87a4d20c87b589ed" kindref="member">PSA_KEY_USAGE_EXPORT</ref>, unless it is a public key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the key data is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the key data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key does not have the <ref refid="group__policy_1ga7dddccdd1303176e87a4d20c87b589ed" kindref="member">PSA_KEY_USAGE_EXPORT</ref> flag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>data</computeroutput> buffer is too small. You can determine a sufficient buffer size by calling <ref refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" kindref="member">PSA_EXPORT_KEY_OUTPUT_SIZE</ref>(<computeroutput>type</computeroutput>, <computeroutput>bits</computeroutput>) where <computeroutput>type</computeroutput> is the key type and <computeroutput>bits</computeroutput> is the key size in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="734" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="734" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_export_public_key</definition>
        <argsstring>(mbedtls_svc_key_id_t key, uint8_t *data, size_t data_size, size_t *data_length)</argsstring>
        <name>psa_export_public_key</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
<para>Export a public key or the public part of a key pair in binary format. </para>
        </briefdescription>
        <detaileddescription>
<para>The output of this function can be passed to <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key()</ref> to create an object that is equivalent to the public key.</para>
<para>This specification supports a single format for each key type. Implementations may support other formats as long as the standard format is supported. Implementations that support other formats should ensure that the formats are clearly unambiguous so as to minimize the risk that an invalid input is accidentally interpreted according to a different format.</para>
<para>For standard key types, the output format is as follows:<itemizedlist>
<listitem><para>For RSA public keys (<ref refid="group__crypto__types_1ga9ba0878f56c8bcd1995ac017a74f513b" kindref="member">PSA_KEY_TYPE_RSA_PUBLIC_KEY</ref>), the DER encoding of the representation defined by RFC 3279 <sect/>2.3.1 as <computeroutput>RSAPublicKey</computeroutput>. <programlisting><codeline><highlight class="normal">RSAPublicKey<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>modulus<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/><sp/><sp/>--<sp/>n</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>publicExponent<sp/><sp/><sp/><sp/><sp/>INTEGER<sp/><sp/>}<sp/><sp/>--<sp/>e</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>For elliptic curve keys on a twisted Edwards curve (key types for which <ref refid="group__crypto__types_1ga5af146a173b0c84d7e737e2fb6a3c0a7" kindref="member">PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY</ref> is true and <ref refid="group__crypto__types_1ga30642b7e640a6e9e00871764afe0288d" kindref="member">PSA_KEY_TYPE_ECC_GET_FAMILY</ref> returns <ref refid="group__crypto__types_1gafe45f9fe29699f26795f6251f47eafd4" kindref="member">PSA_ECC_FAMILY_TWISTED_EDWARDS</ref>), the public key is as defined by RFC 8032 (a 32-byte string for Edwards25519, a 57-byte string for Edwards448).</para>
</listitem><listitem><para>For other elliptic curve public keys (key types for which <ref refid="group__crypto__types_1ga5af146a173b0c84d7e737e2fb6a3c0a7" kindref="member">PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY</ref> is true), the format is the uncompressed representation defined by SEC1 <sect/>2.3.3 as the content of an ECPoint. Let <computeroutput>m</computeroutput> be the bit size associated with the curve, i.e. the bit size of <computeroutput>q</computeroutput> for a curve over <computeroutput>F_q</computeroutput>. The representation consists of:<itemizedlist>
<listitem><para>The byte 0x04;</para>
</listitem><listitem><para><computeroutput>x_P</computeroutput> as a <computeroutput>ceiling(m/8)</computeroutput>-byte string, big-endian;</para>
</listitem><listitem><para><computeroutput>y_P</computeroutput> as a <computeroutput>ceiling(m/8)</computeroutput>-byte string, big-endian.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>For Diffie-Hellman key exchange public keys (key types for which <ref refid="group__crypto__types_1ga23627e047fa4b536f07d6f4796f879f5" kindref="member">PSA_KEY_TYPE_IS_DH_PUBLIC_KEY</ref> is true), the format is the representation of the public key <computeroutput>y = g^x mod p</computeroutput> as a big-endian byte string. The length of the byte string is the length of the base prime <computeroutput>p</computeroutput> in bytes.</para>
</listitem></itemizedlist>
</para>
<para>Exporting a public key object or the public part of a key pair is always permitted, regardless of the key&apos;s usage flags.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to export. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the key data is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the key data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key is neither a public key nor a key pair. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>data</computeroutput> buffer is too small. You can determine a sufficient buffer size by calling <ref refid="crypto__sizes_8h_1a2e3ff71b9f4e639c03c9e55c7774dc51" kindref="member">PSA_EXPORT_KEY_OUTPUT_SIZE</ref>(<ref refid="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" kindref="member">PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</ref>(<computeroutput>type</computeroutput>), <computeroutput>bits</computeroutput>) where <computeroutput>type</computeroutput> is the key type and <computeroutput>bits</computeroutput> is the key size in bits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga08b10e70fa5ff0b05c631d9f8f6b2c6b" kindref="member">PSA_ERROR_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" line="809" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto.h" declline="809" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
