<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="crypto__extra_8h" kind="file" language="C++">
    <compoundname>crypto_extra.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="crypto__types_8h" local="yes">crypto_types.h</includes>
    <includes refid="crypto__compat_8h" local="yes">crypto_compat.h</includes>
    <includes refid="ecp_8h" local="no">mbedtls/ecp.h</includes>
    <includedby refid="crypto_8h" local="yes">crypto.h</includedby>
    <incdepgraph>
      <node id="13">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="24">
        <label>mbedtls/ecp.h</label>
        <link refid="ecp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="1">
        <label>crypto_extra.h</label>
        <link refid="crypto__extra_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="3">
        <label>crypto_types.h</label>
        <link refid="crypto__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>mbedtls/bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>stddef.h</label>
      </node>
      <node id="19">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="18">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="21">
        <label>crypto_platform.h</label>
        <link refid="crypto__platform_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>crypto_compat.h</label>
        <link refid="crypto__compat_8h"/>
      </node>
      <node id="5">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="7">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="22">
        <label>psa/build_info.h</label>
        <link refid="psa_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="8">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="27">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="15">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="1">
        <label>crypto_extra.h</label>
        <link refid="crypto__extra_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="2">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="8">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="3">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="16">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="7">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="14">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__psa__stats__s" prot="public">mbedtls_psa_stats_s</innerclass>
    <innerclass refid="structpsa__pake__cipher__suite__s" prot="public">psa_pake_cipher_suite_s</innerclass>
    <innerclass refid="structpsa__crypto__driver__pake__inputs__s" prot="public">psa_crypto_driver_pake_inputs_s</innerclass>
    <innerclass refid="structpsa__jpake__computation__stage__s" prot="public">psa_jpake_computation_stage_s</innerclass>
    <innerclass refid="structpsa__pake__operation__s" prot="public">psa_pake_operation_s</innerclass>
      <sectiondef kind="user-defined">
      <header>SECTION: Module configuration options</header>
      <description><para>This section allows for the setting of module specific sizes and configuration options. The default values are already present in the relevant header files and should suffice for the regular use cases.</para>
<para>Our advice is to enable options and change their values here only if you have a good reason and know the consequences. </para>
</description>
      <memberdef kind="define" id="crypto__extra_8h_1ad71d479d3f79388ebcef74fa0e070b5b" prot="public" static="no">
        <name>MBEDTLS_PSA_KEY_SLOT_COUNT</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use HMAC_DRBG with the specified hash algorithm for HMAC_DRBG for the PSA crypto subsystem.</para>
<para>If this option is unset:<itemizedlist>
<listitem><para>If CTR_DRBG is available, the PSA subsystem uses it rather than HMAC_DRBG.</para>
</listitem><listitem><para>Otherwise, the PSA subsystem uses HMAC_DRBG with either <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a0cdbe8272ceee7d63b2bfadd5ed05c26" kindref="member">MBEDTLS_MD_SHA512</ref> or <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a7634aa1a264b0e1a5ec65f4ed77468f8" kindref="member">MBEDTLS_MD_SHA256</ref> based on availability and on unspecified heuristics.</para>
</listitem></itemizedlist>
</para>
<para>Restrict the PSA library to supporting a maximum amount of simultaneously loaded keys. A loaded key is a key stored by the PSA Crypto core as a volatile key, or a persistent key which is loaded temporarily by the library as part of a crypto operation in flight.</para>
<para>If this option is unset, the library will fall back to a default value of 32 keys. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="32" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="crypto__extra_8h_1aa406d8c915ddb507f10f6f14fcf89da8" prot="public" static="no">
        <name>PSA_CRYPTO_ITS_RANDOM_SEED_UID</name>
        <initializer>0xFFFFFF52</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="28" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga5e7439c2905136366c3a876e62e5ddfc" prot="public" static="no">
        <name>PSA_KEY_TYPE_DSA_PUBLIC_KEY</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x4002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DSA public key.</para>
<para>The import and export format is the representation of the public key <computeroutput>y = g^x mod p</computeroutput> as a big-endian byte string. The length of the byte string is the length of the base prime <computeroutput>p</computeroutput> in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="328" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga7d4a45c147cb0ecb55d01d9c04bfed76" prot="public" static="no">
        <name>PSA_KEY_TYPE_DSA_KEY_PAIR</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x7002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DSA key pair (private and public key).</para>
<para>The import and export format is the representation of the private key <computeroutput>x</computeroutput> as a big-endian byte string. The length of the byte string is the private key size in bytes (leading zeroes are not stripped).</para>
<para>Deterministic DSA key derivation with psa_generate_derived_key follows FIPS 186-4 <sect/>B.1.2: interpret the byte string as integer in big-endian order. Discard it if it is not in the range [0, <emphasis>N</emphasis> - 2] where <emphasis>N</emphasis> is the boundary of the private key domain (the prime <emphasis>p</emphasis> for Diffie-Hellman, the subprime <emphasis>q</emphasis> for DSA, or the order of the curve&apos;s base point for ECC). Add 1 to the resulting integer and use this as the private key <emphasis>x</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="346" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga273fdfcf23eb0624f8b63d2321cf95c1" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_DSA</name>
        <param><defname>type</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" kindref="member">PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</ref>(type) == <ref refid="group__crypto__types_1ga5e7439c2905136366c3a876e62e5ddfc" kindref="member">PSA_KEY_TYPE_DSA_PUBLIC_KEY</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is a DSA key (pair or public-only). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="349" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga863284106894476e3a8524805410b55b" prot="public" static="no">
        <name>PSA_ALG_DSA_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="352" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9a68efdddff5ae95f104a1416b12742e" prot="public" static="no">
        <name>PSA_ALG_DSA</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga863284106894476e3a8524805410b55b" kindref="member">PSA_ALG_DSA_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DSA signature with hashing.</para>
<para>This is the signature scheme defined by FIPS 186-4, with a random per-message secret number (<emphasis>k</emphasis>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding DSA signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="367" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad3800dafc62d6a17bcae4bce98402e68" prot="public" static="no">
        <name>PSA_ALG_DETERMINISTIC_DSA_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="369" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1d2a96f788cce4f8fc156d13342e70de" prot="public" static="no">
        <name>PSA_ALG_DSA_DETERMINISTIC_FLAG</name>
        <initializer><ref refid="group__crypto__types_1ga409294c965c3e28728f8cb9822e886d1" kindref="member">PSA_ALG_ECDSA_DETERMINISTIC_FLAG</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="370" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab8eb98fb6d2e094e47f3b44dfe128f94" prot="public" static="no">
        <name>PSA_ALG_DETERMINISTIC_DSA</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gad3800dafc62d6a17bcae4bce98402e68" kindref="member">PSA_ALG_DETERMINISTIC_DSA_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deterministic DSA signature with hashing.</para>
<para>This is the deterministic variant defined by RFC 6979 of the signature scheme defined by FIPS 186-4.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding DSA signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="385" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" prot="public" static="no">
        <name>PSA_ALG_IS_DSA</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref> &amp; ~<ref refid="group__crypto__types_1ga1d2a96f788cce4f8fc156d13342e70de" kindref="member">PSA_ALG_DSA_DETERMINISTIC_FLAG</ref>) ==  \
     <ref refid="group__crypto__types_1ga863284106894476e3a8524805410b55b" kindref="member">PSA_ALG_DSA_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="387" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae01ae792228c16eac05102f8e900efd1" prot="public" static="no">
        <name>PSA_ALG_DSA_IS_DETERMINISTIC</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga1d2a96f788cce4f8fc156d13342e70de" kindref="member">PSA_ALG_DSA_DETERMINISTIC_FLAG</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="390" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga11f7d6fe7a4441143ed398420b7d1980" prot="public" static="no">
        <name>PSA_ALG_IS_DETERMINISTIC_DSA</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" kindref="member">PSA_ALG_IS_DSA</ref>(alg) &amp;&amp; <ref refid="group__crypto__types_1gae01ae792228c16eac05102f8e900efd1" kindref="member">PSA_ALG_DSA_IS_DETERMINISTIC</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="392" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga474c0582c4726d0c0274e470f4199cf9" prot="public" static="no">
        <name>PSA_ALG_IS_RANDOMIZED_DSA</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" kindref="member">PSA_ALG_IS_DSA</ref>(alg) &amp;&amp; !<ref refid="group__crypto__types_1gae01ae792228c16eac05102f8e900efd1" kindref="member">PSA_ALG_DSA_IS_DETERMINISTIC</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="394" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga15b8c876869f7b69d8e6563d235b9825" prot="public" static="no">
        <name>PSA_ALG_IS_VENDOR_HASH_AND_SIGN</name>
        <param><defname>alg</defname></param>
        <initializer><ref refid="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" kindref="member">PSA_ALG_IS_DSA</ref>(alg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="401" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1gab930304ccac92e0729fb5535c87a9fc2" prot="public" static="no">
        <name>PSA_DH_FAMILY_CUSTOM</name>
        <initializer>((<ref refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" kindref="member">psa_dh_family_t</ref>) 0x7e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Custom Diffie-Hellman group.</para>
<para>For keys of type <ref refid="group__crypto__types_1gaa22f0f2ea89b929f2fadc19890cc5d5c" kindref="member">PSA_KEY_TYPE_DH_PUBLIC_KEY</ref>(<ref refid="group__attributes_1gab930304ccac92e0729fb5535c87a9fc2" kindref="member">PSA_DH_FAMILY_CUSTOM</ref>) or <ref refid="group__crypto__types_1gab4f857c4cd56f5fe65ded421e61bcc8c" kindref="member">PSA_KEY_TYPE_DH_KEY_PAIR</ref>(<ref refid="group__attributes_1gab930304ccac92e0729fb5535c87a9fc2" kindref="member">PSA_DH_FAMILY_CUSTOM</ref>), the group data comes from domain parameters set by <ref refid="group__attributes_1ga8909d3f2ee48121ea0dff198276bdd38" kindref="member">psa_set_key_domain_parameters()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="416" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1ga36f877b443410900579cb552a782a530" prot="public" static="no">
        <name>PSA_PAKE_OPERATION_STAGE_SETUP</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PAKE operation stages. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="419" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1ga4be0d07c44b6c31aec20e8cb5ca8a841" prot="public" static="no">
        <name>PSA_PAKE_OPERATION_STAGE_COLLECT_INPUTS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="420" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1gae4c92a4f1697f0cf279492a4528324bf" prot="public" static="no">
        <name>PSA_PAKE_OPERATION_STAGE_COMPUTATION</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="421" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1ga59089e39970e89191105bd3b3294c3bd" prot="public" static="no">
        <name>PSA_KEY_DOMAIN_PARAMETERS_SIZE</name>
        <param><defname>key_type</defname></param>
        <param><defname>key_bits</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga0e1d8f241228e49c9cadadfb4579ef1a" kindref="member">PSA_KEY_TYPE_IS_RSA</ref>(key_type) ? sizeof(int) :                      \
     <ref refid="group__crypto__types_1ga248ae35c0e2becaebbf479fc1c3a3b0e" kindref="member">PSA_KEY_TYPE_IS_DH</ref>(key_type) ? <ref refid="group__attributes_1gaed9958b794fe397162846865ee894061" kindref="member">PSA_DH_KEY_DOMAIN_PARAMETERS_SIZE</ref>(key_bits) : \
     <ref refid="group__crypto__types_1ga273fdfcf23eb0624f8b63d2321cf95c1" kindref="member">PSA_KEY_TYPE_IS_DSA</ref>(key_type) ? <ref refid="group__attributes_1gab136f0c59eaee9b12752ce125c076188" kindref="member">PSA_DSA_KEY_DOMAIN_PARAMETERS_SIZE</ref>(key_bits) : \
     0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Safe output buffer size for <ref refid="group__attributes_1gae42b480d8ffa161eb2a0a3e391010347" kindref="member">psa_get_key_domain_parameters()</ref>.</para>
<para>This macro returns a compile-time constant if its arguments are compile-time constants.</para>
<para><simplesect kind="warning"><para>This function may call its arguments multiple times or zero times, so you should not pass arguments that contain side effects.</para>
</simplesect>
<simplesect kind="note"><para>This is an experimental extension to the interface. It may change in future versions of the library.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_type</parametername>
</parameternamelist>
<parameterdescription>
<para>A supported key type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the key in bits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the parameters are valid and supported, return a buffer size in bytes that guarantees that <ref refid="group__attributes_1gae42b480d8ffa161eb2a0a3e391010347" kindref="member">psa_get_key_domain_parameters()</ref> will not fail with <ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref>. If the parameters are a valid combination that is not supported by the implementation, this macro shall return either a sensible size or 0. If the parameters are not valid, the return value is unspecified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="548" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1gaed9958b794fe397162846865ee894061" prot="public" static="no">
        <name>PSA_DH_KEY_DOMAIN_PARAMETERS_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(4 + (<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) + 5) * 3 /*without optional parts*/)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="553" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1gab136f0c59eaee9b12752ce125c076188" prot="public" static="no">
        <name>PSA_DSA_KEY_DOMAIN_PARAMETERS_SIZE</name>
        <param><defname>key_bits</defname></param>
        <initializer>(4 + (<ref refid="crypto__sizes_8h_1af2edfe992db358f8eefd4bc82d069592" kindref="member">PSA_BITS_TO_BYTES</ref>(key_bits) + 5) * 2 /*p, g*/ + 34 /*q*/)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="555" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__psa__builtin__keys_1gaa0cdcd889aaaca7d78c378deb1e14353" prot="public" static="no">
        <name>MBEDTLS_PSA_KEY_ID_BUILTIN_MIN</name>
        <initializer>((<ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref>) 0x7fff0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The minimum value for a key identifier that is built into the implementation.</para>
<para>The range of key identifiers from <ref refid="group__psa__builtin__keys_1gaa0cdcd889aaaca7d78c378deb1e14353" kindref="member">MBEDTLS_PSA_KEY_ID_BUILTIN_MIN</ref> to <ref refid="group__psa__builtin__keys_1ga0af04ffbbc3f6bc08562381205b8ef5e" kindref="member">MBEDTLS_PSA_KEY_ID_BUILTIN_MAX</ref> within the range from <ref refid="group__key__lifetimes_1ga1f7e6d90f523bef964d207c1d3236e0b" kindref="member">PSA_KEY_ID_VENDOR_MIN</ref> and <ref refid="group__key__lifetimes_1ga3afb6bb4644c995cf95309a71e7baeb1" kindref="member">PSA_KEY_ID_VENDOR_MAX</ref> and must not intersect with any other set of implementation-chosen key identifiers.</para>
<para>This value is part of the library&apos;s ABI since changing it would invalidate the values of built-in key identifiers in applications. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="674" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__psa__builtin__keys_1ga0af04ffbbc3f6bc08562381205b8ef5e" prot="public" static="no">
        <name>MBEDTLS_PSA_KEY_ID_BUILTIN_MAX</name>
        <initializer>((<ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref>) 0x7fffefff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum value for a key identifier that is built into the implementation.</para>
<para>See <ref refid="group__psa__builtin__keys_1gaa0cdcd889aaaca7d78c378deb1e14353" kindref="member">MBEDTLS_PSA_KEY_ID_BUILTIN_MIN</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="681" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6c1067b4f615bcc29e46155b8982dba5" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_PAKE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0a000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="761" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" prot="public" static="no">
        <name>PSA_ALG_IS_PAKE</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga6c1067b4f615bcc29e46155b8982dba5" kindref="member">PSA_ALG_CATEGORY_PAKE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a password-authenticated key exchange.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a password-authenticated key exchange (PAKE) algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="772" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa2ae65388d11e23b3676570337a69926" prot="public" static="no">
        <name>PSA_ALG_JPAKE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0a000100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Password-authenticated key exchange by juggling (J-PAKE) algorithm.</para>
<para>This is J-PAKE as defined by RFC 8236, instantiated with the following parameters:</para>
<para><itemizedlist>
<listitem><para>The group can be either an elliptic curve or defined over a finite field.</para>
</listitem><listitem><para>Schnorr NIZK proof as defined by RFC 8235 and using the same group as the J-PAKE algorithm.</para>
</listitem><listitem><para>A cryptographic hash function.</para>
</listitem></itemizedlist>
</para>
<para>To select these parameters and set up the cipher suite, call these functions in any order:</para>
<para><programlisting><codeline><highlight class="normal">psa_pake_cs_set_algorithm(cipher_suite,<sp/>PSA_ALG_JPAKE);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_cs_set_primitive(cipher_suite,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_PAKE_PRIMITIVE(type,<sp/>family,<sp/>bits));</highlight></codeline>
<codeline><highlight class="normal">psa_pake_cs_set_hash(cipher_suite,<sp/>hash);</highlight></codeline>
</programlisting></para>
<para>For more information on how to set a specific curve or field, refer to the documentation of the individual <computeroutput>PSA_PAKE_PRIMITIVE_TYPE_XXX</computeroutput> constants.</para>
<para>After initializing a J-PAKE operation, call</para>
<para><programlisting><codeline><highlight class="normal">psa_pake_setup(operation,<sp/>cipher_suite);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_set_user(operation,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_set_peer(operation,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_set_password_key(operation,<sp/>...);</highlight></codeline>
</programlisting></para>
<para>The password is provided as a key. This can be the password text itself, in an agreed character encoding, or some value derived from the password as required by a higher level protocol.</para>
<para>(The implementation converts the key material to a number as described in Section 2.3.8 of <emphasis>SEC 1: Elliptic Curve Cryptography</emphasis> (<ulink url="https://www.secg.org/sec1-v2.pdf">https://www.secg.org/sec1-v2.pdf</ulink>), before reducing it modulo <computeroutput>q</computeroutput>. Here <computeroutput>q</computeroutput> is order of the group defined by the primitive set in the cipher suite. The <computeroutput><ref refid="group__pake_1ga070417b83e6d602e9a6cc6748a14ea91" kindref="member">psa_pake_set_password_key()</ref></computeroutput> function returns an error if the result of the reduction is 0.)</para>
<para>The key exchange flow for J-PAKE is as follows:<orderedlist>
<listitem><para>To get the first round data that needs to be sent to the peer, call <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>g1</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x1</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x1</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>g2</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x2</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x2</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To provide the first round data received from the peer to the operation, call <programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>g3</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x3</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x3</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>g4</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x4</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x4</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To get the second round data that needs to be sent to the peer, call <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>A</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x2*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>ZKP<sp/>proof<sp/>for<sp/>x2*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To provide the second round data received from the peer to the operation, call <programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>B</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x4*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>ZKP<sp/>proof<sp/>for<sp/>x4*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To access the shared secret call <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>Ka=Kb=K</highlight></codeline>
<codeline><highlight class="normal">psa_pake_get_implicit_key()</highlight></codeline>
</programlisting></para>
</listitem></orderedlist>
</para>
<para>For more information consult the documentation of the individual <computeroutput>PSA_PAKE_STEP_XXX</computeroutput> constants.</para>
<para>At this point there is a cryptographic guarantee that only the authenticated party who used the same password is able to compute the key. But there is no guarantee that the peer is the party it claims to be and was able to do so.</para>
<para>That is, the authentication is only implicit (the peer is not authenticated at this point, and no action should be taken that assume that they are - like for example accessing restricted files).</para>
<para>To make the authentication explicit there are various methods, see Section 5 of RFC 8236 for two examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="890" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga7cd915c229c3d4aad5bd3bf7b8ad847b" prot="public" static="no">
        <name>PSA_PAKE_ROLE_NONE</name>
        <initializer>((<ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref>) 0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A value to indicate no role in a PAKE algorithm. This value can be used in a call to <ref refid="group__pake_1gaf61d9d1549d4f3eeaf891dd73354db66" kindref="member">psa_pake_set_role()</ref> for symmetric PAKE algorithms which do not assign roles. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="949" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga7698f576ae0a65a4066902c53cd4e0be" prot="public" static="no">
        <name>PSA_PAKE_ROLE_FIRST</name>
        <initializer>((<ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref>) 0x01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first peer in a balanced PAKE.</para>
<para>Although balanced PAKE algorithms are symmetric, some of them needs an ordering of peers for the transcript calculations. If the algorithm does not need this, both <ref refid="group__pake_1ga7698f576ae0a65a4066902c53cd4e0be" kindref="member">PSA_PAKE_ROLE_FIRST</ref> and <ref refid="group__pake_1ga3584fa3033dbdb6ca7c0c6fe67da7307" kindref="member">PSA_PAKE_ROLE_SECOND</ref> are accepted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="958" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga3584fa3033dbdb6ca7c0c6fe67da7307" prot="public" static="no">
        <name>PSA_PAKE_ROLE_SECOND</name>
        <initializer>((<ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref>) 0x02)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The second peer in a balanced PAKE.</para>
<para>Although balanced PAKE algorithms are symmetric, some of them needs an ordering of peers for the transcript calculations. If the algorithm does not need this, either <ref refid="group__pake_1ga7698f576ae0a65a4066902c53cd4e0be" kindref="member">PSA_PAKE_ROLE_FIRST</ref> or <ref refid="group__pake_1ga3584fa3033dbdb6ca7c0c6fe67da7307" kindref="member">PSA_PAKE_ROLE_SECOND</ref> are accepted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="967" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1gaa7b37df16153c98153a4b2bd9686b40e" prot="public" static="no">
        <name>PSA_PAKE_ROLE_CLIENT</name>
        <initializer>((<ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref>) 0x11)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The client in an augmented PAKE.</para>
<para>Augmented PAKE algorithms need to differentiate between client and server. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="973" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="973" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga9daddaf54cafd4513431cfd5e0148aff" prot="public" static="no">
        <name>PSA_PAKE_ROLE_SERVER</name>
        <initializer>((<ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref>) 0x12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The server in an augmented PAKE.</para>
<para>Augmented PAKE algorithms need to differentiate between client and server. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="979" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga6da014bd15742c5463bf32c7759788d0" prot="public" static="no">
        <name>PSA_PAKE_PRIMITIVE_TYPE_ECC</name>
        <initializer>((<ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref>) 0x01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The PAKE primitive type indicating the use of elliptic curves.</para>
<para>The values of the <computeroutput>family</computeroutput> and <computeroutput>bits</computeroutput> fields of the cipher suite identify a specific elliptic curve, using the same mapping that is used for ECC (<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) keys.</para>
<para>(Here <computeroutput>family</computeroutput> means the value returned by <ref refid="group__pake_1gab1c9d9857644ee44a515b384b9c728db" kindref="member">psa_pake_cs_get_family()</ref> and <computeroutput>bits</computeroutput> means the value returned by <ref refid="group__pake_1ga048be6e239ccd25a3080863053e68576" kindref="member">psa_pake_cs_get_bits()</ref>.)</para>
<para>Input and output during the operation can involve group elements and scalar values:<orderedlist>
<listitem><para>The format for group elements is the same as for public keys on the specific curve would be. For more information, consult the documentation of <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>.</para>
</listitem><listitem><para>The format for scalars is the same as for private keys on the specific curve would be. For more information, consult the documentation of <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref>. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="999" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga96803ecc85799a0d070861b9f86d579f" prot="public" static="no">
        <name>PSA_PAKE_PRIMITIVE_TYPE_DH</name>
        <initializer>((<ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref>) 0x02)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The PAKE primitive type indicating the use of Diffie-Hellman groups.</para>
<para>The values of the <computeroutput>family</computeroutput> and <computeroutput>bits</computeroutput> fields of the cipher suite identify a specific Diffie-Hellman group, using the same mapping that is used for Diffie-Hellman (<ref refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" kindref="member">psa_dh_family_t</ref>) keys.</para>
<para>(Here <computeroutput>family</computeroutput> means the value returned by <ref refid="group__pake_1gab1c9d9857644ee44a515b384b9c728db" kindref="member">psa_pake_cs_get_family()</ref> and <computeroutput>bits</computeroutput> means the value returned by <ref refid="group__pake_1ga048be6e239ccd25a3080863053e68576" kindref="member">psa_pake_cs_get_bits()</ref>.)</para>
<para>Input and output during the operation can involve group elements and scalar values:<orderedlist>
<listitem><para>The format for group elements is the same as for public keys on the specific group would be. For more information, consult the documentation of <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>.</para>
</listitem><listitem><para>The format for scalars is the same as for private keys on the specific group would be. For more information, consult the documentation of <ref refid="group__import__export_1ga668e35be8d2852ad3feeef74ac6f75bf" kindref="member">psa_export_key()</ref>. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1019" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" prot="public" static="no">
        <name>PSA_PAKE_PRIMITIVE</name>
        <param><defname>pake_type</defname></param>
        <param><defname>pake_family</defname></param>
        <param><defname>pake_bits</defname></param>
        <initializer>    ((pake_bits &amp; 0xFFFF) != pake_bits) ? 0 :                 \
    ((<ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref>) (((pake_type) &lt;&lt; 24 |             \
                              (pake_family) &lt;&lt; 16) | (pake_bits)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a PAKE primitive from type, family and bit-size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pake_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the primitive (value of type <ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pake_family</parametername>
</parameternamelist>
<parameterdescription>
<para>The family of the primitive (the type and interpretation of this parameter depends on <computeroutput>pake_type</computeroutput>, for more information consult the documentation of individual <ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref> constants). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pake_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-size of the primitive (Value of type <computeroutput>size_t</computeroutput>. The interpretation of this parameter depends on <computeroutput>pake_family</computeroutput>, for more information consult the documentation of individual <ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref> constants).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The constructed primitive value of type <ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref>. Return 0 if the requested primitive can&apos;t be encoded as <ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1040" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga043357cc339a34134089e9c8be93bfdb" prot="public" static="no">
        <name>PSA_PAKE_STEP_KEY_SHARE</name>
        <initializer>((<ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref>) 0x01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The key share being sent to or received from the peer.</para>
<para>The format for both input and output at this step is the same as for public keys on the group determined by the primitive (<ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref>) would be.</para>
<para>For more information on the format, consult the documentation of <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>.</para>
<para>For information regarding how the group is determined, consult the documentation <ref refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" kindref="member">PSA_PAKE_PRIMITIVE</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1057" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1gaeb14d80e6d8a0716ed04d42dcc94af82" prot="public" static="no">
        <name>PSA_PAKE_STEP_ZK_PUBLIC</name>
        <initializer>((<ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref>) 0x02)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Schnorr NIZKP public key.</para>
<para>This is the ephemeral public key in the Schnorr Non-Interactive Zero-Knowledge Proof (the value denoted by the letter &apos;V&apos; in RFC 8235).</para>
<para>The format for both input and output at this step is the same as for public keys on the group determined by the primitive (<ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref>) would be.</para>
<para>For more information on the format, consult the documentation of <ref refid="group__import__export_1gaf22ae73312217aaede2ea02cdebb6062" kindref="member">psa_export_public_key()</ref>.</para>
<para>For information regarding how the group is determined, consult the documentation <ref refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" kindref="member">PSA_PAKE_PRIMITIVE</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1074" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__pake_1ga8b483c7638f927f1c858cfcfe32569f9" prot="public" static="no">
        <name>PSA_PAKE_STEP_ZK_PROOF</name>
        <initializer>((<ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref>) 0x03)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Schnorr NIZKP proof.</para>
<para>This is the proof in the Schnorr Non-Interactive Zero-Knowledge Proof (the value denoted by the letter &apos;r&apos; in RFC 8235).</para>
<para>Both for input and output, the value at this step is an integer less than the order of the group selected in the cipher suite. The format depends on the group as well:</para>
<para><itemizedlist>
<listitem><para>For Montgomery curves, the encoding is little endian.</para>
</listitem><listitem><para>For everything else the encoding is big endian (see Section 2.3.8 of <emphasis>SEC 1: Elliptic Curve Cryptography</emphasis> at <ulink url="https://www.secg.org/sec1-v2.pdf">https://www.secg.org/sec1-v2.pdf</ulink>).</para>
</listitem></itemizedlist>
</para>
<para>In both cases leading zeroes are allowed as long as the length in bytes does not exceed the byte length of the group order.</para>
<para>For information regarding how the group is determined, consult the documentation <ref refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" kindref="member">PSA_PAKE_PRIMITIVE</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1095" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1a50919659323674b8d803621d8eb51268" prot="public" static="no">
        <name>PSA_PAKE_OUTPUT_SIZE</name>
        <param><defname>alg</defname></param>
        <param><defname>primitive</defname></param>
        <param><defname>output_step</defname></param>
        <initializer>    (alg == <ref refid="group__crypto__types_1gaa2ae65388d11e23b3676570337a69926" kindref="member">PSA_ALG_JPAKE</ref> &amp;&amp;                                           \
     primitive == <ref refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" kindref="member">PSA_PAKE_PRIMITIVE</ref>(<ref refid="group__pake_1ga6da014bd15742c5463bf32c7759788d0" kindref="member">PSA_PAKE_PRIMITIVE_TYPE_ECC</ref>,      \
                                     <ref refid="group__crypto__types_1ga48bb340b5544ba617b0f5b89542665a7" kindref="member">PSA_ECC_FAMILY_SECP_R1</ref>, 256) ?    \
     (                                                                 \
         output_step == <ref refid="group__pake_1ga043357cc339a34134089e9c8be93bfdb" kindref="member">PSA_PAKE_STEP_KEY_SHARE</ref> ? 65 :                   \
         output_step == <ref refid="group__pake_1gaeb14d80e6d8a0716ed04d42dcc94af82" kindref="member">PSA_PAKE_STEP_ZK_PUBLIC</ref> ? 65 :                   \
         32                                                              \
     ) :                                                               \
     0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient output buffer size for <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref>.</para>
<para>If the size of the output buffer is at least this large, it is guaranteed that <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref> will not fail due to an insufficient output buffer size. The actual size of the output might be smaller in any given call.</para>
<para>See also <ref refid="crypto__extra_8h_1a878628cebacd7123211337da96fcd1db" kindref="member">PSA_PAKE_OUTPUT_MAX_SIZE</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A PAKE algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primitive</parametername>
</parameternamelist>
<parameterdescription>
<para>A primitive of type <ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref> that is compatible with algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_step</parametername>
</parameternamelist>
<parameterdescription>
<para>A value of type <ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref> that is valid for the algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient output buffer size for the specified PAKE algorithm, primitive, and output step. If the PAKE algorithm, primitive, or output step is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1819" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1a83988684b5f8206af1121f51e30a71fc" prot="public" static="no">
        <name>PSA_PAKE_INPUT_SIZE</name>
        <param><defname>alg</defname></param>
        <param><defname>primitive</defname></param>
        <param><defname>input_step</defname></param>
        <initializer>    (alg == <ref refid="group__crypto__types_1gaa2ae65388d11e23b3676570337a69926" kindref="member">PSA_ALG_JPAKE</ref> &amp;&amp;                                           \
     primitive == <ref refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" kindref="member">PSA_PAKE_PRIMITIVE</ref>(<ref refid="group__pake_1ga6da014bd15742c5463bf32c7759788d0" kindref="member">PSA_PAKE_PRIMITIVE_TYPE_ECC</ref>,      \
                                     <ref refid="group__crypto__types_1ga48bb340b5544ba617b0f5b89542665a7" kindref="member">PSA_ECC_FAMILY_SECP_R1</ref>, 256) ?    \
     (                                                                 \
         input_step == <ref refid="group__pake_1ga043357cc339a34134089e9c8be93bfdb" kindref="member">PSA_PAKE_STEP_KEY_SHARE</ref> ? 65 :                    \
         input_step == <ref refid="group__pake_1gaeb14d80e6d8a0716ed04d42dcc94af82" kindref="member">PSA_PAKE_STEP_ZK_PUBLIC</ref> ? 65 :                    \
         32                                                              \
     ) :                                                               \
     0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A sufficient input buffer size for <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref>.</para>
<para>The value returned by this macro is guaranteed to be large enough for any valid input to <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref> in an operation with the specified parameters.</para>
<para>See also <ref refid="crypto__extra_8h_1aa9bc89c6c98e76ccbfcecd7d44d6f3b0" kindref="member">PSA_PAKE_INPUT_MAX_SIZE</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A PAKE algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primitive</parametername>
</parameternamelist>
<parameterdescription>
<para>A primitive of type <ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref> that is compatible with algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_step</parametername>
</parameternamelist>
<parameterdescription>
<para>A value of type <ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref> that is valid for the algorithm <computeroutput>alg</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sufficient input buffer size for the specified input, cipher suite and algorithm. If the cipher suite, the input type or PAKE algorithm is not recognized, or the parameters are incompatible, return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1849" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1a878628cebacd7123211337da96fcd1db" prot="public" static="no">
        <name>PSA_PAKE_OUTPUT_MAX_SIZE</name>
        <initializer>65</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output buffer size for <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref> for any of the supported PAKE algorithm and primitive suites and output step.</para>
<para>This macro must expand to a compile-time constant integer.</para>
<para>The value of this macro must be at least as large as the largest value returned by <ref refid="crypto__extra_8h_1a50919659323674b8d803621d8eb51268" kindref="member">PSA_PAKE_OUTPUT_SIZE()</ref></para>
<para>See also <ref refid="crypto__extra_8h_1a50919659323674b8d803621d8eb51268" kindref="member">PSA_PAKE_OUTPUT_SIZE</ref>(<computeroutput>alg</computeroutput>, <computeroutput>primitive</computeroutput>, <computeroutput>output_step</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1870" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1aa9bc89c6c98e76ccbfcecd7d44d6f3b0" prot="public" static="no">
        <name>PSA_PAKE_INPUT_MAX_SIZE</name>
        <initializer>65</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input buffer size for <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref> for any of the supported PAKE algorithm and primitive suites and input step.</para>
<para>This macro must expand to a compile-time constant integer.</para>
<para>The value of this macro must be at least as large as the largest value returned by <ref refid="crypto__extra_8h_1a83988684b5f8206af1121f51e30a71fc" kindref="member">PSA_PAKE_INPUT_SIZE()</ref></para>
<para>See also <ref refid="crypto__extra_8h_1a83988684b5f8206af1121f51e30a71fc" kindref="member">PSA_PAKE_INPUT_SIZE</ref>(<computeroutput>alg</computeroutput>, <computeroutput>primitive</computeroutput>, <computeroutput>output_step</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1882" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1a78e33eb5906aa452ca64159191c2d975" prot="public" static="no">
        <name>PSA_PAKE_CIPHER_SUITE_INIT</name>
        <initializer>{ <ref refid="group__crypto__types_1ga87fb4c311ba365a908ca467ee50f447f" kindref="member">PSA_ALG_NONE</ref>, 0, 0, 0, <ref refid="group__crypto__types_1ga87fb4c311ba365a908ca467ee50f447f" kindref="member">PSA_ALG_NONE</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a suitable initializer for a PAKE cipher suite object of type psa_pake_cipher_suite_t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1887" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1887" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1a0ce235183de6d1a0744b00ced5be7c74" prot="public" static="no">
        <name>PSA_PAKE_OPERATION_INIT</name>
        <initializer>                                  { 0, <ref refid="group__crypto__types_1ga87fb4c311ba365a908ca467ee50f447f" kindref="member">PSA_ALG_NONE</ref>, 0, <ref refid="group__attributes_1ga36f877b443410900579cb552a782a530" kindref="member">PSA_PAKE_OPERATION_STAGE_SETUP</ref>, \
                                  { 0 }, { { 0 } } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a suitable initializer for a PAKE operation object of type psa_pake_operation_t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1892" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1a4c72597374a5f87d8f24f62ce6d981e4" prot="public" static="no">
        <name>PSA_JPAKE_EXPECTED_INPUTS</name>
        <param><defname>round</defname></param>
        <initializer>                                          ((round) == <ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a2016b250a6f20acccab7316532d12aa5" kindref="member">PSA_JPAKE_FINISHED</ref> ? 0 : \
                                          ((round) == <ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a99c1f2ef421eb70bd934e4dea2e9b25a" kindref="member">PSA_JPAKE_FIRST</ref> ? 2 : 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="2015" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="2015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypto__extra_8h_1a99683cf31f74b4508dd9d664cb865502" prot="public" static="no">
        <name>PSA_JPAKE_EXPECTED_OUTPUTS</name>
        <param><defname>round</defname></param>
        <initializer>                                           ((round) == <ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a2016b250a6f20acccab7316532d12aa5" kindref="member">PSA_JPAKE_FINISHED</ref> ? 0 : \
                                           ((round) == <ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a99c1f2ef421eb70bd934e4dea2e9b25a" kindref="member">PSA_JPAKE_FIRST</ref> ? 2 : 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="2017" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="2017" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685" prot="public" static="no" strong="no">
        <type></type>
        <name>psa_crypto_driver_pake_step</name>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a35af539e48c2b542d9224763c38306e6" prot="public">
          <name>PSA_JPAKE_STEP_INVALID</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aba33e1d22a7b5f928b550357e4134aa7" prot="public">
          <name>PSA_JPAKE_X1_STEP_KEY_SHARE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a2db2cddaeb7c962e721eb1d1a3e18029" prot="public">
          <name>PSA_JPAKE_X1_STEP_ZK_PUBLIC</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aefc294aeed675e34b03c45d9041a5f4a" prot="public">
          <name>PSA_JPAKE_X1_STEP_ZK_PROOF</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a05cec8b3f6dfd682f89e0c19aa4fe7ad" prot="public">
          <name>PSA_JPAKE_X2_STEP_KEY_SHARE</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a4a39ca68eb959b70091bddd2e5139a63" prot="public">
          <name>PSA_JPAKE_X2_STEP_ZK_PUBLIC</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a9b1d7ca0998e8f74b6fdb20487cec2b7" prot="public">
          <name>PSA_JPAKE_X2_STEP_ZK_PROOF</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a0b70a32d20d293637204ef0605b3fd0c" prot="public">
          <name>PSA_JPAKE_X2S_STEP_KEY_SHARE</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685ad0202ff2dd8cb4d99abe123ccdf30703" prot="public">
          <name>PSA_JPAKE_X2S_STEP_ZK_PUBLIC</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a43970fbf93449e0615c4bbbe57899f98" prot="public">
          <name>PSA_JPAKE_X2S_STEP_ZK_PROOF</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a37da09adae4df0cef35b4d2ea4663e7c" prot="public">
          <name>PSA_JPAKE_X4S_STEP_KEY_SHARE</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aa0a111705a616793a97e0b78d6e79a95" prot="public">
          <name>PSA_JPAKE_X4S_STEP_ZK_PUBLIC</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a58aef0d9f1364485c54ca05ddee82051" prot="public">
          <name>PSA_JPAKE_X4S_STEP_ZK_PROOF</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1975" column="41" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1975" bodyend="1989"/>
      </memberdef>
      <memberdef kind="enum" id="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543" prot="public" static="no" strong="no">
        <type></type>
        <name>psa_jpake_round</name>
        <enumvalue id="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a99c1f2ef421eb70bd934e4dea2e9b25a" prot="public">
          <name>PSA_JPAKE_FIRST</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543af1767b5eb4d71b70b25b7e97d18731b1" prot="public">
          <name>PSA_JPAKE_SECOND</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a2016b250a6f20acccab7316532d12aa5" prot="public">
          <name>PSA_JPAKE_FINISHED</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1991" column="29" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1991" bodyend="1995"/>
      </memberdef>
      <memberdef kind="enum" id="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9a" prot="public" static="no" strong="no">
        <type></type>
        <name>psa_jpake_io_mode</name>
        <enumvalue id="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9aaf2650415a64b54bbe6e21154c244075d" prot="public">
          <name>PSA_JPAKE_INPUT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9aadce625c0146845490fe1e75952bceb7d" prot="public">
          <name>PSA_JPAKE_OUTPUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1997" column="31" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1997" bodyend="2000"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="crypto__extra_8h_1aa9b95eb371f975f041d50f1a662357fe" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__psa__stats__s" kindref="compound">mbedtls_psa_stats_s</ref></type>
        <definition>typedef struct mbedtls_psa_stats_s mbedtls_psa_stats_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_psa_stats_t</name>
        <briefdescription>
<para>Statistics about resource consumption related to the PSA keystore. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The content of this structure is not part of the stable API and ABI of Mbed TLS and may change arbitrarily from version to version. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="234" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__psa__builtin__keys_1ga1eb805bebc295cc2f7132679fa85d43d" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t psa_drv_slot_number_t</definition>
        <argsstring></argsstring>
        <name>psa_drv_slot_number_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A slot number identifying a key in a driver.</para>
<para>Values of this type are used to identify built-in keys. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="687" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_pake_role_t</definition>
        <argsstring></argsstring>
        <name>psa_pake_role_t</name>
        <briefdescription>
<para>Encoding of the application role of PAKE. </para>
        </briefdescription>
        <detaileddescription>
<para>Encodes the application&apos;s role in the algorithm is being executed. For more information see the documentation of individual <computeroutput>PSA_PAKE_ROLE_XXX</computeroutput> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="912" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1gac16be59e5b1acb89c26709eed001ef35" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_pake_step_t</definition>
        <argsstring></argsstring>
        <name>psa_pake_step_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of input and output indicators for PAKE.</para>
<para>Some PAKE algorithms need to exchange more data than just a single key share. This type is for encoding additional input and output data for such algorithms. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="920" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_pake_primitive_type_t</definition>
        <argsstring></argsstring>
        <name>psa_pake_primitive_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of the type of the PAKE&apos;s primitive.</para>
<para>Values defined by this standard will never be in the range 0x80-0xff. Vendors who define additional types must use an encoding in this range.</para>
<para>For more information see the documentation of individual <computeroutput>PSA_PAKE_PRIMITIVE_TYPE_XXX</computeroutput> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="930" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1gae20cc74390755f28b6f2b893a936d893" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_pake_family_t</definition>
        <argsstring></argsstring>
        <name>psa_pake_family_t</name>
        <briefdescription>
<para>Encoding of the family of the primitive associated with the PAKE. </para>
        </briefdescription>
        <detaileddescription>
<para>For more information see the documentation of individual <computeroutput>PSA_PAKE_PRIMITIVE_TYPE_XXX</computeroutput> constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="937" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t psa_pake_primitive_t</definition>
        <argsstring></argsstring>
        <name>psa_pake_primitive_t</name>
        <briefdescription>
<para>Encoding of the primitive associated with the PAKE. </para>
        </briefdescription>
        <detaileddescription>
<para>For more information see the documentation of the <ref refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" kindref="member">PSA_PAKE_PRIMITIVE</ref> macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="943" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1ga11606af917145770bbdb0ae16adf7704" prot="public" static="no">
        <type>struct <ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_s</ref></type>
        <definition>typedef struct psa_pake_cipher_suite_s psa_pake_cipher_suite_t</definition>
        <argsstring></argsstring>
        <name>psa_pake_cipher_suite_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of the data structure for PAKE cipher suites.</para>
<para>This is an implementation-defined <computeroutput>struct</computeroutput>. Applications should not make any assumptions about the content of this structure. Implementation details can change in future versions without notice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="943" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" prot="public" static="no">
        <type>struct <ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_s</ref></type>
        <definition>typedef struct psa_pake_operation_s psa_pake_operation_t</definition>
        <argsstring></argsstring>
        <name>psa_pake_operation_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of the state data structure for PAKE operations.</para>
<para>Before calling any function on a PAKE operation object, the application must initialize it by any of the following means:<itemizedlist>
<listitem><para>Set the structure to all-bits-zero, for example: <programlisting><codeline><highlight class="normal">psa_pake_operation_t<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal">memset(&amp;operation,<sp/>0,<sp/>sizeof(operation));</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to logical zero values, for example: <programlisting><codeline><highlight class="normal">psa_pake_operation_t<sp/>operation<sp/>=<sp/>{0};</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to the initializer <ref refid="crypto__extra_8h_1a0ce235183de6d1a0744b00ced5be7c74" kindref="member">PSA_PAKE_OPERATION_INIT</ref>, for example: <programlisting><codeline><highlight class="normal">psa_pake_operation_t<sp/>operation<sp/>=<sp/>PSA_PAKE_OPERATION_INIT;</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Assign the result of the function <ref refid="group__pake_1gac099f40e8741def37b72603d1f3f7f65" kindref="member">psa_pake_operation_init()</ref> to the structure, for example: <programlisting><codeline><highlight class="normal">psa_pake_operation_t<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal">operation<sp/>=<sp/>psa_pake_operation_init();</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>This is an implementation-defined <computeroutput>struct</computeroutput>. Applications should not make any assumptions about the content of this structure. Implementation details can change in future versions without notice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1199" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" prot="public" static="no">
        <type>struct <ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_s</ref></type>
        <definition>typedef struct psa_crypto_driver_pake_inputs_s psa_crypto_driver_pake_inputs_t</definition>
        <argsstring></argsstring>
        <name>psa_crypto_driver_pake_inputs_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of input values for PAKE operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1199" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pake_1gadc25d4b129165e849dfc95dc8b5e3085" prot="public" static="no">
        <type>struct <ref refid="structpsa__jpake__computation__stage__s" kindref="compound">psa_jpake_computation_stage_s</ref></type>
        <definition>typedef struct psa_jpake_computation_stage_s psa_jpake_computation_stage_t</definition>
        <argsstring></argsstring>
        <name>psa_jpake_computation_stage_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of computation stage for J-PAKE operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1199" column="13" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto__extra_8h_1a31829e92608413e4552c0ab8b6b8046b" prot="public" static="no">
        <type>enum <ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685" kindref="member">psa_crypto_driver_pake_step</ref></type>
        <definition>typedef enum psa_crypto_driver_pake_step psa_crypto_driver_pake_step_t</definition>
        <argsstring></argsstring>
        <name>psa_crypto_driver_pake_step_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1989" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto__extra_8h_1a8c7c3d5bafd1cb25f5cd8d866e3bda0b" prot="public" static="no">
        <type>enum <ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543" kindref="member">psa_jpake_round</ref></type>
        <definition>typedef enum psa_jpake_round psa_jpake_round_t</definition>
        <argsstring></argsstring>
        <name>psa_jpake_round_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1995" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="crypto__extra_8h_1a8bb19be9f990532703b47582cafc7d0c" prot="public" static="no">
        <type>enum <ref refid="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9a" kindref="member">psa_jpake_io_mode</ref></type>
        <definition>typedef enum psa_jpake_io_mode psa_jpake_io_mode_t</definition>
        <argsstring></argsstring>
        <name>psa_jpake_io_mode_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="2000" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__attributes_1gaffa134b74aa52aa3ed9397fcab4005aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_enrollment_algorithm</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_algorithm_t alg2)</argsstring>
        <name>psa_set_key_enrollment_algorithm</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg2</declname>
        </param>
        <briefdescription>
<para>Declare the enrollment algorithm for a key. </para>
        </briefdescription>
        <detaileddescription>
<para>An operation on a key may indifferently use the algorithm set with <ref refid="group__attributes_1gaeb8341ca52baa0279475ea3fd3bcdc98" kindref="member">psa_set_key_algorithm()</ref> or with this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg2</parametername>
</parameternamelist>
<parameterdescription>
<para>A second algorithm that the key may be used for, in addition to the algorithm set with <ref refid="group__attributes_1gaeb8341ca52baa0279475ea3fd3bcdc98" kindref="member">psa_set_key_algorithm()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Setting an enrollment algorithm is not recommended, because using the same key with different algorithms can allow some attacks based on arithmetic relations between different computations made with the same key, or can escalate harmless side channels into exploitable ones. Use this function only if it is necessary to support a protocol for which it has been verified that the usage of the key with multiple algorithms is safe. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="58" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__attributes_1ga39803b62a97198cf630854db9b53c588" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
        <definition>static psa_algorithm_t psa_get_key_enrollment_algorithm</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>psa_get_key_enrollment_algorithm</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the enrollment algorithm policy from key attributes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The enrollment algorithm stored in the attribute structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="71" column="31" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__attributes_1ga5370ca1564f9f9277635e55031ebfcd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_get_key_slot_number</definition>
        <argsstring>(const psa_key_attributes_t *attributes, psa_key_slot_number_t *slot_number)</argsstring>
        <name>psa_get_key_slot_number</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" kindref="member">psa_key_slot_number_t</ref> *</type>
          <declname>slot_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the slot number where a key is stored.</para>
<para>A slot number is only defined for keys that are stored in a secure element.</para>
<para>This information is only useful if the secure element is not entirely managed through the PSA Cryptography API. It is up to the secure element driver to decide how PSA slot numbers map to any other interface that the secure element may have.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">slot_number</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the slot number containing the key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key is located in a secure element, and <computeroutput>*slot_number</computeroutput> indicates the slot number that contains it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The caller is not permitted to query the slot number. Mbed TLS currently does not return this error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key is not located in a secure element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="101" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="101" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__attributes_1ga818c4c85b0aca43cbcdfe151673e0412" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_set_key_slot_number</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_key_slot_number_t slot_number)</argsstring>
        <name>psa_set_key_slot_number</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" kindref="member">psa_key_slot_number_t</ref></type>
          <declname>slot_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Choose the slot number where a key is stored.</para>
<para>This function declares a slot number in the specified attribute structure.</para>
<para>A slot number is only meaningful for keys that are stored in a secure element. It is up to the secure element driver to decide how PSA slot numbers map to any other interface that the secure element may have.</para>
<para><simplesect kind="note"><para>Setting a slot number in key attributes for a key creation can cause the following errors when creating the key:<itemizedlist>
<listitem><para><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref> if the selected secure element does not support choosing a specific slot number.</para>
</listitem><listitem><para><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref> if the caller is not permitted to choose slot numbers in general or to choose this specific slot.</para>
</listitem><listitem><para><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref> if the chosen slot number is not valid in general or not valid for this specific key.</para>
</listitem><listitem><para><ref refid="group__error_1gaf2b34cc87edc72f3ba90071a08210d20" kindref="member">PSA_ERROR_ALREADY_EXISTS</ref> if there is already a key in the selected slot.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The slot number to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="128" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="128" bodyend="134"/>
        <references refid="crypto__struct_8h_1a18305949e05a5e48b26743bb92f50760" compoundref="crypto__struct_8h" startline="219">MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER</references>
      </memberdef>
      <memberdef kind="function" id="group__attributes_1gac82a49d6204e5c2b9bfb3ef14cf651c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_clear_key_slot_number</definition>
        <argsstring>(psa_key_attributes_t *attributes)</argsstring>
        <name>psa_clear_key_slot_number</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the slot number attribute from a key attribute structure.</para>
<para>This function undoes the action of <ref refid="group__attributes_1ga818c4c85b0aca43cbcdfe151673e0412" kindref="member">psa_set_key_slot_number()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="142" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="142" bodyend="147"/>
        <references refid="crypto__struct_8h_1a18305949e05a5e48b26743bb92f50760" compoundref="crypto__struct_8h" startline="219">MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER</references>
      </memberdef>
      <memberdef kind="function" id="group__attributes_1gae380c2fab913be2ec2a34a4153b471a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t mbedtls_psa_register_se_key</definition>
        <argsstring>(const psa_key_attributes_t *attributes)</argsstring>
        <name>mbedtls_psa_register_se_key</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a key that is already present in a secure element.</para>
<para>The key must be located in a secure element designated by the lifetime field in <computeroutput>attributes</computeroutput>, in the slot set with <ref refid="group__attributes_1ga818c4c85b0aca43cbcdfe151673e0412" kindref="member">psa_set_key_slot_number()</ref> in the attribute structure. This function makes the key available through the key identifier specified in <computeroutput>attributes</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attributes of the existing key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key was successfully registered. Note that depending on the design of the driver, this may or may not guarantee that a key actually exists in the designated slot and is compatible with the specified attributes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gaf2b34cc87edc72f3ba90071a08210d20" kindref="member">PSA_ERROR_ALREADY_EXISTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There is already a key with the identifier specified in <computeroutput>attributes</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The secure element driver for the specified lifetime does not support registering a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier in <computeroutput>attributes</computeroutput> is invalid, namely the identifier is not in the user range, or <computeroutput>attributes</computeroutput> specifies a lifetime which is not located in a secure element, or no slot number is specified in <computeroutput>attributes</computeroutput>, or the specified slot number is not valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The caller is not authorized to register the specified key slot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga897a45eb206a6f6b7be7ffbe36f0d766" kindref="member">PSA_ERROR_INSUFFICIENT_STORAGE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="189" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="189" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="crypto__extra_8h_1a00f4837e0253580c83b4d93ea91aa48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_psa_crypto_free</definition>
        <argsstring>(void)</argsstring>
        <name>mbedtls_psa_crypto_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Library deinitialization. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears all data associated with the PSA layer, including the whole key store.</para>
<para>This is an Mbed TLS extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="204" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="crypto__extra_8h_1aa4d160ae9c02a60317702832a828e4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_psa_get_stats</definition>
        <argsstring>(mbedtls_psa_stats_t *stats)</argsstring>
        <name>mbedtls_psa_get_stats</name>
        <param>
          <type><ref refid="crypto__extra_8h_1aa9b95eb371f975f041d50f1a662357fe" kindref="member">mbedtls_psa_stats_t</ref> *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Get statistics about resource consumption related to the PSA keystore. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When Mbed TLS is built as part of a service, with isolation between the application and the keystore, the service may or may not expose this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="243" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="243" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="crypto__extra_8h_1af4f09c8f08db9e2d881f465c432a300d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t mbedtls_psa_inject_entropy</definition>
        <argsstring>(const uint8_t *seed, size_t seed_size)</argsstring>
        <name>mbedtls_psa_inject_entropy</name>
        <param>
          <type>const uint8_t *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>seed_size</declname>
        </param>
        <briefdescription>
<para>Inject an initial entropy seed for the random generator into secure storage. </para>
        </briefdescription>
        <detaileddescription>
<para>This function injects data to be used as a seed for the random generator used by the PSA Crypto implementation. On devices that lack a trusted entropy source (preferably a hardware random number generator), the Mbed PSA Crypto implementation uses this value to seed its random generator.</para>
<para>On devices without a trusted entropy source, this function must be called exactly once in the lifetime of the device. On devices with a trusted entropy source, calling this function is optional. In all cases, this function may only be called before calling any other function in the PSA Crypto API, including <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>.</para>
<para>When this function returns successfully, it populates a file in persistent storage. Once the file has been created, this function can no longer succeed.</para>
<para>If any error occurs, this function does not change the system state. You can call this function again after correcting the reason for the error if possible.</para>
<para><simplesect kind="warning"><para>This function <bold>can</bold> fail! Callers MUST check the return status.</para>
</simplesect>
<simplesect kind="warning"><para>If you use this function, you should use it as part of a factory provisioning process. The value of the injected seed is critical to the security of the device. It must be <emphasis>secret</emphasis>, <emphasis>unpredictable</emphasis> and (statistically) <emphasis>unique per device</emphasis>. You should be generate it randomly using a cryptographically secure random generator seeded from trusted entropy sources. You should transmit it securely to the device and ensure that its value is not leaked or stored anywhere beyond the needs of transmitting it from the point of generation to the call of this function, and erase all copies of the value once this function returns.</para>
</simplesect>
This is an Mbed TLS extension.</para>
<para><simplesect kind="note"><para>This function is only available on the following platforms:<itemizedlist>
<listitem><para>If the compile-time option MBEDTLS_PSA_INJECT_ENTROPY is enabled. Note that you must provide compatible implementations of mbedtls_nv_seed_read and mbedtls_nv_seed_write.</para>
</listitem><listitem><para>In a client-server integration of PSA Cryptography, on the client side, if the server supports this feature. </para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the seed value to inject. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seed_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>seed</computeroutput> buffer. The size of the seed in bytes must be greater or equal to both <ref refid="entropy_8h_1acc0fdb8c34a1ae04a81b4b21cb383941" kindref="member">MBEDTLS_ENTROPY_BLOCK_SIZE</ref> and the value of <computeroutput>MBEDTLS_ENTROPY_MIN_PLATFORM</computeroutput> in <computeroutput>library/entropy_poll.h</computeroutput> in the Mbed TLS source code. It must be less or equal to <ref refid="entropy_8h_1afff6ba3d7fc6df1fedd007d3a9a4136b" kindref="member">MBEDTLS_ENTROPY_MAX_SEED_SIZE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The seed value was injected successfully. The random generator of the PSA Crypto implementation is now ready for use. You may now call <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> and use the PSA Crypto implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>seed_size</computeroutput> is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was a failure reading or writing from storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has already been initialized. It is no longer possible to call this function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="314" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="314" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__attributes_1ga8909d3f2ee48121ea0dff198276bdd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_set_key_domain_parameters</definition>
        <argsstring>(psa_key_attributes_t *attributes, psa_key_type_t type, const uint8_t *data, size_t data_length)</argsstring>
        <name>psa_set_key_domain_parameters</name>
        <param>
          <type><ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
<para>Set domain parameters for a key. </para>
        </briefdescription>
        <detaileddescription>
<para>Some key types require additional domain parameters in addition to the key type identifier and the key size. Use this function instead of <ref refid="group__attributes_1ga6857ef0ecb3fa844d4536939d9c64025" kindref="member">psa_set_key_type()</ref> when you need to specify domain parameters.</para>
<para>The format for the required domain parameters varies based on the key type.</para>
<para><itemizedlist>
<listitem><para>For RSA keys (<ref refid="group__crypto__types_1ga9ba0878f56c8bcd1995ac017a74f513b" kindref="member">PSA_KEY_TYPE_RSA_PUBLIC_KEY</ref> or <ref refid="group__crypto__types_1ga11745b110166e927e2abeabc7d532051" kindref="member">PSA_KEY_TYPE_RSA_KEY_PAIR</ref>), the domain parameter data consists of the public exponent, represented as a big-endian integer with no leading zeros. This information is used when generating an RSA key pair. When importing a key, the public exponent is read from the imported key data and the exponent recorded in the attribute structure is ignored. As an exception, the public exponent 65537 is represented by an empty byte string.</para>
</listitem><listitem><para>For DSA keys (<ref refid="group__crypto__types_1ga5e7439c2905136366c3a876e62e5ddfc" kindref="member">PSA_KEY_TYPE_DSA_PUBLIC_KEY</ref> or <ref refid="group__crypto__types_1ga7d4a45c147cb0ecb55d01d9c04bfed76" kindref="member">PSA_KEY_TYPE_DSA_KEY_PAIR</ref>), the <computeroutput>Dss-Params</computeroutput> format as defined by RFC 3279 <sect/>2.3.2. <programlisting><codeline><highlight class="normal">Dss-Params<sp/>::=<sp/>SEQUENCE<sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>q<sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>g<sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>For Diffie-Hellman key exchange keys (<ref refid="group__crypto__types_1gaa22f0f2ea89b929f2fadc19890cc5d5c" kindref="member">PSA_KEY_TYPE_DH_PUBLIC_KEY</ref>(<ref refid="group__attributes_1gab930304ccac92e0729fb5535c87a9fc2" kindref="member">PSA_DH_FAMILY_CUSTOM</ref>) or <ref refid="group__crypto__types_1gab4f857c4cd56f5fe65ded421e61bcc8c" kindref="member">PSA_KEY_TYPE_DH_KEY_PAIR</ref>(<ref refid="group__attributes_1gab930304ccac92e0729fb5535c87a9fc2" kindref="member">PSA_DH_FAMILY_CUSTOM</ref>)), the <computeroutput>DomainParameters</computeroutput> format as defined by RFC 3279 <sect/>2.3.3. <programlisting><codeline><highlight class="normal">DomainParameters<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>odd<sp/>prime,<sp/>p=jq<sp/>+1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>g<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>generator,<sp/>g</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>q<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>factor<sp/>of<sp/>p-1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>j<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEGER<sp/>OPTIONAL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>subgroup<sp/>factor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>validationParams<sp/>ValidationParams<sp/>OPTIONAL</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">ValidationParams<sp/>::=<sp/>SEQUENCE<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>seed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BIT<sp/>STRING,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>pgenCounter<sp/><sp/><sp/><sp/><sp/>INTEGER</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This function may allocate memory or other resources. Once you have called this function on an attribute structure, you must call <ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes()</ref> to free these resources.</para>
</simplesect>
<simplesect kind="note"><para>This is an experimental extension to the interface. It may change in future versions of the library.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute structure where the specified domain parameters will be stored. If this function fails, the content of <computeroutput>attributes</computeroutput> is not modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Key type (a <computeroutput>PSA_KEY_TYPE_XXX</computeroutput> value). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the key domain parameters. The content of this buffer is interpreted according to <computeroutput>type</computeroutput> as described above. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="489" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="489" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__attributes_1gae42b480d8ffa161eb2a0a3e391010347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_get_key_domain_parameters</definition>
        <argsstring>(const psa_key_attributes_t *attributes, uint8_t *data, size_t data_size, size_t *data_length)</argsstring>
        <name>psa_get_key_domain_parameters</name>
        <param>
          <type>const <ref refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" kindref="member">psa_key_attributes_t</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
<para>Get domain parameters for a key. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the domain parameters for a key with this function, if any. The format of the domain parameters written to <computeroutput>data</computeroutput> is specified in the documentation for <ref refid="group__attributes_1ga8909d3f2ee48121ea0dff198276bdd38" kindref="member">psa_set_key_domain_parameters()</ref>.</para>
<para><simplesect kind="note"><para>This is an experimental extension to the interface. It may change in future versions of the library.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the key domain parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. The buffer is guaranteed to be large enough if its size in bytes is at least the value given by <ref refid="group__attributes_1ga59089e39970e89191105bd3b3294c3bd" kindref="member">PSA_KEY_DOMAIN_PARAMETERS_SIZE()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the key domain parameters data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="517" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="517" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__psa__tls__helpers_1ga9c83c095adfec7da99401cf81e164f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref></type>
        <definition>psa_ecc_family_t mbedtls_ecc_group_to_psa</definition>
        <argsstring>(mbedtls_ecp_group_id grpid, size_t *bits)</argsstring>
        <name>mbedtls_ecc_group_to_psa</name>
        <param>
          <type><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref></type>
          <declname>grpid</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an ECC curve identifier from the Mbed TLS encoding to PSA.</para>
<para><simplesect kind="note"><para>This function is provided solely for the convenience of Mbed TLS and may be removed at any time without notice.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grpid</parametername>
</parameternamelist>
<parameterdescription>
<para>An Mbed TLS elliptic curve identifier (<computeroutput>MBEDTLS_ECP_DP_xxx</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bits</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the bit size of the curve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding PSA elliptic curve identifier (<computeroutput>PSA_ECC_FAMILY_xxx</computeroutput>). </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on failure (<computeroutput>grpid</computeroutput> is not recognized). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="579" column="18" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="579" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__psa__tls__helpers_1gaca24f78298db9f7d1096e10fe6ee7130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref></type>
        <definition>mbedtls_ecp_group_id mbedtls_ecc_group_of_psa</definition>
        <argsstring>(psa_ecc_family_t curve, size_t bits, int bits_is_sloppy)</argsstring>
        <name>mbedtls_ecc_group_of_psa</name>
        <param>
          <type><ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref></type>
          <declname>curve</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits_is_sloppy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an ECC curve identifier from the PSA encoding to Mbed TLS.</para>
<para><simplesect kind="note"><para>This function is provided solely for the convenience of Mbed TLS and may be removed at any time without notice.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>A PSA elliptic curve identifier (<computeroutput>PSA_ECC_FAMILY_xxx</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-length of a private key on <computeroutput>curve</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits_is_sloppy</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, <computeroutput>bits</computeroutput> may be the bit-length rounded up to the nearest multiple of 8. This allows the caller to infer the exact curve from the length of a key which is supplied as a byte string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding Mbed TLS elliptic curve identifier (<computeroutput>MBEDTLS_ECP_DP_xxx</computeroutput>). </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da677d15aba64be1606e0f63ebff096840" kindref="member">MBEDTLS_ECP_DP_NONE</ref> if <computeroutput>curve</computeroutput> is not recognized. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da677d15aba64be1606e0f63ebff096840" kindref="member">MBEDTLS_ECP_DP_NONE</ref> if <computeroutput>bits</computeroutput> is not correct for <computeroutput>curve</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="601" column="22" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="601" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__psa__builtin__keys_1gadc4d72a56b1aa44a9e244d4843cfe209" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int psa_key_id_is_builtin</definition>
        <argsstring>(psa_key_id_t key_id)</argsstring>
        <name>psa_key_id_is_builtin</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref></type>
          <declname>key_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether a key identifier belongs to the builtin key range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Key identifier to test.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier is a builtin key identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier is not a builtin key identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="699" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="699" bodyend="703"/>
        <references refid="group__psa__builtin__keys_1ga0af04ffbbc3f6bc08562381205b8ef5e" compoundref="crypto__extra_8h" startline="681">MBEDTLS_PSA_KEY_ID_BUILTIN_MAX</references>
        <references refid="group__psa__builtin__keys_1gaa0cdcd889aaaca7d78c378deb1e14353" compoundref="crypto__extra_8h" startline="674">MBEDTLS_PSA_KEY_ID_BUILTIN_MIN</references>
      </memberdef>
      <memberdef kind="function" id="group__psa__builtin__keys_1gaffcd70aaab258bd6a1721b031f9965c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t mbedtls_psa_platform_get_builtin_key</definition>
        <argsstring>(mbedtls_svc_key_id_t key_id, psa_key_lifetime_t *lifetime, psa_drv_slot_number_t *slot_number)</argsstring>
        <name>mbedtls_psa_platform_get_builtin_key</name>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key_id</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref> *</type>
          <declname>lifetime</declname>
        </param>
        <param>
          <type><ref refid="group__psa__builtin__keys_1ga1eb805bebc295cc2f7132679fa85d43d" kindref="member">psa_drv_slot_number_t</ref> *</type>
          <declname>slot_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Platform function to obtain the location and slot number of a built-in key.</para>
<para>An application-specific implementation of this function must be provided if <ref refid="mbedtls__config_8h_1a1bd8bee51fb122e552a4cbc1bbdb0b96" kindref="member">MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS</ref> is enabled. This would typically be provided as part of a platform&apos;s system image.</para>
<para><ref refid="group__key__lifetimes_1gafac336b4a8b7309d90370fc57c71f01e" kindref="member">MBEDTLS_SVC_KEY_ID_GET_KEY_ID</ref>(<computeroutput>key_id</computeroutput>) needs to be in the range from <ref refid="group__psa__builtin__keys_1gaa0cdcd889aaaca7d78c378deb1e14353" kindref="member">MBEDTLS_PSA_KEY_ID_BUILTIN_MIN</ref> to <ref refid="group__psa__builtin__keys_1ga0af04ffbbc3f6bc08562381205b8ef5e" kindref="member">MBEDTLS_PSA_KEY_ID_BUILTIN_MAX</ref>.</para>
<para>In a multi-application configuration (<computeroutput>MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER</computeroutput> is defined), this function should check that <ref refid="group__key__lifetimes_1gae05471b23d45767d768416bfe882eb79" kindref="member">MBEDTLS_SVC_KEY_ID_GET_OWNER_ID</ref>(<computeroutput>key_id</computeroutput>) is allowed to use the given key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The key ID for which to retrieve the location and slot attributes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the lifetime associated with the key corresponding to <computeroutput>key_id</computeroutput>. Lifetime is a combination of which driver contains the key, and with what persistence level the key is intended to be used. If the platform implementation does not contain specific information about the intended key persistence level, the persistence level may be reported as <ref refid="group__key__lifetimes_1gafc5d5c94f98e885ae5a2bb789deb4d91" kindref="member">PSA_KEY_PERSISTENCE_DEFAULT</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">slot_number</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the slot number known to the driver registered at the lifetime location reported through <computeroutput>lifetime</computeroutput> which corresponds to the requested built-in key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The requested key identifier designates a built-in key. In a multi-application configuration, the requested owner is allowed to access it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga18646babb2ae6cbde02ea3828bbd9141" kindref="member">PSA_ERROR_DOES_NOT_EXIST</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The requested key identifier is not a built-in key which is known to this function. If a key exists in the key storage with this identifier, the data from the storage will be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(any other error) Any other error is propagated to the function that requested the key. Common errors include:<itemizedlist>
<listitem><para><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref>: the key exists but the requested owner is not allowed to access it. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="749" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="749" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga843d5c82d72614f4706f77e5e3210328" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref></type>
        <definition>static struct psa_pake_cipher_suite_s psa_pake_cipher_suite_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_pake_cipher_suite_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an initial value for a PAKE cipher suite object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1954" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="2048" bodyend="2052" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1107" declcolumn="32"/>
        <references refid="crypto__extra_8h_1a78e33eb5906aa452ca64159191c2d975" compoundref="crypto__extra_8h" startline="1887">PSA_PAKE_CIPHER_SUITE_INIT</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gaf20c5d67933a6a7e8ef4c517bc80a885" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
        <definition>static psa_algorithm_t psa_pake_cs_get_algorithm</definition>
        <argsstring>(const psa_pake_cipher_suite_t *cipher_suite)</argsstring>
        <name>psa_pake_cs_get_algorithm</name>
        <param>
          <type>const <ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the PAKE algorithm from a PAKE cipher suite.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PAKE algorithm stored in the cipher suite structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1903" column="31" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1903" bodyend="1907" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1115" declcolumn="24"/>
        <references refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" compoundref="crypto__extra_8h" startline="1896">psa_pake_cipher_suite_s::algorithm</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gaa819f7df77522699674de962b268ed7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_pake_cs_set_algorithm</definition>
        <argsstring>(psa_pake_cipher_suite_t *cipher_suite, psa_algorithm_t algorithm)</argsstring>
        <name>psa_pake_cs_set_algorithm</name>
        <param>
          <type><ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>algorithm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare the PAKE algorithm for the cipher suite.</para>
<para>This function overwrites any PAKE algorithm previously set in <computeroutput>cipher_suite</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>The PAKE algorithm to write. (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true.) If this is 0, the PAKE algorithm in <computeroutput>cipher_suite</computeroutput> becomes unspecified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1909" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1909" bodyend="1918" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1130" declcolumn="13"/>
        <references refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" compoundref="crypto__extra_8h" startline="1896">psa_pake_cipher_suite_s::algorithm</references>
        <references refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" compoundref="crypto__extra_8h" startline="772">PSA_ALG_IS_PAKE</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga092067cc7dc9af367706c032480ebdf0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref></type>
        <definition>static psa_pake_primitive_t psa_pake_cs_get_primitive</definition>
        <argsstring>(const psa_pake_cipher_suite_t *cipher_suite)</argsstring>
        <name>psa_pake_cs_get_primitive</name>
        <param>
          <type>const <ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the primitive from a PAKE cipher suite.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The primitive stored in the cipher suite structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1920" column="36" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1920" bodyend="1925" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1139" declcolumn="29"/>
        <references refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" compoundref="crypto__extra_8h" startline="1899">psa_pake_cipher_suite_s::bits</references>
        <references refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" compoundref="crypto__extra_8h" startline="1898">psa_pake_cipher_suite_s::family</references>
        <references refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" compoundref="crypto__extra_8h" startline="1040">PSA_PAKE_PRIMITIVE</references>
        <references refid="structpsa__pake__cipher__suite__s_1ad071789455678b0d082935db9c8de7be" compoundref="crypto__extra_8h" startline="1897">psa_pake_cipher_suite_s::type</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga65563e28c31b26f96f70eddd1252f3d1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_pake_cs_set_primitive</definition>
        <argsstring>(psa_pake_cipher_suite_t *cipher_suite, psa_pake_primitive_t primitive)</argsstring>
        <name>psa_pake_cs_set_primitive</name>
        <param>
          <type><ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <param>
          <type><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref></type>
          <declname>primitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare the primitive for a PAKE cipher suite.</para>
<para>This function overwrites any primitive previously set in <computeroutput>cipher_suite</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primitive</parametername>
</parameternamelist>
<parameterdescription>
<para>The primitive to write. If this is 0, the primitive type in <computeroutput>cipher_suite</computeroutput> becomes unspecified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1927" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1927" bodyend="1934" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1151" declcolumn="13"/>
        <references refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" compoundref="crypto__extra_8h" startline="1899">psa_pake_cipher_suite_s::bits</references>
        <references refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" compoundref="crypto__extra_8h" startline="1898">psa_pake_cipher_suite_s::family</references>
        <references refid="structpsa__pake__cipher__suite__s_1ad071789455678b0d082935db9c8de7be" compoundref="crypto__extra_8h" startline="1897">psa_pake_cipher_suite_s::type</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gab1c9d9857644ee44a515b384b9c728db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__pake_1gae20cc74390755f28b6f2b893a936d893" kindref="member">psa_pake_family_t</ref></type>
        <definition>static psa_pake_family_t psa_pake_cs_get_family</definition>
        <argsstring>(const psa_pake_cipher_suite_t *cipher_suite)</argsstring>
        <name>psa_pake_cs_get_family</name>
        <param>
          <type>const <ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the PAKE family from a PAKE cipher suite.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PAKE family stored in the cipher suite structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1936" column="33" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1936" bodyend="1940" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1160" declcolumn="26"/>
        <references refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" compoundref="crypto__extra_8h" startline="1898">psa_pake_cipher_suite_s::family</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga048be6e239ccd25a3080863053e68576" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t psa_pake_cs_get_bits</definition>
        <argsstring>(const psa_pake_cipher_suite_t *cipher_suite)</argsstring>
        <name>psa_pake_cs_get_bits</name>
        <param>
          <type>const <ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the PAKE primitive bit-size from a PAKE cipher suite.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PAKE primitive bit-size stored in the cipher suite structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1942" column="24" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1942" bodyend="1946" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1169" declcolumn="17"/>
        <references refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" compoundref="crypto__extra_8h" startline="1899">psa_pake_cipher_suite_s::bits</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gaffd027d591290428050be2e98da2c8ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
        <definition>static psa_algorithm_t psa_pake_cs_get_hash</definition>
        <argsstring>(const psa_pake_cipher_suite_t *cipher_suite)</argsstring>
        <name>psa_pake_cs_get_hash</name>
        <param>
          <type>const <ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the hash algorithm from a PAKE cipher suite.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash algorithm stored in the cipher suite structure. The return value is 0 if the PAKE is not parametrised by a hash algorithm or if the hash algorithm is not set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1948" column="31" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1948" bodyend="1952" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1180" declcolumn="24"/>
        <references refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" compoundref="crypto__extra_8h" startline="1900">psa_pake_cipher_suite_s::hash</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga453c3b937a771b927be21d9107fffcdc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void psa_pake_cs_set_hash</definition>
        <argsstring>(psa_pake_cipher_suite_t *cipher_suite, psa_algorithm_t hash)</argsstring>
        <name>psa_pake_cs_set_hash</name>
        <param>
          <type><ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare the hash algorithm for a PAKE cipher suite.</para>
<para>This function overwrites any hash algorithm previously set in <computeroutput>cipher_suite</computeroutput>.</para>
<para>Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite structure to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash involved in the cipher suite. (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>alg</computeroutput>) is true.) If this is 0, the hash algorithm in <computeroutput>cipher_suite</computeroutput> becomes unspecified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1954" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="1954" bodyend="1962" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1199" declcolumn="13"/>
        <references refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" compoundref="crypto__extra_8h" startline="1900">psa_pake_cipher_suite_s::hash</references>
        <references refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" compoundref="crypto__values_8h" startline="788">PSA_ALG_IS_HASH</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gac099f40e8741def37b72603d1f3f7f65" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref></type>
        <definition>static struct psa_pake_operation_s psa_pake_operation_init</definition>
        <argsstring>(void)</argsstring>
        <name>psa_pake_operation_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an initial value for a PAKE operation object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1954" column="20" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="2054" bodyend="2058" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1240" declcolumn="29"/>
        <references refid="crypto__extra_8h_1a0ce235183de6d1a0744b00ced5be7c74" compoundref="crypto__extra_8h" startline="1892">PSA_PAKE_OPERATION_INIT</references>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga8fe36328c35f9f8b399492d369ab5d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_crypto_driver_pake_get_password_len</definition>
        <argsstring>(const psa_crypto_driver_pake_inputs_t *inputs, size_t *password_len)</argsstring>
        <name>psa_crypto_driver_pake_get_password_len</name>
        <param>
          <type>const <ref refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" kindref="member">psa_crypto_driver_pake_inputs_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>password_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the length of the password in bytes from given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">password_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Password length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Password hasn&apos;t been set yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1252" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1252" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga2476026b61583d8e9321256e5bfe5392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_crypto_driver_pake_get_password</definition>
        <argsstring>(const psa_crypto_driver_pake_inputs_t *inputs, uint8_t *buffer, size_t buffer_size, size_t *buffer_length)</argsstring>
        <name>psa_crypto_driver_pake_get_password</name>
        <param>
          <type>const <ref refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" kindref="member">psa_crypto_driver_pake_inputs_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the password from given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Return buffer for password. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the return buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual size of the password in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Password hasn&apos;t been set yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1268" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1268" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gae0a816b989d5ee3a6b3fe8ceac544875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_crypto_driver_pake_get_user_len</definition>
        <argsstring>(const psa_crypto_driver_pake_inputs_t *inputs, size_t *user_len)</argsstring>
        <name>psa_crypto_driver_pake_get_user_len</name>
        <param>
          <type>const <ref refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" kindref="member">psa_crypto_driver_pake_inputs_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>user_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the length of the user id in bytes from given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">user_len</parametername>
</parameternamelist>
<parameterdescription>
<para>User id length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>User id hasn&apos;t been set yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1282" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1282" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gadcf0335780b48a4851780807e115b20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_crypto_driver_pake_get_peer_len</definition>
        <argsstring>(const psa_crypto_driver_pake_inputs_t *inputs, size_t *peer_len)</argsstring>
        <name>psa_crypto_driver_pake_get_peer_len</name>
        <param>
          <type>const <ref refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" kindref="member">psa_crypto_driver_pake_inputs_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>peer_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the length of the peer id in bytes from given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">peer_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer id length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Peer id hasn&apos;t been set yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1296" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1296" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gaeeeb55c935dc95819bae1378de462593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_crypto_driver_pake_get_user</definition>
        <argsstring>(const psa_crypto_driver_pake_inputs_t *inputs, uint8_t *user_id, size_t user_id_size, size_t *user_id_len)</argsstring>
        <name>psa_crypto_driver_pake_get_user</name>
        <param>
          <type>const <ref refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" kindref="member">psa_crypto_driver_pake_inputs_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>user_id_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>user_id_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the user id from given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>user_id</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">user_id_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the user id in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>User id hasn&apos;t been set yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>user_id</computeroutput> is too small. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1314" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1314" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gac21aace2d63ba9766e8266e3bd782d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_crypto_driver_pake_get_peer</definition>
        <argsstring>(const psa_crypto_driver_pake_inputs_t *inputs, uint8_t *peer_id, size_t peer_id_size, size_t *peer_id_length)</argsstring>
        <name>psa_crypto_driver_pake_get_peer</name>
        <param>
          <type>const <ref refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" kindref="member">psa_crypto_driver_pake_inputs_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>peer_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>peer_id_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>peer_id_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the peer id from given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">peer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_id_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <computeroutput>peer_id</computeroutput> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">peer_id_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the peer id in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Peer id hasn&apos;t been set yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>peer_id</computeroutput> is too small. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1332" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1332" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gafb67c744b4ef6615dce729b6c88b9638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_crypto_driver_pake_get_cipher_suite</definition>
        <argsstring>(const psa_crypto_driver_pake_inputs_t *inputs, psa_pake_cipher_suite_t *cipher_suite)</argsstring>
        <name>psa_crypto_driver_pake_get_cipher_suite</name>
        <param>
          <type>const <ref refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" kindref="member">psa_crypto_driver_pake_inputs_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type><ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the cipher suite from given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>Return buffer for role.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Cipher_suite hasn&apos;t been set yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1346" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1346" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga45e914c064160f4fe1d511f9d0506400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_setup</definition>
        <argsstring>(psa_pake_operation_t *operation, const psa_pake_cipher_suite_t *cipher_suite)</argsstring>
        <name>psa_pake_setup</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>const <ref refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" kindref="member">psa_pake_cipher_suite_t</ref> *</type>
          <declname>cipher_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the session information for a password-authenticated key exchange.</para>
<para>The sequence of operations to set up a password-authenticated key exchange is as follows:<orderedlist>
<listitem><para>Allocate an operation object which will be passed to all the functions listed here.</para>
</listitem><listitem><para>Initialize the operation object with one of the methods described in the documentation for <ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref>, e.g. <ref refid="crypto__extra_8h_1a0ce235183de6d1a0744b00ced5be7c74" kindref="member">PSA_PAKE_OPERATION_INIT</ref>.</para>
</listitem><listitem><para>Call <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref> to specify the cipher suite.</para>
</listitem><listitem><para>Call <computeroutput>psa_pake_set_xxx()</computeroutput> functions on the operation to complete the setup. The exact sequence of <computeroutput>psa_pake_set_xxx()</computeroutput> functions that needs to be called depends on the algorithm in use.</para>
</listitem></orderedlist>
</para>
<para>Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para>A typical sequence of calls to perform a password-authenticated key exchange:<orderedlist>
<listitem><para>Call psa_pake_output(operation, <ref refid="group__pake_1ga043357cc339a34134089e9c8be93bfdb" kindref="member">PSA_PAKE_STEP_KEY_SHARE</ref>, ...) to get the key share that needs to be sent to the peer.</para>
</listitem><listitem><para>Call psa_pake_input(operation, <ref refid="group__pake_1ga043357cc339a34134089e9c8be93bfdb" kindref="member">PSA_PAKE_STEP_KEY_SHARE</ref>, ...) to provide the key share that was received from the peer.</para>
</listitem><listitem><para>Depending on the algorithm additional calls to <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref> and <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref> might be necessary.</para>
</listitem><listitem><para>Call <ref refid="group__pake_1gae1e7c28c10bf767f4b6927f820740103" kindref="member">psa_pake_get_implicit_key()</ref> for accessing the shared secret.</para>
</listitem></orderedlist>
</para>
<para>Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para>If an error occurs at any step after a call to <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref>, the operation will need to be reset by a call to <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref>. The application may call <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref> at any time after the operation has been initialized.</para>
<para>After a successful call to <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref>, the application must eventually terminate the operation. The following events terminate an operation:<itemizedlist>
<listitem><para>A call to <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref>.</para>
</listitem><listitem><para>A successful call to <ref refid="group__pake_1gae1e7c28c10bf767f4b6927f820740103" kindref="member">psa_pake_get_implicit_key()</ref>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation object to set up. It must have been initialized but not set up yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cipher_suite</parametername>
</parameternamelist>
<parameterdescription>
<para>The cipher suite to use. (A cipher suite fully characterizes a PAKE algorithm and determines the algorithm as well.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The algorithm in <computeroutput>cipher_suite</computeroutput> is not a PAKE algorithm, or the PAKE primitive in <computeroutput>cipher_suite</computeroutput> is not compatible with the PAKE algorithm, or the hash algorithm in <computeroutput>cipher_suite</computeroutput> is invalid or not compatible with the PAKE algorithm and primitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The algorithm in <computeroutput>cipher_suite</computeroutput> is not a supported PAKE algorithm, or the PAKE primitive in <computeroutput>cipher_suite</computeroutput> is not supported or not compatible with the PAKE algorithm, or the hash algorithm in <computeroutput>cipher_suite</computeroutput> is not supported or not compatible with the PAKE algorithm and primitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1420" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1420" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga070417b83e6d602e9a6cc6748a14ea91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_set_password_key</definition>
        <argsstring>(psa_pake_operation_t *operation, mbedtls_svc_key_id_t password)</argsstring>
        <name>psa_pake_set_password_key</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the password for a password-authenticated key exchange from key ID.</para>
<para>Call this function when the password, or a value derived from the password, is already present in the key store.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation object to set the password for. It must have been set up by <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref> and not yet in use (neither <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref> nor <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref> has been called yet). It must be on operation for which the password hasn&apos;t been set yet (<ref refid="group__pake_1ga070417b83e6d602e9a6cc6748a14ea91" kindref="member">psa_pake_set_password_key()</ref> hasn&apos;t been called yet). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key holding the password or a value derived from the password (eg. by a memory-hard function). It must remain valid until the operation terminates. It must be of type <ref refid="group__crypto__types_1gaad682c8fe975aee537af922f9503d510" kindref="member">PSA_KEY_TYPE_PASSWORD</ref> or <ref refid="group__crypto__types_1gac41a0d5fdafc1c19ae73313613142723" kindref="member">PSA_KEY_TYPE_PASSWORD_HASH</ref>. It has to allow the usage <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadf22718935657c2c3168c228204085f9" kindref="member">PSA_ERROR_INVALID_HANDLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>password</computeroutput> is not a valid key identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4d1b8dd8526177a15a210b7afc1accb1" kindref="member">PSA_ERROR_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key does not have the <ref refid="group__policy_1gaf19022acc5ef23cf12477f632b48a0b2" kindref="member">PSA_KEY_USAGE_DERIVE</ref> flag, or it does not permit the <computeroutput>operation&apos;s</computeroutput> algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key type for <computeroutput>password</computeroutput> is not <ref refid="group__crypto__types_1gaad682c8fe975aee537af922f9503d510" kindref="member">PSA_KEY_TYPE_PASSWORD</ref> or <ref refid="group__crypto__types_1gac41a0d5fdafc1c19ae73313613142723" kindref="member">PSA_KEY_TYPE_PASSWORD_HASH</ref>, or <computeroutput>password</computeroutput> is not compatible with the <computeroutput>operation&apos;s</computeroutput> cipher suite. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key type or key size of <computeroutput>password</computeroutput> is not supported with the <computeroutput>operation&apos;s</computeroutput> cipher suite. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must have been set up.), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1468" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1468" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga64fe9f62b09d39056e169325a9d33aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_set_user</definition>
        <argsstring>(psa_pake_operation_t *operation, const uint8_t *user_id, size_t user_id_len)</argsstring>
        <name>psa_pake_set_user</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>user_id_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the user ID for a password-authenticated key exchange.</para>
<para>Call this function to set the user ID. For PAKE algorithms that associate a user identifier with each side of the session you need to call <ref refid="group__pake_1gabae9a3e54d1c895032a4ee543b494958" kindref="member">psa_pake_set_peer()</ref> as well. For PAKE algorithms that associate a single user identifier with the session, call <ref refid="group__pake_1ga64fe9f62b09d39056e169325a9d33aac" kindref="member">psa_pake_set_user()</ref> only.</para>
<para>Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation object to set the user ID for. It must have been set up by <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref> and not yet in use (neither <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref> nor <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref> has been called yet). It must be on operation for which the user ID hasn&apos;t been set (<ref refid="group__pake_1ga64fe9f62b09d39056e169325a9d33aac" kindref="member">psa_pake_set_user()</ref> hasn&apos;t been called yet). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The user ID to authenticate with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>user_id</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>user_id</computeroutput> is not valid for the <computeroutput>operation&apos;s</computeroutput> algorithm and cipher suite. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The value of <computeroutput>user_id</computeroutput> is not supported by the implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1508" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1508" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gabae9a3e54d1c895032a4ee543b494958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_set_peer</definition>
        <argsstring>(psa_pake_operation_t *operation, const uint8_t *peer_id, size_t peer_id_len)</argsstring>
        <name>psa_pake_set_peer</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>peer_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>peer_id_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the peer ID for a password-authenticated key exchange.</para>
<para>Call this function in addition to <ref refid="group__pake_1ga64fe9f62b09d39056e169325a9d33aac" kindref="member">psa_pake_set_user()</ref> for PAKE algorithms that associate a user identifier with each side of the session. For PAKE algorithms that associate a single user identifier with the session, call <ref refid="group__pake_1ga64fe9f62b09d39056e169325a9d33aac" kindref="member">psa_pake_set_user()</ref> only.</para>
<para>Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation object to set the peer ID for. It must have been set up by <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref> and not yet in use (neither <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref> nor <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref> has been called yet). It must be on operation for which the peer ID hasn&apos;t been set (<ref refid="group__pake_1gabae9a3e54d1c895032a4ee543b494958" kindref="member">psa_pake_set_peer()</ref> hasn&apos;t been called yet). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The peer&apos;s ID to authenticate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>peer_id_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>peer_id</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>peer_id</computeroutput> is not valid for the <computeroutput>operation&apos;s</computeroutput> algorithm and cipher suite. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The algorithm doesn&apos;t associate a second identity with the session. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Calling <ref refid="group__pake_1gabae9a3e54d1c895032a4ee543b494958" kindref="member">psa_pake_set_peer()</ref> is invalid with the <computeroutput>operation&apos;s</computeroutput> algorithm, the operation state is not valid, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1550" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1550" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gaf61d9d1549d4f3eeaf891dd73354db66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_set_role</definition>
        <argsstring>(psa_pake_operation_t *operation, psa_pake_role_t role)</argsstring>
        <name>psa_pake_set_role</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref></type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the application role for a password-authenticated key exchange.</para>
<para>Not all PAKE algorithms need to differentiate the communicating entities. It is optional to call this function for PAKEs that don&apos;t require a role to be specified. For such PAKEs the application role parameter is ignored, or <ref refid="group__pake_1ga7cd915c229c3d4aad5bd3bf7b8ad847b" kindref="member">PSA_PAKE_ROLE_NONE</ref> can be passed as <computeroutput>role</computeroutput>.</para>
<para>Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation object to specify the application&apos;s role for. It must have been set up by <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref> and not yet in use (neither <ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output()</ref> nor <ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input()</ref> has been called yet). It must be on operation for which the application&apos;s role hasn&apos;t been specified (<ref refid="group__pake_1gaf61d9d1549d4f3eeaf891dd73354db66" kindref="member">psa_pake_set_role()</ref> hasn&apos;t been called yet). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role</parametername>
</parameternamelist>
<parameterdescription>
<para>A value of type <ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref> indicating the application&apos;s role in the PAKE the algorithm that is being set up. For more information see the documentation of <computeroutput>PSA_PAKE_ROLE_XXX</computeroutput> constants.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>role</computeroutput> is not a valid PAKE role in the <computeroutput>operation’s</computeroutput> algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>role</computeroutput> for this algorithm is not supported or is not valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid, or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1592" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1592" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga592e6102db23692862d800f569a8f1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_output</definition>
        <argsstring>(psa_pake_operation_t *operation, psa_pake_step_t step, uint8_t *output, size_t output_size, size_t *output_length)</argsstring>
        <name>psa_pake_output</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>output_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get output for a step of a password-authenticated key exchange.</para>
<para>Depending on the algorithm being executed, you might need to call this function several times or you might not need to call this at all.</para>
<para>The exact sequence of calls to perform a password-authenticated key exchange depends on the algorithm in use. Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active PAKE operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>The step of the algorithm for which the output is requested. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the output is to be written in the format appropriate for this <computeroutput>step</computeroutput>. Refer to the documentation of the individual <computeroutput>PSA_PAKE_STEP_XXX</computeroutput> constants for more information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>output</computeroutput> buffer in bytes. This must be at least <ref refid="crypto__extra_8h_1a50919659323674b8d803621d8eb51268" kindref="member">PSA_PAKE_OUTPUT_SIZE</ref>(<computeroutput>alg</computeroutput>, <computeroutput>primitive</computeroutput>, <computeroutput>output_step</computeroutput>) where <computeroutput>alg</computeroutput> and <computeroutput>primitive</computeroutput> are the PAKE algorithm and primitive in the operation&apos;s cipher suite, and <computeroutput>step</computeroutput> is the output step.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_length</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes of the returned output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga695025f4ec11249aee7ea3d0f65e01c8" kindref="member">PSA_ERROR_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>output</computeroutput> buffer is too small. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>step</computeroutput> is not compatible with the operation&apos;s algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>step</computeroutput> is not supported with the operation&apos;s algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4deb59fec02297ec5d8b42178323f675" kindref="member">PSA_ERROR_INSUFFICIENT_ENTROPY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active, and fully set up, and this call must conform to the algorithm&apos;s requirements for ordering of input and output steps), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1650" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1650" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_input</definition>
        <argsstring>(psa_pake_operation_t *operation, psa_pake_step_t step, const uint8_t *input, size_t input_length)</argsstring>
        <name>psa_pake_input</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide input for a step of a password-authenticated key exchange.</para>
<para>Depending on the algorithm being executed, you might need to call this function several times or you might not need to call this at all.</para>
<para>The exact sequence of calls to perform a password-authenticated key exchange depends on the algorithm in use. Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para>If this function returns an error status, the operation enters an error state and must be aborted by calling <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active PAKE operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>The step for which the input is provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the input in the format appropriate for this <computeroutput>step</computeroutput>. Refer to the documentation of the individual <computeroutput>PSA_PAKE_STEP_XXX</computeroutput> constants for more information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>input</computeroutput> buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga35927f755d232c4766de600f2c49e9f2" kindref="member">PSA_ERROR_INVALID_SIGNATURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The verification fails for a <ref refid="group__pake_1ga8b483c7638f927f1c858cfcfe32569f9" kindref="member">PSA_PAKE_STEP_ZK_PROOF</ref> input step. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>input_length</computeroutput> is not compatible with the <computeroutput>operation’s</computeroutput> algorithm, or the <computeroutput>input</computeroutput> is not valid for the <computeroutput>operation&apos;s</computeroutput> algorithm, cipher suite or <computeroutput>step</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>step</computeroutput> p is not supported with the <computeroutput>operation&apos;s</computeroutput> algorithm, or the <computeroutput>input</computeroutput> is not supported for the <computeroutput>operation&apos;s</computeroutput> algorithm, cipher suite or <computeroutput>step</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation state is not valid (it must be active, and fully set up, and this call must conform to the algorithm&apos;s requirements for ordering of input and output steps), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1705" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1705" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1gae1e7c28c10bf767f4b6927f820740103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_get_implicit_key</definition>
        <argsstring>(psa_pake_operation_t *operation, psa_key_derivation_operation_t *output)</argsstring>
        <name>psa_pake_get_implicit_key</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="group__key__derivation_1ga5f099b63799a0959c3d46718c86c2609" kindref="member">psa_key_derivation_operation_t</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get implicitly confirmed shared secret from a PAKE.</para>
<para>At this point there is a cryptographic guarantee that only the authenticated party who used the same password is able to compute the key. But there is no guarantee that the peer is the party it claims to be and was able to do so.</para>
<para>That is, the authentication is only implicit. Since the peer is not authenticated yet, no action should be taken yet that assumes that the peer is who it claims to be. For example, do not access restricted files on the peer&apos;s behalf until an explicit authentication has succeeded.</para>
<para>This function can be called after the key exchange phase of the operation has completed. It imports the shared secret output of the PAKE into the provided derivation operation. The input step <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> is used when placing the shared key material in the key derivation operation.</para>
<para>The exact sequence of calls to perform a password-authenticated key exchange depends on the algorithm in use. Refer to the documentation of individual PAKE algorithm types (<computeroutput>PSA_ALG_XXX</computeroutput> values of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(<computeroutput>alg</computeroutput>) is true) for more information.</para>
<para>When this function returns successfully, <computeroutput>operation</computeroutput> becomes inactive. If this function returns an error status, both <computeroutput>operation</computeroutput> and <computeroutput>key_derivation</computeroutput> operations enter an error state and must be aborted by calling <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref> and <ref refid="group__key__derivation_1ga90fdd2716124d0bd258826184824675f" kindref="member">psa_key_derivation_abort()</ref> respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Active PAKE operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>A key derivation operation that is ready for an input step of type <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga798df25a505ebf931f7bec1f80f1f85f" kindref="member">PSA_ERROR_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> is not compatible with the algorithm in the <computeroutput>output</computeroutput> key derivation operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga1dcc6d130633ed5db8942257581b55dd" kindref="member">PSA_ERROR_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Input from a PAKE is not supported by the algorithm in the <computeroutput>output</computeroutput> key derivation operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga91b2ad8a867517a2651f1b076c5216e5" kindref="member">PSA_ERROR_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gadd169a1af2707862b95fb9df91dfc37d" kindref="member">PSA_ERROR_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga9febb81a44bdeb4c6c42bf4f697b13bf" kindref="member">PSA_ERROR_DATA_CORRUPT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1gacebfbd25a7c2a727694fb57182a66533" kindref="member">PSA_ERROR_DATA_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The PAKE operation state is not valid (it must be active, but beyond that validity is specific to the algorithm), or the library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>, or the state of <computeroutput>output</computeroutput> is not valid for the <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> step. This can happen if the step is out of order or the application has done this step already and it may not be repeated. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1768" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1768" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__pake_1ga20bed96cc254d2e1829d666edc74376a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref></type>
        <definition>psa_status_t psa_pake_abort</definition>
        <argsstring>(psa_pake_operation_t *operation)</argsstring>
        <name>psa_pake_abort</name>
        <param>
          <type><ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abort a PAKE operation.</para>
<para>Aborting an operation frees all associated resources except for the <computeroutput>operation</computeroutput> structure itself. Once aborted, the operation object can be reused for another operation by calling <ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup()</ref> again.</para>
<para>This function may be called at any time after the operation object has been initialized as described in <ref refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" kindref="member">psa_pake_operation_t</ref>.</para>
<para>In particular, calling <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref> after the operation has been terminated by a call to <ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort()</ref> or <ref refid="group__pake_1gae1e7c28c10bf767f4b6927f820740103" kindref="member">psa_pake_get_implicit_key()</ref> is safe and has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation to abort.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga5cdb6948371d49e916106249020ea3f7" kindref="member">PSA_ERROR_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga116f4d4c6a9d9db3397991a8472d8950" kindref="member">PSA_ERROR_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error_1ga933d40fa2a591004f2e93aa91e11db84" kindref="member">PSA_ERROR_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="1795" column="14" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" declline="1795" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PSA cryptography module: Mbed TLS vendor extensions. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This file may not be included directly. Applications must include <ref refid="crypto_8h" kindref="compound">psa/crypto.h</ref>.</para>
</simplesect>
This file is reserved for vendor-specific definitions. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PSA_CRYPTO_EXTRA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_CRYPTO_EXTRA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto__types_8h" kindref="compound">crypto_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto__compat_8h" kindref="compound">crypto_compat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>UID<sp/>for<sp/>secure<sp/>storage<sp/>seed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="crypto__extra_8h_1aa406d8c915ddb507f10f6f14fcf89da8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_CRYPTO_ITS_RANDOM_SEED_UID<sp/>0xFFFFFF52</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>See<sp/>mbedtls_config.h<sp/>for<sp/>definition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PSA_KEY_SLOT_COUNT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="crypto__extra_8h_1ad71d479d3f79388ebcef74fa0e070b5b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PSA_KEY_SLOT_COUNT<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="group__attributes_1gaffa134b74aa52aa3ed9397fcab4005aa" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__attributes_1gaffa134b74aa52aa3ed9397fcab4005aa" kindref="member">psa_set_key_enrollment_algorithm</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/>alg2)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(policy).MBEDTLS_PRIVATE(alg2)<sp/>=<sp/>alg2;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group__attributes_1ga39803b62a97198cf630854db9b53c588" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="group__attributes_1ga39803b62a97198cf630854db9b53c588" kindref="member">psa_get_key_enrollment_algorithm</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(policy).MBEDTLS_PRIVATE(alg2);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_SE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__attributes_1ga5370ca1564f9f9277635e55031ebfcd3" kindref="member">psa_get_key_slot_number</ref>(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" kindref="member">psa_key_slot_number_t</ref><sp/>*slot_number);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group__attributes_1ga818c4c85b0aca43cbcdfe151673e0412" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__attributes_1ga818c4c85b0aca43cbcdfe151673e0412" kindref="member">psa_set_key_slot_number</ref>(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" kindref="member">psa_key_slot_number_t</ref><sp/>slot_number)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(flags)<sp/>|=<sp/><ref refid="crypto__struct_8h_1a18305949e05a5e48b26743bb92f50760" kindref="member">MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(slot_number)<sp/>=<sp/>slot_number;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group__attributes_1gac82a49d6204e5c2b9bfb3ef14cf651c4" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__attributes_1gac82a49d6204e5c2b9bfb3ef14cf651c4" kindref="member">psa_clear_key_slot_number</ref>(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>attributes-&gt;MBEDTLS_PRIVATE(core).MBEDTLS_PRIVATE(flags)<sp/>&amp;=</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="crypto__struct_8h_1a18305949e05a5e48b26743bb92f50760" kindref="member">MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__attributes_1gae380c2fab913be2ec2a34a4153b471a2" kindref="member">mbedtls_psa_register_se_key</ref>(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_SE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__extra_8h_1a00f4837e0253580c83b4d93ea91aa48b" kindref="member">mbedtls_psa_crypto_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="structmbedtls__psa__stats__s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__psa__stats__s" kindref="compound">mbedtls_psa_stats_s</ref><sp/>{</highlight></codeline>
<codeline lineno="214" refid="structmbedtls__psa__stats__s_1abc02e028f09ee3379af349b6e6e129c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(volatile_slots);</highlight></codeline>
<codeline lineno="217" refid="structmbedtls__psa__stats__s_1a2a89b6fd1b8ac1ddd137d75fd405c429" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(persistent_slots);</highlight></codeline>
<codeline lineno="220" refid="structmbedtls__psa__stats__s_1ae867b00b3d833eda6d836e685e1130ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(external_slots);</highlight></codeline>
<codeline lineno="223" refid="structmbedtls__psa__stats__s_1adca04354ac180cf5259d77a3715d985f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(half_filled_slots);</highlight></codeline>
<codeline lineno="225" refid="structmbedtls__psa__stats__s_1ae92e504575acfa9c66f8a3a5d4c3092a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cache_slots);</highlight></codeline>
<codeline lineno="227" refid="structmbedtls__psa__stats__s_1a063df77fccd29f808a34739884d18152" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(empty_slots);</highlight></codeline>
<codeline lineno="229" refid="structmbedtls__psa__stats__s_1a193f9136c49429585a5eb20a98bbc464" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(locked_slots);</highlight></codeline>
<codeline lineno="231" refid="structmbedtls__psa__stats__s_1ab6d0f52edbb267921880176d65fd9b28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(max_open_internal_key_id);</highlight></codeline>
<codeline lineno="233" refid="structmbedtls__psa__stats__s_1af8980761432da21bffde9de3b9ecbf8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(max_open_external_key_id);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}<sp/><ref refid="crypto__extra_8h_1aa9b95eb371f975f041d50f1a662357fe" kindref="member">mbedtls_psa_stats_t</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="crypto__extra_8h_1aa4d160ae9c02a60317702832a828e4b7" kindref="member">mbedtls_psa_get_stats</ref>(<ref refid="structmbedtls__psa__stats__s" kindref="compound">mbedtls_psa_stats_t</ref><sp/>*stats);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="crypto__extra_8h_1af4f09c8f08db9e2d881f465c432a300d" kindref="member">mbedtls_psa_inject_entropy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*seed,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>seed_size);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="group__crypto__types_1ga5e7439c2905136366c3a876e62e5ddfc" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_KEY_TYPE_DSA_PUBLIC_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_key_type_t)<sp/>0x4002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="group__crypto__types_1ga7d4a45c147cb0ecb55d01d9c04bfed76" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_KEY_TYPE_DSA_KEY_PAIR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_key_type_t)<sp/>0x7002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="group__crypto__types_1ga273fdfcf23eb0624f8b63d2321cf95c1" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_KEY_TYPE_IS_DSA(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR(type)<sp/>==<sp/>PSA_KEY_TYPE_DSA_PUBLIC_KEY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="group__crypto__types_1ga863284106894476e3a8524805410b55b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_DSA_BASE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_algorithm_t)<sp/>0x06000400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="group__crypto__types_1ga9a68efdddff5ae95f104a1416b12742e" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ALG_DSA(hash_alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_DSA_BASE<sp/>|<sp/>((hash_alg)<sp/>&amp;<sp/>PSA_ALG_HASH_MASK))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="group__crypto__types_1gad3800dafc62d6a17bcae4bce98402e68" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_DETERMINISTIC_DSA_BASE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_algorithm_t)<sp/>0x06000500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="group__crypto__types_1ga1d2a96f788cce4f8fc156d13342e70de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_DSA_DETERMINISTIC_FLAG<sp/>PSA_ALG_ECDSA_DETERMINISTIC_FLAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="group__crypto__types_1gab8eb98fb6d2e094e47f3b44dfe128f94" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ALG_DETERMINISTIC_DSA(hash_alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_DETERMINISTIC_DSA_BASE<sp/>|<sp/>((hash_alg)<sp/>&amp;<sp/>PSA_ALG_HASH_MASK))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_IS_DSA(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((alg)<sp/>&amp;<sp/>~PSA_ALG_HASH_MASK<sp/>&amp;<sp/>~PSA_ALG_DSA_DETERMINISTIC_FLAG)<sp/>==<sp/><sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_ALG_DSA_BASE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="group__crypto__types_1gae01ae792228c16eac05102f8e900efd1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_DSA_IS_DETERMINISTIC(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((alg)<sp/>&amp;<sp/>PSA_ALG_DSA_DETERMINISTIC_FLAG)<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="group__crypto__types_1ga11f7d6fe7a4441143ed398420b7d1980" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_IS_DETERMINISTIC_DSA(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_IS_DSA(alg)<sp/>&amp;&amp;<sp/>PSA_ALG_DSA_IS_DETERMINISTIC(alg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="group__crypto__types_1ga474c0582c4726d0c0274e470f4199cf9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_IS_RANDOMIZED_DSA(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_ALG_IS_DSA(alg)<sp/>&amp;&amp;<sp/>!PSA_ALG_DSA_IS_DETERMINISTIC(alg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>expand<sp/>the<sp/>sample<sp/>definition<sp/>of<sp/>this<sp/>macro<sp/>from</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>the<sp/>API<sp/>definition.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PSA_ALG_IS_VENDOR_HASH_AND_SIGN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="group__crypto__types_1ga15b8c876869f7b69d8e6563d235b9825" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_ALG_IS_VENDOR_HASH_AND_SIGN(alg)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_ALG_IS_DSA(alg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="group__attributes_1gab930304ccac92e0729fb5535c87a9fc2" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_DH_FAMILY_CUSTOM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_dh_family_t)<sp/>0x7e)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="group__attributes_1ga36f877b443410900579cb552a782a530" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_OPERATION_STAGE_SETUP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="group__attributes_1ga4be0d07c44b6c31aec20e8cb5ca8a841" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_PAKE_OPERATION_STAGE_COLLECT_INPUTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="group__attributes_1gae4c92a4f1697f0cf279492a4528324bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_PAKE_OPERATION_STAGE_COMPUTATION<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__attributes_1ga8909d3f2ee48121ea0dff198276bdd38" kindref="member">psa_set_key_domain_parameters</ref>(<ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref><sp/>type,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_length);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__attributes_1gae42b480d8ffa161eb2a0a3e391010347" kindref="member">psa_get_key_domain_parameters</ref>(</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/>*attributes,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*data_length);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="group__attributes_1ga59089e39970e89191105bd3b3294c3bd" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_KEY_DOMAIN_PARAMETERS_SIZE(key_type,<sp/>key_bits)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_IS_RSA(key_type)<sp/>?<sp/>sizeof(int)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_DH(key_type)<sp/>?<sp/>PSA_DH_KEY_DOMAIN_PARAMETERS_SIZE(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PSA_KEY_TYPE_IS_DSA(key_type)<sp/>?<sp/>PSA_DSA_KEY_DOMAIN_PARAMETERS_SIZE(key_bits)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="group__attributes_1gaed9958b794fe397162846865ee894061" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_DH_KEY_DOMAIN_PARAMETERS_SIZE(key_bits)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(4<sp/>+<sp/>(PSA_BITS_TO_BYTES(key_bits)<sp/>+<sp/>5)<sp/>*<sp/>3<sp/></highlight><highlight class="comment">/*without<sp/>optional<sp/>parts*/</highlight><highlight class="preprocessor">)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="group__attributes_1gab136f0c59eaee9b12752ce125c076188" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_DSA_KEY_DOMAIN_PARAMETERS_SIZE(key_bits)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(4<sp/>+<sp/>(PSA_BITS_TO_BYTES(key_bits)<sp/>+<sp/>5)<sp/>*<sp/>2<sp/></highlight><highlight class="comment">/*p,<sp/>g*/</highlight><highlight class="preprocessor"><sp/>+<sp/>34<sp/></highlight><highlight class="comment">/*q*/</highlight><highlight class="preprocessor">)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_KEY_TYPE_ECC_PUBLIC_KEY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ecp_8h" kindref="compound">mbedtls/ecp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref><sp/><ref refid="group__psa__tls__helpers_1ga9c83c095adfec7da99401cf81e164f99" kindref="member">mbedtls_ecc_group_to_psa</ref>(<ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>grpid,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bits);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/><ref refid="group__psa__tls__helpers_1gaca24f78298db9f7d1096e10fe6ee7130" kindref="member">mbedtls_ecc_group_of_psa</ref>(<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref><sp/>curve,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bits,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_is_sloppy);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PSA_WANT_KEY_TYPE_ECC_PUBLIC_KEY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/>mbedtls_psa_external_get_random(</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>mbedtls_psa_external_random_context_t<sp/>*context,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_length);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="group__psa__builtin__keys_1gaa0cdcd889aaaca7d78c378deb1e14353" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_PSA_KEY_ID_BUILTIN_MIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_key_id_t)<sp/>0x7fff0000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="681" refid="group__psa__builtin__keys_1ga0af04ffbbc3f6bc08562381205b8ef5e" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_PSA_KEY_ID_BUILTIN_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_key_id_t)<sp/>0x7fffefff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="group__psa__builtin__keys_1ga1eb805bebc295cc2f7132679fa85d43d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="group__psa__builtin__keys_1ga1eb805bebc295cc2f7132679fa85d43d" kindref="member">psa_drv_slot_number_t</ref>;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="699" refid="group__psa__builtin__keys_1gadc4d72a56b1aa44a9e244d4843cfe209" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__psa__builtin__keys_1gadc4d72a56b1aa44a9e244d4843cfe209" kindref="member">psa_key_id_is_builtin</ref>(<ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref><sp/>key_id)</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(key_id<sp/>&gt;=<sp/><ref refid="group__psa__builtin__keys_1gaa0cdcd889aaaca7d78c378deb1e14353" kindref="member">MBEDTLS_PSA_KEY_ID_BUILTIN_MIN</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(key_id<sp/>&lt;=<sp/><ref refid="group__psa__builtin__keys_1ga0af04ffbbc3f6bc08562381205b8ef5e" kindref="member">MBEDTLS_PSA_KEY_ID_BUILTIN_MAX</ref>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__psa__builtin__keys_1gaffcd70aaab258bd6a1721b031f9965c5" kindref="member">mbedtls_psa_platform_get_builtin_key</ref>(</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>key_id,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref><sp/>*lifetime,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__psa__builtin__keys_1ga1eb805bebc295cc2f7132679fa85d43d" kindref="member">psa_drv_slot_number_t</ref><sp/>*slot_number);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="group__crypto__types_1ga6c1067b4f615bcc29e46155b8982dba5" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ALG_CATEGORY_PAKE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_algorithm_t)<sp/>0x0a000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ALG_IS_PAKE(alg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((alg)<sp/>&amp;<sp/>PSA_ALG_CATEGORY_MASK)<sp/>==<sp/>PSA_ALG_CATEGORY_PAKE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="group__crypto__types_1gaa2ae65388d11e23b3676570337a69926" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_ALG_JPAKE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_algorithm_t)<sp/>0x0a000100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="912" refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref>;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="930" refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref>;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="group__pake_1gae20cc74390755f28b6f2b893a936d893" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__pake_1gae20cc74390755f28b6f2b893a936d893" kindref="member">psa_pake_family_t</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="943" refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="group__pake_1ga7cd915c229c3d4aad5bd3bf7b8ad847b" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_ROLE_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_role_t)<sp/>0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="958" refid="group__pake_1ga7698f576ae0a65a4066902c53cd4e0be" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_ROLE_FIRST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_role_t)<sp/>0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="group__pake_1ga3584fa3033dbdb6ca7c0c6fe67da7307" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_ROLE_SECOND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_role_t)<sp/>0x02)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="group__pake_1gaa7b37df16153c98153a4b2bd9686b40e" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_ROLE_CLIENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_role_t)<sp/>0x11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="979" refid="group__pake_1ga9daddaf54cafd4513431cfd5e0148aff" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_ROLE_SERVER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_role_t)<sp/>0x12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="999" refid="group__pake_1ga6da014bd15742c5463bf32c7759788d0" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_PRIMITIVE_TYPE_ECC<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_primitive_type_t)<sp/>0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019" refid="group__pake_1ga96803ecc85799a0d070861b9f86d579f" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_PRIMITIVE_TYPE_DH<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_primitive_type_t)<sp/>0x02)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040" refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_PRIMITIVE(pake_type,<sp/>pake_family,<sp/>pake_bits)<sp/>\</highlight></codeline>
<codeline lineno="1041"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((pake_bits<sp/>&amp;<sp/>0xFFFF)<sp/>!=<sp/>pake_bits)<sp/>?<sp/>0<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((psa_pake_primitive_t)<sp/>(((pake_type)<sp/>&lt;&lt;<sp/>24<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1043"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pake_family)<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(pake_bits)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057" refid="group__pake_1ga043357cc339a34134089e9c8be93bfdb" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_STEP_KEY_SHARE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_step_t)<sp/>0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074" refid="group__pake_1gaeb14d80e6d8a0716ed04d42dcc94af82" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_STEP_ZK_PUBLIC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_step_t)<sp/>0x02)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095" refid="group__pake_1ga8b483c7638f927f1c858cfcfe32569f9" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_STEP_ZK_PROOF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psa_pake_step_t)<sp/>0x03)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103" refid="group__pake_1ga11606af917145770bbdb0ae16adf7704" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_s</ref><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref>;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/><ref refid="group__pake_1ga843d5c82d72614f4706f77e5e3210328" kindref="member">psa_pake_cipher_suite_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="group__pake_1gaf20c5d67933a6a7e8ef4c517bc80a885" kindref="member">psa_pake_cs_get_algorithm</ref>(</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pake_1gaa819f7df77522699674de962b268ed7e" kindref="member">psa_pake_cs_set_algorithm</ref>(<ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" kindref="member">algorithm</ref>);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref><sp/><ref refid="group__pake_1ga092067cc7dc9af367706c032480ebdf0" kindref="member">psa_pake_cs_get_primitive</ref>(</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pake_1ga65563e28c31b26f96f70eddd1252f3d1" kindref="member">psa_pake_cs_set_primitive</ref>(<ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref><sp/>primitive);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__pake_1gae20cc74390755f28b6f2b893a936d893" kindref="member">psa_pake_family_t</ref><sp/><ref refid="group__pake_1gab1c9d9857644ee44a515b384b9c728db" kindref="member">psa_pake_cs_get_family</ref>(</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group__pake_1ga048be6e239ccd25a3080863053e68576" kindref="member">psa_pake_cs_get_bits</ref>(</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="group__pake_1gaffd027d591290428050be2e98da2c8ad" kindref="member">psa_pake_cs_get_hash</ref>(</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pake_1ga453c3b937a771b927be21d9107fffcdc" kindref="member">psa_pake_cs_set_hash</ref>(<ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite,</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230" refid="group__pake_1ga2b408ef3a7b22400e4590a2c98a503df" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_s</ref><sp/><ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref>;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233" refid="group__pake_1ga9d068eac66ccd7bca819fc27d078ea90" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_s</ref><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref>;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236" refid="group__pake_1gadc25d4b129165e849dfc95dc8b5e3085" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__jpake__computation__stage__s" kindref="compound">psa_jpake_computation_stage_s</ref><sp/><ref refid="structpsa__jpake__computation__stage__s" kindref="compound">psa_jpake_computation_stage_t</ref>;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/><ref refid="group__pake_1gac099f40e8741def37b72603d1f3f7f65" kindref="member">psa_pake_operation_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga8fe36328c35f9f8b399492d369ab5d1d" kindref="member">psa_crypto_driver_pake_get_password_len</ref>(</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/>*inputs,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*password_len);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga2476026b61583d8e9321256e5bfe5392" kindref="member">psa_crypto_driver_pake_get_password</ref>(</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/>*inputs,</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*buffer_length);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gae0a816b989d5ee3a6b3fe8ceac544875" kindref="member">psa_crypto_driver_pake_get_user_len</ref>(</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/>*inputs,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*user_len);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gadcf0335780b48a4851780807e115b20e" kindref="member">psa_crypto_driver_pake_get_peer_len</ref>(</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/>*inputs,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*peer_len);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gaeeeb55c935dc95819bae1378de462593" kindref="member">psa_crypto_driver_pake_get_user</ref>(</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/>*inputs,</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*user_id,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>user_id_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*user_id_len);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gac21aace2d63ba9766e8266e3bd782d12" kindref="member">psa_crypto_driver_pake_get_peer</ref>(</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/>*inputs,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*peer_id,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>peer_id_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*peer_id_length);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gafb67c744b4ef6615dce729b6c88b9638" kindref="member">psa_crypto_driver_pake_get_cipher_suite</ref>(</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/>*inputs,</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga45e914c064160f4fe1d511f9d0506400" kindref="member">psa_pake_setup</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga070417b83e6d602e9a6cc6748a14ea91" kindref="member">psa_pake_set_password_key</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>password);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga64fe9f62b09d39056e169325a9d33aac" kindref="member">psa_pake_set_user</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*user_id,</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>user_id_len);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gabae9a3e54d1c895032a4ee543b494958" kindref="member">psa_pake_set_peer</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*peer_id,</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>peer_id_len);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gaf61d9d1549d4f3eeaf891dd73354db66" kindref="member">psa_pake_set_role</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pake_1gab1769b1b1a85111973e8d0c9cced95de" kindref="member">psa_pake_role_t</ref><sp/>role);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga592e6102db23692862d800f569a8f1fe" kindref="member">psa_pake_output</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref><sp/>step,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*output,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_size,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*output_length);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga35af752a83762fe23daa47e3ddef3a68" kindref="member">psa_pake_input</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref><sp/>step,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*input,</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_length);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1gae1e7c28c10bf767f4b6927f820740103" kindref="member">psa_pake_get_implicit_key</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpsa__key__derivation__s" kindref="compound">psa_key_derivation_operation_t</ref><sp/>*output);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref><sp/><ref refid="group__pake_1ga20bed96cc254d2e1829d666edc74376a" kindref="member">psa_pake_abort</ref>(<ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_t</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819" refid="crypto__extra_8h_1a50919659323674b8d803621d8eb51268" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_OUTPUT_SIZE(alg,<sp/>primitive,<sp/>output_step)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(alg<sp/>==<sp/>PSA_ALG_JPAKE<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>primitive<sp/>==<sp/>PSA_PAKE_PRIMITIVE(PSA_PAKE_PRIMITIVE_TYPE_ECC,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ECC_FAMILY_SECP_R1,<sp/>256)<sp/>?<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_step<sp/>==<sp/>PSA_PAKE_STEP_KEY_SHARE<sp/>?<sp/>65<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_step<sp/>==<sp/>PSA_PAKE_STEP_ZK_PUBLIC<sp/>?<sp/>65<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849" refid="crypto__extra_8h_1a83988684b5f8206af1121f51e30a71fc" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_INPUT_SIZE(alg,<sp/>primitive,<sp/>input_step)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(alg<sp/>==<sp/>PSA_ALG_JPAKE<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>primitive<sp/>==<sp/>PSA_PAKE_PRIMITIVE(PSA_PAKE_PRIMITIVE_TYPE_ECC,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_ECC_FAMILY_SECP_R1,<sp/>256)<sp/>?<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1853"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1854"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_step<sp/>==<sp/>PSA_PAKE_STEP_KEY_SHARE<sp/>?<sp/>65<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1855"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_step<sp/>==<sp/>PSA_PAKE_STEP_ZK_PUBLIC<sp/>?<sp/>65<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1856"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1857"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1858"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870" refid="crypto__extra_8h_1a878628cebacd7123211337da96fcd1db" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_OUTPUT_MAX_SIZE<sp/>65</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882" refid="crypto__extra_8h_1aa9bc89c6c98e76ccbfcecd7d44d6f3b0" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_INPUT_MAX_SIZE<sp/>65</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887" refid="crypto__extra_8h_1a78e33eb5906aa452ca64159191c2d975" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_CIPHER_SUITE_INIT<sp/>{<sp/>PSA_ALG_NONE,<sp/>0,<sp/>0,<sp/>0,<sp/>PSA_ALG_NONE<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892" refid="crypto__extra_8h_1a0ce235183de6d1a0744b00ced5be7c74" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_PAKE_OPERATION_INIT<sp/>{<sp/>0,<sp/>PSA_ALG_NONE,<sp/>0,<sp/>PSA_PAKE_OPERATION_STAGE_SETUP,<sp/>\</highlight></codeline>
<codeline lineno="1893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0<sp/>},<sp/>{<sp/>{<sp/>0<sp/>}<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895" refid="structpsa__pake__cipher__suite__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_s</ref><sp/>{</highlight></codeline>
<codeline lineno="1896" refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" kindref="member">algorithm</ref>;</highlight></codeline>
<codeline lineno="1897" refid="structpsa__pake__cipher__suite__s_1ad071789455678b0d082935db9c8de7be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref><sp/><ref refid="structpsa__pake__cipher__suite__s_1ad071789455678b0d082935db9c8de7be" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="1898" refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__pake_1gae20cc74390755f28b6f2b893a936d893" kindref="member">psa_pake_family_t</ref><sp/><ref refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" kindref="member">family</ref>;</highlight></codeline>
<codeline lineno="1899" refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><ref refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="1900" refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903" refid="group__pake_1gaf20c5d67933a6a7e8ef4c517bc80a885" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="group__pake_1gaf20c5d67933a6a7e8ef4c517bc80a885" kindref="member">psa_pake_cs_get_algorithm</ref>(</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite)</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" kindref="member">algorithm</ref>;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909" refid="group__pake_1gaa819f7df77522699674de962b268ed7e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pake_1gaa819f7df77522699674de962b268ed7e" kindref="member">psa_pake_cs_set_algorithm</ref>(</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite,</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/>algorithm)</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" kindref="member">PSA_ALG_IS_PAKE</ref>(algorithm))<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" kindref="member">algorithm</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1a5a4fcadbf2ef270a16c01649abaffca4" kindref="member">algorithm</ref><sp/>=<sp/>algorithm;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920" refid="group__pake_1ga092067cc7dc9af367706c032480ebdf0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref><sp/><ref refid="group__pake_1ga092067cc7dc9af367706c032480ebdf0" kindref="member">psa_pake_cs_get_primitive</ref>(</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite)</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__pake_1gaf49527ceec65d3927f4ef2a589bade04" kindref="member">PSA_PAKE_PRIMITIVE</ref>(cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1ad071789455678b0d082935db9c8de7be" kindref="member">type</ref>,<sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" kindref="member">family</ref>,</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" kindref="member">bits</ref>);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927" refid="group__pake_1ga65563e28c31b26f96f70eddd1252f3d1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pake_1ga65563e28c31b26f96f70eddd1252f3d1" kindref="member">psa_pake_cs_set_primitive</ref>(</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite,</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref><sp/>primitive)</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1ad071789455678b0d082935db9c8de7be" kindref="member">type</ref><sp/>=<sp/>(<ref refid="group__pake_1gad8b29b6efa90ad2887d7b1252d23e5bc" kindref="member">psa_pake_primitive_type_t</ref>)<sp/>(primitive<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" kindref="member">family</ref><sp/>=<sp/>(<ref refid="group__pake_1gae20cc74390755f28b6f2b893a936d893" kindref="member">psa_pake_family_t</ref>)<sp/>(0xFF<sp/>&amp;<sp/>(primitive<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" kindref="member">bits</ref><sp/>=<sp/>(uint16_t)<sp/>(0xFFFF<sp/>&amp;<sp/>primitive);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936" refid="group__pake_1gab1c9d9857644ee44a515b384b9c728db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__pake_1gae20cc74390755f28b6f2b893a936d893" kindref="member">psa_pake_family_t</ref><sp/><ref refid="group__pake_1gab1c9d9857644ee44a515b384b9c728db" kindref="member">psa_pake_cs_get_family</ref>(</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite)</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1af0ca6a6ae95ae81d9971d0c607658ebc" kindref="member">family</ref>;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942" refid="group__pake_1ga048be6e239ccd25a3080863053e68576" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group__pake_1ga048be6e239ccd25a3080863053e68576" kindref="member">psa_pake_cs_get_bits</ref>(</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite)</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1af6cafb513de0427e69487d71e1ed7c84" kindref="member">bits</ref>;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948" refid="group__pake_1gaffd027d591290428050be2e98da2c8ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="group__pake_1gaffd027d591290428050be2e98da2c8ad" kindref="member">psa_pake_cs_get_hash</ref>(</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite)</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954" refid="group__pake_1ga453c3b937a771b927be21d9107fffcdc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pake_1ga453c3b937a771b927be21d9107fffcdc" kindref="member">psa_pake_cs_set_hash</ref>(<ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/>*cipher_suite,</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/>hash)</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(hash))<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" kindref="member">hash</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cipher_suite-&gt;<ref refid="structpsa__pake__cipher__suite__s_1a09850e6d0d25739778d349556920d2f4" kindref="member">hash</ref><sp/>=<sp/>hash;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964" refid="structpsa__crypto__driver__pake__inputs__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_s</ref><sp/>{</highlight></codeline>
<codeline lineno="1965" refid="structpsa__crypto__driver__pake__inputs__s_1ae5e803385377017bbfca7358bf8a4dff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(password);</highlight></codeline>
<codeline lineno="1966" refid="structpsa__crypto__driver__pake__inputs__s_1ac8f57d94288ac9c6439871d65c19a676" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(password_len);</highlight></codeline>
<codeline lineno="1967" refid="structpsa__crypto__driver__pake__inputs__s_1a6af967cc0117dbb94945ab5da2edc0f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(user);</highlight></codeline>
<codeline lineno="1968" refid="structpsa__crypto__driver__pake__inputs__s_1a815d8cdb6eaebf9cee49a00ccb8d26fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(user_len);</highlight></codeline>
<codeline lineno="1969" refid="structpsa__crypto__driver__pake__inputs__s_1ac9bb1bd6eea28bd9380a65fe00a0b51d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(peer);</highlight></codeline>
<codeline lineno="1970" refid="structpsa__crypto__driver__pake__inputs__s_1a7e27e6112392120663a6b52f86626935" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(peer_len);</highlight></codeline>
<codeline lineno="1971" refid="structpsa__crypto__driver__pake__inputs__s_1a5d5229023862b3c5dafcd8f131b852dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(attributes);</highlight></codeline>
<codeline lineno="1972" refid="structpsa__crypto__driver__pake__inputs__s_1aad3684f886840efe20a996f942b1989d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(cipher_suite);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685" kindref="member">psa_crypto_driver_pake_step</ref><sp/>{</highlight></codeline>
<codeline lineno="1976" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a35af539e48c2b542d9224763c38306e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a35af539e48c2b542d9224763c38306e6" kindref="member">PSA_JPAKE_STEP_INVALID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalid<sp/>step<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aba33e1d22a7b5f928b550357e4134aa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aba33e1d22a7b5f928b550357e4134aa7" kindref="member">PSA_JPAKE_X1_STEP_KEY_SHARE</ref><sp/><sp/><sp/>=<sp/>1,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>1:<sp/>input/output<sp/>key<sp/>share<sp/>(for<sp/>ephemeral<sp/>private<sp/>key<sp/>X1).*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a2db2cddaeb7c962e721eb1d1a3e18029" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a2db2cddaeb7c962e721eb1d1a3e18029" kindref="member">PSA_JPAKE_X1_STEP_ZK_PUBLIC</ref><sp/><sp/><sp/>=<sp/>2,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>1:<sp/>input/output<sp/>Schnorr<sp/>NIZKP<sp/>public<sp/>key<sp/>for<sp/>the<sp/>X1<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aefc294aeed675e34b03c45d9041a5f4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aefc294aeed675e34b03c45d9041a5f4a" kindref="member">PSA_JPAKE_X1_STEP_ZK_PROOF</ref><sp/><sp/><sp/><sp/>=<sp/>3,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>1:<sp/>input/output<sp/>Schnorr<sp/>NIZKP<sp/>proof<sp/>for<sp/>the<sp/>X1<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a05cec8b3f6dfd682f89e0c19aa4fe7ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a05cec8b3f6dfd682f89e0c19aa4fe7ad" kindref="member">PSA_JPAKE_X2_STEP_KEY_SHARE</ref><sp/><sp/><sp/>=<sp/>4,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>1:<sp/>input/output<sp/>key<sp/>share<sp/>(for<sp/>ephemeral<sp/>private<sp/>key<sp/>X2).*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a4a39ca68eb959b70091bddd2e5139a63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a4a39ca68eb959b70091bddd2e5139a63" kindref="member">PSA_JPAKE_X2_STEP_ZK_PUBLIC</ref><sp/><sp/><sp/>=<sp/>5,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>1:<sp/>input/output<sp/>Schnorr<sp/>NIZKP<sp/>public<sp/>key<sp/>for<sp/>the<sp/>X2<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a9b1d7ca0998e8f74b6fdb20487cec2b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a9b1d7ca0998e8f74b6fdb20487cec2b7" kindref="member">PSA_JPAKE_X2_STEP_ZK_PROOF</ref><sp/><sp/><sp/><sp/>=<sp/>6,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>1:<sp/>input/output<sp/>Schnorr<sp/>NIZKP<sp/>proof<sp/>for<sp/>the<sp/>X2<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a0b70a32d20d293637204ef0605b3fd0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a0b70a32d20d293637204ef0605b3fd0c" kindref="member">PSA_JPAKE_X2S_STEP_KEY_SHARE</ref><sp/><sp/>=<sp/>7,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>2:<sp/>output<sp/>X2S<sp/>key<sp/>(our<sp/>key)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685ad0202ff2dd8cb4d99abe123ccdf30703" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685ad0202ff2dd8cb4d99abe123ccdf30703" kindref="member">PSA_JPAKE_X2S_STEP_ZK_PUBLIC</ref><sp/><sp/>=<sp/>8,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>2:<sp/>output<sp/>Schnorr<sp/>NIZKP<sp/>public<sp/>key<sp/>for<sp/>the<sp/>X2S<sp/>key<sp/>(our<sp/>key)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a43970fbf93449e0615c4bbbe57899f98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a43970fbf93449e0615c4bbbe57899f98" kindref="member">PSA_JPAKE_X2S_STEP_ZK_PROOF</ref><sp/><sp/><sp/>=<sp/>9,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>2:<sp/>output<sp/>Schnorr<sp/>NIZKP<sp/>proof<sp/>for<sp/>the<sp/>X2S<sp/>key<sp/>(our<sp/>key)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a37da09adae4df0cef35b4d2ea4663e7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a37da09adae4df0cef35b4d2ea4663e7c" kindref="member">PSA_JPAKE_X4S_STEP_KEY_SHARE</ref><sp/><sp/>=<sp/>10,<sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>2:<sp/>input<sp/>X4S<sp/>key<sp/>(from<sp/>peer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aa0a111705a616793a97e0b78d6e79a95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685aa0a111705a616793a97e0b78d6e79a95" kindref="member">PSA_JPAKE_X4S_STEP_ZK_PUBLIC</ref><sp/><sp/>=<sp/>11,<sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>2:<sp/>input<sp/>Schnorr<sp/>NIZKP<sp/>public<sp/>key<sp/>for<sp/>the<sp/>X4S<sp/>key<sp/>(from<sp/>peer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988" refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a58aef0d9f1364485c54ca05ddee82051" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a0ef6329e313384e4d7cce369b0252685a58aef0d9f1364485c54ca05ddee82051" kindref="member">PSA_JPAKE_X4S_STEP_ZK_PROOF</ref><sp/><sp/><sp/>=<sp/>12<sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>2:<sp/>input<sp/>Schnorr<sp/>NIZKP<sp/>proof<sp/>for<sp/>the<sp/>X4S<sp/>key<sp/>(from<sp/>peer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal">}<sp/><ref refid="crypto__extra_8h_1a31829e92608413e4552c0ab8b6b8046b" kindref="member">psa_crypto_driver_pake_step_t</ref>;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991" refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543" kindref="member">psa_jpake_round</ref><sp/>{</highlight></codeline>
<codeline lineno="1992" refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a99c1f2ef421eb70bd934e4dea2e9b25a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a99c1f2ef421eb70bd934e4dea2e9b25a" kindref="member">PSA_JPAKE_FIRST</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1993" refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543af1767b5eb4d71b70b25b7e97d18731b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543af1767b5eb4d71b70b25b7e97d18731b1" kindref="member">PSA_JPAKE_SECOND</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1994" refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a2016b250a6f20acccab7316532d12aa5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a35934e47040ddf65b39e87e80a0b0543a2016b250a6f20acccab7316532d12aa5" kindref="member">PSA_JPAKE_FINISHED</ref><sp/>=<sp/>2</highlight></codeline>
<codeline lineno="1995"><highlight class="normal">}<sp/><ref refid="crypto__extra_8h_1a8c7c3d5bafd1cb25f5cd8d866e3bda0b" kindref="member">psa_jpake_round_t</ref>;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997" refid="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9a" kindref="member">psa_jpake_io_mode</ref><sp/>{</highlight></codeline>
<codeline lineno="1998" refid="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9aaf2650415a64b54bbe6e21154c244075d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9aaf2650415a64b54bbe6e21154c244075d" kindref="member">PSA_JPAKE_INPUT</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1999" refid="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9aadce625c0146845490fe1e75952bceb7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a23fc07090cc40ab3ed067f6b87c19b9aadce625c0146845490fe1e75952bceb7d" kindref="member">PSA_JPAKE_OUTPUT</ref><sp/>=<sp/>1</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">}<sp/><ref refid="crypto__extra_8h_1a8bb19be9f990532703b47582cafc7d0c" kindref="member">psa_jpake_io_mode_t</ref>;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002" refid="structpsa__jpake__computation__stage__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__jpake__computation__stage__s" kindref="compound">psa_jpake_computation_stage_s</ref><sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>J-PAKE<sp/>round<sp/>we<sp/>are<sp/>currently<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004" refid="structpsa__jpake__computation__stage__s_1aee24258dd469bc85fc8d99bdb3150784" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a8c7c3d5bafd1cb25f5cd8d866e3bda0b" kindref="member">psa_jpake_round_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(round);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>&apos;mode&apos;<sp/>we<sp/>are<sp/>currently<sp/>in<sp/>(inputting<sp/>or<sp/>outputting)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006" refid="structpsa__jpake__computation__stage__s_1ac69abb423a6f5185e6c1c92032bb2422" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="crypto__extra_8h_1a8bb19be9f990532703b47582cafc7d0c" kindref="member">psa_jpake_io_mode_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(io_mode);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>number<sp/>of<sp/>completed<sp/>inputs<sp/>so<sp/>far<sp/>this<sp/>round<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008" refid="structpsa__jpake__computation__stage__s_1af3237cdd802fad32d06fb06f57f90182" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(inputs);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>number<sp/>of<sp/>completed<sp/>outputs<sp/>so<sp/>far<sp/>this<sp/>round<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010" refid="structpsa__jpake__computation__stage__s_1ad29459217d86cf45e10afe5382d3e07e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(outputs);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>next<sp/>expected<sp/>step<sp/>(KEY_SHARE,<sp/>ZK_PUBLIC<sp/>or<sp/>ZK_PROOF)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012" refid="structpsa__jpake__computation__stage__s_1a00a32d4dacc6817ed61c2180bdf88854" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__pake_1gac16be59e5b1acb89c26709eed001ef35" kindref="member">psa_pake_step_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(step);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015" refid="crypto__extra_8h_1a4c72597374a5f87d8f24f62ce6d981e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_JPAKE_EXPECTED_INPUTS(round)<sp/>((round)<sp/>==<sp/>PSA_JPAKE_FINISHED<sp/>?<sp/>0<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="2016"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((round)<sp/>==<sp/>PSA_JPAKE_FIRST<sp/>?<sp/>2<sp/>:<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017" refid="crypto__extra_8h_1a99683cf31f74b4508dd9d664cb865502" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_JPAKE_EXPECTED_OUTPUTS(round)<sp/>((round)<sp/>==<sp/>PSA_JPAKE_FINISHED<sp/>?<sp/>0<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="2018"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((round)<sp/>==<sp/>PSA_JPAKE_FIRST<sp/>?<sp/>2<sp/>:<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020" refid="structpsa__pake__operation__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_s</ref><sp/>{</highlight></codeline>
<codeline lineno="2027" refid="structpsa__pake__operation__s_1a7b182d313a53336e34a6f1a1aa4586d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Algorithm<sp/>of<sp/>the<sp/>PAKE<sp/>operation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029" refid="structpsa__pake__operation__s_1a5e3e027585b301e7811113c07fe03a68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(alg);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>primitive<sp/>of<sp/>type<sp/>compatible<sp/>with<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031" refid="structpsa__pake__operation__s_1a7eab200e882306b9fd80ca6e94a76320" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__pake_1ga37ed4ea6bba6bacc72d0ecb9b95af96c" kindref="member">psa_pake_primitive_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(primitive);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stage<sp/>of<sp/>the<sp/>PAKE<sp/>operation:<sp/>waiting<sp/>for<sp/>the<sp/>setup,<sp/>collecting<sp/>inputs</highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>computing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034" refid="structpsa__pake__operation__s_1a414aa550fa9945826f6b32d96ba536b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(stage);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Holds<sp/>computation<sp/>stage<sp/>of<sp/>the<sp/>PAKE<sp/>algorithms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2037" refid="structpsa__pake__operation__s_1a0e0e8f60216bcfaff47584cb8c33ac93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(dummy);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PSA_WANT_ALG_JPAKE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039" refid="structpsa__pake__operation__s_1a07700c8fe2b75780db04e22fbac78fc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpsa__jpake__computation__stage__s" kindref="compound">psa_jpake_computation_stage_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(jpake);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(computation_stage);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2043" refid="structpsa__pake__operation__s_1ad6e6328124a26e4d3bb05c9eda5ce40f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionpsa__driver__pake__context__t" kindref="compound">psa_driver_pake_context_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ctx);</highlight></codeline>
<codeline lineno="2044" refid="structpsa__pake__operation__s_1af5df5e37abb5cf1c69696bd8a84b9537" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpsa__crypto__driver__pake__inputs__s" kindref="compound">psa_crypto_driver_pake_inputs_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(inputs);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(data);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048" refid="group__pake_1ga843d5c82d72614f4706f77e5e3210328" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_s</ref><sp/><ref refid="group__pake_1ga843d5c82d72614f4706f77e5e3210328" kindref="member">psa_pake_cipher_suite_init</ref>(void)</highlight></codeline>
<codeline lineno="2049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__cipher__suite__s" kindref="compound">psa_pake_cipher_suite_s</ref><sp/>v<sp/>=<sp/><ref refid="crypto__extra_8h_1a78e33eb5906aa452ca64159191c2d975" kindref="member">PSA_PAKE_CIPHER_SUITE_INIT</ref>;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054" refid="group__pake_1gac099f40e8741def37b72603d1f3f7f65" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_s</ref><sp/><ref refid="group__pake_1gac099f40e8741def37b72603d1f3f7f65" kindref="member">psa_pake_operation_init</ref>(void)</highlight></codeline>
<codeline lineno="2055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__pake__operation__s" kindref="compound">psa_pake_operation_s</ref><sp/>v<sp/>=<sp/><ref refid="crypto__extra_8h_1a0ce235183de6d1a0744b00ced5be7c74" kindref="member">PSA_PAKE_OPERATION_INIT</ref>;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PSA_CRYPTO_EXTRA_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h"/>
  </compounddef>
</doxygen>
