<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="memory__buffer__alloc_8h" kind="file" language="C++">
    <compoundname>memory_buffer_alloc.h</compoundname>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes local="no">stddef.h</includes>
    <incdepgraph>
      <node id="11">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="18">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="12">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="19">
        <label>stddef.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="2">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="3">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="5">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="8">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="6">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="1">
        <label>memory_buffer_alloc.h</label>
        <link refid="memory__buffer__alloc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>SECTION: Module settings</header>
      <description><para>The configuration options you can set for this module are in this section. Either change them in <ref refid="mbedtls__config_8h" kindref="compound">mbedtls_config.h</ref> or define them on the compiler command line. </para>
</description>
      <memberdef kind="define" id="memory__buffer__alloc_8h_1a1fa1e20d4ff40eb6c2a740d7d26b2749" prot="public" static="no">
        <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Align on multiples of this value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="26" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="memory__buffer__alloc_8h_1a2b9fd1ef7a128cf7680e6c9c377134d4" prot="public" static="no">
        <name>MBEDTLS_MEMORY_VERIFY_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="31" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="memory__buffer__alloc_8h_1a3fb815b3f3b7cfce7c5ddd6f2a33b80d" prot="public" static="no">
        <name>MBEDTLS_MEMORY_VERIFY_ALLOC</name>
        <initializer>(1 &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="32" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="memory__buffer__alloc_8h_1a1c7f2d8956e95373dcb4fe24154b6650" prot="public" static="no">
        <name>MBEDTLS_MEMORY_VERIFY_FREE</name>
        <initializer>(1 &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="33" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="memory__buffer__alloc_8h_1a581a709e67d33b34d3c8a7dfb4b3df00" prot="public" static="no">
        <name>MBEDTLS_MEMORY_VERIFY_ALWAYS</name>
        <initializer>                                            (<ref refid="memory__buffer__alloc_8h_1a3fb815b3f3b7cfce7c5ddd6f2a33b80d" kindref="member">MBEDTLS_MEMORY_VERIFY_ALLOC</ref> | \
                                            <ref refid="memory__buffer__alloc_8h_1a1c7f2d8956e95373dcb4fe24154b6650" kindref="member">MBEDTLS_MEMORY_VERIFY_FREE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="34" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="memory__buffer__alloc_8h_1ac70d134be54133c272d8eab2cb85dfbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_memory_buffer_alloc_init</definition>
        <argsstring>(unsigned char *buf, size_t len)</argsstring>
        <name>mbedtls_memory_buffer_alloc_init</name>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Initialize use of stack-based memory allocator. The stack-based allocator does memory management inside the presented buffer and does not call calloc() and free(). It sets the global <ref refid="platform_8h_1a36a09500d93d29d1f4a81f6a3be8bbed" kindref="member">mbedtls_calloc()</ref> and <ref refid="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" kindref="member">mbedtls_free()</ref> pointers to its own functions. (Provided <ref refid="platform_8h_1a36a09500d93d29d1f4a81f6a3be8bbed" kindref="member">mbedtls_calloc()</ref> and <ref refid="platform_8h_1a5aeffbc9179142d77ef35d3266d5fc4d" kindref="member">mbedtls_free()</ref> are thread-safe if MBEDTLS_THREADING_C is defined) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This code is not optimized and provides a straight-forward implementation of a stack-based memory allocator.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to use as heap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="56" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="memory__buffer__alloc_8h_1ae9d7316a19b72776f34ba74720a06325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_memory_buffer_alloc_free</definition>
        <argsstring>(void)</argsstring>
        <name>mbedtls_memory_buffer_alloc_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free the mutex for thread-safety and clear remaining memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="61" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="memory__buffer__alloc_8h_1aaa50603bb2f2f1fe8d97d6953589b832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_memory_buffer_set_verify</definition>
        <argsstring>(int verify)</argsstring>
        <name>mbedtls_memory_buffer_set_verify</name>
        <param>
          <type>int</type>
          <declname>verify</declname>
        </param>
        <briefdescription>
<para>Determine when the allocator should automatically verify the state of the entire chain of headers / meta-data. (Default: MBEDTLS_MEMORY_VERIFY_NONE) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verify</parametername>
</parameternamelist>
<parameterdescription>
<para>One of MBEDTLS_MEMORY_VERIFY_NONE, MBEDTLS_MEMORY_VERIFY_ALLOC, MBEDTLS_MEMORY_VERIFY_FREE or MBEDTLS_MEMORY_VERIFY_ALWAYS </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="71" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="memory__buffer__alloc_8h_1a7aae8a0cd61f08dd6734ebc8a8a3ba38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_memory_buffer_alloc_verify</definition>
        <argsstring>(void)</argsstring>
        <name>mbedtls_memory_buffer_alloc_verify</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verifies that all headers in the memory buffer are correct and contain sane values. Helps debug buffer-overflow errors. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints out first failure if MBEDTLS_MEMORY_DEBUG is defined. Prints out full header information if MBEDTLS_MEMORY_DEBUG is defined. (Includes stack trace information for each block if MBEDTLS_MEMORY_BACKTRACE is defined as well).</para>
<para><simplesect kind="return"><para>0 if verified, 1 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="127" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="memory__buffer__alloc_8h_1ab1304c317468fb66c21ee52c79efe084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_memory_buffer_alloc_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_memory_buffer_alloc_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>Checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if successful, or 1 if a test failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" line="135" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h" declline="135" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Buffer-based memory allocator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_MEMORY_BUFFER_ALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MEMORY_BUFFER_ALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_MEMORY_ALIGN_MULTIPLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="memory__buffer__alloc_8h_1a1fa1e20d4ff40eb6c2a740d7d26b2749" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MEMORY_ALIGN_MULTIPLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="memory__buffer__alloc_8h_1a2b9fd1ef7a128cf7680e6c9c377134d4" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_MEMORY_VERIFY_NONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="memory__buffer__alloc_8h_1a3fb815b3f3b7cfce7c5ddd6f2a33b80d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MEMORY_VERIFY_ALLOC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="memory__buffer__alloc_8h_1a1c7f2d8956e95373dcb4fe24154b6650" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MEMORY_VERIFY_FREE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="memory__buffer__alloc_8h_1a581a709e67d33b34d3c8a7dfb4b3df00" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MEMORY_VERIFY_ALWAYS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MBEDTLS_MEMORY_VERIFY_ALLOC<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_MEMORY_VERIFY_FREE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memory__buffer__alloc_8h_1ac70d134be54133c272d8eab2cb85dfbf" kindref="member">mbedtls_memory_buffer_alloc_init</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memory__buffer__alloc_8h_1ae9d7316a19b72776f34ba74720a06325" kindref="member">mbedtls_memory_buffer_alloc_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memory__buffer__alloc_8h_1aaa50603bb2f2f1fe8d97d6953589b832" kindref="member">mbedtls_memory_buffer_set_verify</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verify);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_MEMORY_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mbedtls_memory_buffer_alloc_status(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mbedtls_memory_buffer_alloc_count_get(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*alloc_count,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*free_count);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mbedtls_memory_buffer_alloc_max_get(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*max_used,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*max_blocks);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mbedtls_memory_buffer_alloc_max_reset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mbedtls_memory_buffer_alloc_cur_get(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*cur_used,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*cur_blocks);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_MEMORY_DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="memory__buffer__alloc_8h_1a7aae8a0cd61f08dd6734ebc8a8a3ba38" kindref="member">mbedtls_memory_buffer_alloc_verify</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SELF_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="memory__buffer__alloc_8h_1ab1304c317468fb66c21ee52c79efe084" kindref="member">mbedtls_memory_buffer_alloc_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>memory_buffer_alloc.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/memory_buffer_alloc.h"/>
  </compounddef>
</doxygen>
