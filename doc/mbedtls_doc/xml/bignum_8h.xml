<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="bignum_8h" kind="file" language="C++">
    <compoundname>bignum.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdio.h</includes>
    <includedby refid="asn1_8h" local="yes">asn1.h</includedby>
    <includedby refid="ssl_8h" local="yes">ssl.h</includedby>
    <includedby refid="ecp_8h" local="yes">ecp.h</includedby>
    <includedby refid="rsa_8h" local="yes">rsa.h</includedby>
    <includedby refid="x509__crt_8h" local="yes">x509_crt.h</includedby>
    <includedby refid="dhm_8h" local="yes">dhm.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="1">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="21">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="17">
        <label>pkcs5.h</label>
        <link refid="pkcs5_8h"/>
      </node>
      <node id="30">
        <label>dhm.h</label>
        <link refid="dhm_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="18">
        <label>ecp.h</label>
        <link refid="ecp_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="27">
        <label>crypto_extra.h</label>
        <link refid="crypto__extra_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="4">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="24">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="19">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="15">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="8">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="26">
        <label>ecjpake.h</label>
        <link refid="ecjpake_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ecdh.h</label>
        <link refid="ecdh_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>asn1.h</label>
        <link refid="asn1_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>asn1write.h</label>
        <link refid="asn1write_8h"/>
      </node>
      <node id="16">
        <label>pkcs12.h</label>
        <link refid="pkcs12_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__mpi" prot="public">mbedtls_mpi</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bignum_8h_1a5ba505f058780047978dcdafd50d0b1e" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_FILE_IO_ERROR</name>
        <initializer>-0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An error occurred while reading from or writing to a file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="24" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a3989a97b1d92d04dd05242731e6f37f2" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name>
        <initializer>-0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad input parameters to function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="26" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a0ef495d9a083d986f00e5f604126382f" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_INVALID_CHARACTER</name>
        <initializer>-0x0006</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There is an invalid character in the digit string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="28" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a7fc9b9c20686c88b949d0a35c0def909" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</name>
        <initializer>-0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The buffer is too small to write to. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="30" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1ab7f06e7dfde557a02fe7137d4d47eed3" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_NEGATIVE_VALUE</name>
        <initializer>-0x000A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The input arguments are negative or result in illegal output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="32" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a97e2c5a552770757da26b4a9b2e56f6c" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</name>
        <initializer>-0x000C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The input argument for division is zero, which is not allowed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="34" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a24f0dfbee8599f6e72852247d5681503" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name>
        <initializer>-0x000E</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The input arguments are not acceptable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="36" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" prot="public" static="no">
        <name>MBEDTLS_ERR_MPI_ALLOC_FAILED</name>
        <initializer>-0x0010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory allocation failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="38" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1ab0a21d28acd6b59cc60a45547e2412af" prot="public" static="no">
        <name>MBEDTLS_MPI_CHK</name>
        <param><defname>f</defname></param>
        <initializer>    do                           \
    {                            \
        if ((ret = (f)) != 0) \
        goto cleanup;        \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="40" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a50617c9e123096b168d65a9d957b2ebe" prot="public" static="no">
        <name>MBEDTLS_MPI_MAX_LIMBS</name>
        <initializer>10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="50" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a7cec1de79c434f1053488b1d3b9454c4" prot="public" static="no">
        <name>MBEDTLS_MPI_WINDOW_SIZE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum window size used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="62" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" prot="public" static="no">
        <name>MBEDTLS_MPI_MAX_SIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of bytes for usable MPIs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="73" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a134ba62182ca105e273d465861f5a4d5" prot="public" static="no">
        <name>MBEDTLS_MPI_MAX_BITS</name>
        <initializer>(8 * <ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of bits for usable MPIs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="76" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a5e807323a5823be0f1e7eef38dce9cb0" prot="public" static="no">
        <name>MBEDTLS_MPI_MAX_BITS_SCALE100</name>
        <initializer>(100 * <ref refid="bignum_8h_1a134ba62182ca105e273d465861f5a4d5" kindref="member">MBEDTLS_MPI_MAX_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="96" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a844008ccbe6672f636d250230755d5ee" prot="public" static="no">
        <name>MBEDTLS_LN_2_DIV_LN_10_SCALE100</name>
        <initializer>332</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="97" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a95aa572170385895daf25b70c6f0d63f" prot="public" static="no">
        <name>MBEDTLS_MPI_RW_BUFFER_SIZE</name>
        <initializer>                                                  (((<ref refid="bignum_8h_1a5e807323a5823be0f1e7eef38dce9cb0" kindref="member">MBEDTLS_MPI_MAX_BITS_SCALE100</ref> + \
                                                  <ref refid="bignum_8h_1a844008ccbe6672f636d250230755d5ee" kindref="member">MBEDTLS_LN_2_DIV_LN_10_SCALE100</ref> - 1) / \
                                                 <ref refid="bignum_8h_1a844008ccbe6672f636d250230755d5ee" kindref="member">MBEDTLS_LN_2_DIV_LN_10_SCALE100</ref>) + 10 + 6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="98" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1ae9ed748679544c60d2b429ee2bc93818" prot="public" static="no">
        <name>MBEDTLS_HAVE_INT32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="166" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1a179dabc23075419e87bfcdd8dafe2ea4" prot="public" static="no">
        <name>MBEDTLS_MPI_UINT_MAX</name>
        <initializer>UINT32_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="170" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bignum_8h_1ae1ace2caabfb2c45a1dab0a8f0bd6b66" prot="public" static="no">
        <name>MBEDTLS_HAVE_UDBL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="173" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbe" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_mpi_gen_prime_flag_t</name>
        <enumvalue id="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbea4c612221f461c62638c2ad28b3e15117" prot="public">
          <name>MBEDTLS_MPI_GEN_PRIME_FLAG_DH</name>
          <initializer>=      0x0001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>(X-1)/2 is prime too </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbea7fe292aeae0a99eb56fb729e3623fb5a" prot="public">
          <name>MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR</name>
          <initializer>= 0x0002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>lower error rate from 2<superscript>-80</superscript> to 2<superscript>-128</superscript> </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags for <ref refid="bignum_8h_1a877dfa42b7e14304630ae470626bdc2c" kindref="member">mbedtls_mpi_gen_prime()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Each of these flags is a constraint on the result X returned by <ref refid="bignum_8h_1a877dfa42b7e14304630ae470626bdc2c" kindref="member">mbedtls_mpi_gen_prime()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="1041" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="1041" bodyend="1044"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" prot="public" static="no">
        <type>int32_t</type>
        <definition>mbedtls_mpi_sint</definition>
        <argsstring></argsstring>
        <name>mbedtls_mpi_sint</name>
        <briefdescription>
<para>The signed type corresponding to <ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is always an signed integer type with no padding bits. The size is platform-dependent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="168" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" prot="public" static="no">
        <type>uint32_t</type>
        <definition>mbedtls_mpi_uint</definition>
        <argsstring></argsstring>
        <name>mbedtls_mpi_uint</name>
        <briefdescription>
<para>The type of machine digits in a bignum, called <emphasis>limbs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is always an unsigned integer type with no padding bits. The size is platform-dependent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="169" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bignum_8h_1af64c95417575870c4f465c0a663fb51b" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t mbedtls_t_udbl</definition>
        <argsstring></argsstring>
        <name>mbedtls_t_udbl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="172" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bignum_8h_1af4705a9a02c39bfbeceef568ddd29c0e" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref></type>
        <definition>typedef struct mbedtls_mpi mbedtls_mpi</definition>
        <argsstring></argsstring>
        <name>mbedtls_mpi</name>
        <briefdescription>
<para>MPI structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="239" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bignum_8h_1a99c7cca612b47dc4f3b96905c4f9d69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_mpi_init</definition>
        <argsstring>(mbedtls_mpi *X)</argsstring>
        <name>mbedtls_mpi_init</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Initialize an MPI context. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             This makes the MPI ready to be set or freed,
             but does not define a value for the MPI.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="249" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="249" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1abffd5d8382cb86c089a1ef2bebb90f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_mpi_free</definition>
        <argsstring>(mbedtls_mpi *X)</argsstring>
        <name>mbedtls_mpi_free</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>This function frees the components of an MPI context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI context to be cleared. This may be <computeroutput>NULL</computeroutput>, in which case this function is a no-op. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="258" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="258" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a22263d90d838cb58f271aa8f1920843d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_grow</definition>
        <argsstring>(mbedtls_mpi *X, size_t nblimbs)</argsstring>
        <name>mbedtls_mpi_grow</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nblimbs</declname>
        </param>
        <briefdescription>
<para>Enlarge an MPI to the specified number of limbs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function does nothing if the MPI is already large enough.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to grow. It must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblimbs</parametername>
</parameternamelist>
<parameterdescription>
<para>The target number of limbs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="273" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="273" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1abaaef229c95711a53b2f38eff0a2c14a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_shrink</definition>
        <argsstring>(mbedtls_mpi *X, size_t nblimbs)</argsstring>
        <name>mbedtls_mpi_shrink</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nblimbs</declname>
        </param>
        <briefdescription>
<para>This function resizes an MPI downwards, keeping at least the specified number of limbs. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>X</computeroutput> is smaller than <computeroutput>nblimbs</computeroutput>, it is resized up instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to shrink. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblimbs</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum number of limbs to keep.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed (this can only happen when resizing up). </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="290" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="290" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a2f722863f9fd9098690f8a9db9962044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_copy</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *Y)</argsstring>
        <name>mbedtls_mpi_copy</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Make a copy of an MPI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The source MPI. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The limb-buffer in the destination MPI is enlarged if necessary to hold the value in the source MPI.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="305" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="305" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a60d0c82301d6cf50e69808b6a3c5cd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_mpi_swap</definition>
        <argsstring>(mbedtls_mpi *X, mbedtls_mpi *Y)</argsstring>
        <name>mbedtls_mpi_swap</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Swap the contents of two MPIs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The first MPI. It must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second MPI. It must be initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="313" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="313" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a623c565706f22d8fbcc665ba49a51c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_safe_cond_assign</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign)</argsstring>
        <name>mbedtls_mpi_safe_cond_assign</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>assign</declname>
        </param>
        <briefdescription>
<para>Perform a safe conditional copy of MPI which doesn&apos;t reveal whether the condition was true or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to conditionally assign to. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to be assigned from. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>assign</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition deciding whether to perform the assignment or not. Must be either 0 or 1:<itemizedlist>
<listitem><para><computeroutput>1</computeroutput>: Perform the assignment <computeroutput>X = Y</computeroutput>.</para>
</listitem><listitem><para><computeroutput>0</computeroutput>: Keep the original value of <computeroutput>X</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function is equivalent to <computeroutput>if( assign ) mbedtls_mpi_copy( X, Y );</computeroutput> except that it avoids leaking any information about whether the assignment was done or not (the above code may leak information through branch prediction and/or memory access patterns analysis).</para>
</simplesect>
<simplesect kind="warning"><para>If <computeroutput>assign</computeroutput> is neither 0 nor 1, the result of this function is indeterminate, and the resulting value in <computeroutput>X</computeroutput> might be neither its original value nor the value in <computeroutput>Y</computeroutput>.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="343" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="343" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a1ef22dc19811e305fbc557e150ca5699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_safe_cond_swap</definition>
        <argsstring>(mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap)</argsstring>
        <name>mbedtls_mpi_safe_cond_swap</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>swap</declname>
        </param>
        <briefdescription>
<para>Perform a safe conditional swap which doesn&apos;t reveal whether the condition was true or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The first MPI. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second MPI. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swap</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition deciding whether to perform the swap or not. Must be either 0 or 1:<itemizedlist>
<listitem><para><computeroutput>1</computeroutput>: Swap the values of <computeroutput>X</computeroutput> and <computeroutput>Y</computeroutput>.</para>
</listitem><listitem><para><computeroutput>0</computeroutput>: Keep the original values of <computeroutput>X</computeroutput> and <computeroutput>Y</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function is equivalent to if( swap ) mbedtls_mpi_swap( X, Y ); except that it avoids leaking any information about whether the swap was done or not (the above code may leak information through branch prediction and/or memory access patterns analysis).</para>
</simplesect>
<simplesect kind="warning"><para>If <computeroutput>swap</computeroutput> is neither 0 nor 1, the result of this function is indeterminate, and both <computeroutput>X</computeroutput> and <computeroutput>Y</computeroutput> might end up with values different to either of the original ones.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="372" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="372" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a65644d139404325130491759a5651f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_lset</definition>
        <argsstring>(mbedtls_mpi *X, mbedtls_mpi_sint z)</argsstring>
        <name>mbedtls_mpi_lset</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Store integer value in MPI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to set. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="384" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="384" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1abfc40fb7192507bc0eeb9f24e8e69c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_get_bit</definition>
        <argsstring>(const mbedtls_mpi *X, size_t pos)</argsstring>
        <name>mbedtls_mpi_get_bit</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Get a specific bit from an MPI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to query. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the bit to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> or <computeroutput>1</computeroutput> on success, depending on whether bit <computeroutput>pos</computeroutput> of <computeroutput>X</computeroutput> is unset or set. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="396" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="396" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a39a475e7957e7a60993fc6e801d9913b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_set_bit</definition>
        <argsstring>(mbedtls_mpi *X, size_t pos, unsigned char val)</argsstring>
        <name>mbedtls_mpi_set_bit</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Modify a specific bit in an MPI. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will grow the target MPI if necessary to set a bit to <computeroutput>1</computeroutput> in a not yet existing limb. It will not grow if the bit should be set to <computeroutput>0</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to modify. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the bit to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired value of bit <computeroutput>pos:</computeroutput> <computeroutput>0</computeroutput> or <computeroutput>1</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="413" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="413" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1aa67117fd61db9570746dc2ffca88d004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mbedtls_mpi_lsb</definition>
        <argsstring>(const mbedtls_mpi *X)</argsstring>
        <name>mbedtls_mpi_lsb</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Return the number of bits of value <computeroutput>0</computeroutput> before the least significant bit of value <computeroutput>1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is the same as the zero-based index of the least significant bit of value <computeroutput>1</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bits of value <computeroutput>0</computeroutput> before the least significant bit of value <computeroutput>1</computeroutput> in <computeroutput>X</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="427" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="427" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a681ab2710d044c0cb091b6497c6ed395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mbedtls_mpi_bitlen</definition>
        <argsstring>(const mbedtls_mpi *X)</argsstring>
        <name>mbedtls_mpi_bitlen</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Return the number of bits up to and including the most significant bit of value <computeroutput>1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><simplesect kind="note"><para>This is same as the one-based index of the most significant bit of value <computeroutput>1</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to query. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bits up to and including the most significant bit of value <computeroutput>1</computeroutput>. </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="441" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="441" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a538110c9da02704d34d67a07d16fb3ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mbedtls_mpi_size</definition>
        <argsstring>(const mbedtls_mpi *X)</argsstring>
        <name>mbedtls_mpi_size</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Return the total size of an MPI value in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to use. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value returned by this function may be less than the number of bytes used to store <computeroutput>X</computeroutput> internally. This happens if and only if there are trailing bytes of value zero.</para>
</simplesect>
<simplesect kind="return"><para>The least number of bytes capable of storing the absolute value of <computeroutput>X</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="456" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="456" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a15efd3f2f86700b69f6c18d34ac05758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_read_string</definition>
        <argsstring>(mbedtls_mpi *X, int radix, const char *s)</argsstring>
        <name>mbedtls_mpi_read_string</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Import an MPI from an ASCII string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric base of the input string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated string buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="468" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="468" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1ab2197e4833449c3e505ec8d11b348913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_write_string</definition>
        <argsstring>(const mbedtls_mpi *X, int radix, char *buf, size_t buflen, size_t *olen)</argsstring>
        <name>mbedtls_mpi_write_string</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <briefdescription>
<para>Export an MPI to an ASCII string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The source MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric base of the output string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write the string to. This must be writable buffer of length <computeroutput>buflen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The available size in Bytes of <computeroutput>buf</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the length of the string written, including the final <computeroutput>NULL</computeroutput> byte. This must not be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You can call this function with <computeroutput>buflen == 0</computeroutput> to obtain the minimum required buffer size in <computeroutput>*olen</computeroutput>.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a7fc9b9c20686c88b949d0a35c0def909" kindref="member">MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</ref> if the target buffer <computeroutput>buf</computeroutput> is too small to hold the value of <computeroutput>X</computeroutput> in the desired base. In this case, <computeroutput>*olen</computeroutput> is nonetheless updated to contain the size of <computeroutput>buf</computeroutput> required for a successful call. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="492" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="492" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1acb4d0ed28a946cfa83219ae8709941d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_read_file</definition>
        <argsstring>(mbedtls_mpi *X, int radix, FILE *fin)</argsstring>
        <name>mbedtls_mpi_read_file</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fin</declname>
        </param>
        <briefdescription>
<para>Read an MPI from a line in an opened file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric base of the string representation used in the source line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fin</parametername>
</parameternamelist>
<parameterdescription>
<para>The input file handle to use. This must not be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>On success, this function advances the file stream to the end of the current line or to EOF.</para>
</simplesect>
The function returns <computeroutput>0</computeroutput> on an empty line.</para>
<para>Leading whitespaces are ignored, as is a &apos;0x&apos; prefix for radix <computeroutput>16</computeroutput>.</para>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a7fc9b9c20686c88b949d0a35c0def909" kindref="member">MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</ref> if the file read buffer is too small. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="517" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="517" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1ab23e312f4a0479c8b63a4bc9328e1324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_write_file</definition>
        <argsstring>(const char *p, const mbedtls_mpi *X, int radix, FILE *fout)</argsstring>
        <name>mbedtls_mpi_write_file</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fout</declname>
        </param>
        <briefdescription>
<para>Export an MPI into an opened file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A string prefix to emit prior to the MPI data. For example, this might be a label, or &quot;0x&quot; when printing in base <computeroutput>16</computeroutput>. This may be <computeroutput>NULL</computeroutput> if no prefix is needed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The source MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric base to be used in the emitted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>The output file handle. This may be <computeroutput>NULL</computeroutput>, in which case the output is written to <computeroutput>stdout</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="534" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="534" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a68f62c99e53eb034daea486e5d5d83ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_read_binary</definition>
        <argsstring>(mbedtls_mpi *X, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_mpi_read_binary</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Import an MPI from unsigned big endian binary data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer. This must be a readable buffer of length <computeroutput>buflen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="550" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="550" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a20166f230e86c46cf913d3c4e2650df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_read_binary_le</definition>
        <argsstring>(mbedtls_mpi *X, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_mpi_read_binary_le</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Import X from unsigned binary data, little endian. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer. This must be a readable buffer of length <computeroutput>buflen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="565" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="565" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1aceb4aeeb376a582a5e904135205ada44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_write_binary</definition>
        <argsstring>(const mbedtls_mpi *X, unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_mpi_write_binary</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Export X into unsigned binary data, big endian. Always fills the whole buffer, which will start with zeros if the number is smaller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The source MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>buflen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the output buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a7fc9b9c20686c88b949d0a35c0def909" kindref="member">MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</ref> if <computeroutput>buf</computeroutput> isn&apos;t large enough to hold the value of <computeroutput>X</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="583" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="583" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a54b05af108b70cd6aebf76e8de359d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_write_binary_le</definition>
        <argsstring>(const mbedtls_mpi *X, unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_mpi_write_binary_le</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Export X into unsigned binary data, little endian. Always fills the whole buffer, which will end with zeros if the number is smaller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The source MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>buflen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the output buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a7fc9b9c20686c88b949d0a35c0def909" kindref="member">MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</ref> if <computeroutput>buf</computeroutput> isn&apos;t large enough to hold the value of <computeroutput>X</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="601" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="601" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a8d48a56155412dda56e67256be4d10d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_shift_l</definition>
        <argsstring>(mbedtls_mpi *X, size_t count)</argsstring>
        <name>mbedtls_mpi_shift_l</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Perform a left-shift on an MPI: X &lt;&lt;= count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to shift. This must point to an initialized MPI. The MPI pointed by <computeroutput>X</computeroutput> may be resized to fit the resulting number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bits to shift by.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="616" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="616" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1aee1140147b1e807645cebf64ebded168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_shift_r</definition>
        <argsstring>(mbedtls_mpi *X, size_t count)</argsstring>
        <name>mbedtls_mpi_shift_r</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Perform a right-shift on an MPI: X &gt;&gt;= count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to shift. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bits to shift by.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="628" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="628" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a81ea45be21ea77f5d8deae9e99d9a11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_cmp_abs</definition>
        <argsstring>(const mbedtls_mpi *X, const mbedtls_mpi *Y)</argsstring>
        <name>mbedtls_mpi_cmp_abs</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Compare the absolute values of two MPIs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand MPI. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if <computeroutput>|X|</computeroutput> is greater than <computeroutput>|Y|</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>-1</computeroutput> if <computeroutput>|X|</computeroutput> is lesser than <computeroutput>|Y|</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>|X|</computeroutput> is equal to <computeroutput>|Y|</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="640" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="640" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a762dd8add46384d4935a4aecc125096e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_cmp_mpi</definition>
        <argsstring>(const mbedtls_mpi *X, const mbedtls_mpi *Y)</argsstring>
        <name>mbedtls_mpi_cmp_mpi</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Compare two MPIs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand MPI. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if <computeroutput>X</computeroutput> is greater than <computeroutput>Y</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>-1</computeroutput> if <computeroutput>X</computeroutput> is lesser than <computeroutput>Y</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>X</computeroutput> is equal to <computeroutput>Y</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="652" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="652" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1ac62b0718700ff201b4583f8a0a04f319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_lt_mpi_ct</definition>
        <argsstring>(const mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned *ret)</argsstring>
        <name>mbedtls_mpi_lt_mpi_ct</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>unsigned *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Check if an MPI is less than the other in constant time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand MPI. This must point to an initialized MPI with the same allocated length as Y. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand MPI. This must point to an initialized MPI with the same allocated length as X. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the comparison: <computeroutput>1</computeroutput> if <computeroutput>X</computeroutput> is less than <computeroutput>Y</computeroutput>. <computeroutput>0</computeroutput> if <computeroutput>X</computeroutput> is greater than or equal to <computeroutput>Y</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success. </para>
</simplesect>
<simplesect kind="return"><para>MBEDTLS_ERR_MPI_BAD_INPUT_DATA if the allocated length of the two input MPIs is not the same. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="669" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="669" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1ad0e7f426326afc7d3fde309a7a8d82fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_cmp_int</definition>
        <argsstring>(const mbedtls_mpi *X, mbedtls_mpi_sint z)</argsstring>
        <name>mbedtls_mpi_cmp_int</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Compare an MPI with an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to compare <computeroutput>X</computeroutput> to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if <computeroutput>X</computeroutput> is greater than <computeroutput>z</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>-1</computeroutput> if <computeroutput>X</computeroutput> is lesser than <computeroutput>z</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>X</computeroutput> is equal to <computeroutput>z</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="682" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="682" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a5ddb2c6dc59dd39874695e04ff40afdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_add_abs</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_add_abs</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Perform an unsigned addition of MPIs: X = |A| + |B|. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The first summand. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The second summand. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="695" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="695" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1ad5840808639d50a98edbede345251293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_sub_abs</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_sub_abs</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Perform an unsigned subtraction of MPIs: X = |A| - |B|. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The minuend. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtrahend. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1ab7f06e7dfde557a02fe7137d4d47eed3" kindref="member">MBEDTLS_ERR_MPI_NEGATIVE_VALUE</ref> if <computeroutput>B</computeroutput> is greater than <computeroutput>A</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="710" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="710" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a5fd1cfd561c1ada500097f860aa4fe68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_add_mpi</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_add_mpi</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Perform a signed addition of MPIs: X = A + B. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The first summand. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The second summand. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="724" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="724" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a1a38a8d9f5052491df94d8010bd34955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_sub_mpi</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_sub_mpi</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Perform a signed subtraction of MPIs: X = A - B. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The minuend. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtrahend. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="738" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="738" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a1e6f6ba90e3c73ce6022ed7354443b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_add_int</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b)</argsstring>
        <name>mbedtls_mpi_add_int</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform a signed addition of an MPI and an integer: X = A + b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The first summand. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second summand.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="752" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="752" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a1a925403c039d920059297cfb4ad5bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_sub_int</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b)</argsstring>
        <name>mbedtls_mpi_sub_int</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform a signed subtraction of an MPI and an integer: X = A - b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The minuend. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtrahend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="767" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="767" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1aa9065cae8e3a287095b4043317f6b706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_mul_mpi</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_mul_mpi</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Perform a multiplication of two MPIs: X = A * B. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The first factor. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The second factor. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="782" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="782" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1ac4a22cb29f7e19dd4c823d1868f45eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_mul_int</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b)</argsstring>
        <name>mbedtls_mpi_mul_int</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform a multiplication of an MPI with an unsigned integer: X = A * b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The first factor. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second factor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="798" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="798" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a5f3db711e21b4fe2f1a009099478e796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_div_mpi</definition>
        <argsstring>(mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_div_mpi</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Perform a division with remainder of two MPIs: A = Q * B + R. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI for the quotient. This may be <computeroutput>NULL</computeroutput> if the value of the quotient is not needed. This must not alias A or B. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI for the remainder value. This may be <computeroutput>NULL</computeroutput> if the value of the remainder is not needed. This must not alias A or B. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The dividend. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The divisor. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a97e2c5a552770757da26b4a9b2e56f6c" kindref="member">MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</ref> if <computeroutput>B</computeroutput> equals zero. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="819" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="819" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a7ffac96dd27bbe62dba7c6307edd2c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_div_int</definition>
        <argsstring>(mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b)</argsstring>
        <name>mbedtls_mpi_div_int</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform a division with remainder of an MPI by an integer: A = Q * b + R. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI for the quotient. This may be <computeroutput>NULL</computeroutput> if the value of the quotient is not needed. This must not alias A. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI for the remainder value. This may be <computeroutput>NULL</computeroutput> if the value of the remainder is not needed. This must not alias A. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The dividend. This must point to an initialized MPi. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The divisor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a97e2c5a552770757da26b4a9b2e56f6c" kindref="member">MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</ref> if <computeroutput>b</computeroutput> equals zero. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="840" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="840" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a7b9db15054cb320c69dd065d3f17e674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_mod_mpi</definition>
        <argsstring>(mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_mod_mpi</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Perform a modular reduction. R = A mod B. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI for the residue value. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to compute the residue of. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The base of the modular reduction. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a97e2c5a552770757da26b4a9b2e56f6c" kindref="member">MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</ref> if <computeroutput>B</computeroutput> equals zero. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1ab7f06e7dfde557a02fe7137d4d47eed3" kindref="member">MBEDTLS_ERR_MPI_NEGATIVE_VALUE</ref> if <computeroutput>B</computeroutput> is negative. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="860" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="860" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a3d2a4a4c3d64490e26e05153ed798058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_mod_int</definition>
        <argsstring>(mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b)</argsstring>
        <name>mbedtls_mpi_mod_int</name>
        <param>
          <type><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform a modular reduction with respect to an integer. r = A mod b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the residue. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to compute the residue of. This must point to an initialized MPi. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer base of the modular reduction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a97e2c5a552770757da26b4a9b2e56f6c" kindref="member">MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</ref> if <computeroutput>b</computeroutput> equals zero. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1ab7f06e7dfde557a02fe7137d4d47eed3" kindref="member">MBEDTLS_ERR_MPI_NEGATIVE_VALUE</ref> if <computeroutput>b</computeroutput> is negative. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="879" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="879" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a25ed5a56082caad1a00caa133d59873d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_exp_mod</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *prec_RR)</argsstring>
        <name>mbedtls_mpi_exp_mod</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>N</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>prec_RR</declname>
        </param>
        <briefdescription>
<para>Perform a sliding-window exponentiation: X = A^E mod N. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. This must not alias E or N. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The base of the exponentiation. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>The base for the modular reduction. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prec_RR</parametername>
</parameternamelist>
<parameterdescription>
<para>A helper MPI depending solely on <computeroutput>N</computeroutput> which can be used to speed-up multiple modular exponentiations for the same value of <computeroutput>N</computeroutput>. This may be <computeroutput>NULL</computeroutput>. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized MPI. If it hasn&apos;t been used after the call to <ref refid="bignum_8h_1a99c7cca612b47dc4f3b96905c4f9d69e" kindref="member">mbedtls_mpi_init()</ref>, this function will compute the helper value and store it in <computeroutput>prec_RR</computeroutput> for reuse on subsequent calls to this function. Otherwise, the function will assume that <computeroutput>prec_RR</computeroutput> holds the helper value set by a previous call to <ref refid="bignum_8h_1a25ed5a56082caad1a00caa133d59873d" kindref="member">mbedtls_mpi_exp_mod()</ref>, and reuse it.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a3989a97b1d92d04dd05242731e6f37f2" kindref="member">MBEDTLS_ERR_MPI_BAD_INPUT_DATA</ref> if <computeroutput>N</computeroutput> is negative or even, or if <computeroutput>E</computeroutput> is negative. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failures. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="909" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="909" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a81b99c0a79d3e8ddedfd4a6ee37ceb1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_fill_random</definition>
        <argsstring>(mbedtls_mpi *X, size_t size, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_mpi_fill_random</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Fill an MPI with a number of random bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of random bytes to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG parameter to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on failure.</para>
</simplesect>
<simplesect kind="note"><para>The bytes obtained from the RNG are interpreted as a big-endian representation of an MPI; this can be relevant in applications like deterministic ECDSA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="930" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="930" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1ae5b3848bcca13fb8ac7c167098bce387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_random</definition>
        <argsstring>(mbedtls_mpi *X, mbedtls_mpi_sint min, const mbedtls_mpi *N, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_mpi_random</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a random number uniformly in a range.</para>
<para>This function generates a random number between <computeroutput>min</computeroutput> inclusive and <computeroutput>N</computeroutput> exclusive.</para>
<para>The procedure complies with RFC 6979 §3.3 (deterministic ECDSA) when the RNG is a suitably parametrized instance of HMAC_DRBG and <computeroutput>min</computeroutput> is <computeroutput>1</computeroutput>.</para>
<para><simplesect kind="note"><para>There are <computeroutput>N - min</computeroutput> possible outputs. The lower bound <computeroutput>min</computeroutput> can be reached, but the upper bound <computeroutput>N</computeroutput> cannot.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value to return. It must be nonnegative. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the range, exclusive. In other words, this is one plus the maximum value to return. <computeroutput>N</computeroutput> must be strictly larger than <computeroutput>min</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG parameter to be passed to <computeroutput>f_rng</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a3989a97b1d92d04dd05242731e6f37f2" kindref="member">MBEDTLS_ERR_MPI_BAD_INPUT_DATA</ref> if <computeroutput>min</computeroutput> or <computeroutput>N</computeroutput> is invalid or if they are incompatible. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a24f0dfbee8599f6e72852247d5681503" kindref="member">MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</ref> if the implementation was unable to find a suitable value within a limited number of attempts. This has a negligible probability if <computeroutput>N</computeroutput> is significantly larger than <computeroutput>min</computeroutput>, which is the case for all usual cryptographic applications. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="966" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="966" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1aeebcfa54676b583d2e767b1c01c9844f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_gcd</definition>
        <argsstring>(mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B)</argsstring>
        <name>mbedtls_mpi_gcd</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>G</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Compute the greatest common divisor: G = gcd(A, B) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The first operand. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The second operand. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="983" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="983" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1abb720bf24bc902fe6edd2ce0cd9ce6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_inv_mod</definition>
        <argsstring>(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N)</argsstring>
        <name>mbedtls_mpi_inv_mod</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Compute the modular inverse: X = A^-1 mod N. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to calculate the modular inverse of. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>The base of the modular inversion. This must point to an initialized MPI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a3989a97b1d92d04dd05242731e6f37f2" kindref="member">MBEDTLS_ERR_MPI_BAD_INPUT_DATA</ref> if <computeroutput>N</computeroutput> is less than or equal to one. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a24f0dfbee8599f6e72852247d5681503" kindref="member">MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</ref> if <computeroutput>A</computeroutput> has no modular inverse with respect to <computeroutput>N</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="1002" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="1002" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a2d32a12c4077db36a768ab44f11cd4f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_is_prime_ext</definition>
        <argsstring>(const mbedtls_mpi *X, int rounds, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_mpi_is_prime_ext</name>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rounds</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Miller-Rabin primality test. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If <computeroutput>X</computeroutput> is potentially generated by an adversary, for example when validating cryptographic parameters that you didn&apos;t generate yourself and that are supposed to be prime, then <computeroutput>rounds</computeroutput> should be at least the half of the security strength of the cryptographic algorithm. On the other hand, if <computeroutput>X</computeroutput> is chosen uniformly or non-adversarially (as is the case when mbedtls_mpi_gen_prime calls this function), then <computeroutput>rounds</computeroutput> can be much lower.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The MPI to check for primality. This must point to an initialized MPI. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bases to perform the Miller-Rabin primality test for. The probability of returning 0 on a composite is at most 2<superscript>-2*<computeroutput>rounds</computeroutput> </superscript>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG parameter to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t use a context parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful, i.e. <computeroutput>X</computeroutput> is probably prime. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a24f0dfbee8599f6e72852247d5681503" kindref="member">MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</ref> if <computeroutput>X</computeroutput> is not prime. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="1032" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="1032" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a877dfa42b7e14304630ae470626bdc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_gen_prime</definition>
        <argsstring>(mbedtls_mpi *X, size_t nbits, int flags, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_mpi_gen_prime</name>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Generate a prime number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI to store the generated prime in. This must point to an initialized MPi. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbits</parametername>
</parameternamelist>
<parameterdescription>
<para>The required size of the destination MPI in bits. This must be between <computeroutput>3</computeroutput> and <ref refid="bignum_8h_1a134ba62182ca105e273d465861f5a4d5" kindref="member">MBEDTLS_MPI_MAX_BITS</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask of flags of type <ref refid="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbe" kindref="member">mbedtls_mpi_gen_prime_flag_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG parameter to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t use a context parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful, in which case <computeroutput>X</computeroutput> holds a probably prime number. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if a memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a3989a97b1d92d04dd05242731e6f37f2" kindref="member">MBEDTLS_ERR_MPI_BAD_INPUT_DATA</ref> if <computeroutput>nbits</computeroutput> is not between <computeroutput>3</computeroutput> and <ref refid="bignum_8h_1a134ba62182ca105e273d465861f5a4d5" kindref="member">MBEDTLS_MPI_MAX_BITS</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="1065" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="1065" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bignum_8h_1a75b6f4376bdceb63ef5a65737c1a638c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_mpi_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_mpi_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>Checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if successful, or 1 if the test failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" line="1076" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h" declline="1076" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multi-precision integer library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_BIGNUM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_BIGNUM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_FS_IO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="bignum_8h_1a5ba505f058780047978dcdafd50d0b1e" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_FILE_IO_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="bignum_8h_1a3989a97b1d92d04dd05242731e6f37f2" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="bignum_8h_1a0ef495d9a083d986f00e5f604126382f" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_INVALID_CHARACTER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="bignum_8h_1a7fc9b9c20686c88b949d0a35c0def909" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="bignum_8h_1ab7f06e7dfde557a02fe7137d4d47eed3" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_NEGATIVE_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x000A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="bignum_8h_1a97e2c5a552770757da26b4a9b2e56f6c" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_DIVISION_BY_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x000C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="bignum_8h_1a24f0dfbee8599f6e72852247d5681503" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x000E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_MPI_ALLOC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="bignum_8h_1ab0a21d28acd6b59cc60a45547e2412af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_CHK(f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((ret<sp/>=<sp/>(f))<sp/>!=<sp/>0)<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>cleanup;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>size<sp/>MPIs<sp/>are<sp/>allowed<sp/>to<sp/>grow<sp/>to<sp/>in<sp/>number<sp/>of<sp/>limbs.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="bignum_8h_1a50617c9e123096b168d65a9d957b2ebe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_MAX_LIMBS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_MPI_WINDOW_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>window<sp/>size<sp/>used<sp/>for<sp/>modular<sp/>exponentiation.<sp/>Default:<sp/>2</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Minimum<sp/>value:<sp/>1.<sp/>Maximum<sp/>value:<sp/>6.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>Result<sp/>is<sp/>an<sp/>array<sp/>of<sp/>(<sp/>2<sp/>**<sp/>MBEDTLS_MPI_WINDOW_SIZE<sp/>)<sp/>MPIs<sp/>used</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>sliding<sp/>window<sp/>calculation.<sp/>(So<sp/>64<sp/>by<sp/>default)</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Reduction<sp/>in<sp/>size,<sp/>reduces<sp/>speed.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="bignum_8h_1a7cec1de79c434f1053488b1d3b9454c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_WINDOW_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_MPI_WINDOW_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_MPI_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>size<sp/>of<sp/>MPIs<sp/>allowed<sp/>in<sp/>bits<sp/>and<sp/>bytes<sp/>for<sp/>user-MPIs.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>(<sp/>Default:<sp/>512<sp/>bytes<sp/>=&gt;<sp/>4096<sp/>bits,<sp/>Maximum<sp/>tested:<sp/>2048<sp/>bytes<sp/>=&gt;<sp/>16384<sp/>bits<sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>Note:<sp/>Calculations<sp/>can<sp/>temporarily<sp/>result<sp/>in<sp/>larger<sp/>MPIs.<sp/>So<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>of<sp/>limbs<sp/>required<sp/>(MBEDTLS_MPI_MAX_LIMBS)<sp/>is<sp/>higher.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_MAX_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1024<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_MPI_MAX_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="bignum_8h_1a134ba62182ca105e273d465861f5a4d5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_MAX_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(8<sp/>*<sp/>MBEDTLS_MPI_MAX_SIZE)<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>When<sp/>reading<sp/>from<sp/>files<sp/>with<sp/>mbedtls_mpi_read_file()<sp/>and<sp/>writing<sp/>to<sp/>files<sp/>with</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>mbedtls_mpi_write_file()<sp/>the<sp/>buffer<sp/>should<sp/>have<sp/>space</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>for<sp/>a<sp/>(short)<sp/>label,<sp/>the<sp/>MPI<sp/>(in<sp/>the<sp/>provided<sp/>radix),<sp/>the<sp/>newline</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>characters<sp/>and<sp/>the<sp/>&apos;\0&apos;.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>By<sp/>default<sp/>we<sp/>assume<sp/>at<sp/>least<sp/>a<sp/>10<sp/>char<sp/>label,<sp/>a<sp/>minimum<sp/>radix<sp/>of<sp/>10</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>(decimal)<sp/>and<sp/>a<sp/>maximum<sp/>of<sp/>4096<sp/>bit<sp/>numbers<sp/>(1234<sp/>decimal<sp/>chars).</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>Autosized<sp/>at<sp/>compile<sp/>time<sp/>for<sp/>at<sp/>least<sp/>a<sp/>10<sp/>char<sp/>label,<sp/>a<sp/>minimum<sp/>radix</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>of<sp/>10<sp/>(decimal)<sp/>for<sp/>a<sp/>number<sp/>of<sp/>MBEDTLS_MPI_MAX_BITS<sp/>size.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>This<sp/>used<sp/>to<sp/>be<sp/>statically<sp/>sized<sp/>to<sp/>1250<sp/>for<sp/>a<sp/>maximum<sp/>of<sp/>4096<sp/>bit</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>numbers<sp/>(1234<sp/>decimal<sp/>chars).</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>Calculate<sp/>using<sp/>the<sp/>formula:</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>MBEDTLS_MPI_RW_BUFFER_SIZE<sp/>=<sp/>ceil(MBEDTLS_MPI_MAX_BITS<sp/>/<sp/>ln(10)<sp/>*<sp/>ln(2))<sp/>+</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LabelSize<sp/>+<sp/>6</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="bignum_8h_1a5e807323a5823be0f1e7eef38dce9cb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_MAX_BITS_SCALE100<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(100<sp/>*<sp/>MBEDTLS_MPI_MAX_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="bignum_8h_1a844008ccbe6672f636d250230755d5ee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_LN_2_DIV_LN_10_SCALE100<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>332</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="bignum_8h_1a95aa572170385895daf25b70c6f0d63f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_RW_BUFFER_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((MBEDTLS_MPI_MAX_BITS_SCALE100<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LN_2_DIV_LN_10_SCALE100<sp/>-<sp/>1)<sp/>/<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_LN_2_DIV_LN_10_SCALE100)<sp/>+<sp/>10<sp/>+<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>Define<sp/>the<sp/>base<sp/>integer<sp/>type,<sp/>architecture-wise.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>32<sp/>or<sp/>64-bit<sp/>integer<sp/>types<sp/>can<sp/>be<sp/>forced<sp/>regardless<sp/>of<sp/>the<sp/>underlying</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>architecture<sp/>by<sp/>defining<sp/>MBEDTLS_HAVE_INT32<sp/>or<sp/>MBEDTLS_HAVE_INT64</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>respectively<sp/>and<sp/>undefining<sp/>MBEDTLS_HAVE_ASM.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>Double-width<sp/>integers<sp/>(e.g.<sp/>128-bit<sp/>in<sp/>64-bit<sp/>architectures)<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>disabled<sp/>by<sp/>defining<sp/>MBEDTLS_NO_UDBL_DIVISION.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_HAVE_INT32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(_M_AMD64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Always<sp/>choose<sp/>64-bit<sp/>when<sp/>using<sp/>MSC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(MBEDTLS_HAVE_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MBEDTLS_HAVE_INT64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_HAVE_INT64<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_UINT_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT64_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__amd64__)<sp/>||<sp/>defined(__x86_64__)<sp/><sp/><sp/><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__ppc64__)<sp/>||<sp/>defined(__powerpc64__)<sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__ia64__)<sp/><sp/>||<sp/>defined(__alpha__)<sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(__sparc__)<sp/>&amp;&amp;<sp/>defined(__arch64__))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__s390x__)<sp/>||<sp/>defined(__mips64)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__aarch64__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(MBEDTLS_HAVE_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MBEDTLS_HAVE_INT64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_HAVE_INT64<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_UINT_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT64_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(MBEDTLS_NO_UDBL_DIVISION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mbedtls_t_udbl<sp/>defined<sp/>as<sp/>128-bit<sp/>unsigned<sp/>int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1af64c95417575870c4f465c0a663fb51b" kindref="member">mbedtls_t_udbl</ref><sp/>__attribute__((mode(TI)));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MBEDTLS_HAVE_UDBL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_NO_UDBL_DIVISION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(__ARMCC_VERSION)<sp/>&amp;&amp;<sp/>defined(__aarch64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>__ARMCC_VERSION<sp/>is<sp/>defined<sp/>for<sp/>both<sp/>armcc<sp/>and<sp/>armclang<sp/>and</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>__aarch64__<sp/>is<sp/>only<sp/>defined<sp/>by<sp/>armclang<sp/>when<sp/>compiling<sp/>64-bit<sp/>code</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(MBEDTLS_HAVE_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MBEDTLS_HAVE_INT64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_HAVE_INT64<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_UINT_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT64_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined(MBEDTLS_NO_UDBL_DIVISION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mbedtls_t_udbl<sp/>defined<sp/>as<sp/>128-bit<sp/>unsigned<sp/>int<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__uint128_t<sp/><ref refid="bignum_8h_1af64c95417575870c4f465c0a663fb51b" kindref="member">mbedtls_t_udbl</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MBEDTLS_HAVE_UDBL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_NO_UDBL_DIVISION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(MBEDTLS_HAVE_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Force<sp/>64-bit<sp/>integers<sp/>with<sp/>unknown<sp/>compiler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_UINT_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT64_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_HAVE_INT32<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_HAVE_INT64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>to<sp/>32-bit<sp/>compilation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>!defined(MBEDTLS_HAVE_INT32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="bignum_8h_1ae9ed748679544c60d2b429ee2bc93818" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MBEDTLS_HAVE_INT32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_HAVE_INT32<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref>;</highlight></codeline>
<codeline lineno="169" refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref>;</highlight></codeline>
<codeline lineno="170" refid="bignum_8h_1a179dabc23075419e87bfcdd8dafe2ea4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_MPI_UINT_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT32_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>!defined(MBEDTLS_NO_UDBL_DIVISION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="bignum_8h_1af64c95417575870c4f465c0a663fb51b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="bignum_8h_1af64c95417575870c4f465c0a663fb51b" kindref="member">mbedtls_t_udbl</ref>;</highlight></codeline>
<codeline lineno="173" refid="bignum_8h_1ae1ace2caabfb2c45a1dab0a8f0bd6b66" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MBEDTLS_HAVE_UDBL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_NO_UDBL_DIVISION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_HAVE_INT64<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>Sanity<sp/>check<sp/>that<sp/>exactly<sp/>one<sp/>of<sp/>MBEDTLS_HAVE_INT32<sp/>or<sp/>MBEDTLS_HAVE_INT64<sp/>is<sp/>defined,</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>so<sp/>that<sp/>code<sp/>elsewhere<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!(defined(MBEDTLS_HAVE_INT32)<sp/>||<sp/>defined(MBEDTLS_HAVE_INT64)))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(MBEDTLS_HAVE_INT32)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_HAVE_INT64))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Only<sp/>32-bit<sp/>or<sp/>64-bit<sp/>limbs<sp/>are<sp/>supported<sp/>in<sp/>bignum&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="structmbedtls__mpi" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>{</highlight></codeline>
<codeline lineno="212" refid="structmbedtls__mpi_1a7597ed1635cebc8fad34443cdef163bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(p);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="structmbedtls__mpi_1a9dd5aa4e2912cd31a4e329b7fe910c93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(s);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="structmbedtls__mpi_1ac90efc6ffef8518d8da977a74ea72a4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(n);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>that<sp/>MBEDTLS_MPI_MAX_LIMBS<sp/>fits<sp/>in<sp/>n.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>the<sp/>same<sp/>limit<sp/>value<sp/>on<sp/>all<sp/>platforms<sp/>so<sp/>that<sp/>we<sp/>don&apos;t<sp/>have<sp/>to</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>think<sp/>about<sp/>different<sp/>behavior<sp/>on<sp/>the<sp/>rare<sp/>platforms<sp/>where</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>unsigned<sp/>short<sp/>can<sp/>store<sp/>values<sp/>larger<sp/>than<sp/>the<sp/>minimum<sp/>required<sp/>by</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>C<sp/>language,<sp/>which<sp/>is<sp/>65535.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MBEDTLS_MPI_MAX_LIMBS<sp/>&gt;<sp/>65535</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;MBEDTLS_MPI_MAX_LIMBS<sp/>&gt;<sp/>65535<sp/>is<sp/>not<sp/>supported&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="bignum_8h_1af4705a9a02c39bfbeceef568ddd29c0e" kindref="member">mbedtls_mpi</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a99c7cca612b47dc4f3b96905c4f9d69e" kindref="member">mbedtls_mpi_init</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1abffd5d8382cb86c089a1ef2bebb90f9f" kindref="member">mbedtls_mpi_free</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a22263d90d838cb58f271aa8f1920843d" kindref="member">mbedtls_mpi_grow</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nblimbs);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1abaaef229c95711a53b2f38eff0a2c14a" kindref="member">mbedtls_mpi_shrink</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nblimbs);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a2f722863f9fd9098690f8a9db9962044" kindref="member">mbedtls_mpi_copy</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Y);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a60d0c82301d6cf50e69808b6a3c5cd63" kindref="member">mbedtls_mpi_swap</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Y);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a623c565706f22d8fbcc665ba49a51c7c" kindref="member">mbedtls_mpi_safe_cond_assign</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Y,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>assign);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a1ef22dc19811e305fbc557e150ca5699" kindref="member">mbedtls_mpi_safe_cond_swap</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Y,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>swap);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a65644d139404325130491759a5651f6d" kindref="member">mbedtls_mpi_lset</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref><sp/>z);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1abfc40fb7192507bc0eeb9f24e8e69c2d" kindref="member">mbedtls_mpi_get_bit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a39a475e7957e7a60993fc6e801d9913b" kindref="member">mbedtls_mpi_set_bit</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1aa67117fd61db9570746dc2ffca88d004" kindref="member">mbedtls_mpi_lsb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a681ab2710d044c0cb091b6497c6ed395" kindref="member">mbedtls_mpi_bitlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a538110c9da02704d34d67a07d16fb3ab" kindref="member">mbedtls_mpi_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a15efd3f2f86700b69f6c18d34ac05758" kindref="member">mbedtls_mpi_read_string</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1ab2197e4833449c3e505ec8d11b348913" kindref="member">mbedtls_mpi_write_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_FS_IO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1acb4d0ed28a946cfa83219ae8709941d4" kindref="member">mbedtls_mpi_read_file</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix,<sp/>FILE<sp/>*fin);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1ab23e312f4a0479c8b63a4bc9328e1324" kindref="member">mbedtls_mpi_write_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix,<sp/>FILE<sp/>*fout);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_FS_IO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a68f62c99e53eb034daea486e5d5d83ca" kindref="member">mbedtls_mpi_read_binary</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a20166f230e86c46cf913d3c4e2650df0" kindref="member">mbedtls_mpi_read_binary_le</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1aceb4aeeb376a582a5e904135205ada44" kindref="member">mbedtls_mpi_write_binary</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a54b05af108b70cd6aebf76e8de359d6b" kindref="member">mbedtls_mpi_write_binary_le</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a8d48a56155412dda56e67256be4d10d9" kindref="member">mbedtls_mpi_shift_l</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1aee1140147b1e807645cebf64ebded168" kindref="member">mbedtls_mpi_shift_r</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a81ea45be21ea77f5d8deae9e99d9a11b" kindref="member">mbedtls_mpi_cmp_abs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Y);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a762dd8add46384d4935a4aecc125096e" kindref="member">mbedtls_mpi_cmp_mpi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Y);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1ac62b0718700ff201b4583f8a0a04f319" kindref="member">mbedtls_mpi_lt_mpi_ct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Y,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*ret);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1ad0e7f426326afc7d3fde309a7a8d82fa" kindref="member">mbedtls_mpi_cmp_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref><sp/>z);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a5ddb2c6dc59dd39874695e04ff40afdb" kindref="member">mbedtls_mpi_add_abs</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1ad5840808639d50a98edbede345251293" kindref="member">mbedtls_mpi_sub_abs</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a5fd1cfd561c1ada500097f860aa4fe68" kindref="member">mbedtls_mpi_add_mpi</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a1a38a8d9f5052491df94d8010bd34955" kindref="member">mbedtls_mpi_sub_mpi</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a1e6f6ba90e3c73ce6022ed7354443b2a" kindref="member">mbedtls_mpi_add_int</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref><sp/>b);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a1a925403c039d920059297cfb4ad5bad" kindref="member">mbedtls_mpi_sub_int</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref><sp/>b);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1aa9065cae8e3a287095b4043317f6b706" kindref="member">mbedtls_mpi_mul_mpi</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1ac4a22cb29f7e19dd4c823d1868f45eab" kindref="member">mbedtls_mpi_mul_int</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref><sp/>b);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a5f3db711e21b4fe2f1a009099478e796" kindref="member">mbedtls_mpi_div_mpi</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Q,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a7ffac96dd27bbe62dba7c6307edd2c60" kindref="member">mbedtls_mpi_div_int</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*Q,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref><sp/>b);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a7b9db15054cb320c69dd065d3f17e674" kindref="member">mbedtls_mpi_mod_mpi</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a3d2a4a4c3d64490e26e05153ed798058" kindref="member">mbedtls_mpi_mod_int</ref>(<ref refid="bignum_8h_1ab008e969fa0e7656b594735c37f2eaf4" kindref="member">mbedtls_mpi_uint</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref><sp/>b);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a25ed5a56082caad1a00caa133d59873d" kindref="member">mbedtls_mpi_exp_mod</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*E,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*N,</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*prec_RR);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a81b99c0a79d3e8ddedfd4a6ee37ceb1e" kindref="member">mbedtls_mpi_fill_random</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1ae5b3848bcca13fb8ac7c167098bce387" kindref="member">mbedtls_mpi_random</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1a2d5a05d478c13940197ac130b8a0fb4d" kindref="member">mbedtls_mpi_sint</ref><sp/>min,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*N,</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1aeebcfa54676b583d2e767b1c01c9844f" kindref="member">mbedtls_mpi_gcd</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*G,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*B);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1abb720bf24bc902fe6edd2ce0cd9ce6e3" kindref="member">mbedtls_mpi_inv_mod</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*A,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*N);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a2d32a12c4077db36a768ab44f11cd4f5" kindref="member">mbedtls_mpi_is_prime_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rounds,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="1041" refid="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbe" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1042" refid="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbea4c612221f461c62638c2ad28b3e15117" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbea4c612221f461c62638c2ad28b3e15117" kindref="member">MBEDTLS_MPI_GEN_PRIME_FLAG_DH</ref><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>0x0001,<sp/></highlight></codeline>
<codeline lineno="1043" refid="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbea7fe292aeae0a99eb56fb729e3623fb5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbea7fe292aeae0a99eb56fb729e3623fb5a" kindref="member">MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR</ref><sp/>=<sp/>0x0002,<sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}<sp/><ref refid="bignum_8h_1a3e352ac73d5a3d3b8af8d50bb1338dbe" kindref="member">mbedtls_mpi_gen_prime_flag_t</ref>;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a877dfa42b7e14304630ae470626bdc2c" kindref="member">mbedtls_mpi_gen_prime</ref>(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SELF_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bignum_8h_1a75b6f4376bdceb63ef5a65737c1a638c" kindref="member">mbedtls_mpi_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SELF_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>bignum.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/bignum.h"/>
  </compounddef>
</doxygen>
