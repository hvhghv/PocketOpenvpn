<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="crypto__types_8h" kind="file" language="C++">
    <compoundname>crypto_types.h</compoundname>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="crypto__platform_8h" local="yes">crypto_platform.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="crypto_8h" local="yes">crypto.h</includedby>
    <includedby refid="crypto__driver__common_8h" local="yes">crypto_driver_common.h</includedby>
    <includedby refid="crypto__extra_8h" local="yes">crypto_extra.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="18">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="12">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="1">
        <label>crypto_types.h</label>
        <link refid="crypto__types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="2">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="20">
        <label>crypto_platform.h</label>
        <link refid="crypto__platform_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="5">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="19">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="21">
        <label>psa/build_info.h</label>
        <link refid="psa_2build__info_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="6">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22">
        <label>crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="15">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="26">
        <label>crypto_extra.h</label>
        <link refid="crypto__extra_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="2">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>crypto_types.h</label>
        <link refid="crypto__types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="19">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>crypto_builtin_primitives.h</label>
        <link refid="crypto__builtin__primitives_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="23">
        <label>crypto_driver_contexts_key_derivation.h</label>
        <link refid="crypto__driver__contexts__key__derivation_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="16">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="7">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="18">
        <label>crypto_driver_contexts_primitives.h</label>
        <link refid="crypto__driver__contexts__primitives_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>crypto_driver_common.h</label>
        <link refid="crypto__driver__common_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>crypto_builtin_key_derivation.h</label>
        <link refid="crypto__builtin__key__derivation_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>crypto_se_driver.h</label>
        <link refid="crypto__se__driver_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t psa_status_t</definition>
        <argsstring></argsstring>
        <name>psa_status_t</name>
        <briefdescription>
<para>Function return status. </para>
        </briefdescription>
        <detaileddescription>
<para>This is either <ref refid="group__error_1ga4cc859e2c66ca381c7418db3527a65e1" kindref="member">PSA_SUCCESS</ref> (which is zero), indicating success, or a small negative value indicating that an error occurred. Errors are encoded as one of the <computeroutput>PSA_ERROR_xxx</computeroutput> values defined here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="52" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t psa_key_type_t</definition>
        <argsstring></argsstring>
        <name>psa_key_type_t</name>
        <briefdescription>
<para>Encoding of a key type. </para>
        </briefdescription>
        <detaileddescription>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_KEY_TYPE_xxx</computeroutput>.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="71" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_ecc_family_t</definition>
        <argsstring></argsstring>
        <name>psa_ecc_family_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of PSA elliptic curve family identifiers.</para>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_ECC_FAMILY_xxx</computeroutput>.</para>
<para>The curve identifier is required to create an ECC key using the <ref refid="group__crypto__types_1ga0b6f5d4d5037c54ffa850d8059c32df0" kindref="member">PSA_KEY_TYPE_ECC_KEY_PAIR()</ref> or <ref refid="group__crypto__types_1gad54c03d3b47020e571a72cd01d978cf2" kindref="member">PSA_KEY_TYPE_ECC_PUBLIC_KEY()</ref> macros.</para>
<para>Values defined by this standard will never be in the range 0x80-0xff. Vendors who define additional families must use an encoding in this range.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="90" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_dh_family_t</definition>
        <argsstring></argsstring>
        <name>psa_dh_family_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of PSA Diffie-Hellman group family identifiers.</para>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_DH_FAMILY_xxx</computeroutput>.</para>
<para>The group identifier is required to create a Diffie-Hellman key using the <ref refid="group__crypto__types_1gab4f857c4cd56f5fe65ded421e61bcc8c" kindref="member">PSA_KEY_TYPE_DH_KEY_PAIR()</ref> or <ref refid="group__crypto__types_1gaa22f0f2ea89b929f2fadc19890cc5d5c" kindref="member">PSA_KEY_TYPE_DH_PUBLIC_KEY()</ref> macros.</para>
<para>Values defined by this standard will never be in the range 0x80-0xff. Vendors who define additional families must use an encoding in this range.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="109" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t psa_algorithm_t</definition>
        <argsstring></argsstring>
        <name>psa_algorithm_t</name>
        <briefdescription>
<para>Encoding of a cryptographic algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_ALG_xxx</computeroutput>.</para>
<para>For algorithms that can be applied to multiple key types, this type does not encode the key type. For example, for symmetric ciphers based on a block cipher, <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> encodes the block cipher mode and the padding mode while the block cipher itself is encoded via <ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="127" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t psa_key_lifetime_t</definition>
        <argsstring></argsstring>
        <name>psa_key_lifetime_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of key lifetimes.</para>
<para>The lifetime of a key indicates where it is stored and what system actions may create and destroy it.</para>
<para>Lifetime values have the following structure:<itemizedlist>
<listitem><para>Bits 0-7 (<ref refid="group__key__lifetimes_1ga1679b7e418ba86b312291d689153dd2a" kindref="member">PSA_KEY_LIFETIME_GET_PERSISTENCE</ref>(<computeroutput>lifetime</computeroutput>)): persistence level. This value indicates what device management actions can cause it to be destroyed. In particular, it indicates whether the key is <emphasis>volatile</emphasis> or <emphasis>persistent</emphasis>. See <ref refid="group__key__lifetimes_1ga183689a3018896e1e2e4f2bcc57bcff3" kindref="member">psa_key_persistence_t</ref> for more information.</para>
</listitem><listitem><para>Bits 8-31 (<ref refid="group__key__lifetimes_1ga4bd83feb0ca4853eee26d5394e69a5de" kindref="member">PSA_KEY_LIFETIME_GET_LOCATION</ref>(<computeroutput>lifetime</computeroutput>)): location indicator. This value indicates which part of the system has access to the key material and can perform operations using the key. See <ref refid="group__key__lifetimes_1ga5e700601f686237a8d1e29363ae543d5" kindref="member">psa_key_location_t</ref> for more information.</para>
</listitem></itemizedlist>
</para>
<para>Volatile keys are automatically destroyed when the application instance terminates or on a power reset of the device. Persistent keys are preserved until the application explicitly destroys them or until an integration-specific device management event occurs (for example, a factory reset).</para>
<para>Persistent keys have a key identifier of type <ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref>. This identifier remains valid throughout the lifetime of the key, even if the application instance that created the key terminates. The application can call <ref refid="crypto__compat_8h_1a950f0f358a0a012b043d02e55faed7c0" kindref="member">psa_open_key()</ref> to open a persistent key that it created previously.</para>
<para>The default lifetime of a key is <ref refid="group__key__lifetimes_1ga8b438870ba69489b685730d346455108" kindref="member">PSA_KEY_LIFETIME_VOLATILE</ref>. The lifetime <ref refid="group__key__lifetimes_1ga3713a01c5fcd5f7eae46ff22ceaf6d02" kindref="member">PSA_KEY_LIFETIME_PERSISTENT</ref> is supported if persistent storage is available. Other lifetime values may be supported depending on the library configuration.</para>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_KEY_LIFETIME_xxx</computeroutput>.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="176" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__key__lifetimes_1ga183689a3018896e1e2e4f2bcc57bcff3" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_key_persistence_t</definition>
        <argsstring></argsstring>
        <name>psa_key_persistence_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of key persistence levels.</para>
<para>What distinguishes different persistence levels is what device management events may cause keys to be destroyed. <emphasis>Volatile</emphasis> keys are destroyed by a power reset. Persistent keys may be destroyed by events such as a transfer of ownership or a factory reset. What management events actually affect persistent keys at different levels is outside the scope of the PSA Cryptography specification.</para>
<para>The PSA Cryptography specification defines the following values of persistence levels:<itemizedlist>
<listitem><para><computeroutput>0</computeroutput> = <ref refid="group__key__lifetimes_1gaf3d1317436d19a15e7f2be1b9827edfc" kindref="member">PSA_KEY_PERSISTENCE_VOLATILE</ref>: volatile key. A volatile key is automatically destroyed by the implementation when the application instance terminates. In particular, a volatile key is automatically destroyed on a power reset of the device.</para>
</listitem><listitem><para><computeroutput>1</computeroutput> = <ref refid="group__key__lifetimes_1gafc5d5c94f98e885ae5a2bb789deb4d91" kindref="member">PSA_KEY_PERSISTENCE_DEFAULT</ref>: persistent key with a default lifetime.</para>
</listitem><listitem><para><computeroutput>2-254</computeroutput>: currently not supported by Mbed TLS.</para>
</listitem><listitem><para><computeroutput>255</computeroutput> = <ref refid="group__key__lifetimes_1ga6be0f97ba7fb86f626b3fd2b03a1ac79" kindref="member">PSA_KEY_PERSISTENCE_READ_ONLY</ref>: read-only or write-once key. A key with this persistence level cannot be destroyed. Mbed TLS does not currently offer a way to create such keys, but integrations of Mbed TLS can use it for built-in keys that the application cannot modify (for example, a hardware unique key (HUK)).</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Key persistence levels are 8-bit values. Key management interfaces operate on lifetimes (type <ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref>) which encode the persistence as the lower 8 bits of a 32-bit value.</para>
</simplesect>
<simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="212" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__key__lifetimes_1ga5e700601f686237a8d1e29363ae543d5" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t psa_key_location_t</definition>
        <argsstring></argsstring>
        <name>psa_key_location_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of key location indicators.</para>
<para>If an integration of Mbed TLS can make calls to external cryptoprocessors such as secure elements, the location of a key indicates which secure element performs the operations on the key. Depending on the design of the secure element, the key material may be stored either in the secure element, or in wrapped (encrypted) form alongside the key metadata in the primary local storage.</para>
<para>The PSA Cryptography API specification defines the following values of location indicators:<itemizedlist>
<listitem><para><computeroutput>0</computeroutput>: primary local storage. This location is always available. The primary local storage is typically the same storage area that contains the key metadata.</para>
</listitem><listitem><para><computeroutput>1</computeroutput>: primary secure element. Integrations of Mbed TLS should support this value if there is a secure element attached to the operating environment. As a guideline, secure elements may provide higher resistance against side channel and physical attacks than the primary local storage, but may have restrictions on supported key types, sizes, policies and operations and may have different performance characteristics.</para>
</listitem><listitem><para><computeroutput>2-0x7fffff:</computeroutput> other locations defined by a PSA specification. The PSA Cryptography API does not currently assign any meaning to these locations, but future versions of that specification or other PSA specifications may do so.</para>
</listitem><listitem><para><computeroutput>0x800000-0xffffff</computeroutput>: vendor-defined locations. No PSA specification will assign a meaning to locations in this range.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Key location indicators are 24-bit values. Key management interfaces operate on lifetimes (type <ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref>) which encode the location as the upper 24 bits of a 32-bit value.</para>
</simplesect>
<simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="253" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t psa_key_id_t</definition>
        <argsstring></argsstring>
        <name>psa_key_id_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of identifiers of persistent keys.</para>
<para><itemizedlist>
<listitem><para>Applications may freely choose key identifiers in the range <ref refid="group__key__lifetimes_1ga2b062011d930839695577138858ec136" kindref="member">PSA_KEY_ID_USER_MIN</ref> to <ref refid="group__key__lifetimes_1ga9cb2bf7c6f7abfacccff4fd31dcfd564" kindref="member">PSA_KEY_ID_USER_MAX</ref>.</para>
</listitem><listitem><para>The implementation may define additional key identifiers in the range <ref refid="group__key__lifetimes_1ga1f7e6d90f523bef964d207c1d3236e0b" kindref="member">PSA_KEY_ID_VENDOR_MIN</ref> to <ref refid="group__key__lifetimes_1ga3afb6bb4644c995cf95309a71e7baeb1" kindref="member">PSA_KEY_ID_VENDOR_MAX</ref>.</para>
</listitem><listitem><para>0 is reserved as an invalid key identifier.</para>
</listitem><listitem><para>Key identifiers outside these ranges are reserved for future use.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to how values are allocated must require careful consideration to allow backward compatibility. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="268" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" prot="public" static="no">
        <type><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref></type>
        <definition>typedef psa_key_id_t mbedtls_svc_key_id_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_svc_key_id_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of key identifiers as seen inside the PSA Crypto implementation.</para>
<para>When PSA Crypto is built as a library inside an application, this type is identical to <ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref>. When PSA Crypto is built as a service that can store keys on behalf of multiple clients, this type encodes the <ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref> value seen by each client application as well as extra information that identifies the client that owns the key.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="285" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t psa_key_usage_t</definition>
        <argsstring></argsstring>
        <name>psa_key_usage_t</name>
        <briefdescription>
<para>Encoding of permitted usage on a key. </para>
        </briefdescription>
        <detaileddescription>
<para>Values of this type are generally constructed as bitwise-ors of macros called <computeroutput>PSA_KEY_USAGE_xxx</computeroutput>.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="316" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" prot="public" static="no">
        <type>struct <ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_s</ref></type>
        <definition>typedef struct psa_key_attributes_s psa_key_attributes_t</definition>
        <argsstring></argsstring>
        <name>psa_key_attributes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of a structure containing key attributes.</para>
<para>This is an opaque structure that can represent the metadata of a key object. Metadata that can be stored in attributes includes:<itemizedlist>
<listitem><para>The location of the key in storage, indicated by its key identifier and its lifetime.</para>
</listitem><listitem><para>The key&apos;s policy, comprising usage flags and a specification of the permitted algorithm(s).</para>
</listitem><listitem><para>Information about the key itself: the key type and its size.</para>
</listitem><listitem><para>Additional implementation-defined attributes.</para>
</listitem></itemizedlist>
</para>
<para>The actual key material is not considered an attribute of a key. Key attributes do not contain information that is generally considered highly confidential.</para>
<para>An attribute structure works like a simple data structure where each function <computeroutput>psa_set_key_xxx</computeroutput> sets a field and the corresponding function <computeroutput>psa_get_key_xxx</computeroutput> retrieves the value of the corresponding field. However, a future version of the library may report values that are equivalent to the original one, but have a different encoding. Invalid values may be mapped to different, also invalid values.</para>
<para>An attribute structure may contain references to auxiliary resources, for example pointers to allocated memory or indirect references to pre-calculated values. In order to free such resources, the application must call <ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes()</ref>. As an exception, calling <ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes()</ref> on an attribute structure is optional if the structure has only been modified by the following functions since it was initialized or last reset with <ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes()</ref>:<itemizedlist>
<listitem><para><ref refid="group__attributes_1gae48fcfdc72a23e7499957d7f54ff5a64" kindref="member">psa_set_key_id()</ref></para>
</listitem><listitem><para><ref refid="group__attributes_1gac03ccf09ca6d36cc3d5b43f8303db6f7" kindref="member">psa_set_key_lifetime()</ref></para>
</listitem><listitem><para><ref refid="group__attributes_1ga6857ef0ecb3fa844d4536939d9c64025" kindref="member">psa_set_key_type()</ref></para>
</listitem><listitem><para><ref refid="group__attributes_1gaf61683ac87f87687a40262b5afbfa018" kindref="member">psa_set_key_bits()</ref></para>
</listitem><listitem><para><ref refid="group__attributes_1ga42a65b3c4522ce9b67ea5ea7720e17de" kindref="member">psa_set_key_usage_flags()</ref></para>
</listitem><listitem><para><ref refid="group__attributes_1gaeb8341ca52baa0279475ea3fd3bcdc98" kindref="member">psa_set_key_algorithm()</ref></para>
</listitem></itemizedlist>
</para>
<para>Before calling any function on a key attribute structure, the application must initialize it by any of the following means:<itemizedlist>
<listitem><para>Set the structure to all-bits-zero, for example: <programlisting><codeline><highlight class="normal">psa_key_attributes_t<sp/>attributes;</highlight></codeline>
<codeline><highlight class="normal">memset(&amp;attributes,<sp/>0,<sp/>sizeof(attributes));</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to logical zero values, for example: <programlisting><codeline><highlight class="normal">psa_key_attributes_t<sp/>attributes<sp/>=<sp/>{0};</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Initialize the structure to the initializer <ref refid="group__attributes_1gac45b6c1e7228a1f425338279ee679c4e" kindref="member">PSA_KEY_ATTRIBUTES_INIT</ref>, for example: <programlisting><codeline><highlight class="normal">psa_key_attributes_t<sp/>attributes<sp/>=<sp/>PSA_KEY_ATTRIBUTES_INIT;</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Assign the result of the function <ref refid="group__attributes_1ga06966a8812aacd323ccdf06dbb43667d" kindref="member">psa_key_attributes_init()</ref> to the structure, for example: <programlisting><codeline><highlight class="normal">psa_key_attributes_t<sp/>attributes;</highlight></codeline>
<codeline><highlight class="normal">attributes<sp/>=<sp/>psa_key_attributes_init();</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>A freshly initialized attribute structure contains the following values:</para>
<para><itemizedlist>
<listitem><para>lifetime: <ref refid="group__key__lifetimes_1ga8b438870ba69489b685730d346455108" kindref="member">PSA_KEY_LIFETIME_VOLATILE</ref>.</para>
</listitem><listitem><para>key identifier: 0 (which is not a valid key identifier).</para>
</listitem><listitem><para>type: <computeroutput>0</computeroutput> (meaning that the type is unspecified).</para>
</listitem><listitem><para>key size: <computeroutput>0</computeroutput> (meaning that the size is unspecified).</para>
</listitem><listitem><para>usage flags: <computeroutput>0</computeroutput> (which allows no usage except exporting a public key).</para>
</listitem><listitem><para>algorithm: <computeroutput>0</computeroutput> (which allows no cryptographic usage, but allows exporting).</para>
</listitem></itemizedlist>
</para>
<para>A typical sequence to create a key is as follows:<orderedlist>
<listitem><para>Create and initialize an attribute structure.</para>
</listitem><listitem><para>If the key is persistent, call <ref refid="group__attributes_1gae48fcfdc72a23e7499957d7f54ff5a64" kindref="member">psa_set_key_id()</ref>. Also call <ref refid="group__attributes_1gac03ccf09ca6d36cc3d5b43f8303db6f7" kindref="member">psa_set_key_lifetime()</ref> to place the key in a non-default location.</para>
</listitem><listitem><para>Set the key policy with <ref refid="group__attributes_1ga42a65b3c4522ce9b67ea5ea7720e17de" kindref="member">psa_set_key_usage_flags()</ref> and <ref refid="group__attributes_1gaeb8341ca52baa0279475ea3fd3bcdc98" kindref="member">psa_set_key_algorithm()</ref>.</para>
</listitem><listitem><para>Set the key type with <ref refid="group__attributes_1ga6857ef0ecb3fa844d4536939d9c64025" kindref="member">psa_set_key_type()</ref>. Skip this step if copying an existing key with <ref refid="group__key__management_1gaac27a547ca634d439e89b17aacc99943" kindref="member">psa_copy_key()</ref>.</para>
</listitem><listitem><para>When generating a random key with <ref refid="group__random_1ga1f154687b24e5508d97681cdd17946a8" kindref="member">psa_generate_key()</ref> or deriving a key with <ref refid="group__key__derivation_1gada7a6e17222ea9e7a6be6864a00316e1" kindref="member">psa_key_derivation_output_key()</ref>, set the desired key size with <ref refid="group__attributes_1gaf61683ac87f87687a40262b5afbfa018" kindref="member">psa_set_key_bits()</ref>.</para>
</listitem><listitem><para>Call a key creation function: <ref refid="group__import__export_1ga0336ea76bf30587ab204a8296462327b" kindref="member">psa_import_key()</ref>, <ref refid="group__random_1ga1f154687b24e5508d97681cdd17946a8" kindref="member">psa_generate_key()</ref>, <ref refid="group__key__derivation_1gada7a6e17222ea9e7a6be6864a00316e1" kindref="member">psa_key_derivation_output_key()</ref> or <ref refid="group__key__management_1gaac27a547ca634d439e89b17aacc99943" kindref="member">psa_copy_key()</ref>. This function reads the attribute structure, creates a key with these attributes, and outputs a key identifier to the newly created key.</para>
</listitem><listitem><para>The attribute structure is now no longer necessary. You may call <ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes()</ref>, although this is optional with the workflow presented here because the attributes currently defined in this specification do not require any additional resources beyond the structure itself.</para>
</listitem></orderedlist>
</para>
<para>A typical sequence to query a key&apos;s attributes is as follows:<orderedlist>
<listitem><para>Call <ref refid="group__attributes_1gacbbf5c11eac6cd70c87ffb936e1b9be2" kindref="member">psa_get_key_attributes()</ref>.</para>
</listitem><listitem><para>Call <computeroutput>psa_get_key_xxx</computeroutput> functions to retrieve the attribute(s) that you are interested in.</para>
</listitem><listitem><para>Call <ref refid="group__attributes_1ga382b7f11fc6d706645cefea22c3bd458" kindref="member">psa_reset_key_attributes()</ref> to free any resources that may be used by the attribute structure.</para>
</listitem></orderedlist>
</para>
<para>Once a key has been created, it is impossible to change its attributes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="316" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t psa_key_slot_number_t</definition>
        <argsstring></argsstring>
        <name>psa_key_slot_number_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="434" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t psa_key_derivation_step_t</definition>
        <argsstring></argsstring>
        <name>psa_key_derivation_step_t</name>
        <briefdescription>
<para>Encoding of the step of a key derivation. </para>
        </briefdescription>
        <detaileddescription>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_KEY_DERIVATION_INPUT_xxx</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="449" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PSA cryptography module: type aliases. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This file may not be included directly. Applications must include <ref refid="crypto_8h" kindref="compound">psa/crypto.h</ref>. Drivers must include the appropriate driver header file.</para>
</simplesect>
This file contains portable definitions of integral types for properties of cryptographic keys, designations of cryptographic algorithms, and error codes returned by the library.</para>
<para>This header file does not declare any function. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="16"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PSA_CRYPTO_TYPES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSA_CRYPTO_TYPES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>Mbed<sp/>TLS<sp/>configuration<sp/>is<sp/>visible.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>MBEDTLS_PRIVATE<sp/>macro.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_PLATFORM_FILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>MBEDTLS_PSA_CRYPTO_PLATFORM_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto__platform_8h" kindref="compound">crypto_platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">/*<sp/>If<sp/>#PSA_SUCCESS<sp/>is<sp/>already<sp/>defined,<sp/>it<sp/>means<sp/>that<sp/>#psa_status_t</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>is<sp/>also<sp/>defined<sp/>in<sp/>an<sp/>external<sp/>header,<sp/>so<sp/>prevent<sp/>its<sp/>multiple</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>definition.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PSA_SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="group__error_1ga05676e70ba5c6a7565aff3c36677c1f9" kindref="member">psa_status_t</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" kindref="member">psa_dh_family_t</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__key__lifetimes_1ga6821ff6dd39dc2bc370ded760ad8b0cf" kindref="member">psa_key_lifetime_t</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="group__key__lifetimes_1ga183689a3018896e1e2e4f2bcc57bcff3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__key__lifetimes_1ga183689a3018896e1e2e4f2bcc57bcff3" kindref="member">psa_key_persistence_t</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="group__key__lifetimes_1ga5e700601f686237a8d1e29363ae543d5" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__key__lifetimes_1ga5e700601f686237a8d1e29363ae543d5" kindref="member">psa_key_location_t</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Implementation-specific:<sp/>The<sp/>Mbed<sp/>TLS<sp/>library<sp/>can<sp/>be<sp/>built<sp/>as</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>part<sp/>of<sp/>a<sp/>multi-client<sp/>service<sp/>that<sp/>exposes<sp/>the<sp/>PSA<sp/>Cryptography<sp/>API<sp/>in<sp/>each</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>client<sp/>and<sp/>encodes<sp/>the<sp/>client<sp/>identity<sp/>in<sp/>the<sp/>key<sp/>identifier<sp/>argument<sp/>of</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>functions<sp/>such<sp/>as<sp/>psa_open_key().</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga11e986351c65bd3dc3c0fe2cd9926e4b" kindref="member">psa_key_id_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(key_id);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>mbedtls_key_owner_id_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(owner);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}<sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="group__attributes_1ga0ec645e1fdafe59d591104451ebf5680" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_s</ref><sp/><ref refid="structpsa__key__attributes__s" kindref="compound">psa_key_attributes_t</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__DOXYGEN_ONLY__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_SE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mbed<sp/>TLS<sp/>defines<sp/>this<sp/>type<sp/>in<sp/>crypto_types.h<sp/>because<sp/>it<sp/>is<sp/>also</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>visible<sp/>to<sp/>applications<sp/>through<sp/>an<sp/>implementation-specific<sp/>extension.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>For<sp/>the<sp/>PSA<sp/>Cryptography<sp/>specification,<sp/>this<sp/>type<sp/>is<sp/>only<sp/>visible</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/>via<sp/>crypto_se_driver.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="group__attributes_1ga90828ba6e282dd39260c81af68532e1d" kindref="member">psa_key_slot_number_t</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_SE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!__DOXYGEN_ONLY__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group__derivation_1gaac4eeacd36596c548b3a48fc06c5048b" kindref="member">psa_key_derivation_step_t</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PSA_CRYPTO_TYPES_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h"/>
  </compounddef>
</doxygen>
