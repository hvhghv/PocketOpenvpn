<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="timing_8h" kind="file" language="C++">
    <compoundname>timing.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="1">
        <label>timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structmbedtls__timing__hr__time" prot="public">mbedtls_timing_hr_time</innerclass>
    <innerclass refid="structmbedtls__timing__delay__context" prot="public">mbedtls_timing_delay_context</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="timing_8h_1a6bc13a361b1098238d8307888365f245" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__timing__delay__context" kindref="compound">mbedtls_timing_delay_context</ref></type>
        <definition>typedef struct mbedtls_timing_delay_context mbedtls_timing_delay_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_timing_delay_context</name>
        <briefdescription>
<para>Context for mbedtls_timing_set/get_delay() </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" line="40" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="timing_8h_1a427660928e1e0339d497390c167f895c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long mbedtls_timing_get_timer</definition>
        <argsstring>(struct mbedtls_timing_hr_time *val, int reset)</argsstring>
        <name>mbedtls_timing_get_timer</name>
        <param>
          <type>struct <ref refid="structmbedtls__timing__hr__time" kindref="compound">mbedtls_timing_hr_time</ref> *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" line="47" column="15" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" declline="47" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="timing_8h_1aeb3497ab85adabf7db89d81c34e2ef92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_timing_set_delay</definition>
        <argsstring>(void *data, uint32_t int_ms, uint32_t fin_ms)</argsstring>
        <name>mbedtls_timing_set_delay</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>int_ms</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fin_ms</declname>
        </param>
        <briefdescription>
<para>Set a pair of delays to watch (See <computeroutput><ref refid="timing_8h_1afb1705e8c4227b0ec03089aa7fc54d9b" kindref="member">mbedtls_timing_get_delay()</ref></computeroutput>.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to timing data. Must point to a valid <computeroutput><ref refid="structmbedtls__timing__delay__context" kindref="compound">mbedtls_timing_delay_context</ref></computeroutput> struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>First (intermediate) delay in milliseconds. The effect if int_ms &gt; fin_ms is unspecified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fin_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Second (final) delay in milliseconds. Pass 0 to cancel the current delay.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>To set a single delay, either use <computeroutput>mbedtls_timing_set_timer</computeroutput> directly or use this function with int_ms == fin_ms. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" line="63" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="timing_8h_1afb1705e8c4227b0ec03089aa7fc54d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_timing_get_delay</definition>
        <argsstring>(void *data)</argsstring>
        <name>mbedtls_timing_get_delay</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get the status of delays (Memory helper: number of delays passed.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to timing data Must point to a valid <computeroutput><ref refid="structmbedtls__timing__delay__context" kindref="compound">mbedtls_timing_delay_context</ref></computeroutput> struct.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if cancelled (fin_ms = 0), 0 if none of the delays are passed, 1 if only the intermediate delay is passed, 2 if the final delay is passed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" line="77" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="timing_8h_1ad06db7d4712c714bc327a52f33e96cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t mbedtls_timing_get_final_delay</definition>
        <argsstring>(const mbedtls_timing_delay_context *data)</argsstring>
        <name>mbedtls_timing_get_final_delay</name>
        <param>
          <type>const <ref refid="structmbedtls__timing__delay__context" kindref="compound">mbedtls_timing_delay_context</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get the final timing delay. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to timing data Must point to a valid <computeroutput><ref refid="structmbedtls__timing__delay__context" kindref="compound">mbedtls_timing_delay_context</ref></computeroutput> struct.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Final timing delay in milliseconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" line="87" column="10" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h" declline="87" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Portable interface to timeouts and to the CPU cycle counter. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_TIMING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_TIMING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_TIMING_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regular<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structmbedtls__timing__hr__time" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__timing__hr__time" kindref="compound">mbedtls_timing_hr_time</ref><sp/>{</highlight></codeline>
<codeline lineno="30" refid="structmbedtls__timing__hr__time_1a168333fb51f13cfc27fdda56c01a3688" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(opaque)[4];</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structmbedtls__timing__delay__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__timing__delay__context" kindref="compound">mbedtls_timing_delay_context</ref><sp/>{</highlight></codeline>
<codeline lineno="37" refid="structmbedtls__timing__delay__context_1a73a1d5df860a9ac7c567ae50dbe1584a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__timing__hr__time" kindref="compound">mbedtls_timing_hr_time</ref><sp/><sp/><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(timer);</highlight></codeline>
<codeline lineno="38" refid="structmbedtls__timing__delay__context_1a54fecdc2368ecbde34913de9ed502600" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(int_ms);</highlight></codeline>
<codeline lineno="39" refid="structmbedtls__timing__delay__context_1a6b24be71d665da5d08f16d0d94d824bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(fin_ms);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}<sp/><ref refid="timing_8h_1a6bc13a361b1098238d8307888365f245" kindref="member">mbedtls_timing_delay_context</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_TIMING_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;timing_alt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_TIMING_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="timing_8h_1a427660928e1e0339d497390c167f895c" kindref="member">mbedtls_timing_get_timer</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__timing__hr__time" kindref="compound">mbedtls_timing_hr_time</ref><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reset);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="timing_8h_1aeb3497ab85adabf7db89d81c34e2ef92" kindref="member">mbedtls_timing_set_delay</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>uint32_t<sp/>int_ms,<sp/>uint32_t<sp/>fin_ms);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="timing_8h_1afb1705e8c4227b0ec03089aa7fc54d9b" kindref="member">mbedtls_timing_get_delay</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">uint32_t<sp/><ref refid="timing_8h_1ad06db7d4712c714bc327a52f33e96cd1" kindref="member">mbedtls_timing_get_final_delay</ref>(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__timing__delay__context" kindref="compound">mbedtls_timing_delay_context</ref><sp/>*data);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>timing.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/timing.h"/>
  </compounddef>
</doxygen>
