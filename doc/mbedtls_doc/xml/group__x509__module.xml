<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__x509__module" kind="group">
    <compoundname>x509_module</compoundname>
    <title>X.509 module</title>
    <innerclass refid="structmbedtls__x509__authority" prot="public">mbedtls_x509_authority</innerclass>
    <innerclass refid="structmbedtls__x509__time" prot="public">mbedtls_x509_time</innerclass>
    <innerclass refid="structmbedtls__x509__san__other__name" prot="public">mbedtls_x509_san_other_name</innerclass>
    <innerclass refid="structmbedtls__x509__subject__alternative__name" prot="public">mbedtls_x509_subject_alternative_name</innerclass>
    <innerclass refid="structmbedtls__x509__san__list" prot="public">mbedtls_x509_san_list</innerclass>
    <innerclass refid="structmbedtls__x509__crl__entry" prot="public">mbedtls_x509_crl_entry</innerclass>
    <innerclass refid="structmbedtls__x509__crl" prot="public">mbedtls_x509_crl</innerclass>
    <innerclass refid="structmbedtls__x509__crt" prot="public">mbedtls_x509_crt</innerclass>
    <innerclass refid="structmbedtls__x509__crt__profile" prot="public">mbedtls_x509_crt_profile</innerclass>
    <innerclass refid="structmbedtls__x509write__cert" prot="public">mbedtls_x509write_cert</innerclass>
    <innerclass refid="structmbedtls__x509__crt__verify__chain__item" prot="public">mbedtls_x509_crt_verify_chain_item</innerclass>
    <innerclass refid="structmbedtls__x509__crt__verify__chain" prot="public">mbedtls_x509_crt_verify_chain</innerclass>
    <innerclass refid="structmbedtls__x509__crt__restart__ctx" prot="public">mbedtls_x509_crt_restart_ctx</innerclass>
    <innerclass refid="structmbedtls__x509__csr" prot="public">mbedtls_x509_csr</innerclass>
    <innerclass refid="structmbedtls__x509write__csr" prot="public">mbedtls_x509write_csr</innerclass>
      <sectiondef kind="user-defined">
      <header>X509 Error codes</header>
      <memberdef kind="define" id="group__x509__module_1ga185bc7f27a2b1f7742537a2377c52ee3" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE</name>
        <initializer>-0x2080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unavailable feature, e.g. RSA hashing/encryption combination. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="45" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gab4e8e2e41bfe62e969343efaa2784103" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_UNKNOWN_OID</name>
        <initializer>-0x2100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Requested OID is unknown. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="47" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga45b8366804b7e2cbf3e25011f054802c" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name>
        <initializer>-0x2180</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRT/CRL/CSR format is invalid, e.g. different type expected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="49" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga527608dc04b2c831fe5b161ec26aab76" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_VERSION</name>
        <initializer>-0x2200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRT/CRL/CSR version element is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="51" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga8124a68edabf35ed9323880584128f16" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_SERIAL</name>
        <initializer>-0x2280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The serial tag or value is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="53" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gae16cddbd42e08f6dd093cf4326e59413" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_ALG</name>
        <initializer>-0x2300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The algorithm tag or value is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="55" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga8f61c2f303bf065af4f783e03f952ede" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_NAME</name>
        <initializer>-0x2380</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name tag or value is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="57" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gac36bf085ce8f7f57f039bda8828bd824" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_DATE</name>
        <initializer>-0x2400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The date tag or value is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="59" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga022c175386f082b4e056e6268ee68cab" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_SIGNATURE</name>
        <initializer>-0x2480</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The signature tag or value invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="61" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaa0788dbf0325aea4ab566717514b4422" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name>
        <initializer>-0x2500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The extension tag or value is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="63" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gab80a4eb806328731def21ec2ebcbc365" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_UNKNOWN_VERSION</name>
        <initializer>-0x2580</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CRT/CRL/CSR has an unsupported version number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="65" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga488f8616b42eae6fe3fb9815d43c976f" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG</name>
        <initializer>-0x2600</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature algorithm (oid) is unsupported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="67" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gac489ce5e8ba417bcd86012ebbb7f5044" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_SIG_MISMATCH</name>
        <initializer>-0x2680</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature algorithms do not match. (see <computeroutput><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref></computeroutput> sig_oid) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="69" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaba46df0041dcf48fa9d164d28cf3a154" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_CERT_VERIFY_FAILED</name>
        <initializer>-0x2700</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Certificate verification failed, e.g. CRL, CA or signature check failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="71" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaeb90af9ad906c5075b1ad625ebc26553" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT</name>
        <initializer>-0x2780</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format not recognized as DER or PEM. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="73" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaeeef11ebf0b31a54a665b1a3fd65c3f7" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name>
        <initializer>-0x2800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="75" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gacf6d98c6cbb76728260d1dcb1fe3bc7d" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name>
        <initializer>-0x2880</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocation of memory failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="77" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gad85d9c7aa5c30b9730297bef3386407c" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_FILE_IO_ERROR</name>
        <initializer>-0x2900</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read/write of file failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="79" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gab9516fc53ff90c547fd77d35c71feec7" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_BUFFER_TOO_SMALL</name>
        <initializer>-0x2980</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destination buffer is too small. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="81" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga50086f9edc8482b5e6b6e53c647d37ea" prot="public" static="no">
        <name>MBEDTLS_ERR_X509_FATAL_ERROR</name>
        <initializer>-0x3000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A fatal error occurred, eg the chain is too long or the vrfy callback failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="83" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>X509 Verify codes</header>
      <memberdef kind="define" id="group__x509__module_1ga5f03158dcacc5914872e38c68231b642" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_EXPIRED</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate validity has expired. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="91" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaddd96a9eb80fab17bce02d2a147ea504" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_REVOKED</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate has been revoked (is on a CRL). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="92" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga6e71468985ebf243ca7cfce5c3dea881" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_CN_MISMATCH</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate Common Name (CN) does not match with the expected CN. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="93" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga0e5b1d4c9c1a1a3227238c82042c1d1b" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name>
        <initializer>0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate is not correctly signed by the trusted CA. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="94" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gad1da8228ca957c2947fd329c32fc7ca4" prot="public" static="no">
        <name>MBEDTLS_X509_BADCRL_NOT_TRUSTED</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRL is not correctly signed by the trusted CA. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="95" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaebccb1707af21f2d3d6610a7c6485f32" prot="public" static="no">
        <name>MBEDTLS_X509_BADCRL_EXPIRED</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRL is expired. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="96" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga8bca03e3c2c89460bea17ab142b0b7ab" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_MISSING</name>
        <initializer>0x40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Certificate was missing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="97" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga1b87b2e1d26077023adf2a5c65a76776" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_SKIP_VERIFY</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Certificate verification was skipped. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="98" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga76bdd50937a671ef62474b7e38e23e02" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_OTHER</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Other reason (can be used by verify callback) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="99" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gac769acbb18e53198ae2d2e63bd339cfa" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_FUTURE</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate validity starts in the future. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="100" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gad93c0f614969729f7d13fb0a3acac68e" prot="public" static="no">
        <name>MBEDTLS_X509_BADCRL_FUTURE</name>
        <initializer>0x0400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRL is from the future </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="101" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga28705c8c3091a013487df25842249c0f" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_KEY_USAGE</name>
        <initializer>0x0800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Usage does not match the keyUsage extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="102" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gac3dab3183efdbca7e988916e7fc1a02a" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_EXT_KEY_USAGE</name>
        <initializer>0x1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Usage does not match the extendedKeyUsage extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="103" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaa383ae441177fa7a16fb2313bb48bb10" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_NS_CERT_TYPE</name>
        <initializer>0x2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Usage does not match the nsCertType extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="104" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga41b54b526c11bf51cc431ef1a151816d" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_BAD_MD</name>
        <initializer>0x4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate is signed with an unacceptable hash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="105" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga9332fa1e09a373cc56234525b14546c4" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_BAD_PK</name>
        <initializer>0x8000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate is signed with an unacceptable PK alg (eg RSA vs ECDSA). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="106" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaef5f9a34b327eb79750ebc3779e98282" prot="public" static="no">
        <name>MBEDTLS_X509_BADCERT_BAD_KEY</name>
        <initializer>0x010000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The certificate is signed with an unacceptable key (eg bad curve, RSA too short). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="107" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gad3f810fb74f94164185b88b90fffa329" prot="public" static="no">
        <name>MBEDTLS_X509_BADCRL_BAD_MD</name>
        <initializer>0x020000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRL is signed with an unacceptable hash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="108" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga182a6f1f465e566de7586e6ee8fa7c4e" prot="public" static="no">
        <name>MBEDTLS_X509_BADCRL_BAD_PK</name>
        <initializer>0x040000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRL is signed with an unacceptable PK alg (eg RSA vs ECDSA). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="109" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gac2947ead6fd1035296826110ca74a364" prot="public" static="no">
        <name>MBEDTLS_X509_BADCRL_BAD_KEY</name>
        <initializer>0x080000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CRL is signed with an unacceptable key (eg bad curve, RSA too short). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="110" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Structures for parsing X.509 certificates, CRLs and CSRs</header>
      <memberdef kind="typedef" id="group__x509__module_1ga4d02c9e8e4e2934555e0d132cd2976dc" prot="public" static="no">
        <type><ref refid="structmbedtls__asn1__buf" kindref="compound">mbedtls_asn1_buf</ref></type>
        <definition>typedef mbedtls_asn1_buf mbedtls_x509_buf</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type-length-value structure that allows for ASN1 using DER. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="216" column="26" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1gaf25a97602f25027e160f22f6d5590636" prot="public" static="no">
        <type><ref refid="structmbedtls__asn1__bitstring" kindref="compound">mbedtls_asn1_bitstring</ref></type>
        <definition>typedef mbedtls_asn1_bitstring mbedtls_x509_bitstring</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_bitstring</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for ASN1 bit strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="221" column="32" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga2272228c7776102328df31623af3168c" prot="public" static="no">
        <type><ref refid="structmbedtls__asn1__named__data" kindref="compound">mbedtls_asn1_named_data</ref></type>
        <definition>typedef mbedtls_asn1_named_data mbedtls_x509_name</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for ASN1 named information objects. It allows for Relative Distinguished Names (e.g. cn=localhost,ou=code,etc.). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="227" column="33" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1gabd52d60a09315854d9ef849d02154f35" prot="public" static="no">
        <type><ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref></type>
        <definition>typedef mbedtls_asn1_sequence mbedtls_x509_sequence</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for a sequence of ASN.1 items </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="232" column="31" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga1d24a1adae810f1171b0769307541242" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__authority" kindref="compound">mbedtls_x509_authority</ref></type>
        <definition>typedef struct mbedtls_x509_authority mbedtls_x509_authority</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_authority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="243" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga3635781b6d7ff3fac308d5ab7ff2cb68" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref></type>
        <definition>typedef struct mbedtls_x509_time mbedtls_x509_time</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for date and time (precision in seconds). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="250" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga836a506d1fe86d222a546f0ecbaf60f8" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__san__other__name" kindref="compound">mbedtls_x509_san_other_name</ref></type>
        <definition>typedef struct mbedtls_x509_san_other_name mbedtls_x509_san_other_name</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_san_other_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>From RFC 5280 section 4.2.1.6: OtherName ::= SEQUENCE { type-id OBJECT IDENTIFIER, value [0] EXPLICIT ANY DEFINED BY type-id }</para>
<para>Future versions of the library may add new fields to this structure or to its embedded union and structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="283" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1gad0f721005e6c4ef93d79675d9c37ecb3" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__subject__alternative__name" kindref="compound">mbedtls_x509_subject_alternative_name</ref></type>
        <definition>typedef struct mbedtls_x509_subject_alternative_name mbedtls_x509_subject_alternative_name</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_subject_alternative_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure for holding the parsed Subject Alternative Name, according to type.</para>
<para>Future versions of the library may add new fields to this structure or to its embedded union and structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="301" column="38"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1gaa55e2b98d3ffb25c58a2504e4c98f4d1" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__san__list" kindref="compound">mbedtls_x509_san_list</ref></type>
        <definition>typedef struct mbedtls_x509_san_list mbedtls_x509_san_list</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_san_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="307" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Structures and functions for parsing CRLs</header>
      <memberdef kind="typedef" id="group__x509__module_1gaee92a1fd7ddb650a98a5f3bf6588cec2" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__crl__entry" kindref="compound">mbedtls_x509_crl_entry</ref></type>
        <definition>typedef struct mbedtls_x509_crl_entry mbedtls_x509_crl_entry</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crl_entry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Certificate revocation list entry. Contains the CA-specific serial numbers and revocation dates.</para>
<para>Some fields of this structure are publicly readable. Do not modify them except via Mbed TLS library functions: the effect of modifying those fields or the data that those fields points to is unspecified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="58" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga3b1517659422b03cdfca37e6b68a4291" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref></type>
        <definition>typedef struct mbedtls_x509_crl mbedtls_x509_crl</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Certificate revocation list structure. Every CRL may have multiple entries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="93" column="17"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga29ab5f1216a727b334ee26cce9f5d4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crl_parse_der</definition>
        <argsstring>(mbedtls_x509_crl *chain, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_x509_crl_parse_der</name>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Parse a DER-encoded CRL and append it to the chained list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the start of the chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the CRL data in DER format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer (including the terminating null byte for PEM data)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific X509 or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="109" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gadfce4fc5f5af62e371695e74c5b67d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crl_parse</definition>
        <argsstring>(mbedtls_x509_crl *chain, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_x509_crl_parse</name>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Parse one or more CRLs and append them to the chained list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Multiple CRLs are accepted only if using PEM format</para>
</simplesect>
<simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the start of the chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the CRL data in PEM or DER format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer (including the terminating null byte for PEM data)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific X509 or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="127" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga8e096827f1240b8f8bc15d6a83593f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crl_parse_file</definition>
        <argsstring>(mbedtls_x509_crl *chain, const char *path)</argsstring>
        <name>mbedtls_x509_crl_parse_file</name>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load one or more CRLs and append them to the chained list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Multiple CRLs are accepted only if using PEM format</para>
</simplesect>
<simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the start of the chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>filename to read the CRLs from (in PEM or DER encoding)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific X509 or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="144" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" declline="144" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga35898e101f5039c6db6b930da9892366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crl_info</definition>
        <argsstring>(char *buf, size_t size, const char *prefix, const mbedtls_x509_crl *crl)</argsstring>
        <name>mbedtls_x509_crl_info</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>crl</declname>
        </param>
        <briefdescription>
<para>Returns an informational string about the CRL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>A line prefix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crl</parametername>
</parameternamelist>
<parameterdescription>
<para>The X509 CRL to represent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the string written (not including the terminated nul byte), or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="159" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" declline="159" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga8513a192e281217802837571da98e218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_crl_init</definition>
        <argsstring>(mbedtls_x509_crl *crl)</argsstring>
        <name>mbedtls_x509_crl_init</name>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>crl</declname>
        </param>
        <briefdescription>
<para>Initialize a CRL (chain) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crl</parametername>
</parameternamelist>
<parameterdescription>
<para>CRL chain to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="168" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gaeb19c3326889f9e493fbd605c1113b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_crl_free</definition>
        <argsstring>(mbedtls_x509_crl *crl)</argsstring>
        <name>mbedtls_x509_crl_free</name>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>crl</declname>
        </param>
        <briefdescription>
<para>Unallocate all CRL data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crl</parametername>
</parameternamelist>
<parameterdescription>
<para>CRL chain to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" line="175" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crl.h" declline="175" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Structures and functions for parsing and writing X.509 certificates</header>
      <memberdef kind="typedef" id="group__x509__module_1ga940004984e877ae66ef152aea77092ae" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref></type>
        <definition>typedef struct mbedtls_x509_crt mbedtls_x509_crt</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for an X.509 certificate. The certificate may be chained.</para>
<para>Some fields of this structure are publicly readable. Do not modify them except via Mbed TLS library functions: the effect of modifying those fields or the data that those fields points to is unspecified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="92" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga96a0eb7ce77744b77f63e8a6103c4d3c" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref></type>
        <definition>typedef struct mbedtls_x509_crt_profile mbedtls_x509_crt_profile</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crt_profile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Security profile for certificate verification.</para>
<para>All lists are bitfields, built by ORing flags from <ref refid="group__x509__module_1gaedcb73f1c615c266a348a0c62763c5de" kindref="member">MBEDTLS_X509_ID_FLAG()</ref>.</para>
<para>The fields of this structure are part of the public API and can be manipulated directly by applications. Future versions of the library may add extra fields or reorder existing fields.</para>
<para>You can create custom profiles by starting from a copy of an existing profile, such as mbedtls_x509_crt_profile_default or mbedtls_x509_ctr_profile_none and then tune it to your needs.</para>
<para>For example to allow SHA-224 in addition to the default:</para>
<para><ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref> my_profile = mbedtls_x509_crt_profile_default; my_profile.allowed_mds |= <ref refid="group__x509__module_1gaedcb73f1c615c266a348a0c62763c5de" kindref="member">MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA224 )</ref>;</para>
<para>Or to allow only RSA-3072+ with SHA-256:</para>
<para><ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref> my_profile = mbedtls_x509_crt_profile_none; my_profile.allowed_mds = <ref refid="group__x509__module_1gaedcb73f1c615c266a348a0c62763c5de" kindref="member">MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 )</ref>; my_profile.allowed_pks = <ref refid="group__x509__module_1gaedcb73f1c615c266a348a0c62763c5de" kindref="member">MBEDTLS_X509_ID_FLAG( MBEDTLS_PK_RSA )</ref>; my_profile.rsa_min_bitlen = 3072; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="133" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1gae3918cd746c40892a580e9decbb34c31" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref></type>
        <definition>typedef struct mbedtls_x509write_cert mbedtls_x509write_cert</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509write_cert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for writing a certificate (CRT) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="230" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga49e090c449306399f442eb640c014099" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* mbedtls_x509_crt_ext_cb_t) (void *p_ctx, mbedtls_x509_crt const *crt, mbedtls_x509_buf const *oid, int critical, const unsigned char *p, const unsigned char *end)</definition>
        <argsstring>)(void *p_ctx, mbedtls_x509_crt const *crt, mbedtls_x509_buf const *oid, int critical, const unsigned char *p, const unsigned char *end)</argsstring>
        <name>mbedtls_x509_crt_ext_cb_t</name>
        <briefdescription>
<para>The type of certificate extension callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            Callbacks of this type are passed to and used by the
            mbedtls_x509_crt_parse_der_with_ext_cb() routine when
            it encounters either an unsupported extension or a
            &quot;certificate policies&quot; extension containing any
            unsupported certificate policies.
            Future versions of the library may invoke the callback
            in other cases, if and when the need arises.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque context passed to the callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate being parsed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oid</parametername>
</parameternamelist>
<parameterdescription>
<para>The OID of the extension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>critical</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the extension is critical. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the extension value (the content of the OCTET STRING). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of extension value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The callback must fail and return a negative error code if it can not parse or does not support the extension. When the callback fails to parse a critical extension <ref refid="group__x509__module_1ga8949142461149fed99d74c08ce215754" kindref="member">mbedtls_x509_crt_parse_der_with_ext_cb()</ref> also fails. When the callback fails to parse a non critical extension <ref refid="group__x509__module_1ga8949142461149fed99d74c08ce215754" kindref="member">mbedtls_x509_crt_parse_der_with_ext_cb()</ref> simply skips the extension and continues parsing.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="402" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1ga76b0dd21c9c8ab66a4577e8bd5afa736" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* mbedtls_x509_crt_ca_cb_t) (void *p_ctx, mbedtls_x509_crt const *child, mbedtls_x509_crt **candidate_cas)</definition>
        <argsstring>)(void *p_ctx, mbedtls_x509_crt const *child, mbedtls_x509_crt **candidate_cas)</argsstring>
        <name>mbedtls_x509_crt_ca_cb_t</name>
        <briefdescription>
<para>The type of trusted certificate callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>                 Callbacks of this type are passed to and used by the CRT
                 verification routine mbedtls_x509_crt_verify_with_ca_cb()
                 when looking for trusted signers of a given certificate.

                 On success, the callback returns a list of trusted
                 certificates to be considered as potential signers
                 for the input certificate.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque context passed to the callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate for which to search a potential signer. This will point to a readable certificate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>candidate_cas</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the address of the first entry in the generated linked list of candidate signers. This will not be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The callback must only return a non-zero value on a fatal error. If, in contrast, the search for a potential signer completes without a single candidate, the callback must return <computeroutput>0</computeroutput> and set <computeroutput>*candidate_cas</computeroutput> to <computeroutput>NULL</computeroutput>.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. In this case, <computeroutput>*candidate_cas</computeroutput> points to a heap-allocated linked list of instances of <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref>, and ownership of this list is passed to the caller. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="784" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__x509__module_1ga9cd2de10ffeff0f339abcc1ba7e26fdf" prot="public" static="no" mutable="no">
        <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref></type>
        <definition>const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crt_profile_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default security profile. Should provide a good balance between security and compatibility with current deployments.</para>
<para>This profile permits:<itemizedlist>
<listitem><para>SHA2 hashes with at least 256 bits: SHA-256, SHA-384, SHA-512.</para>
</listitem><listitem><para>Elliptic curves with 255 bits and above except secp256k1.</para>
</listitem><listitem><para>RSA with 2048 bits and above.</para>
</listitem></itemizedlist>
</para>
<para>New minor versions of Mbed TLS may extend this profile, for example if new algorithms are added to the library. New minor versions of Mbed TLS will not reduce this profile unless serious security concerns require it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="324" column="39" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="324" declcolumn="39"/>
      </memberdef>
      <memberdef kind="variable" id="group__x509__module_1ga8ab1f8a044fd25f76ecb4ba15c6d5bcd" prot="public" static="no" mutable="no">
        <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref></type>
        <definition>const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_next</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crt_profile_next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected next default profile. Recommended for new deployments. Currently targets a 128-bit security level, except for allowing RSA-2048. This profile may change at any time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="331" column="39" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="331" declcolumn="39"/>
      </memberdef>
      <memberdef kind="variable" id="group__x509__module_1gaf09067a39129236125e353a68ceb45d6" prot="public" static="no" mutable="no">
        <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref></type>
        <definition>const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crt_profile_suiteb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>NSA Suite B profile. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="336" column="39" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="336" declcolumn="39"/>
      </memberdef>
      <memberdef kind="variable" id="group__x509__module_1ga716ab3c77191e219a3f2457f9377c081" prot="public" static="no" mutable="no">
        <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref></type>
        <definition>const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_none</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_crt_profile_none</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty profile that allows nothing. Useful as a basis for constructing custom profiles. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="342" column="39" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="342" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga7738ec691e5cd4a3e0e843360f377937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_subject_alternative_name</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, const mbedtls_x509_san_list *san_list)</argsstring>
        <name>mbedtls_x509write_crt_set_subject_alternative_name</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__san__list" kindref="compound">mbedtls_x509_san_list</ref> *</type>
          <declname>san_list</declname>
        </param>
        <briefdescription>
<para>Set Subject Alternative Name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Certificate context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>san_list</parametername>
</parameternamelist>
<parameterdescription>
<para>List of SAN values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED</para>
</simplesect>
<simplesect kind="note"><para>&quot;dnsName&quot;, &quot;uniformResourceIdentifier&quot;, &quot;IP address&quot;, &quot;otherName&quot;, and &quot;DirectoryName&quot;, as defined in RFC 5280, are supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="244" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="244" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga003c2483a2691e025641fa9d68d4a96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_parse_der</definition>
        <argsstring>(mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_x509_crt_parse_der</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Parse a single DER formatted certificate and add it to the end of the provided chained list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the start of the CRT chain to attach to. When parsing the first CRT in a chain, this should point to an instance of <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> initialized through <ref refid="group__x509__module_1ga016dd06bc770e77b84005f305df20ed1" kindref="member">mbedtls_x509_crt_init()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the DER encoded certificate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in Bytes of <computeroutput>buf</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function makes an internal copy of the CRT buffer <computeroutput>buf</computeroutput>. In particular, <computeroutput>buf</computeroutput> may be destroyed or reused after this call returns. To avoid duplicating the CRT buffer (at the cost of stricter lifetime constraints), use <ref refid="group__x509__module_1ga00da807b3b94504dc1cb21070ef56219" kindref="member">mbedtls_x509_crt_parse_der_nocopy()</ref> instead.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="368" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="368" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga8949142461149fed99d74c08ce215754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_parse_der_with_ext_cb</definition>
        <argsstring>(mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen, int make_copy, mbedtls_x509_crt_ext_cb_t cb, void *p_ctx)</argsstring>
        <name>mbedtls_x509_crt_parse_der_with_ext_cb</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>make_copy</declname>
        </param>
        <param>
          <type><ref refid="group__x509__module_1ga49e090c449306399f442eb640c014099" kindref="member">mbedtls_x509_crt_ext_cb_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_ctx</declname>
        </param>
        <briefdescription>
<para>Parse a single DER formatted certificate and add it to the end of the provided chained list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the start of the CRT chain to attach to. When parsing the first CRT in a chain, this should point to an instance of <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> initialized through <ref refid="group__x509__module_1ga016dd06bc770e77b84005f305df20ed1" kindref="member">mbedtls_x509_crt_init()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the DER encoded certificate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in Bytes of <computeroutput>buf</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>make_copy</parametername>
</parameternamelist>
<parameterdescription>
<para>When not zero this function makes an internal copy of the CRT buffer <computeroutput>buf</computeroutput>. In particular, <computeroutput>buf</computeroutput> may be destroyed or reused after this call returns. When zero this function avoids duplicating the CRT buffer by taking temporary ownership thereof until the CRT is destroyed (like <ref refid="group__x509__module_1ga00da807b3b94504dc1cb21070ef56219" kindref="member">mbedtls_x509_crt_parse_der_nocopy()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback invoked for every unsupported certificate extension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque context passed to the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This call is functionally equivalent to <ref refid="group__x509__module_1ga003c2483a2691e025641fa9d68d4a96a" kindref="member">mbedtls_x509_crt_parse_der()</ref>, and/or <ref refid="group__x509__module_1ga00da807b3b94504dc1cb21070ef56219" kindref="member">mbedtls_x509_crt_parse_der_nocopy()</ref> but it calls the callback with every unsupported certificate extension and additionally the &quot;certificate policies&quot; extension if it contains any unsupported certificate policies. The callback must return a negative error code if it does not know how to handle such an extension. When the callback fails to parse a critical extension <ref refid="group__x509__module_1ga8949142461149fed99d74c08ce215754" kindref="member">mbedtls_x509_crt_parse_der_with_ext_cb()</ref> also fails. When the callback fails to parse a non critical extension <ref refid="group__x509__module_1ga8949142461149fed99d74c08ce215754" kindref="member">mbedtls_x509_crt_parse_der_with_ext_cb()</ref> simply skips the extension and continues parsing. Future versions of the library may invoke the callback in other cases, if and when the need arises.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="453" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="453" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga00da807b3b94504dc1cb21070ef56219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_parse_der_nocopy</definition>
        <argsstring>(mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_x509_crt_parse_der_nocopy</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Parse a single DER formatted certificate and add it to the end of the provided chained list. This is a variant of <ref refid="group__x509__module_1ga003c2483a2691e025641fa9d68d4a96a" kindref="member">mbedtls_x509_crt_parse_der()</ref> which takes temporary ownership of the CRT buffer until the CRT is destroyed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the start of the CRT chain to attach to. When parsing the first CRT in a chain, this should point to an instance of <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> initialized through <ref refid="group__x509__module_1ga016dd06bc770e77b84005f305df20ed1" kindref="member">mbedtls_x509_crt_init()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the readable buffer holding the DER encoded certificate to use. On success, this buffer must be retained and not be changed for the lifetime of the CRT chain <computeroutput>chain</computeroutput>, that is, until <computeroutput>chain</computeroutput> is destroyed through a call to <ref refid="group__x509__module_1gab33c1e4e20bea7ce536119f54a113c6b" kindref="member">mbedtls_x509_crt_free()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in Bytes of <computeroutput>buf</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This call is functionally equivalent to <ref refid="group__x509__module_1ga003c2483a2691e025641fa9d68d4a96a" kindref="member">mbedtls_x509_crt_parse_der()</ref>, but it avoids creating a copy of the input buffer at the cost of stronger lifetime constraints. This is useful in constrained environments where duplication of the CRT cannot be tolerated.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="491" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="491" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga033567483649030f7f859db4f4cb7e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_parse</definition>
        <argsstring>(mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_x509_crt_parse</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Parse one DER-encoded or one or more concatenated PEM-encoded certificates and add them to the chained list. </para>
        </briefdescription>
        <detaileddescription>
<para>For CRTs in PEM encoding, the function parses permissively: if at least one certificate can be parsed, the function returns the number of certificates for which parsing failed (hence <computeroutput>0</computeroutput> if all certificates were parsed successfully). If no certificate could be parsed, the function returns the first (negative) error encountered during parsing.</para>
<para>PEM encoded certificates may be interleaved by other data such as human readable descriptions of their content, as long as the certificates are enclosed in the PEM specific &apos;--<mdash/>{BEGIN/END} CERTIFICATE--<mdash/>&apos; delimiters.</para>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>The chain to which to add the parsed certificates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the certificate data in PEM or DER format. For certificates in PEM encoding, this may be a concatenation of multiple certificates; for DER encoding, the buffer must comprise exactly one certificate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <computeroutput>buf</computeroutput>, including the terminating <computeroutput>NULL</computeroutput> byte in case of PEM encoded data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if all certificates were parsed successfully. </para>
</simplesect>
<simplesect kind="return"><para>The (positive) number of certificates that couldn&apos;t be parsed if parsing was partly successful (see above). </para>
</simplesect>
<simplesect kind="return"><para>A negative X509 or PEM error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="529" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="529" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gad4da63133d3590aa311488497d4c38ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_parse_file</definition>
        <argsstring>(mbedtls_x509_crt *chain, const char *path)</argsstring>
        <name>mbedtls_x509_crt_parse_file</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load one or more certificates and add them to the chained list. Parses permissively. If some certificates can be parsed, the result is the number of failed certificates it encountered. If none complete correctly, the first error is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the start of the chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>filename to read the certificates from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if all certificates parsed successfully, a positive number if partly successful or a specific X509 or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="549" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="549" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga571fc89b9f3217ab3dd67bd7af905066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_parse_path</definition>
        <argsstring>(mbedtls_x509_crt *chain, const char *path)</argsstring>
        <name>mbedtls_x509_crt_parse_path</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load one or more certificate files from a path and add them to the chained list. Parses permissively. If some certificates can be parsed, the result is the number of failed certificates it encountered. If none complete correctly, the first error is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chain</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the start of the chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>directory / folder to read the certificate files from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if all certificates parsed successfully, a positive number if partly successful or a specific X509 or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="564" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="564" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gabaf30f2269fc3b6608b25871f9d09da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_info</definition>
        <argsstring>(char *buf, size_t size, const char *prefix, const mbedtls_x509_crt *crt)</argsstring>
        <name>mbedtls_x509_crt_info</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <briefdescription>
<para>Returns an informational string about the certificate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>A line prefix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>The X509 certificate to represent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the string written (not including the terminated nul byte), or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="581" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="581" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gae88f1d8e6696eb2beeffe0a708219e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_verify_info</definition>
        <argsstring>(char *buf, size_t size, const char *prefix, uint32_t flags)</argsstring>
        <name>mbedtls_x509_crt_verify_info</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Returns an informational string about the verification status of a certificate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>A line prefix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Verification flags created by <ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the string written (not including the terminated nul byte), or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="596" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="596" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_verify</definition>
        <argsstring>(mbedtls_x509_crt *crt, mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl, const char *cn, uint32_t *flags, int(*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *), void *p_vrfy)</argsstring>
        <name>mbedtls_x509_crt_verify</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>trust_ca</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>ca_crl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *, int, uint32_t *)</type>
          <declname>f_vrfy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_vrfy</declname>
        </param>
        <briefdescription>
<para>Verify a chain of certificates. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>            The verify callback is a user-supplied callback that
            can clear / modify / add flags for a certificate. If set,
            the verification callback is called for each
            certificate in the chain (from the trust-ca down to the
            presented crt). The parameters for the callback are:
            (void *parameter, mbedtls_x509_crt *crt, int certificate_depth,
            int *flags). With the flags representing current flags for
            that specific certificate and the certificate depth from
            the bottom (Peer cert depth = 0).

            All flags left after returning from the callback
            are also returned to the application. The function should
            return 0 for anything (including invalid certificates)
            other than fatal error, as a non-zero return code
            immediately aborts the verification process. For fatal
            errors, a specific error code should be used (different
            from MBEDTLS_ERR_X509_CERT_VERIFY_FAILED which should not
            be returned at this point), or MBEDTLS_ERR_X509_FATAL_ERROR
            can be used if no better code is available.
</verbatim></para>
<para><simplesect kind="note"><para>In case verification failed, the results can be displayed using <computeroutput><ref refid="group__x509__module_1gae88f1d8e6696eb2beeffe0a708219e6b" kindref="member">mbedtls_x509_crt_verify_info()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="note"><para>Same as <computeroutput><ref refid="group__x509__module_1gaf044a51e5b5bc854bf12aeeccb440e55" kindref="member">mbedtls_x509_crt_verify_with_profile()</ref></computeroutput> with the default security profile.</para>
</simplesect>
<simplesect kind="note"><para>It is your responsibility to provide up-to-date CRLs for all trusted CAs. If no CRL is provided for the CA that was used to sign the certificate, CRL verification is skipped silently, that is <emphasis>without</emphasis> setting any flag.</para>
</simplesect>
<simplesect kind="note"><para>The <computeroutput>trust_ca</computeroutput> list can contain two types of certificates: (1) those of trusted root CAs, so that certificates chaining up to those CAs will be trusted, and (2) self-signed end-entity certificates to be trusted (for specific peers you know) - in that case, the self-signed certificate doesn&apos;t need to have the CA bit set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate chain to be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trust_ca</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of trusted CAs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_crl</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of CRLs for trusted CAs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cn</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected Common Name. This will be checked to be present in the certificate&apos;s subjectAltNames extension or, if this extension is absent, as a CN component in its Subject name. DNS names and IP addresses are fully supported, while the URI subtype is partially supported: only exact matching, without any normalization procedures described in 7.4 of RFC5280, will result in a positive URI verification. This may be <computeroutput>NULL</computeroutput> if the CN need not be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the result of the verification. If the verification couldn&apos;t be completed, the flag value is set to (uint32_t) -1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The verification callback to use. See the documentation of <ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref> for more information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be passed to <computeroutput>f_vrfy</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the chain is valid with respect to the passed CN, CAs, CRLs and security profile. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__x509__module_1gaba46df0041dcf48fa9d164d28cf3a154" kindref="member">MBEDTLS_ERR_X509_CERT_VERIFY_FAILED</ref> in case the certificate chain verification failed. In this case, <computeroutput>*flags</computeroutput> will have one or more <computeroutput>MBEDTLS_X509_BADCERT_XXX</computeroutput> or <computeroutput>MBEDTLS_X509_BADCRL_XXX</computeroutput> flags set. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code in case of a fatal error encountered during the verification process. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="670" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="670" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gaf044a51e5b5bc854bf12aeeccb440e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_verify_with_profile</definition>
        <argsstring>(mbedtls_x509_crt *crt, mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl, const mbedtls_x509_crt_profile *profile, const char *cn, uint32_t *flags, int(*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *), void *p_vrfy)</argsstring>
        <name>mbedtls_x509_crt_verify_with_profile</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>trust_ca</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>ca_crl</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref> *</type>
          <declname>profile</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *, int, uint32_t *)</type>
          <declname>f_vrfy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_vrfy</declname>
        </param>
        <briefdescription>
<para>Verify a chain of certificates with respect to a configurable security profile. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Same as <computeroutput><ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref></computeroutput>, but with explicit security profile.</para>
</simplesect>
<simplesect kind="note"><para>The restrictions on keys (RSA minimum size, allowed curves for ECDSA) apply to all certificates: trusted root, intermediate CAs if any, and end entity certificate.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate chain to be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trust_ca</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of trusted CAs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_crl</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of CRLs for trusted CAs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile</parametername>
</parameternamelist>
<parameterdescription>
<para>The security profile to use for the verification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cn</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected Common Name. This may be <computeroutput>NULL</computeroutput> if the CN need not be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the result of the verification. If the verification couldn&apos;t be completed, the flag value is set to (uint32_t) -1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The verification callback to use. See the documentation of <ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref> for more information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be passed to <computeroutput>f_vrfy</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the chain is valid with respect to the passed CN, CAs, CRLs and security profile. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__x509__module_1gaba46df0041dcf48fa9d164d28cf3a154" kindref="member">MBEDTLS_ERR_X509_CERT_VERIFY_FAILED</ref> in case the certificate chain verification failed. In this case, <computeroutput>*flags</computeroutput> will have one or more <computeroutput>MBEDTLS_X509_BADCERT_XXX</computeroutput> or <computeroutput>MBEDTLS_X509_BADCRL_XXX</computeroutput> flags set. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code in case of a fatal error encountered during the verification process. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="711" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="711" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga3582ba9e8e28dedc39daa2caf027a9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_verify_restartable</definition>
        <argsstring>(mbedtls_x509_crt *crt, mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl, const mbedtls_x509_crt_profile *profile, const char *cn, uint32_t *flags, int(*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *), void *p_vrfy, mbedtls_x509_crt_restart_ctx *rs_ctx)</argsstring>
        <name>mbedtls_x509_crt_verify_restartable</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>trust_ca</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>ca_crl</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref> *</type>
          <declname>profile</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *, int, uint32_t *)</type>
          <declname>f_vrfy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_vrfy</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__crt__restart__ctx" kindref="compound">mbedtls_x509_crt_restart_ctx</ref> *</type>
          <declname>rs_ctx</declname>
        </param>
        <briefdescription>
<para>Restartable version of <computeroutput>mbedtls_crt_verify_with_profile()</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Performs the same job as <computeroutput>mbedtls_crt_verify_with_profile()</computeroutput> but can return early and restart according to the limit set with <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput> to reduce blocking.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate chain to be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trust_ca</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of trusted CAs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_crl</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of CRLs for trusted CAs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile</parametername>
</parameternamelist>
<parameterdescription>
<para>The security profile to use for the verification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cn</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected Common Name. This may be <computeroutput>NULL</computeroutput> if the CN need not be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the result of the verification. If the verification couldn&apos;t be completed, the flag value is set to (uint32_t) -1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The verification callback to use. See the documentation of <ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref> for more information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be passed to <computeroutput>f_vrfy</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rs_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The restart context to use. This may be set to <computeroutput>NULL</computeroutput> to disable restartable ECC.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See <computeroutput>mbedtls_crt_verify_with_profile()</computeroutput>, or </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" kindref="member">MBEDTLS_ERR_ECP_IN_PROGRESS</ref> if maximum number of operations was reached: see <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="745" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="745" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga169e418a7c1ecf4d2dcc896cf24049a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_verify_with_ca_cb</definition>
        <argsstring>(mbedtls_x509_crt *crt, mbedtls_x509_crt_ca_cb_t f_ca_cb, void *p_ca_cb, const mbedtls_x509_crt_profile *profile, const char *cn, uint32_t *flags, int(*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *), void *p_vrfy)</argsstring>
        <name>mbedtls_x509_crt_verify_with_ca_cb</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <param>
          <type><ref refid="group__x509__module_1ga76b0dd21c9c8ab66a4577e8bd5afa736" kindref="member">mbedtls_x509_crt_ca_cb_t</ref></type>
          <declname>f_ca_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_ca_cb</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt__profile" kindref="compound">mbedtls_x509_crt_profile</ref> *</type>
          <declname>profile</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int(*)(void *, <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *, int, uint32_t *)</type>
          <declname>f_vrfy</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_vrfy</declname>
        </param>
        <briefdescription>
<para>Version of <computeroutput><ref refid="group__x509__module_1gaf044a51e5b5bc854bf12aeeccb440e55" kindref="member">mbedtls_x509_crt_verify_with_profile()</ref></computeroutput> which uses a callback to acquire the list of trusted CA certificates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate chain to be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_ca_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to be used to query for potential signers of a given child certificate. See the documentation of <ref refid="group__x509__module_1ga76b0dd21c9c8ab66a4577e8bd5afa736" kindref="member">mbedtls_x509_crt_ca_cb_t</ref> for more information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ca_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The opaque context to be passed to <computeroutput>f_ca_cb</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile</parametername>
</parameternamelist>
<parameterdescription>
<para>The security profile for the verification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cn</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected Common Name. This may be <computeroutput>NULL</computeroutput> if the CN need not be verified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the result of the verification. If the verification couldn&apos;t be completed, the flag value is set to (uint32_t) -1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The verification callback to use. See the documentation of <ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref> for more information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_vrfy</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to be passed to <computeroutput>f_vrfy</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See <computeroutput>mbedtls_crt_verify_with_profile()</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="811" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="811" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga0ab7857ffd82467207e718bb9f0131a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_check_key_usage</definition>
        <argsstring>(const mbedtls_x509_crt *crt, unsigned int usage)</argsstring>
        <name>mbedtls_x509_crt_check_key_usage</name>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>usage</declname>
        </param>
        <briefdescription>
<para>Check usage of certificate against keyUsage extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>Leaf certificate used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para>Intended usage(s) (eg MBEDTLS_X509_KU_KEY_ENCIPHERMENT before using the certificate to perform an RSA key exchange).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Except for decipherOnly and encipherOnly, a bit set in the usage argument means this bit MUST be set in the certificate. For decipherOnly and encipherOnly, it means that bit MAY be set.</para>
</simplesect>
<simplesect kind="return"><para>0 is these uses of the certificate are allowed, MBEDTLS_ERR_X509_BAD_INPUT_DATA if the keyUsage extension is present but does not match the usage argument.</para>
</simplesect>
<simplesect kind="note"><para>You should only call this function on leaf certificates, on (intermediate) CAs the keyUsage extension is automatically checked by <computeroutput><ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="842" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="842" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gad21c0e75a3fdbeb1f65e4d339e479df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_check_extended_key_usage</definition>
        <argsstring>(const mbedtls_x509_crt *crt, const char *usage_oid, size_t usage_len)</argsstring>
        <name>mbedtls_x509_crt_check_extended_key_usage</name>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>usage_oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>usage_len</declname>
        </param>
        <briefdescription>
<para>Check usage of certificate against extendedKeyUsage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>Leaf certificate used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>Intended usage (eg MBEDTLS_OID_SERVER_AUTH or MBEDTLS_OID_CLIENT_AUTH). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of usage_oid (eg given by <ref refid="group__asn1__module_1gac2f2e00874ca486c912c33bb4f7bb16a" kindref="member">MBEDTLS_OID_SIZE()</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if this use of the certificate is allowed, MBEDTLS_ERR_X509_BAD_INPUT_DATA if not.</para>
</simplesect>
<simplesect kind="note"><para>Usually only makes sense on leaf certificates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="858" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="858" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga0dc256a70f90cb68002d53bafffab232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_crt_is_revoked</definition>
        <argsstring>(const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl)</argsstring>
        <name>mbedtls_x509_crt_is_revoked</name>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__crl" kindref="compound">mbedtls_x509_crl</ref> *</type>
          <declname>crl</declname>
        </param>
        <briefdescription>
<para>Verify the certificate revocation status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>a certificate to be verified </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crl</parametername>
</parameternamelist>
<parameterdescription>
<para>the CRL to verify against</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the certificate is revoked, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="872" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="872" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga016dd06bc770e77b84005f305df20ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_crt_init</definition>
        <argsstring>(mbedtls_x509_crt *crt)</argsstring>
        <name>mbedtls_x509_crt_init</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <briefdescription>
<para>Initialize a certificate (chain) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>Certificate chain to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="880" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="880" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gab33c1e4e20bea7ce536119f54a113c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_crt_free</definition>
        <argsstring>(mbedtls_x509_crt *crt)</argsstring>
        <name>mbedtls_x509_crt_free</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>crt</declname>
        </param>
        <briefdescription>
<para>Unallocate all certificate data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crt</parametername>
</parameternamelist>
<parameterdescription>
<para>Certificate chain to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="887" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="887" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga428fd958e44acf6063a925bf95f0a8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_crt_restart_init</definition>
        <argsstring>(mbedtls_x509_crt_restart_ctx *ctx)</argsstring>
        <name>mbedtls_x509_crt_restart_init</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt__restart__ctx" kindref="compound">mbedtls_x509_crt_restart_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize a restart context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="893" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="893" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga00307f4443ed3e4dc7a1a330790f45d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_crt_restart_free</definition>
        <argsstring>(mbedtls_x509_crt_restart_ctx *ctx)</argsstring>
        <name>mbedtls_x509_crt_restart_free</name>
        <param>
          <type><ref refid="structmbedtls__x509__crt__restart__ctx" kindref="compound">mbedtls_x509_crt_restart_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free the components of a restart context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="898" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="898" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga514a86091d74365676ca755439524e61" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_x509_crt_has_ext_type</definition>
        <argsstring>(const mbedtls_x509_crt *ctx, int ext_type)</argsstring>
        <name>mbedtls_x509_crt_has_ext_type</name>
        <param>
          <type>const <ref refid="structmbedtls__x509__crt" kindref="compound">mbedtls_x509_crt</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ext_type</declname>
        </param>
        <briefdescription>
<para>Query certificate for given extension type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Certificate context to be queried, must not be <computeroutput>NULL</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ext_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension type being queried for, must be a valid extension type. Must be one of the MBEDTLS_X509_EXT_XXX values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the given extension type is not present, non-zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="913" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="913" bodyend="917"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1gaedcb73f1c615c266a348a0c62763c5de" prot="public" static="no">
        <name>MBEDTLS_X509_ID_FLAG</name>
        <param><defname>id</defname></param>
        <initializer>(1 &lt;&lt; ((id) - 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build flag from an algorithm/curve identifier (pk, md, ecp) Since 0 is always XXX_NONE, ignore it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="98" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga8d124765addc200627de55f2018b1ed3" prot="public" static="no">
        <name>MBEDTLS_X509_CRT_VERSION_1</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="135" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga46a0b7f3a4c1f279f609fd8ea304c192" prot="public" static="no">
        <name>MBEDTLS_X509_CRT_VERSION_2</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="136" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga7c22a610222ea94e1faf96223bc5d9a4" prot="public" static="no">
        <name>MBEDTLS_X509_CRT_VERSION_3</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="137" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga189113155d9c64d4b4255b16761377c7" prot="public" static="no">
        <name>MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="139" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga533580091501768fa25d4d682febbb08" prot="public" static="no">
        <name>MBEDTLS_X509_RFC5280_UTC_TIME_LEN</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="140" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga4ebc833300be4f784ac13ff0a38085ce" prot="public" static="no">
        <name>MBEDTLS_X509_MAX_FILE_PATH_LEN</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="143" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga1041604652598d8ec39e65aa2a2146d8" prot="public" static="no">
        <name>MBEDTLS_X509_CRT_ERROR_INFO_LIST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="152" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__x509__module_1ga54d79091344c4e6a33633035f5a695cb" prot="public" static="no">
        <name>MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE</name>
        <initializer>(<ref refid="group__x509__module_1gab98caf7dfede54b5c576b5a27a5c6a6a" kindref="member">MBEDTLS_X509_MAX_INTERMEDIATE_CA</ref> + 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max size of verification chain: end-entity + intermediates + trusted root </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="258" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Structures and functions for X.509 Certificate Signing Requests (CSR)</header>
      <memberdef kind="typedef" id="group__x509__module_1gac0e98d575eea1177ec909ecb9bc7d6dd" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509__csr" kindref="compound">mbedtls_x509_csr</ref></type>
        <definition>typedef struct mbedtls_x509_csr mbedtls_x509_csr</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509_csr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Certificate Signing Request (CSR) structure.</para>
<para>Some fields of this structure are publicly readable. Do not modify them except via Mbed TLS library functions: the effect of modifying those fields or the data that those fields point to is unspecified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="61" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__x509__module_1gaaa73ac5a333d4af2c5416789bf341ded" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref></type>
        <definition>typedef struct mbedtls_x509write_csr mbedtls_x509write_csr</definition>
        <argsstring></argsstring>
        <name>mbedtls_x509write_csr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container for writing a CSR </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="72" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga4c58fa3804ea9feb1acf745221f17208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_csr_parse_der</definition>
        <argsstring>(mbedtls_x509_csr *csr, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_x509_csr_parse_der</name>
        <param>
          <type><ref refid="structmbedtls__x509__csr" kindref="compound">mbedtls_x509_csr</ref> *</type>
          <declname>csr</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Load a Certificate Signing Request (CSR) in DER format. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>CSR attributes (if any) are currently silently ignored.</para>
</simplesect>
<simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the CRL data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific X509 error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="90" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="90" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga53012fb8859f4835ccfb0a5e359b3176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_csr_parse</definition>
        <argsstring>(mbedtls_x509_csr *csr, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_x509_csr_parse</name>
        <param>
          <type><ref refid="structmbedtls__x509__csr" kindref="compound">mbedtls_x509_csr</ref> *</type>
          <declname>csr</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Load a Certificate Signing Request (CSR), DER or PEM format. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>See notes for <computeroutput><ref refid="group__x509__module_1ga4c58fa3804ea9feb1acf745221f17208" kindref="member">mbedtls_x509_csr_parse_der()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer holding the CRL data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer (including the terminating null byte for PEM data)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific X509 or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="109" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gaf49db7323eee45d9649600de18d715f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_csr_parse_file</definition>
        <argsstring>(mbedtls_x509_csr *csr, const char *path)</argsstring>
        <name>mbedtls_x509_csr_parse_file</name>
        <param>
          <type><ref refid="structmbedtls__x509__csr" kindref="compound">mbedtls_x509_csr</ref> *</type>
          <declname>csr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load a Certificate Signing Request (CSR) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>See notes for <computeroutput><ref refid="group__x509__module_1ga53012fb8859f4835ccfb0a5e359b3176" kindref="member">mbedtls_x509_csr_parse()</ref></computeroutput> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>filename to read the CSR from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific X509 or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="122" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="122" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gaeec330c8cb351adc2870f4f088f36fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_csr_info</definition>
        <argsstring>(char *buf, size_t size, const char *prefix, const mbedtls_x509_csr *csr)</argsstring>
        <name>mbedtls_x509_csr_info</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__csr" kindref="compound">mbedtls_x509_csr</ref> *</type>
          <declname>csr</declname>
        </param>
        <briefdescription>
<para>Returns an informational string about the CSR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>A line prefix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>The X509 CSR to represent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the string written (not including the terminated nul byte), or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="138" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="138" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga984db025f6953ea61be7dfca2d928f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_csr_init</definition>
        <argsstring>(mbedtls_x509_csr *csr)</argsstring>
        <name>mbedtls_x509_csr_init</name>
        <param>
          <type><ref refid="structmbedtls__x509__csr" kindref="compound">mbedtls_x509_csr</ref> *</type>
          <declname>csr</declname>
        </param>
        <briefdescription>
<para>Initialize a CSR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="147" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gac2139becff64aa7294ecad4f40767a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_csr_free</definition>
        <argsstring>(mbedtls_x509_csr *csr)</argsstring>
        <name>mbedtls_x509_csr_free</name>
        <param>
          <type><ref refid="structmbedtls__x509__csr" kindref="compound">mbedtls_x509_csr</ref> *</type>
          <declname>csr</declname>
        </param>
        <briefdescription>
<para>Unallocate all CSR data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="154" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="154" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__x509__module_1ga576f34a7432238db229137bdfc3cfde0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_dn_gets</definition>
        <argsstring>(char *buf, size_t size, const mbedtls_x509_name *dn)</argsstring>
        <name>mbedtls_x509_dn_gets</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="group__x509__module_1ga2272228c7776102328df31623af3168c" kindref="member">mbedtls_x509_name</ref> *</type>
          <declname>dn</declname>
        </param>
        <briefdescription>
<para>Store the certificate DN in printable form into buf; no more than size characters will be written. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dn</parametername>
</parameternamelist>
<parameterdescription>
<para>The X509 name to represent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the string written (not including the terminated nul byte), or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="322" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="322" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga95debe4ffc1f0fcdc8dc997fc352e494" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__x509__module_1ga2272228c7776102328df31623af3168c" kindref="member">mbedtls_x509_name</ref> *</type>
        <definition>static mbedtls_x509_name* mbedtls_x509_dn_get_next</definition>
        <argsstring>(mbedtls_x509_name *dn)</argsstring>
        <name>mbedtls_x509_dn_get_next</name>
        <param>
          <type><ref refid="group__x509__module_1ga2272228c7776102328df31623af3168c" kindref="member">mbedtls_x509_name</ref> *</type>
          <declname>dn</declname>
        </param>
        <briefdescription>
<para>Return the next relative DN in an X509 name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Intended use is to compare function result to dn-&gt;next in order to detect boundaries of multi-valued RDNs.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dn</parametername>
</parameternamelist>
<parameterdescription>
<para>Current node in the X509 name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the first attribute-value pair of the next RDN in sequence, or NULL if end is reached. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="335" column="33" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="335" bodyend="342"/>
        <references refid="structmbedtls__asn1__named__data_1a38f29c37c55319b3c0a9c998c3e5bd0d" compoundref="asn1_8h" startline="189">mbedtls_asn1_named_data::next</references>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gaf9ce1b81550ac7290706f99c71150e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_serial_gets</definition>
        <argsstring>(char *buf, size_t size, const mbedtls_x509_buf *serial)</argsstring>
        <name>mbedtls_x509_serial_gets</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="group__x509__module_1ga4d02c9e8e4e2934555e0d132cd2976dc" kindref="member">mbedtls_x509_buf</ref> *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Store the certificate serial in printable form into buf; no more than size characters will be written. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>The X509 serial to represent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the string written (not including the terminated nul byte), or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="355" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="355" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga6f6d1dffc9f8d1e60d4ffdbdaad24de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_time_cmp</definition>
        <argsstring>(const mbedtls_x509_time *t1, const mbedtls_x509_time *t2)</argsstring>
        <name>mbedtls_x509_time_cmp</name>
        <param>
          <type>const <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> *</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Compare pair of <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> to compare</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if t1 is before t2 0 if t1 equals t2 &gt; 0 if t1 is after t2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="367" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="367" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga785d89133804fc8b10ab13074623132e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_time_gmtime</definition>
        <argsstring>(mbedtls_time_t tt, mbedtls_x509_time *now)</argsstring>
        <name>mbedtls_x509_time_gmtime</name>
        <param>
          <type><ref refid="platform__time_8h_1a867121bdcdb8233c28c1cca32cf0839f" kindref="member">mbedtls_time_t</ref></type>
          <declname>tt</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> *</type>
          <declname>now</declname>
        </param>
        <briefdescription>
<para>Fill <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> with provided mbedtls_time_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tt</parametername>
</parameternamelist>
<parameterdescription>
<para>mbedtls_time_t to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>now</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> to fill with converted mbedtls_time_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success </para>
</simplesect>
<simplesect kind="return"><para>A non-zero return value on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="379" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="379" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga061f9945351822e8ccbeb7f3d7fc4fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_time_is_past</definition>
        <argsstring>(const mbedtls_x509_time *to)</argsstring>
        <name>mbedtls_x509_time_is_past</name>
        <param>
          <type>const <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Check a given <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> against the system time and tell if it&apos;s in the past. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Intended usage is &quot;if( is_past( valid_to ) ) ERROR&quot;. Hence the return value of 1 if on internal errors.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the given time is in the past or an error occurred, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="394" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="394" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga106a78f332b05b10010d01e3c8234ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_time_is_future</definition>
        <argsstring>(const mbedtls_x509_time *from)</argsstring>
        <name>mbedtls_x509_time_is_future</name>
        <param>
          <type>const <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Check a given <ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> against the system time and tell if it&apos;s in the future. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Intended usage is &quot;if( is_future( valid_from ) ) ERROR&quot;. Hence the return value of 1 if on internal errors.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmbedtls__x509__time" kindref="compound">mbedtls_x509_time</ref> to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the given time is in the future or an error occurred, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="408" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="408" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga23a6ac0ee41077b33caccd7a22e97e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509_parse_subject_alt_name</definition>
        <argsstring>(const mbedtls_x509_buf *san_buf, mbedtls_x509_subject_alternative_name *san)</argsstring>
        <name>mbedtls_x509_parse_subject_alt_name</name>
        <param>
          <type>const <ref refid="group__x509__module_1ga4d02c9e8e4e2934555e0d132cd2976dc" kindref="member">mbedtls_x509_buf</ref> *</type>
          <declname>san_buf</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__x509__subject__alternative__name" kindref="compound">mbedtls_x509_subject_alternative_name</ref> *</type>
          <declname>san</declname>
        </param>
        <briefdescription>
<para>This function parses an item in the SubjectAlternativeNames extension. Please note that this function might allocate additional memory for a subject alternative name, thus mbedtls_x509_free_subject_alt_name has to be called to dispose of this additional memory afterwards. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>san_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the raw data item of the subject alternative name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>san</parametername>
</parameternamelist>
<parameterdescription>
<para>The target structure to populate with the parsed presentation of the subject alternative name encoded in <computeroutput>san_buf</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Supported GeneralName types, as defined in RFC 5280: &quot;rfc822Name&quot;, &quot;dnsName&quot;, &quot;directoryName&quot;, &quot;uniformResourceIdentifier&quot; and &quot;hardware_module_name&quot; of type &quot;otherName&quot;, as defined in RFC 4108.</para>
</simplesect>
<simplesect kind="note"><para>This function should be called on a single raw data of subject alternative name. For example, after successful certificate parsing, one must iterate on every item in the <computeroutput>crt-&gt;subject_alt_names</computeroutput> sequence, and pass it to this function.</para>
</simplesect>
<simplesect kind="warning"><para>The target structure contains pointers to the raw data of the parsed certificate, and its lifetime is restricted by the lifetime of the certificate.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success </para>
</simplesect>
<simplesect kind="return"><para><ref refid="group__x509__module_1ga185bc7f27a2b1f7742537a2377c52ee3" kindref="member">MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE</ref> for an unsupported SAN type. </para>
</simplesect>
<simplesect kind="return"><para>Another negative value for any other failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="442" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="442" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga2ac70cb1dd9c3448cfddba7f0fcb3496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509_free_subject_alt_name</definition>
        <argsstring>(mbedtls_x509_subject_alternative_name *san)</argsstring>
        <name>mbedtls_x509_free_subject_alt_name</name>
        <param>
          <type><ref refid="structmbedtls__x509__subject__alternative__name" kindref="compound">mbedtls_x509_subject_alternative_name</ref> *</type>
          <declname>san</declname>
        </param>
        <briefdescription>
<para>Unallocate all data related to subject alternative name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>san</parametername>
</parameternamelist>
<parameterdescription>
<para>SAN structure - extra memory owned by this structure will be freed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="449" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" declline="449" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga9da6bf87b583e0eea76bc3ca21a1f3dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_crt_init</definition>
        <argsstring>(mbedtls_x509write_cert *ctx)</argsstring>
        <name>mbedtls_x509write_crt_init</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize a CRT writing context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="927" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="927" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gaa068b95987692787e169dc9d67677e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_crt_set_version</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, int version)</argsstring>
        <name>mbedtls_x509write_crt_set_version</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Set the version for a Certificate Default: MBEDTLS_X509_CRT_VERSION_3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>version to set (MBEDTLS_X509_CRT_VERSION_1, MBEDTLS_X509_CRT_VERSION_2 or MBEDTLS_X509_CRT_VERSION_3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="937" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="937" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga9dba4f3f2580b4dbe6050fc3e7058cb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="platform__util_8h_1aa9f53b232ef244efb301233d111930dc" kindref="member">MBEDTLS_DEPRECATED</ref></type>
        <definition>int MBEDTLS_DEPRECATED mbedtls_x509write_crt_set_serial</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, const mbedtls_mpi *serial)</argsstring>
        <name>mbedtls_x509write_crt_set_serial</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Set the serial number for a Certificate. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and will be removed in a future version of the library. Please use <ref refid="group__x509__module_1ga55628800b330788803784b97c54ea37c" kindref="member">mbedtls_x509write_crt_set_serial_raw()</ref> instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>Even though the MBEDTLS_BIGNUM_C guard looks redundant since X509 depends on PK and PK depends on BIGNUM, this emphasizes a direct dependency between X509 and BIGNUM which is going to be deprecated in the future.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>serial number to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="957" column="24" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="957" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga55628800b330788803784b97c54ea37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_serial_raw</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, unsigned char *serial, size_t serial_len)</argsstring>
        <name>mbedtls_x509write_crt_set_serial_raw</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>serial_len</declname>
        </param>
        <briefdescription>
<para>Set the serial number for a Certificate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>A raw array of bytes containing the serial number in big endian format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of valid bytes (expressed in bytes) in <computeroutput>serial</computeroutput> input buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_BAD_INPUT_DATA if the provided input buffer is too big (longer than MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="974" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="974" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gac7f9ece75e647023a0411a7bfa72b9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_validity</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, const char *not_before, const char *not_after)</argsstring>
        <name>mbedtls_x509write_crt_set_validity</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>not_before</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>not_after</declname>
        </param>
        <briefdescription>
<para>Set the validity period for a Certificate Timestamps should be in string format for UTC timezone i.e. &quot;YYYYMMDDhhmmss&quot; e.g. &quot;20131231235959&quot; for December 31st 2013 at 23:59:59. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>not_before</parametername>
</parameternamelist>
<parameterdescription>
<para>not_before timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>not_after</parametername>
</parameternamelist>
<parameterdescription>
<para>not_after timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if timestamp was parsed successfully, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="991" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="991" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga5378017315ad6ac4da70f07777259e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_issuer_name</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, const char *issuer_name)</argsstring>
        <name>mbedtls_x509write_crt_set_issuer_name</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>issuer_name</declname>
        </param>
        <briefdescription>
<para>Set the issuer name for a Certificate Issuer names should contain a comma-separated list of OID types and values: e.g. &quot;C=UK,O=ARM,CN=Mbed TLS CA&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>issuer_name</parametername>
</parameternamelist>
<parameterdescription>
<para>issuer name to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if issuer name was parsed successfully, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1006" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1006" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga272798b488a8ad984c4db95142392ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_subject_name</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, const char *subject_name)</argsstring>
        <name>mbedtls_x509write_crt_set_subject_name</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>subject_name</declname>
        </param>
        <briefdescription>
<para>Set the subject name for a Certificate Subject names should contain a comma-separated list of OID types and values: e.g. &quot;C=UK,O=ARM,CN=Mbed TLS Server 1&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subject_name</parametername>
</parameternamelist>
<parameterdescription>
<para>subject name to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if subject name was parsed successfully, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1021" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1021" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga110c19b1d4379efa650a7e431276f9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_crt_set_subject_key</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, mbedtls_pk_context *key)</argsstring>
        <name>mbedtls_x509write_crt_set_subject_key</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Set the subject public key for the certificate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>public key to include </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1030" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1030" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga416f26146d68bb79aac90e8e48bbe7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_crt_set_issuer_key</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, mbedtls_pk_context *key)</argsstring>
        <name>mbedtls_x509write_crt_set_issuer_key</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Set the issuer key used for signing the certificate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>private key to sign with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1038" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1038" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gabdb1cdce6c47b3e697258279bb0e8715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_crt_set_md_alg</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, mbedtls_md_type_t md_alg)</argsstring>
        <name>mbedtls_x509write_crt_set_md_alg</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <briefdescription>
<para>Set the MD algorithm to use for the signature (e.g. MBEDTLS_MD_SHA1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>MD algorithm to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1047" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1047" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga57804fd223bfd8601bdc76550385a50b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_extension</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, const char *oid, size_t oid_len, int critical, const unsigned char *val, size_t val_len)</argsstring>
        <name>mbedtls_x509write_crt_set_extension</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oid_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>critical</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>val_len</declname>
        </param>
        <briefdescription>
<para>Generic function to add to or replace an extension in the CRT. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oid</parametername>
</parameternamelist>
<parameterdescription>
<para>OID of the extension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the OID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>critical</parametername>
</parameternamelist>
<parameterdescription>
<para>if the extension is critical (per the RFC&apos;s definition) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the extension OCTET STRING </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the value data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1062" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1062" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gae13aefe1e123dcbcefe1eccd7968b6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_basic_constraints</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, int is_ca, int max_pathlen)</argsstring>
        <name>mbedtls_x509write_crt_set_basic_constraints</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_ca</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_pathlen</declname>
        </param>
        <briefdescription>
<para>Set the basicConstraints extension for a CRT. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_ca</parametername>
</parameternamelist>
<parameterdescription>
<para>is this a CA certificate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_pathlen</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of certificate chains below this certificate (only for CA certificates, -1 is unlimited)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1078" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1078" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga09dd1d818f15b9655f5dbcd3d7c1ec0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_subject_key_identifier</definition>
        <argsstring>(mbedtls_x509write_cert *ctx)</argsstring>
        <name>mbedtls_x509write_crt_set_subject_key_identifier</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Set the subjectKeyIdentifier extension for a CRT Requires that <ref refid="group__x509__module_1ga110c19b1d4379efa650a7e431276f9b0" kindref="member">mbedtls_x509write_crt_set_subject_key()</ref> has been called before. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1091" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1091" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga7e43c8a91bdd1f5c0b8f729ef602b624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_authority_key_identifier</definition>
        <argsstring>(mbedtls_x509write_cert *ctx)</argsstring>
        <name>mbedtls_x509write_crt_set_authority_key_identifier</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Set the authorityKeyIdentifier extension for a CRT Requires that <ref refid="group__x509__module_1ga416f26146d68bb79aac90e8e48bbe7df" kindref="member">mbedtls_x509write_crt_set_issuer_key()</ref> has been called before. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1102" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga5ce0db5d77fe07074601c585fe63089a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_key_usage</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, unsigned int key_usage)</argsstring>
        <name>mbedtls_x509write_crt_set_key_usage</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>key_usage</declname>
        </param>
        <briefdescription>
<para>Set the Key Usage Extension flags (e.g. MBEDTLS_X509_KU_DIGITAL_SIGNATURE | MBEDTLS_X509_KU_KEY_CERT_SIGN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_usage</parametername>
</parameternamelist>
<parameterdescription>
<para>key usage flags to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1114" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1114" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga22fa341e2307c96b054c32a6be01b2a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_ext_key_usage</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, const mbedtls_asn1_sequence *exts)</argsstring>
        <name>mbedtls_x509write_crt_set_ext_key_usage</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__asn1__sequence" kindref="compound">mbedtls_asn1_sequence</ref> *</type>
          <declname>exts</declname>
        </param>
        <briefdescription>
<para>Set the Extended Key Usage Extension (e.g. MBEDTLS_OID_SERVER_AUTH) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exts</parametername>
</parameternamelist>
<parameterdescription>
<para>extended key usage extensions to set, a sequence of MBEDTLS_ASN1_OID objects</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1127" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga62f8e6d643c142c87662655bcfc7c7a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_set_ns_cert_type</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, unsigned char ns_cert_type)</argsstring>
        <name>mbedtls_x509write_crt_set_ns_cert_type</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>ns_cert_type</declname>
        </param>
        <briefdescription>
<para>Set the Netscape Cert Type flags (e.g. MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT | MBEDTLS_X509_NS_CERT_TYPE_EMAIL) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ns_cert_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Netscape Cert Type flags to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1139" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1139" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gaacd2986253f977770c2353a54cf2e670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_crt_free</definition>
        <argsstring>(mbedtls_x509write_cert *ctx)</argsstring>
        <name>mbedtls_x509write_crt_free</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free the contents of a CRT write context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CRT context to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1147" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gada0550c8f7ce3e8b360f69c7475fa32f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_der</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, unsigned char *buf, size_t size, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_x509write_crt_der</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Write a built up certificate to a X509 DER structure Note: data is written at the end of the buffer! Use the return value to determine where you should start using the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>certificate to write away </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of data written if successful, or a specific error code</para>
</simplesect>
<simplesect kind="note"><para><computeroutput>f_rng</computeroutput> is used for the signature operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1166" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1166" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga2b1106722175cf04ef07313626728886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_crt_pem</definition>
        <argsstring>(mbedtls_x509write_cert *ctx, unsigned char *buf, size_t size, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_x509write_crt_pem</name>
        <param>
          <type><ref refid="structmbedtls__x509write__cert" kindref="compound">mbedtls_x509write_cert</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Write a built up certificate to a X509 PEM string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>certificate to write away </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific error code</para>
</simplesect>
<simplesect kind="note"><para><computeroutput>f_rng</computeroutput> is used for the signature operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" line="1184" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_crt.h" declline="1184" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga7892bce1ba95bfe909929f9b9c1362e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_csr_init</definition>
        <argsstring>(mbedtls_x509write_csr *ctx)</argsstring>
        <name>mbedtls_x509write_csr_init</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize a CSR context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="165" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga954eae166b125cea2115b7db8c896e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_csr_set_subject_name</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, const char *subject_name)</argsstring>
        <name>mbedtls_x509write_csr_set_subject_name</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>subject_name</declname>
        </param>
        <briefdescription>
<para>Set the subject name for a CSR Subject names should contain a comma-separated list of OID types and values: e.g. &quot;C=UK,O=ARM,CN=Mbed TLS Server 1&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subject_name</parametername>
</parameternamelist>
<parameterdescription>
<para>subject name to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if subject name was parsed successfully, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="179" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="179" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gac4f0b724b1c7006d178e2d71c964f54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_csr_set_key</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, mbedtls_pk_context *key)</argsstring>
        <name>mbedtls_x509write_csr_set_key</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Set the key for a CSR (public key will be included, private key used to sign the CSR when writing it) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Asymmetric key to include </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="189" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga2be90e1d59d29b2309670700a8c0420f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_csr_set_md_alg</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, mbedtls_md_type_t md_alg)</argsstring>
        <name>mbedtls_x509write_csr_set_md_alg</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <briefdescription>
<para>Set the MD algorithm to use for the signature (e.g. MBEDTLS_MD_SHA1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>MD algorithm to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="198" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gac5ed085a0dee293f6c152ecd597473be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_csr_set_key_usage</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, unsigned char key_usage)</argsstring>
        <name>mbedtls_x509write_csr_set_key_usage</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>key_usage</declname>
        </param>
        <briefdescription>
<para>Set the Key Usage Extension flags (e.g. MBEDTLS_X509_KU_DIGITAL_SIGNATURE | MBEDTLS_X509_KU_KEY_CERT_SIGN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_usage</parametername>
</parameternamelist>
<parameterdescription>
<para>key usage flags to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED</para>
</simplesect>
<simplesect kind="note"><para>The <computeroutput>decipherOnly</computeroutput> flag from the Key Usage extension is represented by bit 8 (i.e. <computeroutput>0x8000</computeroutput>), which cannot typically be represented in an unsigned char. Therefore, the flag <computeroutput>decipherOnly</computeroutput> (i.e. <ref refid="x509_8h_1a31fc57928d31156729c4a18726044bfd" kindref="member">MBEDTLS_X509_KU_DECIPHER_ONLY</ref>) cannot be set using this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="217" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="217" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga1e858c3446a4d3701c19c6fae89004e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_csr_set_subject_alternative_name</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, const mbedtls_x509_san_list *san_list)</argsstring>
        <name>mbedtls_x509write_csr_set_subject_alternative_name</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__x509__san__list" kindref="compound">mbedtls_x509_san_list</ref> *</type>
          <declname>san_list</declname>
        </param>
        <briefdescription>
<para>Set Subject Alternative Name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>san_list</parametername>
</parameternamelist>
<parameterdescription>
<para>List of SAN values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED</para>
</simplesect>
<simplesect kind="note"><para>Only &quot;dnsName&quot;, &quot;uniformResourceIdentifier&quot; and &quot;otherName&quot;, as defined in RFC 5280, are supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="230" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="230" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga22571c0a8439dcacaa9762eca4d73a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_csr_set_ns_cert_type</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, unsigned char ns_cert_type)</argsstring>
        <name>mbedtls_x509write_csr_set_ns_cert_type</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>ns_cert_type</declname>
        </param>
        <briefdescription>
<para>Set the Netscape Cert Type flags (e.g. MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT | MBEDTLS_X509_NS_CERT_TYPE_EMAIL) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ns_cert_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Netscape Cert Type flags to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="242" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="242" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga9b4c8222df57c58315f8fbe5b8f5f860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_csr_set_extension</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, const char *oid, size_t oid_len, int critical, const unsigned char *val, size_t val_len)</argsstring>
        <name>mbedtls_x509write_csr_set_extension</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oid_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>critical</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>val_len</declname>
        </param>
        <briefdescription>
<para>Generic function to add to or replace an extension in the CSR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oid</parametername>
</parameternamelist>
<parameterdescription>
<para>OID of the extension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oid_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the OID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>critical</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to 1 to mark the extension as critical, 0 otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the extension OCTET STRING </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the value data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="258" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="258" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga223d765f33318e804739f9cf81eddef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_x509write_csr_free</definition>
        <argsstring>(mbedtls_x509write_csr *ctx)</argsstring>
        <name>mbedtls_x509write_csr_free</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free the contents of a CSR context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR context to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="268" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="268" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1gade066bfe50987c491ff51ce4f347fcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_csr_der</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, unsigned char *buf, size_t size, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_x509write_csr_der</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Write a CSR (Certificate Signing Request) to a DER structure Note: data is written at the end of the buffer! Use the return value to determine where you should start using the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR to write away </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of data written if successful, or a specific error code</para>
</simplesect>
<simplesect kind="note"><para><computeroutput>f_rng</computeroutput> is used for the signature operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="288" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="288" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__x509__module_1ga5851f2aeb7d9a4676c16d2a837cad0cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_x509write_csr_pem</definition>
        <argsstring>(mbedtls_x509write_csr *ctx, unsigned char *buf, size_t size, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_x509write_csr_pem</name>
        <param>
          <type><ref refid="structmbedtls__x509write__csr" kindref="compound">mbedtls_x509write_csr</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Write a CSR (Certificate Signing Request) to a PEM string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR to write away </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific error code</para>
</simplesect>
<simplesect kind="note"><para><computeroutput>f_rng</computeroutput> is used for the signature operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" line="307" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509_csr.h" declline="307" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__x509__module_1gab98caf7dfede54b5c576b5a27a5c6a6a" prot="public" static="no">
        <name>MBEDTLS_X509_MAX_INTERMEDIATE_CA</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of intermediate CAs in a verification chain. That is, maximum length of the chain, excluding the end-entity certificate and the trusted root certificate.</para>
<para>Set this to a low value to prevent an adversary from making you waste resources verifying an overlong certificate chain. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" line="37" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/x509.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The X.509 module provides X.509 support for reading, writing and verification of certificates. In summary:<itemizedlist>
<listitem><para>X.509 certificate (CRT) reading (see <computeroutput><ref refid="group__x509__module_1ga033567483649030f7f859db4f4cb7e14" kindref="member">mbedtls_x509_crt_parse()</ref></computeroutput>, <computeroutput><ref refid="group__x509__module_1ga003c2483a2691e025641fa9d68d4a96a" kindref="member">mbedtls_x509_crt_parse_der()</ref></computeroutput>, <computeroutput><ref refid="group__x509__module_1gad4da63133d3590aa311488497d4c38ec" kindref="member">mbedtls_x509_crt_parse_file()</ref></computeroutput>).</para>
</listitem><listitem><para>X.509 certificate revocation list (CRL) reading (see <computeroutput><ref refid="group__x509__module_1gadfce4fc5f5af62e371695e74c5b67d70" kindref="member">mbedtls_x509_crl_parse()</ref></computeroutput>, <computeroutput><ref refid="group__x509__module_1ga29ab5f1216a727b334ee26cce9f5d4b5" kindref="member">mbedtls_x509_crl_parse_der()</ref></computeroutput>, and <computeroutput><ref refid="group__x509__module_1ga8e096827f1240b8f8bc15d6a83593f22" kindref="member">mbedtls_x509_crl_parse_file()</ref></computeroutput>).</para>
</listitem><listitem><para>X.509 certificate signature verification (see <computeroutput><ref refid="group__x509__module_1ga98ed4504e4f832b735a230acf54fcde3" kindref="member">mbedtls_x509_crt_verify()</ref></computeroutput> and <computeroutput><ref refid="group__x509__module_1gaf044a51e5b5bc854bf12aeeccb440e55" kindref="member">mbedtls_x509_crt_verify_with_profile()</ref></computeroutput>.</para>
</listitem><listitem><para>X.509 certificate writing and certificate request writing (see <computeroutput><ref refid="group__x509__module_1gada0550c8f7ce3e8b360f69c7475fa32f" kindref="member">mbedtls_x509write_crt_der()</ref></computeroutput> and <computeroutput><ref refid="group__x509__module_1gade066bfe50987c491ff51ce4f347fcb4" kindref="member">mbedtls_x509write_csr_der()</ref></computeroutput>).</para>
</listitem></itemizedlist>
</para>
<para>This module can be used to build a certificate authority (CA) chain and verify its signature. It is also used to generate Certificate Signing Requests and X.509 certificates just as a CA would do. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
