<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__crypto__types" kind="group">
    <compoundname>crypto_types</compoundname>
    <title>Key and algorithm types</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t psa_key_type_t</definition>
        <argsstring></argsstring>
        <name>psa_key_type_t</name>
        <briefdescription>
<para>Encoding of a key type. </para>
        </briefdescription>
        <detaileddescription>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_KEY_TYPE_xxx</computeroutput>.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="71" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_ecc_family_t</definition>
        <argsstring></argsstring>
        <name>psa_ecc_family_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of PSA elliptic curve family identifiers.</para>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_ECC_FAMILY_xxx</computeroutput>.</para>
<para>The curve identifier is required to create an ECC key using the <ref refid="group__crypto__types_1ga0b6f5d4d5037c54ffa850d8059c32df0" kindref="member">PSA_KEY_TYPE_ECC_KEY_PAIR()</ref> or <ref refid="group__crypto__types_1gad54c03d3b47020e571a72cd01d978cf2" kindref="member">PSA_KEY_TYPE_ECC_PUBLIC_KEY()</ref> macros.</para>
<para>Values defined by this standard will never be in the range 0x80-0xff. Vendors who define additional families must use an encoding in this range.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="90" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t psa_dh_family_t</definition>
        <argsstring></argsstring>
        <name>psa_dh_family_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of PSA Diffie-Hellman group family identifiers.</para>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_DH_FAMILY_xxx</computeroutput>.</para>
<para>The group identifier is required to create a Diffie-Hellman key using the <ref refid="group__crypto__types_1gab4f857c4cd56f5fe65ded421e61bcc8c" kindref="member">PSA_KEY_TYPE_DH_KEY_PAIR()</ref> or <ref refid="group__crypto__types_1gaa22f0f2ea89b929f2fadc19890cc5d5c" kindref="member">PSA_KEY_TYPE_DH_PUBLIC_KEY()</ref> macros.</para>
<para>Values defined by this standard will never be in the range 0x80-0xff. Vendors who define additional families must use an encoding in this range.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="109" column="17" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t psa_algorithm_t</definition>
        <argsstring></argsstring>
        <name>psa_algorithm_t</name>
        <briefdescription>
<para>Encoding of a cryptographic algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>Values of this type are generally constructed by macros called <computeroutput>PSA_ALG_xxx</computeroutput>.</para>
<para>For algorithms that can be applied to multiple key types, this type does not encode the key type. For example, for symmetric ciphers based on a block cipher, <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> encodes the block cipher mode and the padding mode while the block cipher itself is encoded via <ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>.</para>
<para><simplesect kind="note"><para>Values of this type are encoded in the persistent key store. Any changes to existing values will require bumping the storage format version and providing a translation when reading the old format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" line="127" column="18" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_types.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__crypto__types_1ga5e7439c2905136366c3a876e62e5ddfc" prot="public" static="no">
        <name>PSA_KEY_TYPE_DSA_PUBLIC_KEY</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x4002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DSA public key.</para>
<para>The import and export format is the representation of the public key <computeroutput>y = g^x mod p</computeroutput> as a big-endian byte string. The length of the byte string is the length of the base prime <computeroutput>p</computeroutput> in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="328" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga7d4a45c147cb0ecb55d01d9c04bfed76" prot="public" static="no">
        <name>PSA_KEY_TYPE_DSA_KEY_PAIR</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x7002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DSA key pair (private and public key).</para>
<para>The import and export format is the representation of the private key <computeroutput>x</computeroutput> as a big-endian byte string. The length of the byte string is the private key size in bytes (leading zeroes are not stripped).</para>
<para>Deterministic DSA key derivation with psa_generate_derived_key follows FIPS 186-4 <sect/>B.1.2: interpret the byte string as integer in big-endian order. Discard it if it is not in the range [0, <emphasis>N</emphasis> - 2] where <emphasis>N</emphasis> is the boundary of the private key domain (the prime <emphasis>p</emphasis> for Diffie-Hellman, the subprime <emphasis>q</emphasis> for DSA, or the order of the curve&apos;s base point for ECC). Add 1 to the resulting integer and use this as the private key <emphasis>x</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="346" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga273fdfcf23eb0624f8b63d2321cf95c1" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_DSA</name>
        <param><defname>type</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" kindref="member">PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</ref>(type) == <ref refid="group__crypto__types_1ga5e7439c2905136366c3a876e62e5ddfc" kindref="member">PSA_KEY_TYPE_DSA_PUBLIC_KEY</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is a DSA key (pair or public-only). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="349" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga863284106894476e3a8524805410b55b" prot="public" static="no">
        <name>PSA_ALG_DSA_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="352" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9a68efdddff5ae95f104a1416b12742e" prot="public" static="no">
        <name>PSA_ALG_DSA</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga863284106894476e3a8524805410b55b" kindref="member">PSA_ALG_DSA_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DSA signature with hashing.</para>
<para>This is the signature scheme defined by FIPS 186-4, with a random per-message secret number (<emphasis>k</emphasis>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding DSA signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="367" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad3800dafc62d6a17bcae4bce98402e68" prot="public" static="no">
        <name>PSA_ALG_DETERMINISTIC_DSA_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="369" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1d2a96f788cce4f8fc156d13342e70de" prot="public" static="no">
        <name>PSA_ALG_DSA_DETERMINISTIC_FLAG</name>
        <initializer><ref refid="group__crypto__types_1ga409294c965c3e28728f8cb9822e886d1" kindref="member">PSA_ALG_ECDSA_DETERMINISTIC_FLAG</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="370" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab8eb98fb6d2e094e47f3b44dfe128f94" prot="public" static="no">
        <name>PSA_ALG_DETERMINISTIC_DSA</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gad3800dafc62d6a17bcae4bce98402e68" kindref="member">PSA_ALG_DETERMINISTIC_DSA_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deterministic DSA signature with hashing.</para>
<para>This is the deterministic variant defined by RFC 6979 of the signature scheme defined by FIPS 186-4.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding DSA signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="385" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" prot="public" static="no">
        <name>PSA_ALG_IS_DSA</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref> &amp; ~<ref refid="group__crypto__types_1ga1d2a96f788cce4f8fc156d13342e70de" kindref="member">PSA_ALG_DSA_DETERMINISTIC_FLAG</ref>) ==  \
     <ref refid="group__crypto__types_1ga863284106894476e3a8524805410b55b" kindref="member">PSA_ALG_DSA_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="387" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae01ae792228c16eac05102f8e900efd1" prot="public" static="no">
        <name>PSA_ALG_DSA_IS_DETERMINISTIC</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga1d2a96f788cce4f8fc156d13342e70de" kindref="member">PSA_ALG_DSA_DETERMINISTIC_FLAG</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="390" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga11f7d6fe7a4441143ed398420b7d1980" prot="public" static="no">
        <name>PSA_ALG_IS_DETERMINISTIC_DSA</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" kindref="member">PSA_ALG_IS_DSA</ref>(alg) &amp;&amp; <ref refid="group__crypto__types_1gae01ae792228c16eac05102f8e900efd1" kindref="member">PSA_ALG_DSA_IS_DETERMINISTIC</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="392" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga474c0582c4726d0c0274e470f4199cf9" prot="public" static="no">
        <name>PSA_ALG_IS_RANDOMIZED_DSA</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" kindref="member">PSA_ALG_IS_DSA</ref>(alg) &amp;&amp; !<ref refid="group__crypto__types_1gae01ae792228c16eac05102f8e900efd1" kindref="member">PSA_ALG_DSA_IS_DETERMINISTIC</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="394" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga15b8c876869f7b69d8e6563d235b9825" prot="public" static="no">
        <name>PSA_ALG_IS_VENDOR_HASH_AND_SIGN</name>
        <param><defname>alg</defname></param>
        <initializer><ref refid="group__crypto__types_1gacfc3cd50ef0c4bf694cf936079bcbaee" kindref="member">PSA_ALG_IS_DSA</ref>(alg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="401" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6c1067b4f615bcc29e46155b8982dba5" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_PAKE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0a000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="761" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga947bd13805e0243541e586b7b7d803ae" prot="public" static="no">
        <name>PSA_ALG_IS_PAKE</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga6c1067b4f615bcc29e46155b8982dba5" kindref="member">PSA_ALG_CATEGORY_PAKE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a password-authenticated key exchange.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a password-authenticated key exchange (PAKE) algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="772" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa2ae65388d11e23b3676570337a69926" prot="public" static="no">
        <name>PSA_ALG_JPAKE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0a000100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Password-authenticated key exchange by juggling (J-PAKE) algorithm.</para>
<para>This is J-PAKE as defined by RFC 8236, instantiated with the following parameters:</para>
<para><itemizedlist>
<listitem><para>The group can be either an elliptic curve or defined over a finite field.</para>
</listitem><listitem><para>Schnorr NIZK proof as defined by RFC 8235 and using the same group as the J-PAKE algorithm.</para>
</listitem><listitem><para>A cryptographic hash function.</para>
</listitem></itemizedlist>
</para>
<para>To select these parameters and set up the cipher suite, call these functions in any order:</para>
<para><programlisting><codeline><highlight class="normal">psa_pake_cs_set_algorithm(cipher_suite,<sp/>PSA_ALG_JPAKE);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_cs_set_primitive(cipher_suite,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PSA_PAKE_PRIMITIVE(type,<sp/>family,<sp/>bits));</highlight></codeline>
<codeline><highlight class="normal">psa_pake_cs_set_hash(cipher_suite,<sp/>hash);</highlight></codeline>
</programlisting></para>
<para>For more information on how to set a specific curve or field, refer to the documentation of the individual <computeroutput>PSA_PAKE_PRIMITIVE_TYPE_XXX</computeroutput> constants.</para>
<para>After initializing a J-PAKE operation, call</para>
<para><programlisting><codeline><highlight class="normal">psa_pake_setup(operation,<sp/>cipher_suite);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_set_user(operation,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_set_peer(operation,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">psa_pake_set_password_key(operation,<sp/>...);</highlight></codeline>
</programlisting></para>
<para>The password is provided as a key. This can be the password text itself, in an agreed character encoding, or some value derived from the password as required by a higher level protocol.</para>
<para>(The implementation converts the key material to a number as described in Section 2.3.8 of <emphasis>SEC 1: Elliptic Curve Cryptography</emphasis> (<ulink url="https://www.secg.org/sec1-v2.pdf">https://www.secg.org/sec1-v2.pdf</ulink>), before reducing it modulo <computeroutput>q</computeroutput>. Here <computeroutput>q</computeroutput> is order of the group defined by the primitive set in the cipher suite. The <computeroutput><ref refid="group__pake_1ga070417b83e6d602e9a6cc6748a14ea91" kindref="member">psa_pake_set_password_key()</ref></computeroutput> function returns an error if the result of the reduction is 0.)</para>
<para>The key exchange flow for J-PAKE is as follows:<orderedlist>
<listitem><para>To get the first round data that needs to be sent to the peer, call <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>g1</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x1</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x1</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>g2</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x2</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x2</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To provide the first round data received from the peer to the operation, call <programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>g3</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x3</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x3</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>g4</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x4</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>ZKP<sp/>proof<sp/>for<sp/>x4</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To get the second round data that needs to be sent to the peer, call <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>A</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x2*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>ZKP<sp/>proof<sp/>for<sp/>x2*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_output(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To provide the second round data received from the peer to the operation, call <programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>B</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_KEY_SHARE,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>ZKP<sp/>public<sp/>key<sp/>for<sp/>x4*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PUBLIC,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>ZKP<sp/>proof<sp/>for<sp/>x4*s</highlight></codeline>
<codeline><highlight class="normal">psa_pake_input(operation,<sp/>#PSA_PAKE_STEP_ZK_PROOF,<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>To access the shared secret call <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>Ka=Kb=K</highlight></codeline>
<codeline><highlight class="normal">psa_pake_get_implicit_key()</highlight></codeline>
</programlisting></para>
</listitem></orderedlist>
</para>
<para>For more information consult the documentation of the individual <computeroutput>PSA_PAKE_STEP_XXX</computeroutput> constants.</para>
<para>At this point there is a cryptographic guarantee that only the authenticated party who used the same password is able to compute the key. But there is no guarantee that the peer is the party it claims to be and was able to do so.</para>
<para>That is, the authentication is only implicit (the peer is not authenticated at this point, and no action should be taken that assume that they are - like for example accessing restricted files).</para>
<para>To make the authentication explicit there are various methods, see Section 5 of RFC 8236 for two examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" line="890" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_extra.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafce7ab2b54ce97ea5bff73f13a9f3e5b" prot="public" static="no">
        <name>PSA_KEY_TYPE_NONE</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An invalid key type value.</para>
<para>Zero is not the encoding of any key type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="351" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga8dbaed2fdb1ebae8aa127ad3988516f7" prot="public" static="no">
        <name>PSA_KEY_TYPE_VENDOR_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x8000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vendor-defined key type flag.</para>
<para>Key types defined by this standard will never have the <ref refid="group__crypto__types_1ga8dbaed2fdb1ebae8aa127ad3988516f7" kindref="member">PSA_KEY_TYPE_VENDOR_FLAG</ref> bit set. Vendors who define additional key types must use an encoding with the <ref refid="group__crypto__types_1ga8dbaed2fdb1ebae8aa127ad3988516f7" kindref="member">PSA_KEY_TYPE_VENDOR_FLAG</ref> bit set and should respect the bitwise structure used by standard encodings whenever practical. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="360" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" prot="public" static="no">
        <name>PSA_KEY_TYPE_CATEGORY_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x7000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="362" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab8af75718c5e7b8987720a3fe8abb18f" prot="public" static="no">
        <name>PSA_KEY_TYPE_CATEGORY_RAW</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="363" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga8f214beb04334be08f927f227f097ef1" prot="public" static="no">
        <name>PSA_KEY_TYPE_CATEGORY_SYMMETRIC</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x2000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="364" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga58b975beeee1f937cecb71c8051c6357" prot="public" static="no">
        <name>PSA_KEY_TYPE_CATEGORY_PUBLIC_KEY</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x4000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="365" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga708196a91ec0384de98e092b9a16f5e8" prot="public" static="no">
        <name>PSA_KEY_TYPE_CATEGORY_KEY_PAIR</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x7000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="366" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga5a77cb4db2d02ffce77631339e3240f4" prot="public" static="no">
        <name>PSA_KEY_TYPE_CATEGORY_FLAG_PAIR</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x3000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="368" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gadbe4c086a6562aefe344bc79e51bdfd3" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_VENDOR_DEFINED</name>
        <param><defname>type</defname></param>
        <initializer>(((type) &amp; <ref refid="group__crypto__types_1ga8dbaed2fdb1ebae8aa127ad3988516f7" kindref="member">PSA_KEY_TYPE_VENDOR_FLAG</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is vendor-defined.</para>
<para>See also <ref refid="group__crypto__types_1ga8dbaed2fdb1ebae8aa127ad3988516f7" kindref="member">PSA_KEY_TYPE_VENDOR_FLAG</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="374" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaef86ce4e810e1c2c76068ac874bfef54" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_UNSTRUCTURED</name>
        <param><defname>type</defname></param>
        <initializer>    (((type) &amp; <ref refid="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" kindref="member">PSA_KEY_TYPE_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1gab8af75718c5e7b8987720a3fe8abb18f" kindref="member">PSA_KEY_TYPE_CATEGORY_RAW</ref> || \
     ((type) &amp; <ref refid="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" kindref="member">PSA_KEY_TYPE_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga8f214beb04334be08f927f227f097ef1" kindref="member">PSA_KEY_TYPE_CATEGORY_SYMMETRIC</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is an unstructured array of bytes.</para>
<para>This encompasses both symmetric keys and non-key data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="381" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab138ae2ebf2905dfbaf4154db2620939" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_ASYMMETRIC</name>
        <param><defname>type</defname></param>
        <initializer>    (((type) &amp; <ref refid="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" kindref="member">PSA_KEY_TYPE_CATEGORY_MASK</ref>                               \
      &amp; ~<ref refid="group__crypto__types_1ga5a77cb4db2d02ffce77631339e3240f4" kindref="member">PSA_KEY_TYPE_CATEGORY_FLAG_PAIR</ref>) ==                            \
     <ref refid="group__crypto__types_1ga58b975beeee1f937cecb71c8051c6357" kindref="member">PSA_KEY_TYPE_CATEGORY_PUBLIC_KEY</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is asymmetric: either a key pair or a public key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="386" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac674a0f059bc0cb72b47f0c517b4f45b" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_PUBLIC_KEY</name>
        <param><defname>type</defname></param>
        <initializer>(((type) &amp; <ref refid="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" kindref="member">PSA_KEY_TYPE_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga58b975beeee1f937cecb71c8051c6357" kindref="member">PSA_KEY_TYPE_CATEGORY_PUBLIC_KEY</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is the public part of a key pair. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="391" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae977b8659473ca2ce7b93a01e9596581" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_KEY_PAIR</name>
        <param><defname>type</defname></param>
        <initializer>(((type) &amp; <ref refid="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" kindref="member">PSA_KEY_TYPE_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga708196a91ec0384de98e092b9a16f5e8" kindref="member">PSA_KEY_TYPE_CATEGORY_KEY_PAIR</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is a key pair containing a private part and a public part. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="395" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gadac23f233c110155ba2f0eb1ec1fe055" prot="public" static="no">
        <name>PSA_KEY_TYPE_KEY_PAIR_OF_PUBLIC_KEY</name>
        <param><defname>type</defname></param>
        <initializer>((type) | <ref refid="group__crypto__types_1ga5a77cb4db2d02ffce77631339e3240f4" kindref="member">PSA_KEY_TYPE_CATEGORY_FLAG_PAIR</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The key pair type corresponding to a public key type.</para>
<para>You may also pass a key pair type as <computeroutput>type</computeroutput>, it will be left unchanged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>A public key type or key pair type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding key pair type. If <computeroutput>type</computeroutput> is not a public key or a key pair, the return value is undefined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="407" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" prot="public" static="no">
        <name>PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</name>
        <param><defname>type</defname></param>
        <initializer>((type) &amp; ~<ref refid="group__crypto__types_1ga5a77cb4db2d02ffce77631339e3240f4" kindref="member">PSA_KEY_TYPE_CATEGORY_FLAG_PAIR</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The public key type corresponding to a key pair type.</para>
<para>You may also pass a key pair type as <computeroutput>type</computeroutput>, it will be left unchanged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>A public key type or key pair type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding public key type. If <computeroutput>type</computeroutput> is not a public key or a key pair, the return value is undefined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="419" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa97f92025533102616b32d571c940d80" prot="public" static="no">
        <name>PSA_KEY_TYPE_RAW_DATA</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x1001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw data.</para>
<para>A &quot;key&quot; of this type cannot be used for any cryptographic operation. Applications may use this type to store arbitrary data in the keystore. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="426" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga92d989f4ca64abd00f463defd773a6f8" prot="public" static="no">
        <name>PSA_KEY_TYPE_HMAC</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x1100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMAC key.</para>
<para>The key policy determines which underlying hash algorithm the key can be used for.</para>
<para>HMAC keys should generally have the same size as the underlying hash. This size can be calculated with <ref refid="crypto__sizes_8h_1ae0c23128dc05e9680d2c4c1b292bcc77" kindref="member">PSA_HASH_LENGTH</ref>(<computeroutput>alg</computeroutput>) where <computeroutput>alg</computeroutput> is the HMAC algorithm or the underlying hash algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="436" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae871b2357b8593f33bfd51abbf93ebb1" prot="public" static="no">
        <name>PSA_KEY_TYPE_DERIVE</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x1200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A secret for key derivation.</para>
<para>This key type is for high-entropy secrets only. For low-entropy secrets, <ref refid="group__crypto__types_1gaad682c8fe975aee537af922f9503d510" kindref="member">PSA_KEY_TYPE_PASSWORD</ref> should be used instead.</para>
<para>These keys can be used as the <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> or <ref refid="group__derivation_1gae19de2d7c74759878b4a6677b0acdda7" kindref="member">PSA_KEY_DERIVATION_INPUT_PASSWORD</ref> input of key derivation algorithms.</para>
<para>The key policy determines which key derivation algorithm the key can be used for. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="449" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaad682c8fe975aee537af922f9503d510" prot="public" static="no">
        <name>PSA_KEY_TYPE_PASSWORD</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x1203)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A low-entropy secret for password hashing or key derivation.</para>
<para>This key type is suitable for passwords and passphrases which are typically intended to be memorizable by humans, and have a low entropy relative to their size. It can be used for randomly generated or derived keys with maximum or near-maximum entropy, but <ref refid="group__crypto__types_1gae871b2357b8593f33bfd51abbf93ebb1" kindref="member">PSA_KEY_TYPE_DERIVE</ref> is more suitable for such keys. It is not suitable for passwords with extremely low entropy, such as numerical PINs.</para>
<para>These keys can be used as the <ref refid="group__derivation_1gae19de2d7c74759878b4a6677b0acdda7" kindref="member">PSA_KEY_DERIVATION_INPUT_PASSWORD</ref> input of key derivation algorithms. Algorithms that accept such an input were designed to accept low-entropy secret and are known as password hashing or key stretching algorithms.</para>
<para>These keys cannot be used as the <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> input of key derivation algorithms, as the algorithms that take such an input expect it to be high-entropy.</para>
<para>The key policy determines which key derivation algorithm the key can be used for, among the permissible subset defined above. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="472" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac41a0d5fdafc1c19ae73313613142723" prot="public" static="no">
        <name>PSA_KEY_TYPE_PASSWORD_HASH</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x1205)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A secret value that can be used to verify a password hash.</para>
<para>The key policy determines which key derivation algorithm the key can be used for, among the same permissible subset as for <ref refid="group__crypto__types_1gaad682c8fe975aee537af922f9503d510" kindref="member">PSA_KEY_TYPE_PASSWORD</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="480" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab47765c3f82af1b6a7d213f9881cb6d6" prot="public" static="no">
        <name>PSA_KEY_TYPE_PEPPER</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x1206)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A secret value that can be used in when computing a password hash.</para>
<para>The key policy determines which key derivation algorithm the key can be used for, among the subset of algorithms that can use pepper. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="487" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6ee54579dcf278c677eda4bb1a29575e" prot="public" static="no">
        <name>PSA_KEY_TYPE_AES</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x2400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for a cipher, AEAD or MAC algorithm based on the AES block cipher.</para>
<para>The size of the key can be 16 bytes (AES-128), 24 bytes (AES-192) or 32 bytes (AES-256). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="494" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga853d69f982740f4fd40cc964075c188f" prot="public" static="no">
        <name>PSA_KEY_TYPE_ARIA</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x2406)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for a cipher, AEAD or MAC algorithm based on the ARIA block cipher. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="498" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga577562bfbbc691c820d55ec308333138" prot="public" static="no">
        <name>PSA_KEY_TYPE_DES</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x2301)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for a cipher or MAC algorithm based on DES or 3DES (Triple-DES).</para>
<para>The size of the key can be 64 bits (single DES), 128 bits (2-key 3DES) or 192 bits (3-key 3DES).</para>
<para>Note that single DES and 2-key 3DES are weak and strongly deprecated and should only be used to decrypt legacy data. 3-key 3DES is weak and deprecated and should only be used in legacy protocols. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="509" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad8e5da742343fd5519f9d8a630c2ed81" prot="public" static="no">
        <name>PSA_KEY_TYPE_CAMELLIA</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x2403)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for a cipher, AEAD or MAC algorithm based on the Camellia block cipher. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="513" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga901548883b3bce56cc21c3a22cf8d93c" prot="public" static="no">
        <name>PSA_KEY_TYPE_CHACHA20</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x2004)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for the ChaCha20 stream cipher or the Chacha20-Poly1305 AEAD algorithm.</para>
<para>ChaCha20 and the ChaCha20_Poly1305 construction are defined in RFC 7539.</para>
<para><simplesect kind="note"><para>For ChaCha20 and ChaCha20_Poly1305, Mbed TLS only supports 12-byte nonces.</para>
</simplesect>
<simplesect kind="note"><para>For ChaCha20, the initial counter value is 0. To encrypt or decrypt with the initial counter value 1, you can process and discard a 64-byte block before the real data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="526" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9ba0878f56c8bcd1995ac017a74f513b" prot="public" static="no">
        <name>PSA_KEY_TYPE_RSA_PUBLIC_KEY</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x4001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA public key.</para>
<para>The size of an RSA key is the bit size of the modulus. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="532" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga11745b110166e927e2abeabc7d532051" prot="public" static="no">
        <name>PSA_KEY_TYPE_RSA_KEY_PAIR</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x7001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA key pair (private and public key).</para>
<para>The size of an RSA key is the bit size of the modulus. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="537" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0e1d8f241228e49c9cadadfb4579ef1a" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_RSA</name>
        <param><defname>type</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" kindref="member">PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</ref>(type) == <ref refid="group__crypto__types_1ga9ba0878f56c8bcd1995ac017a74f513b" kindref="member">PSA_KEY_TYPE_RSA_PUBLIC_KEY</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is an RSA key (pair or public-only). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="539" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad8d37a32a305dda9fb4af1707aace47c" prot="public" static="no">
        <name>PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x4100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="542" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0e25eb7d243c15c9b9342f0a6dc7f828" prot="public" static="no">
        <name>PSA_KEY_TYPE_ECC_KEY_PAIR_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x7100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="543" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gadc2a3c0041ac1d0a2b6f421d8e089b25" prot="public" static="no">
        <name>PSA_KEY_TYPE_ECC_CURVE_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x00ff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="544" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0b6f5d4d5037c54ffa850d8059c32df0" prot="public" static="no">
        <name>PSA_KEY_TYPE_ECC_KEY_PAIR</name>
        <param><defname>curve</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga0e25eb7d243c15c9b9342f0a6dc7f828" kindref="member">PSA_KEY_TYPE_ECC_KEY_PAIR_BASE</ref> | (curve))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Elliptic curve key pair.</para>
<para>The size of an elliptic curve key is the bit size associated with the curve, i.e. the bit size of <emphasis>q</emphasis> for a curve over a field <emphasis>F<subscript>q</subscript></emphasis>. See the documentation of <computeroutput>PSA_ECC_FAMILY_xxx</computeroutput> curve families for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>A value of type <ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref> that identifies the ECC curve to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="554" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad54c03d3b47020e571a72cd01d978cf2" prot="public" static="no">
        <name>PSA_KEY_TYPE_ECC_PUBLIC_KEY</name>
        <param><defname>curve</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gad8d37a32a305dda9fb4af1707aace47c" kindref="member">PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE</ref> | (curve))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Elliptic curve public key.</para>
<para>The size of an elliptic curve public key is the same as the corresponding private key (see <ref refid="group__crypto__types_1ga0b6f5d4d5037c54ffa850d8059c32df0" kindref="member">PSA_KEY_TYPE_ECC_KEY_PAIR</ref> and the documentation of <computeroutput>PSA_ECC_FAMILY_xxx</computeroutput> curve families).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>A value of type <ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref> that identifies the ECC curve to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="565" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga88e01fa06b585654689a99bcc06bbe66" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_ECC</name>
        <param><defname>type</defname></param>
        <initializer>    ((<ref refid="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" kindref="member">PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</ref>(type) &amp;                        \
      ~<ref refid="group__crypto__types_1gadc2a3c0041ac1d0a2b6f421d8e089b25" kindref="member">PSA_KEY_TYPE_ECC_CURVE_MASK</ref>) == <ref refid="group__crypto__types_1gad8d37a32a305dda9fb4af1707aace47c" kindref="member">PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is an elliptic curve key (pair or public-only). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="569" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab00289ec3d84a469950a4d8c10fb8cc6" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_ECC_KEY_PAIR</name>
        <param><defname>type</defname></param>
        <initializer>    (((type) &amp; ~<ref refid="group__crypto__types_1gadc2a3c0041ac1d0a2b6f421d8e089b25" kindref="member">PSA_KEY_TYPE_ECC_CURVE_MASK</ref>) ==                         \
     <ref refid="group__crypto__types_1ga0e25eb7d243c15c9b9342f0a6dc7f828" kindref="member">PSA_KEY_TYPE_ECC_KEY_PAIR_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is an elliptic curve key pair. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="573" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga5af146a173b0c84d7e737e2fb6a3c0a7" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY</name>
        <param><defname>type</defname></param>
        <initializer>    (((type) &amp; ~<ref refid="group__crypto__types_1gadc2a3c0041ac1d0a2b6f421d8e089b25" kindref="member">PSA_KEY_TYPE_ECC_CURVE_MASK</ref>) ==                         \
     <ref refid="group__crypto__types_1gad8d37a32a305dda9fb4af1707aace47c" kindref="member">PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is an elliptic curve public key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="577" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga30642b7e640a6e9e00871764afe0288d" prot="public" static="no">
        <name>PSA_KEY_TYPE_ECC_GET_FAMILY</name>
        <param><defname>type</defname></param>
        <initializer>    ((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) (<ref refid="group__crypto__types_1ga88e01fa06b585654689a99bcc06bbe66" kindref="member">PSA_KEY_TYPE_IS_ECC</ref>(type) ?             \
                         ((type) &amp; <ref refid="group__crypto__types_1gadc2a3c0041ac1d0a2b6f421d8e089b25" kindref="member">PSA_KEY_TYPE_ECC_CURVE_MASK</ref>) : \
                         0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract the curve from an elliptic curve key type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="582" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga724cd5d5539363fffb00618e23241184" prot="public" static="no">
        <name>PSA_ECC_FAMILY_IS_WEIERSTRASS</name>
        <param><defname>family</defname></param>
        <initializer>((family &amp; 0xc0) == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the curve of given family is Weierstrass elliptic curve. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="588" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga5cf2405c6e23b93cea0aac092d1aa0f7" prot="public" static="no">
        <name>PSA_ECC_FAMILY_SECP_K1</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x17)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SEC Koblitz curves over prime fields.</para>
<para>This family comprises the following curves: secp192k1, secp224k1, secp256k1. They are defined in <emphasis>Standards for Efficient Cryptography</emphasis>, <emphasis>SEC 2: Recommended Elliptic Curve Domain Parameters</emphasis>. <ulink url="https://www.secg.org/sec2-v2.pdf">https://www.secg.org/sec2-v2.pdf</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="598" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga48bb340b5544ba617b0f5b89542665a7" prot="public" static="no">
        <name>PSA_ECC_FAMILY_SECP_R1</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SEC random curves over prime fields.</para>
<para>This family comprises the following curves: secp192k1, secp224r1, secp256r1, secp384r1, secp521r1. They are defined in <emphasis>Standards for Efficient Cryptography</emphasis>, <emphasis>SEC 2: Recommended Elliptic Curve Domain Parameters</emphasis>. <ulink url="https://www.secg.org/sec2-v2.pdf">https://www.secg.org/sec2-v2.pdf</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="608" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga95a662f6fa5a11f0b7b7050e24acf147" prot="public" static="no">
        <name>PSA_ECC_FAMILY_SECP_R2</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x1b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="610" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga31fb7fe7608708fa64bcec2eea92efbb" prot="public" static="no">
        <name>PSA_ECC_FAMILY_SECT_K1</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x27)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SEC Koblitz curves over binary fields.</para>
<para>This family comprises the following curves: sect163k1, sect233k1, sect239k1, sect283k1, sect409k1, sect571k1. They are defined in <emphasis>Standards for Efficient Cryptography</emphasis>, <emphasis>SEC 2: Recommended Elliptic Curve Domain Parameters</emphasis>. <ulink url="https://www.secg.org/sec2-v2.pdf">https://www.secg.org/sec2-v2.pdf</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="620" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga71544d130f52ad2afc7700779c44af19" prot="public" static="no">
        <name>PSA_ECC_FAMILY_SECT_R1</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x22)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SEC random curves over binary fields.</para>
<para>This family comprises the following curves: sect163r1, sect233r1, sect283r1, sect409r1, sect571r1. They are defined in <emphasis>Standards for Efficient Cryptography</emphasis>, <emphasis>SEC 2: Recommended Elliptic Curve Domain Parameters</emphasis>. <ulink url="https://www.secg.org/sec2-v2.pdf">https://www.secg.org/sec2-v2.pdf</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="630" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga40d07f0ac30b4bc7c93d65408ca31d00" prot="public" static="no">
        <name>PSA_ECC_FAMILY_SECT_R2</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x2b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SEC additional random curves over binary fields.</para>
<para>This family comprises the following curve: sect163r2. It is defined in <emphasis>Standards for Efficient Cryptography</emphasis>, <emphasis>SEC 2: Recommended Elliptic Curve Domain Parameters</emphasis>. <ulink url="https://www.secg.org/sec2-v2.pdf">https://www.secg.org/sec2-v2.pdf</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="640" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac1643f1baf38b30d07c20a6eac697f15" prot="public" static="no">
        <name>PSA_ECC_FAMILY_BRAINPOOL_P_R1</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x30)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Brainpool P random curves.</para>
<para>This family comprises the following curves: brainpoolP160r1, brainpoolP192r1, brainpoolP224r1, brainpoolP256r1, brainpoolP320r1, brainpoolP384r1, brainpoolP512r1. It is defined in RFC 5639. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="649" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1f624c5cdaf25b21287af33024e1aff8" prot="public" static="no">
        <name>PSA_ECC_FAMILY_MONTGOMERY</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x41)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Curve25519 and Curve448.</para>
<para>This family comprises the following Montgomery curves:<itemizedlist>
<listitem><para>255-bit: Bernstein et al., <emphasis>Curve25519: new Diffie-Hellman speed records</emphasis>, LNCS 3958, 2006. The algorithm <ref refid="group__crypto__types_1gab2dbcf71b63785e7dd7b54a100edee43" kindref="member">PSA_ALG_ECDH</ref> performs X25519 when used with this curve.</para>
</listitem><listitem><para>448-bit: Hamburg, <emphasis>Ed448-Goldilocks, a new elliptic curve</emphasis>, NIST ECC Workshop, 2015. The algorithm <ref refid="group__crypto__types_1gab2dbcf71b63785e7dd7b54a100edee43" kindref="member">PSA_ALG_ECDH</ref> performs X448 when used with this curve. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="661" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafe45f9fe29699f26795f6251f47eafd4" prot="public" static="no">
        <name>PSA_ECC_FAMILY_TWISTED_EDWARDS</name>
        <initializer>((<ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref>) 0x42)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The twisted Edwards curves Ed25519 and Ed448.</para>
<para>These curves are suitable for EdDSA (<ref refid="group__crypto__types_1ga76d6053fb1867c2c46c5f8131c8a8cae" kindref="member">PSA_ALG_PURE_EDDSA</ref> for both curves, <ref refid="group__crypto__types_1ga3be20c4293031a8f32e7cb66d26f5c3d" kindref="member">PSA_ALG_ED25519PH</ref> for the 255-bit curve, <ref refid="group__crypto__types_1ga1c632df795535af4334d37a08a01481b" kindref="member">PSA_ALG_ED448PH</ref> for the 448-bit curve).</para>
<para>This family comprises the following twisted Edwards curves:<itemizedlist>
<listitem><para>255-bit: Edwards25519, the twisted Edwards curve birationally equivalent to Curve25519. Bernstein et al., <emphasis>Twisted Edwards curves</emphasis>, Africacrypt 2008.</para>
</listitem><listitem><para>448-bit: Edwards448, the twisted Edwards curve birationally equivalent to Curve448. Hamburg, <emphasis>Ed448-Goldilocks, a new elliptic curve</emphasis>, NIST ECC Workshop, 2015. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="677" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga2bfc2896a6926605a0771ffe54ccb755" prot="public" static="no">
        <name>PSA_KEY_TYPE_DH_PUBLIC_KEY_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x4200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="679" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga723b64e4daf4fde9d90df429b9339bc2" prot="public" static="no">
        <name>PSA_KEY_TYPE_DH_KEY_PAIR_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x7200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="680" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga221dc7e5957a5555f2bae0f0ae671dd2" prot="public" static="no">
        <name>PSA_KEY_TYPE_DH_GROUP_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>) 0x00ff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="681" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab4f857c4cd56f5fe65ded421e61bcc8c" prot="public" static="no">
        <name>PSA_KEY_TYPE_DH_KEY_PAIR</name>
        <param><defname>group</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga723b64e4daf4fde9d90df429b9339bc2" kindref="member">PSA_KEY_TYPE_DH_KEY_PAIR_BASE</ref> | (group))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Diffie-Hellman key pair.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>A value of type <ref refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" kindref="member">psa_dh_family_t</ref> that identifies the Diffie-Hellman group to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="687" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa22f0f2ea89b929f2fadc19890cc5d5c" prot="public" static="no">
        <name>PSA_KEY_TYPE_DH_PUBLIC_KEY</name>
        <param><defname>group</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga2bfc2896a6926605a0771ffe54ccb755" kindref="member">PSA_KEY_TYPE_DH_PUBLIC_KEY_BASE</ref> | (group))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Diffie-Hellman public key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>A value of type <ref refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" kindref="member">psa_dh_family_t</ref> that identifies the Diffie-Hellman group to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="694" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga248ae35c0e2becaebbf479fc1c3a3b0e" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_DH</name>
        <param><defname>type</defname></param>
        <initializer>    ((<ref refid="group__crypto__types_1ga679be3d789cfa0c1fd8418764ff754b1" kindref="member">PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR</ref>(type) &amp;                        \
      ~<ref refid="group__crypto__types_1ga221dc7e5957a5555f2bae0f0ae671dd2" kindref="member">PSA_KEY_TYPE_DH_GROUP_MASK</ref>) == <ref refid="group__crypto__types_1ga2bfc2896a6926605a0771ffe54ccb755" kindref="member">PSA_KEY_TYPE_DH_PUBLIC_KEY_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is a Diffie-Hellman key (pair or public-only). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="698" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gabb9dd614786fe328df4e485c1a61ed25" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_DH_KEY_PAIR</name>
        <param><defname>type</defname></param>
        <initializer>    (((type) &amp; ~<ref refid="group__crypto__types_1ga221dc7e5957a5555f2bae0f0ae671dd2" kindref="member">PSA_KEY_TYPE_DH_GROUP_MASK</ref>) ==                         \
     <ref refid="group__crypto__types_1ga723b64e4daf4fde9d90df429b9339bc2" kindref="member">PSA_KEY_TYPE_DH_KEY_PAIR_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is a Diffie-Hellman key pair. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="702" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga23627e047fa4b536f07d6f4796f879f5" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_DH_PUBLIC_KEY</name>
        <param><defname>type</defname></param>
        <initializer>    (((type) &amp; ~<ref refid="group__crypto__types_1ga221dc7e5957a5555f2bae0f0ae671dd2" kindref="member">PSA_KEY_TYPE_DH_GROUP_MASK</ref>) ==                         \
     <ref refid="group__crypto__types_1ga2bfc2896a6926605a0771ffe54ccb755" kindref="member">PSA_KEY_TYPE_DH_PUBLIC_KEY_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is a Diffie-Hellman public key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="706" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga16c2e7d4bca4ed4587fb59002f14ddf5" prot="public" static="no">
        <name>PSA_KEY_TYPE_DH_GET_FAMILY</name>
        <param><defname>type</defname></param>
        <initializer>    ((<ref refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" kindref="member">psa_dh_family_t</ref>) (<ref refid="group__crypto__types_1ga248ae35c0e2becaebbf479fc1c3a3b0e" kindref="member">PSA_KEY_TYPE_IS_DH</ref>(type) ?              \
                        ((type) &amp; <ref refid="group__crypto__types_1ga221dc7e5957a5555f2bae0f0ae671dd2" kindref="member">PSA_KEY_TYPE_DH_GROUP_MASK</ref>) :  \
                        0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract the group from a Diffie-Hellman key type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="711" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga7be917e67fe4a567fb36864035822ff7" prot="public" static="no">
        <name>PSA_DH_FAMILY_RFC7919</name>
        <initializer>((<ref refid="group__crypto__types_1gaf632c5b13aa19c98f8591d4beda8dd1a" kindref="member">psa_dh_family_t</ref>) 0x03)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Diffie-Hellman groups defined in RFC 7919 Appendix A.</para>
<para>This family includes groups with the following key sizes (in bits): 2048, 3072, 4096, 6144, 8192. A given implementation may support all of these sizes or only a subset. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="722" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga99dac473b1f6f7259dfb420dd041d5db" prot="public" static="no">
        <name>PSA_GET_KEY_TYPE_BLOCK_SIZE_EXPONENT</name>
        <param><defname>type</defname></param>
        <initializer>(((type) &gt;&gt; 8) &amp; 7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="724" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaeed2ae6f2ea1e2f994562ada459d1f03" prot="public" static="no">
        <name>PSA_BLOCK_CIPHER_BLOCK_LENGTH</name>
        <param><defname>type</defname></param>
        <initializer>    (((type) &amp; <ref refid="group__crypto__types_1ga6eeda1b2a1550050cf68dbcac35ad8ac" kindref="member">PSA_KEY_TYPE_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga8f214beb04334be08f927f227f097ef1" kindref="member">PSA_KEY_TYPE_CATEGORY_SYMMETRIC</ref> ? \
     1u &lt;&lt; <ref refid="group__crypto__types_1ga99dac473b1f6f7259dfb420dd041d5db" kindref="member">PSA_GET_KEY_TYPE_BLOCK_SIZE_EXPONENT</ref>(type) :                         \
        0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The block size of a block cipher.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>A cipher key type (value of type <ref refid="group__crypto__types_1ga63fce6880ca5933b5d6baa257febf1f6" kindref="member">psa_key_type_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The block size for a block cipher, or 1 for a stream cipher. The return value is undefined if <computeroutput>type</computeroutput> is not a supported cipher key type.</para>
</simplesect>
<simplesect kind="note"><para>It is possible to build stream cipher algorithms on top of a block cipher, for example CTR mode (<ref refid="group__crypto__types_1gad318309706a769cffdc64e4c7e06b2e9" kindref="member">PSA_ALG_CTR</ref>). This macro only takes the key type into account, so it cannot be used to determine the size of the data that <ref refid="group__cipher_1gac3ca27ac6682917c48247d01fd96cd0f" kindref="member">psa_cipher_update()</ref> might buffer for future processing in general.</para>
</simplesect>
<simplesect kind="note"><para>This macro returns a compile-time constant if its argument is one.</para>
</simplesect>
<simplesect kind="warning"><para>This macro may evaluate its argument multiple times. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="744" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaf5d76750b6cfe3e7f0c8e9eee1162318" prot="public" static="no">
        <name>PSA_ALG_VENDOR_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x80000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vendor-defined algorithm flag.</para>
<para>Algorithms defined by this standard will never have the <ref refid="group__crypto__types_1gaf5d76750b6cfe3e7f0c8e9eee1162318" kindref="member">PSA_ALG_VENDOR_FLAG</ref> bit set. Vendors who define additional algorithms must use an encoding with the <ref refid="group__crypto__types_1gaf5d76750b6cfe3e7f0c8e9eee1162318" kindref="member">PSA_ALG_VENDOR_FLAG</ref> bit set and should respect the bitwise structure used by standard encodings whenever practical. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="761" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x7f000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="763" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_HASH</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="764" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga5e6e0039d0b0d18afb3e13e5b9602b3a" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_MAC</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x03000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="765" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga68228a619db59eba93fd13e9129dbfe2" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_CIPHER</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="766" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga37fdd9cac2552f1568f38e091a826549" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_AEAD</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x05000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="767" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga68a0af1dd89b33fb1e53139f654988f6" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_SIGN</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="768" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga72f46c8256b760b174e6db61a61cd608" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_ASYMMETRIC_ENCRYPTION</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x07000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="769" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac185b2274dd4e5f0b97c43334c2e478f" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_KEY_DERIVATION</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="770" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga808e397a4891c612df4a5b20eebc2fac" prot="public" static="no">
        <name>PSA_ALG_CATEGORY_KEY_AGREEMENT</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x09000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="771" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="771" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga2396d8ba67096b3ebc69bc351a74c78b" prot="public" static="no">
        <name>PSA_ALG_IS_VENDOR_DEFINED</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1gaf5d76750b6cfe3e7f0c8e9eee1162318" kindref="member">PSA_ALG_VENDOR_FLAG</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether an algorithm is vendor-defined.</para>
<para>See also <ref refid="group__crypto__types_1gaf5d76750b6cfe3e7f0c8e9eee1162318" kindref="member">PSA_ALG_VENDOR_FLAG</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="777" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" prot="public" static="no">
        <name>PSA_ALG_IS_HASH</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a hash algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a hash algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="788" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaca7aee4c9dde316b3b1a150a26eab776" prot="public" static="no">
        <name>PSA_ALG_IS_MAC</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga5e6e0039d0b0d18afb3e13e5b9602b3a" kindref="member">PSA_ALG_CATEGORY_MAC</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a MAC algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a MAC algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="799" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1d1a5a402ad89a2e68f12bfb535490eb" prot="public" static="no">
        <name>PSA_ALG_IS_CIPHER</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga68228a619db59eba93fd13e9129dbfe2" kindref="member">PSA_ALG_CATEGORY_CIPHER</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a symmetric cipher algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a symmetric cipher algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="810" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" prot="public" static="no">
        <name>PSA_ALG_IS_AEAD</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga37fdd9cac2552f1568f38e091a826549" kindref="member">PSA_ALG_CATEGORY_AEAD</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an authenticated encryption with associated data (AEAD) algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an AEAD algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="822" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6d490d0904e0698f6c1268a89d72ff31" prot="public" static="no">
        <name>PSA_ALG_IS_SIGN</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga68a0af1dd89b33fb1e53139f654988f6" kindref="member">PSA_ALG_CATEGORY_SIGN</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an asymmetric signature algorithm, also known as public-key signature algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an asymmetric signature algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="834" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga41d2ee937d54efd76bd54a97b2ebc08a" prot="public" static="no">
        <name>PSA_ALG_IS_ASYMMETRIC_ENCRYPTION</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga72f46c8256b760b174e6db61a61cd608" kindref="member">PSA_ALG_CATEGORY_ASYMMETRIC_ENCRYPTION</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an asymmetric encryption algorithm, also known as public-key encryption algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an asymmetric encryption algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="846" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga59753742cb06553bd22751bbef472b6f" prot="public" static="no">
        <name>PSA_ALG_IS_KEY_AGREEMENT</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1ga808e397a4891c612df4a5b20eebc2fac" kindref="member">PSA_ALG_CATEGORY_KEY_AGREEMENT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a key agreement algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a key agreement algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="857" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaf8b90c648aa53dbd06c236695e300cd0" prot="public" static="no">
        <name>PSA_ALG_IS_KEY_DERIVATION</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref>) == <ref refid="group__crypto__types_1gac185b2274dd4e5f0b97c43334c2e478f" kindref="member">PSA_ALG_CATEGORY_KEY_DERIVATION</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a key derivation algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a key derivation algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="868" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga15266fcb8ef4b3830f51d0b513eee926" prot="public" static="no">
        <name>PSA_ALG_IS_KEY_DERIVATION_STRETCHING</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gaf8b90c648aa53dbd06c236695e300cd0" kindref="member">PSA_ALG_IS_KEY_DERIVATION</ref>(alg) &amp;&amp;              \
     (alg) &amp; <ref refid="group__crypto__types_1ga4feacc22bbfaaa327e7e3e28838d52fe" kindref="member">PSA_ALG_KEY_DERIVATION_STRETCHING_FLAG</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a key stretching / password hashing algorithm.</para>
<para>A key stretching / password hashing algorithm is a key derivation algorithm that is suitable for use with a low-entropy secret such as a password. Equivalently, it&apos;s a key derivation algorithm that uses a <ref refid="group__derivation_1gae19de2d7c74759878b4a6677b0acdda7" kindref="member">PSA_KEY_DERIVATION_INPUT_PASSWORD</ref> input step.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a key stretching / password hashing algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="885" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga87fb4c311ba365a908ca467ee50f447f" prot="public" static="no">
        <name>PSA_ALG_NONE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An invalid algorithm identifier value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="891" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" prot="public" static="no">
        <name>PSA_ALG_HASH_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x000000ff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="894" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gade591d9286d23382eb5cec099c84180d" prot="public" static="no">
        <name>PSA_ALG_MD5</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000003)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MD5 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="896" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6c5d3a32cda59086f07b85ef007033dd" prot="public" static="no">
        <name>PSA_ALG_RIPEMD160</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000004)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PSA_ALG_RIPEMD160 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="898" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga3fca4e9f9ad4a1158817d1850dee82e5" prot="public" static="no">
        <name>PSA_ALG_SHA_1</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000005)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="900" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga25d6a3244d10a7148fe6b026d1979f7b" prot="public" static="no">
        <name>PSA_ALG_SHA_224</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000008)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-224 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="902" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="902" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga619471f978e13cdd0a1e37145e4bf341" prot="public" static="no">
        <name>PSA_ALG_SHA_256</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000009)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-256 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="904" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga58af64dd9a86a287e8da9ed7739eead4" prot="public" static="no">
        <name>PSA_ALG_SHA_384</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0200000a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-384 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="906" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafba3ae409f46d3dd7f37a0910660c3e9" prot="public" static="no">
        <name>PSA_ALG_SHA_512</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0200000b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-512 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="908" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="908" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga3fe2d7c3c80e3186ca78d16a35d5d931" prot="public" static="no">
        <name>PSA_ALG_SHA_512_224</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0200000c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-512/224 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="910" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga5910b3964c14e9613e8643a45b09c2d4" prot="public" static="no">
        <name>PSA_ALG_SHA_512_256</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0200000d)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-512/256 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="912" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga16f5fe34ccce68c2fada1224c054a999" prot="public" static="no">
        <name>PSA_ALG_SHA3_224</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000010)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA3-224 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="914" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaace70d9515489bbe3c5e7ac1b7d9155b" prot="public" static="no">
        <name>PSA_ALG_SHA3_256</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000011)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA3-256 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="916" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab0f079257ea75e2acfe2fc3b38c78cd8" prot="public" static="no">
        <name>PSA_ALG_SHA3_384</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000012)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA3-384 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="918" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga37e5dbe936dddb155e76f2997de27188" prot="public" static="no">
        <name>PSA_ALG_SHA3_512</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000013)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA3-512 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="920" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaec67f81d5b80b765702efb4b3d6e202c" prot="public" static="no">
        <name>PSA_ALG_SHAKE256_512</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x02000015)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first 512 bits (64 bytes) of the SHAKE256 output.</para>
<para>This is the prehashing for Ed448ph (see <ref refid="group__crypto__types_1ga1c632df795535af4334d37a08a01481b" kindref="member">PSA_ALG_ED448PH</ref>). For other scenarios where a hash function based on SHA3/SHAKE is desired, SHA3-512 has the same output size and a (theoretically) higher security strength. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="927" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" prot="public" static="no">
        <name>PSA_ALG_ANY_HASH</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x020000ff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In a hash-and-sign algorithm policy, allow any hash algorithm.</para>
<para>This value may be used to form the algorithm usage field of a policy for a signature algorithm that is parametrized by a hash. The key may then be used to perform operations using the same signature algorithm parametrized with any supported hash.</para>
<para>That is, suppose that <computeroutput>PSA_xxx_SIGNATURE</computeroutput> is one of the following macros:<itemizedlist>
<listitem><para><ref refid="group__crypto__types_1ga702ff75385a6ae7d4247033f479439af" kindref="member">PSA_ALG_RSA_PKCS1V15_SIGN</ref>, <ref refid="group__crypto__types_1ga62152bf4cb4bf6aace5e1be8f143564d" kindref="member">PSA_ALG_RSA_PSS</ref>, <ref refid="group__crypto__types_1ga9b7355a2cd6bde88177634d539127f2b" kindref="member">PSA_ALG_RSA_PSS_ANY_SALT</ref>,</para>
</listitem><listitem><para><ref refid="group__crypto__types_1ga7e3ce9f514a227d5ba5d8318870452e3" kindref="member">PSA_ALG_ECDSA</ref>, <ref refid="group__crypto__types_1ga11da566bcd341661c8de921e2ca5ed03" kindref="member">PSA_ALG_DETERMINISTIC_ECDSA</ref>. Then you may create and use a key as follows:</para>
</listitem><listitem><para>Set the key usage field using <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref>, for example: <programlisting><codeline><highlight class="normal">psa_set_key_usage_flags(&amp;attributes,<sp/>PSA_KEY_USAGE_SIGN_HASH);<sp/>//<sp/>or<sp/>VERIFY</highlight></codeline>
<codeline><highlight class="normal">psa_set_key_algorithm(&amp;attributes,<sp/>PSA_xxx_SIGNATURE(PSA_ALG_ANY_HASH));</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Import or generate key material.</para>
</listitem><listitem><para>Call <ref refid="group__asymmetric_1ga785e746a31a7b2a35ae5175c5ace3c5c" kindref="member">psa_sign_hash()</ref> or <ref refid="group__asymmetric_1gae2ffbf01e5266391aff22b101a49f5f5" kindref="member">psa_verify_hash()</ref>, passing an algorithm built from <computeroutput>PSA_xxx_SIGNATURE</computeroutput> and a specific hash. Each call to sign or verify a message may use a different hash. <programlisting><codeline><highlight class="normal">psa_sign_hash(key,<sp/>PSA_xxx_SIGNATURE(PSA_ALG_SHA_256),<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">psa_sign_hash(key,<sp/>PSA_xxx_SIGNATURE(PSA_ALG_SHA_512),<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">psa_sign_hash(key,<sp/>PSA_xxx_SIGNATURE(PSA_ALG_SHA3_256),<sp/>...);</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>This value may not be used to build other algorithms that are parametrized over a hash. For any valid use of this macro to build an algorithm <computeroutput>alg</computeroutput>, <ref refid="group__crypto__types_1gad8a8ea0536975363b66410cdeafe38b6" kindref="member">PSA_ALG_IS_HASH_AND_SIGN</ref>(<computeroutput>alg</computeroutput>) is true.</para>
<para>This value may not be used to build an algorithm specification to perform an operation. It is only valid to build policies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="962" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gabba3fcfee55533b0e25350e78a942e07" prot="public" static="no">
        <name>PSA_ALG_MAC_SUBCATEGORY_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00c00000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="964" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0675192b82720fb8c9037a95bdeb6c88" prot="public" static="no">
        <name>PSA_ALG_HMAC_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x03800000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="965" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga70f397425684b3efcde1e0e34c28261f" prot="public" static="no">
        <name>PSA_ALG_HMAC</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga0675192b82720fb8c9037a95bdeb6c88" kindref="member">PSA_ALG_HMAC_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build an HMAC algorithm.</para>
<para>For example, <ref refid="group__crypto__types_1ga70f397425684b3efcde1e0e34c28261f" kindref="member">PSA_ALG_HMAC</ref>(<ref refid="group__crypto__types_1ga619471f978e13cdd0a1e37145e4bf341" kindref="member">PSA_ALG_SHA_256</ref>) is HMAC-SHA-256.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding HMAC algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="977" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaee84269106a947cb6ac353e15e6c4687" prot="public" static="no">
        <name>PSA_ALG_HMAC_GET_HASH</name>
        <param><defname>hmac_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref> | ((hmac_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="980" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga4a050c3c3cbc6eb96418f18847601c8a" prot="public" static="no">
        <name>PSA_ALG_IS_HMAC</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; (<ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref> | <ref refid="group__crypto__types_1gabba3fcfee55533b0e25350e78a942e07" kindref="member">PSA_ALG_MAC_SUBCATEGORY_MASK</ref>)) == \
     <ref refid="group__crypto__types_1ga0675192b82720fb8c9037a95bdeb6c88" kindref="member">PSA_ALG_HMAC_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an HMAC algorithm.</para>
<para>HMAC is a family of MAC algorithms that are based on a hash function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an HMAC algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="993" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga8c48784065c65c623a21b9a3ccc56b1d" prot="public" static="no">
        <name>PSA_ALG_MAC_TRUNCATION_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x003f0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1004" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6db5ce573e6ad52068aba31c3afdce31" prot="public" static="no">
        <name>PSA_MAC_TRUNCATION_OFFSET</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1005" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac71bcf7b2280412cfaaf463588a52ec5" prot="public" static="no">
        <name>PSA_ALG_MAC_AT_LEAST_THIS_LENGTH_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00008000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1013" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1013" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaba2b3168ff49ec31374ecc8c81ac0665" prot="public" static="no">
        <name>PSA_ALG_TRUNCATED_MAC</name>
        <param><defname>mac_alg</defname></param>
        <param><defname>mac_length</defname></param>
        <initializer>    (((mac_alg) &amp; ~(<ref refid="group__crypto__types_1ga8c48784065c65c623a21b9a3ccc56b1d" kindref="member">PSA_ALG_MAC_TRUNCATION_MASK</ref> |               \
                    <ref refid="group__crypto__types_1gac71bcf7b2280412cfaaf463588a52ec5" kindref="member">PSA_ALG_MAC_AT_LEAST_THIS_LENGTH_FLAG</ref>)) |   \
     ((mac_length) &lt;&lt; <ref refid="group__crypto__types_1ga6db5ce573e6ad52068aba31c3afdce31" kindref="member">PSA_MAC_TRUNCATION_OFFSET</ref> &amp; <ref refid="group__crypto__types_1ga8c48784065c65c623a21b9a3ccc56b1d" kindref="member">PSA_ALG_MAC_TRUNCATION_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build a truncated MAC algorithm.</para>
<para>A truncated MAC algorithm is identical to the corresponding MAC algorithm except that the MAC value for the truncated algorithm consists of only the first <computeroutput>mac_length</computeroutput> bytes of the MAC value for the untruncated algorithm.</para>
<para><simplesect kind="note"><para>This macro may allow constructing algorithm identifiers that are not valid, either because the specified length is larger than the untruncated MAC or because the specified length is smaller than permitted by the implementation.</para>
</simplesect>
<simplesect kind="note"><para>It is implementation-defined whether a truncated MAC that is truncated to the same length as the MAC of the untruncated algorithm is considered identical to the untruncated algorithm for policy comparison purposes.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A MAC algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1gaca7aee4c9dde316b3b1a150a26eab776" kindref="member">PSA_ALG_IS_MAC</ref>(<computeroutput>mac_alg</computeroutput>) is true). This may be a truncated or untruncated MAC algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired length of the truncated MAC in bytes. This must be at most the full length of the MAC and must be at least an implementation-specified minimum. The implementation-specified minimum shall not be zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding MAC algorithm with the specified length. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>mac_alg</computeroutput> is not a supported MAC algorithm or if <computeroutput>mac_length</computeroutput> is too small or too large for the specified MAC algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1048" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga38ccc56b173d00f2058aa6112d378a46" prot="public" static="no">
        <name>PSA_ALG_FULL_LENGTH_MAC</name>
        <param><defname>mac_alg</defname></param>
        <initializer>    ((mac_alg) &amp; ~(<ref refid="group__crypto__types_1ga8c48784065c65c623a21b9a3ccc56b1d" kindref="member">PSA_ALG_MAC_TRUNCATION_MASK</ref> |                \
                   <ref refid="group__crypto__types_1gac71bcf7b2280412cfaaf463588a52ec5" kindref="member">PSA_ALG_MAC_AT_LEAST_THIS_LENGTH_FLAG</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build the base MAC algorithm corresponding to a truncated MAC algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A MAC algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1gaca7aee4c9dde316b3b1a150a26eab776" kindref="member">PSA_ALG_IS_MAC</ref>(<computeroutput>mac_alg</computeroutput>) is true). This may be a truncated or untruncated MAC algorithm.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding base MAC algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>mac_alg</computeroutput> is not a supported MAC algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1065" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gabcdd93759ceae34fd3678284ad3b12a6" prot="public" static="no">
        <name>PSA_MAC_TRUNCATED_LENGTH</name>
        <param><defname>mac_alg</defname></param>
        <initializer>(((mac_alg) &amp; <ref refid="group__crypto__types_1ga8c48784065c65c623a21b9a3ccc56b1d" kindref="member">PSA_ALG_MAC_TRUNCATION_MASK</ref>) &gt;&gt; <ref refid="group__crypto__types_1ga6db5ce573e6ad52068aba31c3afdce31" kindref="member">PSA_MAC_TRUNCATION_OFFSET</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Length to which a MAC algorithm is truncated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A MAC algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1gaca7aee4c9dde316b3b1a150a26eab776" kindref="member">PSA_ALG_IS_MAC</ref>(<computeroutput>mac_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the truncated MAC in bytes. </para>
</simplesect>
<simplesect kind="return"><para>0 if <computeroutput>mac_alg</computeroutput> is a non-truncated MAC algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>mac_alg</computeroutput> is not a supported MAC algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1080" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae9b6eed00b39ff89a0325c83554295d3" prot="public" static="no">
        <name>PSA_ALG_AT_LEAST_THIS_LENGTH_MAC</name>
        <param><defname>mac_alg</defname></param>
        <param><defname>min_mac_length</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gaba2b3168ff49ec31374ecc8c81ac0665" kindref="member">PSA_ALG_TRUNCATED_MAC</ref>(mac_alg, min_mac_length) |              \
     <ref refid="group__crypto__types_1gac71bcf7b2280412cfaaf463588a52ec5" kindref="member">PSA_ALG_MAC_AT_LEAST_THIS_LENGTH_FLAG</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build a MAC minimum-MAC-length wildcard algorithm.</para>
<para>A minimum-MAC-length MAC wildcard algorithm permits all MAC algorithms sharing the same base algorithm, and where the (potentially truncated) MAC length of the specific algorithm is equal to or larger then the wildcard algorithm&apos;s minimum MAC length.</para>
<para><simplesect kind="note"><para>When setting the minimum required MAC length to less than the smallest MAC length allowed by the base algorithm, this effectively becomes an &apos;any-MAC-length-allowed&apos; policy for that base algorithm.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A MAC algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1gaca7aee4c9dde316b3b1a150a26eab776" kindref="member">PSA_ALG_IS_MAC</ref>(<computeroutput>mac_alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_mac_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired minimum length of the message authentication code in bytes. This must be at most the untruncated length of the MAC and must be at least 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding MAC wildcard algorithm with the specified minimum length. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>mac_alg</computeroutput> is not a supported MAC algorithm or if <computeroutput>min_mac_length</computeroutput> is less than 1 or too large for the specified MAC algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1107" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaee0c29980b08305f6d0e7b3fbb588ade" prot="public" static="no">
        <name>PSA_ALG_CIPHER_MAC_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x03c00000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1111" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga20bdc755de7b90f6621ccb1e6bb5d9e1" prot="public" static="no">
        <name>PSA_ALG_CBC_MAC</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x03c00100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CBC-MAC construction over a block cipher</para>
<para><simplesect kind="warning"><para>CBC-MAC is insecure in many cases. A more secure mode, such as <ref refid="group__crypto__types_1ga146328a1e0023a02464e232d6ecefdc2" kindref="member">PSA_ALG_CMAC</ref>, is recommended. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1117" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga146328a1e0023a02464e232d6ecefdc2" prot="public" static="no">
        <name>PSA_ALG_CMAC</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x03c00200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CMAC construction over a block cipher </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1119" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae49d1eb601125d65a5c5b252aa45479e" prot="public" static="no">
        <name>PSA_ALG_IS_BLOCK_CIPHER_MAC</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; (<ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref> | <ref refid="group__crypto__types_1gabba3fcfee55533b0e25350e78a942e07" kindref="member">PSA_ALG_MAC_SUBCATEGORY_MASK</ref>)) == \
     <ref refid="group__crypto__types_1gaee0c29980b08305f6d0e7b3fbb588ade" kindref="member">PSA_ALG_CIPHER_MAC_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a MAC algorithm based on a block cipher.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a MAC algorithm based on a block cipher, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1129" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac79618293c4254143caa75f6c5c82fa1" prot="public" static="no">
        <name>PSA_ALG_CIPHER_STREAM_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00800000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1133" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gabc80d19d140032e3b138db4ed37d0bd7" prot="public" static="no">
        <name>PSA_ALG_CIPHER_FROM_BLOCK_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00400000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1134" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gacfec68e0c6175e02e1b2ebc97df383c0" prot="public" static="no">
        <name>PSA_ALG_IS_STREAM_CIPHER</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; (<ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref> | <ref refid="group__crypto__types_1gac79618293c4254143caa75f6c5c82fa1" kindref="member">PSA_ALG_CIPHER_STREAM_FLAG</ref>)) == \
     (<ref refid="group__crypto__types_1ga68228a619db59eba93fd13e9129dbfe2" kindref="member">PSA_ALG_CATEGORY_CIPHER</ref> | <ref refid="group__crypto__types_1gac79618293c4254143caa75f6c5c82fa1" kindref="member">PSA_ALG_CIPHER_STREAM_FLAG</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a stream cipher.</para>
<para>A stream cipher is a symmetric cipher that encrypts or decrypts messages by applying a bitwise-xor with a stream of bytes that is generated from a key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a stream cipher algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier or if it is not a symmetric cipher algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1148" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad98c105198f7428f7d1dffcb2cd398cd" prot="public" static="no">
        <name>PSA_ALG_STREAM_CIPHER</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04800100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stream cipher mode of a stream cipher algorithm.</para>
<para>The underlying stream cipher is determined by the key type.<itemizedlist>
<listitem><para>To use ChaCha20, use a key type of <ref refid="group__crypto__types_1ga901548883b3bce56cc21c3a22cf8d93c" kindref="member">PSA_KEY_TYPE_CHACHA20</ref>. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1157" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad318309706a769cffdc64e4c7e06b2e9" prot="public" static="no">
        <name>PSA_ALG_CTR</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04c01000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CTR stream cipher mode.</para>
<para>CTR is a stream cipher which is built from a block cipher. The underlying block cipher is determined by the key type. For example, to use AES-128-CTR, use this algorithm with a key of type <ref refid="group__crypto__types_1ga6ee54579dcf278c677eda4bb1a29575e" kindref="member">PSA_KEY_TYPE_AES</ref> and a length of 128 bits (16 bytes). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1166" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0088c933e01d671f263a9a1f177cb5bc" prot="public" static="no">
        <name>PSA_ALG_CFB</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04c01100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CFB stream cipher mode.</para>
<para>The underlying block cipher is determined by the key type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1172" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae96bb421fa634c6fa8f571f0112f1ddb" prot="public" static="no">
        <name>PSA_ALG_OFB</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04c01200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The OFB stream cipher mode.</para>
<para>The underlying block cipher is determined by the key type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1178" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa722c0e426a797fd6d99623f59748125" prot="public" static="no">
        <name>PSA_ALG_XTS</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x0440ff00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The XTS cipher mode.</para>
<para>XTS is a cipher mode which is built from a block cipher. It requires at least one full block of input, but beyond this minimum the input does not need to be a whole number of blocks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1186" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab8f0609cd0f12cccc9c950fd5a81a0e3" prot="public" static="no">
        <name>PSA_ALG_ECB_NO_PADDING</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04404400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Electronic Code Book (ECB) mode of a block cipher, with no padding.</para>
<para><simplesect kind="warning"><para>ECB mode does not protect the confidentiality of the encrypted data except in extremely narrow circumstances. It is recommended that applications only use ECB if they need to construct an operating mode that the implementation does not provide. Implementations are encouraged to provide the modes that applications need in preference to supporting direct access to ECB.</para>
</simplesect>
The underlying block cipher is determined by the key type.</para>
<para>This symmetric cipher mode can only be used with messages whose lengths are a multiple of the block size of the chosen block cipher.</para>
<para>ECB mode does not accept an initialization vector (IV). When using a multi-part cipher operation with this algorithm, <ref refid="group__cipher_1ga29fd7d32a5729226a2f73e7b6487bd8a" kindref="member">psa_cipher_generate_iv()</ref> and <ref refid="group__cipher_1ga9caddac1a429a5032d6d4a907fb70ba1" kindref="member">psa_cipher_set_iv()</ref> must not be called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1206" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gacb332d72716958880ee7f97d8365ae66" prot="public" static="no">
        <name>PSA_ALG_CBC_NO_PADDING</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04404000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CBC block cipher chaining mode, with no padding.</para>
<para>The underlying block cipher is determined by the key type.</para>
<para>This symmetric cipher mode can only be used with messages whose lengths are whole number of blocks for the chosen block cipher. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1215" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaef50d2e9716eb6d476046608e4e0c78c" prot="public" static="no">
        <name>PSA_ALG_CBC_PKCS7</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04404100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CBC block cipher chaining mode with PKCS#7 padding.</para>
<para>The underlying block cipher is determined by the key type.</para>
<para>This is the padding method defined by PKCS#7 (RFC 2315) <sect/>10.3. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1223" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga07de61f224831f039db310d4c840d125" prot="public" static="no">
        <name>PSA_ALG_AEAD_FROM_BLOCK_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00400000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1225" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafa4d92f00cf52ad28c08c6cb434665e7" prot="public" static="no">
        <name>PSA_ALG_IS_AEAD_ON_BLOCK_CIPHER</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; (<ref refid="group__crypto__types_1ga25e918c465b4421dbfaedad6b693d110" kindref="member">PSA_ALG_CATEGORY_MASK</ref> | <ref refid="group__crypto__types_1ga07de61f224831f039db310d4c840d125" kindref="member">PSA_ALG_AEAD_FROM_BLOCK_FLAG</ref>)) == \
     (<ref refid="group__crypto__types_1ga37fdd9cac2552f1568f38e091a826549" kindref="member">PSA_ALG_CATEGORY_AEAD</ref> | <ref refid="group__crypto__types_1ga07de61f224831f039db310d4c840d125" kindref="member">PSA_ALG_AEAD_FROM_BLOCK_FLAG</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an AEAD mode on a block cipher.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an AEAD algorithm which is an AEAD mode based on a block cipher, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1236" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gac2c0e7d21f1b2df5e76bcb4a8f84273c" prot="public" static="no">
        <name>PSA_ALG_CCM</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x05500100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CCM authenticated encryption algorithm.</para>
<para>The underlying block cipher is determined by the key type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1244" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga89627bb27ec3ce642853ab8554a88572" prot="public" static="no">
        <name>PSA_ALG_CCM_STAR_NO_TAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x04c01300)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CCM* cipher mode without authentication.</para>
<para>This is CCM* as specified in IEEE 802.15.4 §7, with a tag length of 0. For CCM* with a nonzero tag length, use the AEAD algorithm <ref refid="group__crypto__types_1gac2c0e7d21f1b2df5e76bcb4a8f84273c" kindref="member">PSA_ALG_CCM</ref>.</para>
<para>The underlying block cipher is determined by the key type.</para>
<para>Currently only 13-byte long IV&apos;s are supported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1255" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0d7d02b15aaae490d38277d99f1c637c" prot="public" static="no">
        <name>PSA_ALG_GCM</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x05500200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The GCM authenticated encryption algorithm.</para>
<para>The underlying block cipher is determined by the key type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1261" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1fec55093541640a71bdd022d4adfb9c" prot="public" static="no">
        <name>PSA_ALG_CHACHA20_POLY1305</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x05100500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Chacha20-Poly1305 AEAD algorithm.</para>
<para>The ChaCha20_Poly1305 construction is defined in RFC 7539.</para>
<para>Implementations must support 12-byte nonces, may support 8-byte nonces, and should reject other sizes.</para>
<para>Implementations must support 16-byte tags and should reject other sizes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1272" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga575d9082463a06a86c2a22dd63c2e772" prot="public" static="no">
        <name>PSA_ALG_AEAD_TAG_LENGTH_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x003f0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1278" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga987d416146048906d40dd1d9572e3193" prot="public" static="no">
        <name>PSA_AEAD_TAG_LENGTH_OFFSET</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1279" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaee189802f40c881b887a71d2e5ec53e1" prot="public" static="no">
        <name>PSA_ALG_AEAD_AT_LEAST_THIS_LENGTH_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00008000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1287" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gabdec2230cb9187e9974b9068bb06777e" prot="public" static="no">
        <name>PSA_ALG_AEAD_WITH_SHORTENED_TAG</name>
        <param><defname>aead_alg</defname></param>
        <param><defname>tag_length</defname></param>
        <initializer>    (((aead_alg) &amp; ~(<ref refid="group__crypto__types_1ga575d9082463a06a86c2a22dd63c2e772" kindref="member">PSA_ALG_AEAD_TAG_LENGTH_MASK</ref> |                     \
                     <ref refid="group__crypto__types_1gaee189802f40c881b887a71d2e5ec53e1" kindref="member">PSA_ALG_AEAD_AT_LEAST_THIS_LENGTH_FLAG</ref>)) |         \
     ((tag_length) &lt;&lt; <ref refid="group__crypto__types_1ga987d416146048906d40dd1d9572e3193" kindref="member">PSA_AEAD_TAG_LENGTH_OFFSET</ref> &amp;                      \
        <ref refid="group__crypto__types_1ga575d9082463a06a86c2a22dd63c2e772" kindref="member">PSA_ALG_AEAD_TAG_LENGTH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build a shortened AEAD algorithm.</para>
<para>A shortened AEAD algorithm is similar to the corresponding AEAD algorithm, but has an authentication tag that consists of fewer bytes. Depending on the algorithm, the tag length may affect the calculation of the ciphertext.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aead_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>aead_alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired length of the authentication tag in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding AEAD algorithm with the specified length. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>aead_alg</computeroutput> is not a supported AEAD algorithm or if <computeroutput>tag_length</computeroutput> is not valid for the specified AEAD algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1307" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0f183e8013db6567dcb832310ba9bd2f" prot="public" static="no">
        <name>PSA_ALG_AEAD_GET_TAG_LENGTH</name>
        <param><defname>aead_alg</defname></param>
        <initializer>    (((aead_alg) &amp; <ref refid="group__crypto__types_1ga575d9082463a06a86c2a22dd63c2e772" kindref="member">PSA_ALG_AEAD_TAG_LENGTH_MASK</ref>) &gt;&gt;                     \
     <ref refid="group__crypto__types_1ga987d416146048906d40dd1d9572e3193" kindref="member">PSA_AEAD_TAG_LENGTH_OFFSET</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the tag length of a specified AEAD algorithm</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aead_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>aead_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tag length specified by the input algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>aead_alg</computeroutput> is not a supported AEAD algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1323" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga4aaf387bd55186a76e126788097cdf45" prot="public" static="no">
        <name>PSA_ALG_AEAD_WITH_DEFAULT_LENGTH_TAG</name>
        <param><defname>aead_alg</defname></param>
        <initializer>    (                                                                    \
        <ref refid="group__crypto__types_1ga0fe70f1bf3d776674814d54db813c734" kindref="member">PSA_ALG_AEAD_WITH_DEFAULT_LENGTH_TAG_CASE</ref>(aead_alg, <ref refid="group__crypto__types_1gac2c0e7d21f1b2df5e76bcb4a8f84273c" kindref="member">PSA_ALG_CCM</ref>) \
        <ref refid="group__crypto__types_1ga0fe70f1bf3d776674814d54db813c734" kindref="member">PSA_ALG_AEAD_WITH_DEFAULT_LENGTH_TAG_CASE</ref>(aead_alg, <ref refid="group__crypto__types_1ga0d7d02b15aaae490d38277d99f1c637c" kindref="member">PSA_ALG_GCM</ref>) \
        <ref refid="group__crypto__types_1ga0fe70f1bf3d776674814d54db813c734" kindref="member">PSA_ALG_AEAD_WITH_DEFAULT_LENGTH_TAG_CASE</ref>(aead_alg, <ref refid="group__crypto__types_1ga1fec55093541640a71bdd022d4adfb9c" kindref="member">PSA_ALG_CHACHA20_POLY1305</ref>) \
        0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the corresponding AEAD algorithm with the default tag length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aead_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>aead_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding AEAD algorithm with the default tag length for that algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1335" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0fe70f1bf3d776674814d54db813c734" prot="public" static="no">
        <name>PSA_ALG_AEAD_WITH_DEFAULT_LENGTH_TAG_CASE</name>
        <param><defname>aead_alg</defname></param>
        <param><defname>ref</defname></param>
        <initializer>    <ref refid="group__crypto__types_1gabdec2230cb9187e9974b9068bb06777e" kindref="member">PSA_ALG_AEAD_WITH_SHORTENED_TAG</ref>(aead_alg, 0) ==                      \
    <ref refid="group__crypto__types_1gabdec2230cb9187e9974b9068bb06777e" kindref="member">PSA_ALG_AEAD_WITH_SHORTENED_TAG</ref>(ref, 0) ?                            \
    ref :</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1341" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga09c63eca9d111ca7581b63c38bda3cd7" prot="public" static="no">
        <name>PSA_ALG_AEAD_WITH_AT_LEAST_THIS_LENGTH_TAG</name>
        <param><defname>aead_alg</defname></param>
        <param><defname>min_tag_length</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gabdec2230cb9187e9974b9068bb06777e" kindref="member">PSA_ALG_AEAD_WITH_SHORTENED_TAG</ref>(aead_alg, min_tag_length) |            \
     <ref refid="group__crypto__types_1gaee189802f40c881b887a71d2e5ec53e1" kindref="member">PSA_ALG_AEAD_AT_LEAST_THIS_LENGTH_FLAG</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build an AEAD minimum-tag-length wildcard algorithm.</para>
<para>A minimum-tag-length AEAD wildcard algorithm permits all AEAD algorithms sharing the same base algorithm, and where the tag length of the specific algorithm is equal to or larger then the minimum tag length specified by the wildcard algorithm.</para>
<para><simplesect kind="note"><para>When setting the minimum required tag length to less than the smallest tag length allowed by the base algorithm, this effectively becomes an &apos;any-tag-length-allowed&apos; policy for that base algorithm.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aead_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An AEAD algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref> such that <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(<computeroutput>aead_alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_tag_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired minimum length of the authentication tag in bytes. This must be at least 1 and at most the largest allowed tag length of the algorithm.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding AEAD wildcard algorithm with the specified minimum length. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>aead_alg</computeroutput> is not a supported AEAD algorithm or if <computeroutput>min_tag_length</computeroutput> is less than 1 or too large for the specified AEAD algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1370" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga819b23c9899e92e9f867c7b2ae8f264c" prot="public" static="no">
        <name>PSA_ALG_RSA_PKCS1V15_SIGN_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1374" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga702ff75385a6ae7d4247033f479439af" prot="public" static="no">
        <name>PSA_ALG_RSA_PKCS1V15_SIGN</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga819b23c9899e92e9f867c7b2ae8f264c" kindref="member">PSA_ALG_RSA_PKCS1V15_SIGN_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA PKCS#1 v1.5 signature with hashing.</para>
<para>This is the signature scheme defined by RFC 8017 (PKCS#1: RSA Cryptography Specifications) under the name RSASSA-PKCS1-v1_5.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding RSA PKCS#1 v1.5 signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1390" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga4215e2a78dcf834e9a625927faa2a817" prot="public" static="no">
        <name>PSA_ALG_RSA_PKCS1V15_SIGN_RAW</name>
        <initializer><ref refid="group__crypto__types_1ga819b23c9899e92e9f867c7b2ae8f264c" kindref="member">PSA_ALG_RSA_PKCS1V15_SIGN_BASE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw PKCS#1 v1.5 signature.</para>
<para>The input to this algorithm is the DigestInfo structure used by RFC 8017 (PKCS#1: RSA Cryptography Specifications), <sect/>9.2 steps 3<ndash/>6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1398" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9d545279f23d43b1b2a744d0dd6826d0" prot="public" static="no">
        <name>PSA_ALG_IS_RSA_PKCS1V15_SIGN</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga819b23c9899e92e9f867c7b2ae8f264c" kindref="member">PSA_ALG_RSA_PKCS1V15_SIGN_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1399" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga49d39a343790971b7a74644f4faea0c0" prot="public" static="no">
        <name>PSA_ALG_RSA_PSS_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000300)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1402" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga52fa2bc06342341aedf60205738dba84" prot="public" static="no">
        <name>PSA_ALG_RSA_PSS_ANY_SALT_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06001300)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1403" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga62152bf4cb4bf6aace5e1be8f143564d" prot="public" static="no">
        <name>PSA_ALG_RSA_PSS</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga49d39a343790971b7a74644f4faea0c0" kindref="member">PSA_ALG_RSA_PSS_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA PSS signature with hashing.</para>
<para>This is the signature scheme defined by RFC 8017 (PKCS#1: RSA Cryptography Specifications) under the name RSASSA-PSS, with the message generation function MGF1, and with a salt length equal to the length of the hash, or the largest possible salt length for the algorithm and key size if that is smaller than the hash length. The specified hash algorithm is used to hash the input message, to create the salted hash, and for the mask generation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding RSA PSS signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1424" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9b7355a2cd6bde88177634d539127f2b" prot="public" static="no">
        <name>PSA_ALG_RSA_PSS_ANY_SALT</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga52fa2bc06342341aedf60205738dba84" kindref="member">PSA_ALG_RSA_PSS_ANY_SALT_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA PSS signature with hashing with relaxed verification.</para>
<para>This algorithm has the same behavior as <ref refid="group__crypto__types_1ga62152bf4cb4bf6aace5e1be8f143564d" kindref="member">PSA_ALG_RSA_PSS</ref> when signing, but allows an arbitrary salt length (including <computeroutput>0</computeroutput>) when verifying a signature.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding RSA PSS signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1442" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga3577ae16a2f607c3d4f894344258aa18" prot="public" static="no">
        <name>PSA_ALG_IS_RSA_PSS_STANDARD_SALT</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga49d39a343790971b7a74644f4faea0c0" kindref="member">PSA_ALG_RSA_PSS_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is RSA PSS with standard salt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm value or an algorithm policy wildcard.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is of the form <ref refid="group__crypto__types_1ga62152bf4cb4bf6aace5e1be8f143564d" kindref="member">PSA_ALG_RSA_PSS</ref>(<computeroutput>hash_alg</computeroutput>), where <computeroutput>hash_alg</computeroutput> is a hash algorithm or <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref>. 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier or policy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1456" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae93883052098a9a433251599be3e05e5" prot="public" static="no">
        <name>PSA_ALG_IS_RSA_PSS_ANY_SALT</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga52fa2bc06342341aedf60205738dba84" kindref="member">PSA_ALG_RSA_PSS_ANY_SALT_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is RSA PSS with any salt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm value or an algorithm policy wildcard.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is of the form <ref refid="group__crypto__types_1ga52fa2bc06342341aedf60205738dba84" kindref="member">PSA_ALG_RSA_PSS_ANY_SALT_BASE</ref>(<computeroutput>hash_alg</computeroutput>), where <computeroutput>hash_alg</computeroutput> is a hash algorithm or <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref>. 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier or policy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1470" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafa04fae7393a76d5161558768cb82a78" prot="public" static="no">
        <name>PSA_ALG_IS_RSA_PSS</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga3577ae16a2f607c3d4f894344258aa18" kindref="member">PSA_ALG_IS_RSA_PSS_STANDARD_SALT</ref>(alg) ||                   \
     <ref refid="group__crypto__types_1gae93883052098a9a433251599be3e05e5" kindref="member">PSA_ALG_IS_RSA_PSS_ANY_SALT</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is RSA PSS.</para>
<para>This includes any of the RSA PSS algorithm variants, regardless of the constraints on salt length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm value or an algorithm policy wildcard.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is of the form <ref refid="group__crypto__types_1ga62152bf4cb4bf6aace5e1be8f143564d" kindref="member">PSA_ALG_RSA_PSS</ref>(<computeroutput>hash_alg</computeroutput>) or <ref refid="group__crypto__types_1ga52fa2bc06342341aedf60205738dba84" kindref="member">PSA_ALG_RSA_PSS_ANY_SALT_BASE</ref>(<computeroutput>hash_alg</computeroutput>), where <computeroutput>hash_alg</computeroutput> is a hash algorithm or <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref>. 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier or policy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1488" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafd9800fdbe6ea881e0ac0ce03d145928" prot="public" static="no">
        <name>PSA_ALG_ECDSA_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000600)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1492" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga7e3ce9f514a227d5ba5d8318870452e3" prot="public" static="no">
        <name>PSA_ALG_ECDSA</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafd9800fdbe6ea881e0ac0ce03d145928" kindref="member">PSA_ALG_ECDSA_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ECDSA signature with hashing.</para>
<para>This is the ECDSA signature scheme defined by ANSI X9.62, with a random per-message secret number (<emphasis>k</emphasis>).</para>
<para>The representation of the signature as a byte string consists of the concatenation of the signature values <emphasis>r</emphasis> and <emphasis>s</emphasis>. Each of <emphasis>r</emphasis> and <emphasis>s</emphasis> is encoded as an <emphasis>N</emphasis>-octet string, where <emphasis>N</emphasis> is the length of the base point of the curve in octets. Each value is represented in big-endian order (most significant octet first).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding ECDSA signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1513" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga51d6b6044a62e33cae0cf64bfc3b22a4" prot="public" static="no">
        <name>PSA_ALG_ECDSA_ANY</name>
        <initializer><ref refid="group__crypto__types_1gafd9800fdbe6ea881e0ac0ce03d145928" kindref="member">PSA_ALG_ECDSA_BASE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ECDSA signature without hashing.</para>
<para>This is the same signature scheme as <ref refid="group__crypto__types_1ga7e3ce9f514a227d5ba5d8318870452e3" kindref="member">PSA_ALG_ECDSA()</ref>, but without specifying a hash algorithm. This algorithm may only be used to sign or verify a sequence of bytes that should be an already-calculated hash. Note that the input is padded with zeros on the left or truncated on the left as required to fit the curve size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1524" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6c08b65200140aeb46ee9db9c8ed878c" prot="public" static="no">
        <name>PSA_ALG_DETERMINISTIC_ECDSA_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000700)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1525" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga11da566bcd341661c8de921e2ca5ed03" prot="public" static="no">
        <name>PSA_ALG_DETERMINISTIC_ECDSA</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga6c08b65200140aeb46ee9db9c8ed878c" kindref="member">PSA_ALG_DETERMINISTIC_ECDSA_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deterministic ECDSA signature with hashing.</para>
<para>This is the deterministic ECDSA signature scheme defined by RFC 6979.</para>
<para>The representation of a signature is the same as with <ref refid="group__crypto__types_1ga7e3ce9f514a227d5ba5d8318870452e3" kindref="member">PSA_ALG_ECDSA()</ref>.</para>
<para>Note that when this algorithm is used for verification, signatures made with randomized ECDSA (<ref refid="group__crypto__types_1ga7e3ce9f514a227d5ba5d8318870452e3" kindref="member">PSA_ALG_ECDSA</ref>(<computeroutput>hash_alg</computeroutput>)) with the same private key are accepted. In other words, <ref refid="group__crypto__types_1ga11da566bcd341661c8de921e2ca5ed03" kindref="member">PSA_ALG_DETERMINISTIC_ECDSA</ref>(<computeroutput>hash_alg</computeroutput>) differs from <ref refid="group__crypto__types_1ga7e3ce9f514a227d5ba5d8318870452e3" kindref="member">PSA_ALG_ECDSA</ref>(<computeroutput>hash_alg</computeroutput>) only for signature, not for verification.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true). This includes <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> when specifying the algorithm in a usage policy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding deterministic ECDSA signature algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1548" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga409294c965c3e28728f8cb9822e886d1" prot="public" static="no">
        <name>PSA_ALG_ECDSA_DETERMINISTIC_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00000100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1550" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gafb92dc138c9d2388033ff5fc1dab7b48" prot="public" static="no">
        <name>PSA_ALG_IS_ECDSA</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref> &amp; ~<ref refid="group__crypto__types_1ga409294c965c3e28728f8cb9822e886d1" kindref="member">PSA_ALG_ECDSA_DETERMINISTIC_FLAG</ref>) ==  \
     <ref refid="group__crypto__types_1gafd9800fdbe6ea881e0ac0ce03d145928" kindref="member">PSA_ALG_ECDSA_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1551" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaced29d8e3a1740aaec01e9ef8211df4f" prot="public" static="no">
        <name>PSA_ALG_ECDSA_IS_DETERMINISTIC</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga409294c965c3e28728f8cb9822e886d1" kindref="member">PSA_ALG_ECDSA_DETERMINISTIC_FLAG</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1554" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gacd8766fe0fb8c1e2d32644e0d092c43a" prot="public" static="no">
        <name>PSA_ALG_IS_DETERMINISTIC_ECDSA</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafb92dc138c9d2388033ff5fc1dab7b48" kindref="member">PSA_ALG_IS_ECDSA</ref>(alg) &amp;&amp; <ref refid="group__crypto__types_1gaced29d8e3a1740aaec01e9ef8211df4f" kindref="member">PSA_ALG_ECDSA_IS_DETERMINISTIC</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1556" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae7b0fafebd139f6f815285b7cad622ea" prot="public" static="no">
        <name>PSA_ALG_IS_RANDOMIZED_ECDSA</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafb92dc138c9d2388033ff5fc1dab7b48" kindref="member">PSA_ALG_IS_ECDSA</ref>(alg) &amp;&amp; !<ref refid="group__crypto__types_1gaced29d8e3a1740aaec01e9ef8211df4f" kindref="member">PSA_ALG_ECDSA_IS_DETERMINISTIC</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1558" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga76d6053fb1867c2c46c5f8131c8a8cae" prot="public" static="no">
        <name>PSA_ALG_PURE_EDDSA</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Edwards-curve digital signature algorithm without prehashing (PureEdDSA), using standard parameters.</para>
<para>Contexts are not supported in the current version of this specification because there is no suitable signature interface that can take the context as a parameter. A future version of this specification may add suitable functions and extend this algorithm to support contexts.</para>
<para>PureEdDSA requires an elliptic curve key on a twisted Edwards curve. In this specification, the following curves are supported:<itemizedlist>
<listitem><para><ref refid="group__crypto__types_1gafe45f9fe29699f26795f6251f47eafd4" kindref="member">PSA_ECC_FAMILY_TWISTED_EDWARDS</ref>, 255-bit: Ed25519 as specified in RFC 8032. The curve is Edwards25519. The hash function used internally is SHA-512.</para>
</listitem><listitem><para><ref refid="group__crypto__types_1gafe45f9fe29699f26795f6251f47eafd4" kindref="member">PSA_ECC_FAMILY_TWISTED_EDWARDS</ref>, 448-bit: Ed448 as specified in RFC 8032. The curve is Edwards448. The hash function used internally is the first 114 bytes of the SHAKE256 output.</para>
</listitem></itemizedlist>
</para>
<para>This algorithm can be used with <ref refid="group__asymmetric_1ga963ecadae9c38c85826f9a13cf1529b9" kindref="member">psa_sign_message()</ref> and <ref refid="group__asymmetric_1ga01c11f480b185a4268bebd013df7c14c" kindref="member">psa_verify_message()</ref>. Since there is no prehashing, it cannot be used with <ref refid="group__asymmetric_1ga785e746a31a7b2a35ae5175c5ace3c5c" kindref="member">psa_sign_hash()</ref> or <ref refid="group__asymmetric_1gae2ffbf01e5266391aff22b101a49f5f5" kindref="member">psa_verify_hash()</ref>.</para>
<para>The signature format is the concatenation of R and S as defined by RFC 8032 §5.1.6 and §5.2.6 (a 64-byte string for Ed25519, a 114-byte string for Ed448). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1589" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9a689cd47452af6f5d6f71edd4b86d70" prot="public" static="no">
        <name>PSA_ALG_HASH_EDDSA_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x06000900)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1591" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gada6b4732688e435a881f7771e3a63e16" prot="public" static="no">
        <name>PSA_ALG_IS_HASH_EDDSA</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga9a689cd47452af6f5d6f71edd4b86d70" kindref="member">PSA_ALG_HASH_EDDSA_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1592" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga3be20c4293031a8f32e7cb66d26f5c3d" prot="public" static="no">
        <name>PSA_ALG_ED25519PH</name>
        <initializer>(<ref refid="group__crypto__types_1ga9a689cd47452af6f5d6f71edd4b86d70" kindref="member">PSA_ALG_HASH_EDDSA_BASE</ref> | (<ref refid="group__crypto__types_1gafba3ae409f46d3dd7f37a0910660c3e9" kindref="member">PSA_ALG_SHA_512</ref> &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Edwards-curve digital signature algorithm with prehashing (HashEdDSA), using SHA-512 and the Edwards25519 curve.</para>
<para>See <ref refid="group__crypto__types_1ga76d6053fb1867c2c46c5f8131c8a8cae" kindref="member">PSA_ALG_PURE_EDDSA</ref> regarding context support and the signature format.</para>
<para>This algorithm is Ed25519 as specified in RFC 8032. The curve is Edwards25519. The prehash is SHA-512. The hash function used internally is SHA-512.</para>
<para>This is a hash-and-sign algorithm: to calculate a signature, you can either:<itemizedlist>
<listitem><para>call <ref refid="group__asymmetric_1ga963ecadae9c38c85826f9a13cf1529b9" kindref="member">psa_sign_message()</ref> on the message;</para>
</listitem><listitem><para>or calculate the SHA-512 hash of the message with <ref refid="group__hash_1gac69f7f19d96a56c28cf3799d11b12156" kindref="member">psa_hash_compute()</ref> or with a multi-part hash operation started with <ref refid="group__hash_1ga8d72896cf70fc4d514c5c6b978912515" kindref="member">psa_hash_setup()</ref>, using the hash algorithm <ref refid="group__crypto__types_1gafba3ae409f46d3dd7f37a0910660c3e9" kindref="member">PSA_ALG_SHA_512</ref>, then sign the calculated hash with <ref refid="group__asymmetric_1ga785e746a31a7b2a35ae5175c5ace3c5c" kindref="member">psa_sign_hash()</ref>. Verifying a signature is similar, using <ref refid="group__asymmetric_1ga01c11f480b185a4268bebd013df7c14c" kindref="member">psa_verify_message()</ref> or <ref refid="group__asymmetric_1gae2ffbf01e5266391aff22b101a49f5f5" kindref="member">psa_verify_hash()</ref> instead of the signature function. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1616" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1c632df795535af4334d37a08a01481b" prot="public" static="no">
        <name>PSA_ALG_ED448PH</name>
        <initializer>(<ref refid="group__crypto__types_1ga9a689cd47452af6f5d6f71edd4b86d70" kindref="member">PSA_ALG_HASH_EDDSA_BASE</ref> | (<ref refid="group__crypto__types_1gaec67f81d5b80b765702efb4b3d6e202c" kindref="member">PSA_ALG_SHAKE256_512</ref> &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Edwards-curve digital signature algorithm with prehashing (HashEdDSA), using SHAKE256 and the Edwards448 curve.</para>
<para>See <ref refid="group__crypto__types_1ga76d6053fb1867c2c46c5f8131c8a8cae" kindref="member">PSA_ALG_PURE_EDDSA</ref> regarding context support and the signature format.</para>
<para>This algorithm is Ed448 as specified in RFC 8032. The curve is Edwards448. The prehash is the first 64 bytes of the SHAKE256 output. The hash function used internally is the first 114 bytes of the SHAKE256 output.</para>
<para>This is a hash-and-sign algorithm: to calculate a signature, you can either:<itemizedlist>
<listitem><para>call <ref refid="group__asymmetric_1ga963ecadae9c38c85826f9a13cf1529b9" kindref="member">psa_sign_message()</ref> on the message;</para>
</listitem><listitem><para>or calculate the first 64 bytes of the SHAKE256 output of the message with <ref refid="group__hash_1gac69f7f19d96a56c28cf3799d11b12156" kindref="member">psa_hash_compute()</ref> or with a multi-part hash operation started with <ref refid="group__hash_1ga8d72896cf70fc4d514c5c6b978912515" kindref="member">psa_hash_setup()</ref>, using the hash algorithm <ref refid="group__crypto__types_1gaec67f81d5b80b765702efb4b3d6e202c" kindref="member">PSA_ALG_SHAKE256_512</ref>, then sign the calculated hash with <ref refid="group__asymmetric_1ga785e746a31a7b2a35ae5175c5ace3c5c" kindref="member">psa_sign_hash()</ref>. Verifying a signature is similar, using <ref refid="group__asymmetric_1ga01c11f480b185a4268bebd013df7c14c" kindref="member">psa_verify_message()</ref> or <ref refid="group__asymmetric_1gae2ffbf01e5266391aff22b101a49f5f5" kindref="member">psa_verify_hash()</ref> instead of the signature function. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1641" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga15b8c876869f7b69d8e6563d235b9825" prot="public" static="no">
        <name>PSA_ALG_IS_VENDOR_HASH_AND_SIGN</name>
        <param><defname>alg</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1647" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga7664f69c28b193cc6cb8368481fcda64" prot="public" static="no">
        <name>PSA_ALG_IS_SIGN_HASH</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gafa04fae7393a76d5161558768cb82a78" kindref="member">PSA_ALG_IS_RSA_PSS</ref>(alg) || <ref refid="group__crypto__types_1ga9d545279f23d43b1b2a744d0dd6826d0" kindref="member">PSA_ALG_IS_RSA_PKCS1V15_SIGN</ref>(alg) ||    \
     <ref refid="group__crypto__types_1gafb92dc138c9d2388033ff5fc1dab7b48" kindref="member">PSA_ALG_IS_ECDSA</ref>(alg) || <ref refid="group__crypto__types_1gada6b4732688e435a881f7771e3a63e16" kindref="member">PSA_ALG_IS_HASH_EDDSA</ref>(alg) ||             \
     <ref refid="group__crypto__types_1ga15b8c876869f7b69d8e6563d235b9825" kindref="member">PSA_ALG_IS_VENDOR_HASH_AND_SIGN</ref>(alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a signature algorithm that can be used with <ref refid="group__asymmetric_1ga785e746a31a7b2a35ae5175c5ace3c5c" kindref="member">psa_sign_hash()</ref> and <ref refid="group__asymmetric_1gae2ffbf01e5266391aff22b101a49f5f5" kindref="member">psa_verify_hash()</ref>.</para>
<para>This encompasses all strict hash-and-sign algorithms categorized by <ref refid="group__crypto__types_1gad8a8ea0536975363b66410cdeafe38b6" kindref="member">PSA_ALG_IS_HASH_AND_SIGN()</ref>, as well as algorithms that follow the paradigm more loosely:<itemizedlist>
<listitem><para><ref refid="group__crypto__types_1ga4215e2a78dcf834e9a625927faa2a817" kindref="member">PSA_ALG_RSA_PKCS1V15_SIGN_RAW</ref> (expects its input to be an encoded hash)</para>
</listitem><listitem><para><ref refid="group__crypto__types_1ga51d6b6044a62e33cae0cf64bfc3b22a4" kindref="member">PSA_ALG_ECDSA_ANY</ref> (doesn&apos;t specify what kind of hash the input is)</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type psa_algorithm_t).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if alg is a signature algorithm that can be used to sign a hash. 0 if alg is a signature algorithm that can only be used to sign a message. 0 if alg is not a signature algorithm. This macro can return either 0 or 1 if alg is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1666" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gacd8b87e858614134de566edaa4d84db8" prot="public" static="no">
        <name>PSA_ALG_IS_SIGN_MESSAGE</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga7664f69c28b193cc6cb8368481fcda64" kindref="member">PSA_ALG_IS_SIGN_HASH</ref>(alg) || (alg) == <ref refid="group__crypto__types_1ga76d6053fb1867c2c46c5f8131c8a8cae" kindref="member">PSA_ALG_PURE_EDDSA</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a signature algorithm that can be used with <ref refid="group__asymmetric_1ga963ecadae9c38c85826f9a13cf1529b9" kindref="member">psa_sign_message()</ref> and <ref refid="group__asymmetric_1ga01c11f480b185a4268bebd013df7c14c" kindref="member">psa_verify_message()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if alg is a signature algorithm that can be used to sign a message. 0 if <computeroutput>alg</computeroutput> is a signature algorithm that can only be used to sign an already-calculated hash. 0 if <computeroutput>alg</computeroutput> is not a signature algorithm. This macro can return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1682" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad8a8ea0536975363b66410cdeafe38b6" prot="public" static="no">
        <name>PSA_ALG_IS_HASH_AND_SIGN</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga7664f69c28b193cc6cb8368481fcda64" kindref="member">PSA_ALG_IS_SIGN_HASH</ref>(alg) &amp;&amp;                                       \
     ((alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a hash-and-sign algorithm.</para>
<para>Hash-and-sign algorithms are asymmetric (public-key) signature algorithms structured in two parts: first the calculation of a hash in a way that does not depend on the key, then the calculation of a signature from the hash value and the key. Hash-and-sign algorithms encode the hash used for the hashing step, and you can call <ref refid="group__crypto__types_1ga24cf6d7bcd2b9aeeeff86f07b6c674e3" kindref="member">PSA_ALG_SIGN_GET_HASH</ref> to extract this algorithm.</para>
<para>Thus, for a hash-and-sign algorithm, <computeroutput>psa_sign_message(key, alg, input, ...)</computeroutput> is equivalent to <programlisting><codeline><highlight class="normal">psa_hash_compute(PSA_ALG_SIGN_GET_HASH(alg),<sp/>input,<sp/>...,<sp/>hash,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">psa_sign_hash(key,<sp/>alg,<sp/>hash,<sp/>...,<sp/>signature,<sp/>...);</highlight></codeline>
</programlisting></para>
<para>Most usefully, separating the hash from the signature allows the hash to be calculated in multiple steps with <ref refid="group__hash_1ga8d72896cf70fc4d514c5c6b978912515" kindref="member">psa_hash_setup()</ref>, <ref refid="group__hash_1ga65b16ef97d7f650899b7db4b7d1112ff" kindref="member">psa_hash_update()</ref> and <ref refid="group__hash_1ga4795fd06a0067b0adcd92e9627b8c97e" kindref="member">psa_hash_finish()</ref>. Likewise <ref refid="group__asymmetric_1ga01c11f480b185a4268bebd013df7c14c" kindref="member">psa_verify_message()</ref> is equivalent to calculating the hash and then calling <ref refid="group__asymmetric_1gae2ffbf01e5266391aff22b101a49f5f5" kindref="member">psa_verify_hash()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a hash-and-sign algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1711" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga24cf6d7bcd2b9aeeeff86f07b6c674e3" prot="public" static="no">
        <name>PSA_ALG_SIGN_GET_HASH</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gad8a8ea0536975363b66410cdeafe38b6" kindref="member">PSA_ALG_IS_HASH_AND_SIGN</ref>(alg) ?                                   \
     ((alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) | <ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref> :             \
     0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the hash used by a hash-and-sign signature algorithm.</para>
<para>A hash-and-sign algorithm is a signature algorithm which is composed of two phases: first a hashing phase which does not use the key and produces a hash of the input message, then a signing phase which only uses the hash and the key and not the message itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A signature algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga6d490d0904e0698f6c1268a89d72ff31" kindref="member">PSA_ALG_IS_SIGN</ref>(<computeroutput>alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The underlying hash algorithm if <computeroutput>alg</computeroutput> is a hash-and-sign algorithm. </para>
</simplesect>
<simplesect kind="return"><para>0 if <computeroutput>alg</computeroutput> is a signature algorithm that does not follow the hash-and-sign structure. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>alg</computeroutput> is not a signature algorithm or if it is not supported by the implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1733" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga4c540d3abe43fb9abcb94f2bc51acef9" prot="public" static="no">
        <name>PSA_ALG_RSA_PKCS1V15_CRYPT</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x07000200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA PKCS#1 v1.5 encryption. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1740" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga67ba62fbd154f5d3098866ae68ba66eb" prot="public" static="no">
        <name>PSA_ALG_RSA_OAEP_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x07000300)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1742" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa1235dc3fdd9839c6c1b1a9857344c76" prot="public" static="no">
        <name>PSA_ALG_RSA_OAEP</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga67ba62fbd154f5d3098866ae68ba66eb" kindref="member">PSA_ALG_RSA_OAEP_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA OAEP encryption.</para>
<para>This is the encryption scheme defined by RFC 8017 (PKCS#1: RSA Cryptography Specifications) under the name RSAES-OAEP, with the message generation function MGF1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true) to use for MGF1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding RSA OAEP encryption algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1757" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9a85c05fd5c39ca63bbc47fb0755da39" prot="public" static="no">
        <name>PSA_ALG_IS_RSA_OAEP</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga67ba62fbd154f5d3098866ae68ba66eb" kindref="member">PSA_ALG_RSA_OAEP_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1759" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1759" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae6b0b87aabe82a1b3113824f022c52e8" prot="public" static="no">
        <name>PSA_ALG_RSA_OAEP_GET_HASH</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga9a85c05fd5c39ca63bbc47fb0755da39" kindref="member">PSA_ALG_IS_RSA_OAEP</ref>(alg) ?                                 \
     ((alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) | <ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref> :      \
     0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1761" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga85fe668f95a1e65b573dc5acb798be6f" prot="public" static="no">
        <name>PSA_ALG_HKDF_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08000100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1766" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga32a888fb360e6e25cab8a343772c4a82" prot="public" static="no">
        <name>PSA_ALG_HKDF</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga85fe668f95a1e65b573dc5acb798be6f" kindref="member">PSA_ALG_HKDF_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build an HKDF algorithm.</para>
<para>For example, <computeroutput><ref refid="group__crypto__types_1ga32a888fb360e6e25cab8a343772c4a82" kindref="member">PSA_ALG_HKDF(PSA_ALG_SHA_256)</ref></computeroutput> is HKDF using HMAC-SHA-256.</para>
<para>This key derivation algorithm uses the following inputs:<itemizedlist>
<listitem><para><ref refid="group__derivation_1gab62757fb125243562c3947a752470d4a" kindref="member">PSA_KEY_DERIVATION_INPUT_SALT</ref> is the salt used in the &quot;extract&quot; step. It is optional; if omitted, the derivation uses an empty salt.</para>
</listitem><listitem><para><ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> is the secret key used in the &quot;extract&quot; step.</para>
</listitem><listitem><para><ref refid="group__derivation_1gacef8df989e09c769233f4b779acb5b7d" kindref="member">PSA_KEY_DERIVATION_INPUT_INFO</ref> is the info string used in the &quot;expand&quot; step. You must pass <ref refid="group__derivation_1gab62757fb125243562c3947a752470d4a" kindref="member">PSA_KEY_DERIVATION_INPUT_SALT</ref> before <ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref>. You may pass <ref refid="group__derivation_1gacef8df989e09c769233f4b779acb5b7d" kindref="member">PSA_KEY_DERIVATION_INPUT_INFO</ref> at any time after steup and before starting to generate output.</para>
<para><simplesect kind="warning"><para>HKDF processes the salt as follows: first hash it with hash_alg if the salt is longer than the block size of the hash algorithm; then pad with null bytes up to the block size. As a result, it is possible for distinct salt inputs to result in the same outputs. To ensure unique outputs, it is recommended to use a fixed length for salt values.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding HKDF algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1793" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga1979d0a76fcee6164cf2e65960f38db2" prot="public" static="no">
        <name>PSA_ALG_IS_HKDF</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga85fe668f95a1e65b573dc5acb798be6f" kindref="member">PSA_ALG_HKDF_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an HKDF algorithm.</para>
<para>HKDF is a family of key derivation algorithms that are based on a hash function and the HMAC construction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an HKDF algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key derivation algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1806" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga643df48b529b176995927b697ff07a4c" prot="public" static="no">
        <name>PSA_ALG_HKDF_GET_HASH</name>
        <param><defname>hkdf_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref> | ((hkdf_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1808" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaebfdaabdd3563bb4759268710912682e" prot="public" static="no">
        <name>PSA_ALG_HKDF_EXTRACT_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08000400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1811" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa6ed42995d7714568c2925e2c4d1da83" prot="public" static="no">
        <name>PSA_ALG_HKDF_EXTRACT</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gaebfdaabdd3563bb4759268710912682e" kindref="member">PSA_ALG_HKDF_EXTRACT_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build an HKDF-Extract algorithm.</para>
<para>For example, <computeroutput><ref refid="group__crypto__types_1gaa6ed42995d7714568c2925e2c4d1da83" kindref="member">PSA_ALG_HKDF_EXTRACT(PSA_ALG_SHA_256)</ref></computeroutput> is HKDF-Extract using HMAC-SHA-256.</para>
<para>This key derivation algorithm uses the following inputs:<itemizedlist>
<listitem><para>PSA_KEY_DERIVATION_INPUT_SALT is the salt.</para>
</listitem><listitem><para>PSA_KEY_DERIVATION_INPUT_SECRET is the input keying material used in the &quot;extract&quot; step. The inputs are mandatory and must be passed in the order above. Each input may only be passed once.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>HKDF-Extract is not meant to be used on its own. PSA_ALG_HKDF should be used instead if possible. PSA_ALG_HKDF_EXTRACT is provided as a separate algorithm for the sake of protocols that use it as a building block. It may also be a slight performance optimization in applications that use HKDF with the same salt and key but many different info strings.</para>
</simplesect>
<simplesect kind="warning"><para>HKDF processes the salt as follows: first hash it with hash_alg if the salt is longer than the block size of the hash algorithm; then pad with null bytes up to the block size. As a result, it is possible for distinct salt inputs to result in the same outputs. To ensure unique outputs, it is recommended to use a fixed length for salt values.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding HKDF-Extract algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1844" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga04f15d32fce74dc726a2267b4c8bddbe" prot="public" static="no">
        <name>PSA_ALG_IS_HKDF_EXTRACT</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1gaebfdaabdd3563bb4759268710912682e" kindref="member">PSA_ALG_HKDF_EXTRACT_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an HKDF-Extract algorithm.</para>
<para>HKDF-Extract is a family of key derivation algorithms that are based on a hash function and the HMAC construction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an HKDF-Extract algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key derivation algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1857" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga608a979e102edbedf3db5b1f93d27b87" prot="public" static="no">
        <name>PSA_ALG_HKDF_EXPAND_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08000500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1860" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga8cd4f3b42f09bbed3f215ca17565138f" prot="public" static="no">
        <name>PSA_ALG_HKDF_EXPAND</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1ga608a979e102edbedf3db5b1f93d27b87" kindref="member">PSA_ALG_HKDF_EXPAND_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build an HKDF-Expand algorithm.</para>
<para>For example, <computeroutput><ref refid="group__crypto__types_1ga8cd4f3b42f09bbed3f215ca17565138f" kindref="member">PSA_ALG_HKDF_EXPAND(PSA_ALG_SHA_256)</ref></computeroutput> is HKDF-Expand using HMAC-SHA-256.</para>
<para>This key derivation algorithm uses the following inputs:<itemizedlist>
<listitem><para>PSA_KEY_DERIVATION_INPUT_SECRET is the pseudorandom key (PRK).</para>
</listitem><listitem><para>PSA_KEY_DERIVATION_INPUT_INFO is the info string.</para>
</listitem></itemizedlist>
</para>
<para>The inputs are mandatory and must be passed in the order above. Each input may only be passed once.</para>
<para><simplesect kind="warning"><para>HKDF-Expand is not meant to be used on its own. <computeroutput>PSA_ALG_HKDF</computeroutput> should be used instead if possible. <computeroutput>PSA_ALG_HKDF_EXPAND</computeroutput> is provided as a separate algorithm for the sake of protocols that use it as a building block. It may also be a slight performance optimization in applications that use HKDF with the same salt and key but many different info strings.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding HKDF-Expand algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1886" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaf697a4b8e100ce5c8fffbb4366e0615c" prot="public" static="no">
        <name>PSA_ALG_IS_HKDF_EXPAND</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga608a979e102edbedf3db5b1f93d27b87" kindref="member">PSA_ALG_HKDF_EXPAND_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an HKDF-Expand algorithm.</para>
<para>HKDF-Expand is a family of key derivation algorithms that are based on a hash function and the HMAC construction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an HKDF-Expand algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key derivation algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1899" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gabc9813a3ea9d4e4f8c30a51451f3776e" prot="public" static="no">
        <name>PSA_ALG_IS_ANY_HKDF</name>
        <param><defname>alg</defname></param>
        <initializer>    (((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga85fe668f95a1e65b573dc5acb798be6f" kindref="member">PSA_ALG_HKDF_BASE</ref> ||          \
     ((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1gaebfdaabdd3563bb4759268710912682e" kindref="member">PSA_ALG_HKDF_EXTRACT_BASE</ref> ||  \
     ((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1ga608a979e102edbedf3db5b1f93d27b87" kindref="member">PSA_ALG_HKDF_EXPAND_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an HKDF or HKDF-Extract or HKDF-Expand algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is any HKDF type algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key derivation algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1912" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gadb328698047e32da8e16551b28b50a35" prot="public" static="no">
        <name>PSA_ALG_TLS12_PRF_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08000200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1917" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1917" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga6d5623c2ccda1d4a84e34351af8382d5" prot="public" static="no">
        <name>PSA_ALG_TLS12_PRF</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gadb328698047e32da8e16551b28b50a35" kindref="member">PSA_ALG_TLS12_PRF_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build a TLS-1.2 PRF algorithm.</para>
<para>TLS 1.2 uses a custom pseudorandom function (PRF) for key schedule, specified in Section 5 of RFC 5246. It is based on HMAC and can be used with either SHA-256 or SHA-384.</para>
<para>This key derivation algorithm uses the following inputs, which must be passed in the order given here:<itemizedlist>
<listitem><para><ref refid="group__derivation_1gaccc41e8b4bd4e34bcb46ad1577709535" kindref="member">PSA_KEY_DERIVATION_INPUT_SEED</ref> is the seed.</para>
</listitem><listitem><para><ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> is the secret key.</para>
</listitem><listitem><para><ref refid="group__derivation_1ga6489d91aa4a2eb50d28c1209bffe9541" kindref="member">PSA_KEY_DERIVATION_INPUT_LABEL</ref> is the label.</para>
</listitem></itemizedlist>
</para>
<para>For the application to TLS-1.2 key expansion, the seed is the concatenation of ServerHello.Random + ClientHello.Random, and the label is &quot;key expansion&quot;.</para>
<para>For example, <computeroutput><ref refid="group__crypto__types_1ga6d5623c2ccda1d4a84e34351af8382d5" kindref="member">PSA_ALG_TLS12_PRF(PSA_ALG_SHA_256)</ref></computeroutput> represents the TLS 1.2 PRF using HMAC-SHA-256.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding TLS-1.2 PRF algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1944" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa3c18890c50222e5219f40ade8927e66" prot="public" static="no">
        <name>PSA_ALG_IS_TLS12_PRF</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1gadb328698047e32da8e16551b28b50a35" kindref="member">PSA_ALG_TLS12_PRF_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a TLS-1.2 PRF algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a TLS-1.2 PRF algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key derivation algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1955" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga403b2695655c7e03d6c07c061c606ab7" prot="public" static="no">
        <name>PSA_ALG_TLS12_PRF_GET_HASH</name>
        <param><defname>hkdf_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref> | ((hkdf_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1957" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaaca4b1953a3f31f1a285a48454aa4a6f" prot="public" static="no">
        <name>PSA_ALG_TLS12_PSK_TO_MS_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08000300)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="1960" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="1960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga039ec797f15d1635d9b2e09a611f8a68" prot="public" static="no">
        <name>PSA_ALG_TLS12_PSK_TO_MS</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gaaca4b1953a3f31f1a285a48454aa4a6f" kindref="member">PSA_ALG_TLS12_PSK_TO_MS_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build a TLS-1.2 PSK-to-MasterSecret algorithm.</para>
<para>In a pure-PSK handshake in TLS 1.2, the master secret is derived from the PreSharedKey (PSK) through the application of padding (RFC 4279, Section 2) and the TLS-1.2 PRF (RFC 5246, Section 5). The latter is based on HMAC and can be used with either SHA-256 or SHA-384.</para>
<para>This key derivation algorithm uses the following inputs, which must be passed in the order given here:<itemizedlist>
<listitem><para><ref refid="group__derivation_1gaccc41e8b4bd4e34bcb46ad1577709535" kindref="member">PSA_KEY_DERIVATION_INPUT_SEED</ref> is the seed.</para>
</listitem><listitem><para><ref refid="group__derivation_1gab21b29b1193a900ebfe94945700f9c54" kindref="member">PSA_KEY_DERIVATION_INPUT_OTHER_SECRET</ref> is the other secret for the computation of the premaster secret. This input is optional; if omitted, it defaults to a string of null bytes with the same length as the secret (PSK) input.</para>
</listitem><listitem><para><ref refid="group__derivation_1ga0ddfbe764baba995c402b1b0ef59392e" kindref="member">PSA_KEY_DERIVATION_INPUT_SECRET</ref> is the secret key.</para>
</listitem><listitem><para><ref refid="group__derivation_1ga6489d91aa4a2eb50d28c1209bffe9541" kindref="member">PSA_KEY_DERIVATION_INPUT_LABEL</ref> is the label.</para>
</listitem></itemizedlist>
</para>
<para>For the application to TLS-1.2, the seed (which is forwarded to the TLS-1.2 PRF) is the concatenation of the ClientHello.Random + ServerHello.Random, the label is &quot;master secret&quot; or &quot;extended master secret&quot; and the other secret depends on the key exchange specified in the cipher suite:<itemizedlist>
<listitem><para>for a plain PSK cipher suite (RFC 4279, Section 2), omit PSA_KEY_DERIVATION_INPUT_OTHER_SECRET</para>
</listitem><listitem><para>for a DHE-PSK (RFC 4279, Section 3) or ECDHE-PSK cipher suite (RFC 5489, Section 2), the other secret should be the output of the PSA_ALG_FFDH or PSA_ALG_ECDH key agreement performed with the peer. The recommended way to pass this input is to use a key derivation algorithm constructed as <ref refid="group__crypto__types_1ga78bb81cffb87a635c247725eeb2a2682" kindref="member">PSA_ALG_KEY_AGREEMENT(ka_alg, PSA_ALG_TLS12_PSK_TO_MS(hash_alg))</ref> and to call <ref refid="group__key__derivation_1ga2cd5a8ac906747d3204ec442db78745f" kindref="member">psa_key_derivation_key_agreement()</ref>. Alternatively, this input may be an output of <computeroutput><ref refid="group__key__derivation_1ga165dda1ad80a10730cb538069d4cc7aa" kindref="member">psa_raw_key_agreement()</ref></computeroutput> passed with <ref refid="group__key__derivation_1ga8fd934dfb0ca45cbf89542ef2a5494c2" kindref="member">psa_key_derivation_input_bytes()</ref>, or an equivalent input passed with <ref refid="group__key__derivation_1ga8fd934dfb0ca45cbf89542ef2a5494c2" kindref="member">psa_key_derivation_input_bytes()</ref> or <ref refid="group__key__derivation_1gab2d7ce8705dd8e4a093f4b8a21a0c15a" kindref="member">psa_key_derivation_input_key()</ref>.</para>
</listitem><listitem><para>for a RSA-PSK cipher suite (RFC 4279, Section 4), the other secret should be the 48-byte client challenge (the PreMasterSecret of (RFC 5246, Section 7.4.7.1)) concatenation of the TLS version and a 46-byte random string chosen by the client. On the server, this is typically an output of <ref refid="group__asymmetric_1ga4f968756f6b22aab362b598b202d83d7" kindref="member">psa_asymmetric_decrypt()</ref> using PSA_ALG_RSA_PKCS1V15_CRYPT, passed to the key derivation operation with <computeroutput><ref refid="group__key__derivation_1ga8fd934dfb0ca45cbf89542ef2a5494c2" kindref="member">psa_key_derivation_input_bytes()</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>For example, <computeroutput><ref refid="group__crypto__types_1ga039ec797f15d1635d9b2e09a611f8a68" kindref="member">PSA_ALG_TLS12_PSK_TO_MS(PSA_ALG_SHA_256)</ref></computeroutput> represents the TLS-1.2 PSK to MasterSecret derivation PRF using HMAC-SHA-256.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding TLS-1.2 PSK to MS algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2014" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab25ecc074a93fd11069bedfbba5a287b" prot="public" static="no">
        <name>PSA_ALG_IS_TLS12_PSK_TO_MS</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1gaaca4b1953a3f31f1a285a48454aa4a6f" kindref="member">PSA_ALG_TLS12_PSK_TO_MS_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a TLS-1.2 PSK to MS algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a TLS-1.2 PSK to MS algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key derivation algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2025" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga49f873d8cf9fb0042118e626330eec9d" prot="public" static="no">
        <name>PSA_ALG_TLS12_PSK_TO_MS_GET_HASH</name>
        <param><defname>hkdf_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref> | ((hkdf_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2027" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga095634f70737e6899501498faf275254" prot="public" static="no">
        <name>PSA_ALG_TLS12_ECJPAKE_TO_PMS</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08000609)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2042" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga4feacc22bbfaaa327e7e3e28838d52fe" prot="public" static="no">
        <name>PSA_ALG_KEY_DERIVATION_STRETCHING_FLAG</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x00800000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2051" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gabd8f3eac0f2c4c04f412011bdc55d27a" prot="public" static="no">
        <name>PSA_ALG_PBKDF2_HMAC_BASE</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08800100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2053" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga67ad00bf6421d52f2905b7ef860d6e99" prot="public" static="no">
        <name>PSA_ALG_PBKDF2_HMAC</name>
        <param><defname>hash_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gabd8f3eac0f2c4c04f412011bdc55d27a" kindref="member">PSA_ALG_PBKDF2_HMAC_BASE</ref> | ((hash_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build a PBKDF2-HMAC password hashing / key stretching algorithm.</para>
<para>PBKDF2 is defined by PKCS#5, republished as RFC 8018 (section 5.2). This macro specifies the PBKDF2 algorithm constructed using a PRF based on HMAC with the specified hash. For example, <computeroutput><ref refid="group__crypto__types_1ga67ad00bf6421d52f2905b7ef860d6e99" kindref="member">PSA_ALG_PBKDF2_HMAC(PSA_ALG_SHA_256)</ref></computeroutput> specifies PBKDF2 using the PRF HMAC-SHA-256.</para>
<para>This key derivation algorithm uses the following inputs, which must be provided in the following order:<itemizedlist>
<listitem><para><ref refid="group__derivation_1ga4cc0f85fedc37168ac55117ffdba6cd1" kindref="member">PSA_KEY_DERIVATION_INPUT_COST</ref> is the iteration count. This input step must be used exactly once.</para>
</listitem><listitem><para><ref refid="group__derivation_1gab62757fb125243562c3947a752470d4a" kindref="member">PSA_KEY_DERIVATION_INPUT_SALT</ref> is the salt. This input step must be used one or more times; if used several times, the inputs will be concatenated. This can be used to build the final salt from multiple sources, both public and secret (also known as pepper).</para>
</listitem><listitem><para><ref refid="group__derivation_1gae19de2d7c74759878b4a6677b0acdda7" kindref="member">PSA_KEY_DERIVATION_INPUT_PASSWORD</ref> is the password to be hashed. This input step must be used exactly once.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gac9280662bb482590b4b33d1dcd32930f" kindref="member">PSA_ALG_IS_HASH</ref>(<computeroutput>hash_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding PBKDF2-HMAC-XXX algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>hash_alg</computeroutput> is not a supported hash algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2080" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga61201c116f22f0a2bd1ec206d8efd0bf" prot="public" static="no">
        <name>PSA_ALG_IS_PBKDF2_HMAC</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; ~<ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>) == <ref refid="group__crypto__types_1gabd8f3eac0f2c4c04f412011bdc55d27a" kindref="member">PSA_ALG_PBKDF2_HMAC_BASE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a PBKDF2-HMAC algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a PBKDF2-HMAC algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key derivation algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2091" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9e4883c80fd3c14ec74a5c0618dd96d6" prot="public" static="no">
        <name>PSA_ALG_PBKDF2_HMAC_GET_HASH</name>
        <param><defname>pbkdf2_alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gafd048e1835b80e6daaff7fddce699757" kindref="member">PSA_ALG_CATEGORY_HASH</ref> | ((pbkdf2_alg) &amp; <ref refid="group__crypto__types_1gac41a7077aef55bb20c629c8949d43c57" kindref="member">PSA_ALG_HASH_MASK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2093" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gae917f201db1efaaf668edd85ac8fb87f" prot="public" static="no">
        <name>PSA_ALG_PBKDF2_AES_CMAC_PRF_128</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x08800200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The PBKDF2-AES-CMAC-PRF-128 password hashing / key stretching algorithm.</para>
<para>PBKDF2 is defined by PKCS#5, republished as RFC 8018 (section 5.2). This macro specifies the PBKDF2 algorithm constructed using the AES-CMAC-PRF-128 PRF specified by RFC 4615.</para>
<para>This key derivation algorithm uses the same inputs as <ref refid="group__crypto__types_1ga67ad00bf6421d52f2905b7ef860d6e99" kindref="member">PSA_ALG_PBKDF2_HMAC()</ref> with the same constraints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2104" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaaccf8b88721248b21830819b724785b0" prot="public" static="no">
        <name>PSA_ALG_IS_PBKDF2</name>
        <param><defname>kdf_alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga61201c116f22f0a2bd1ec206d8efd0bf" kindref="member">PSA_ALG_IS_PBKDF2_HMAC</ref>(kdf_alg) || \
     ((kdf_alg) == <ref refid="group__crypto__types_1gae917f201db1efaaf668edd85ac8fb87f" kindref="member">PSA_ALG_PBKDF2_AES_CMAC_PRF_128</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2106" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga914b52f4be62633b3350c5e03bf32ecb" prot="public" static="no">
        <name>PSA_ALG_KEY_DERIVATION_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0xfe00ffff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2110" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gad39afc70a46a0ed399e3a1b931fd108b" prot="public" static="no">
        <name>PSA_ALG_KEY_AGREEMENT_MASK</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0xffff0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2111" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga78bb81cffb87a635c247725eeb2a2682" prot="public" static="no">
        <name>PSA_ALG_KEY_AGREEMENT</name>
        <param><defname>ka_alg</defname></param>
        <param><defname>kdf_alg</defname></param>
        <initializer>((ka_alg) | (kdf_alg))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to build a combined algorithm that chains a key agreement with a key derivation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ka_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A key agreement algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1ga59753742cb06553bd22751bbef472b6f" kindref="member">PSA_ALG_IS_KEY_AGREEMENT</ref>(<computeroutput>ka_alg</computeroutput>) is true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kdf_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>A key derivation algorithm (<computeroutput>PSA_ALG_XXX</computeroutput> value such that <ref refid="group__crypto__types_1gaf8b90c648aa53dbd06c236695e300cd0" kindref="member">PSA_ALG_IS_KEY_DERIVATION</ref>(<computeroutput>kdf_alg</computeroutput>) is true).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding key agreement and derivation algorithm. </para>
</simplesect>
<simplesect kind="return"><para>Unspecified if <computeroutput>ka_alg</computeroutput> is not a supported key agreement algorithm or <computeroutput>kdf_alg</computeroutput> is not a supported key derivation algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2127" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga56c1189add62b59e8e6a28a809b57037" prot="public" static="no">
        <name>PSA_ALG_KEY_AGREEMENT_GET_KDF</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1ga914b52f4be62633b3350c5e03bf32ecb" kindref="member">PSA_ALG_KEY_DERIVATION_MASK</ref>) | <ref refid="group__crypto__types_1gac185b2274dd4e5f0b97c43334c2e478f" kindref="member">PSA_ALG_CATEGORY_KEY_DERIVATION</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2130" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaf837c55ba698b488b6e63300e3470abf" prot="public" static="no">
        <name>PSA_ALG_KEY_AGREEMENT_GET_BASE</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; <ref refid="group__crypto__types_1gad39afc70a46a0ed399e3a1b931fd108b" kindref="member">PSA_ALG_KEY_AGREEMENT_MASK</ref>) | <ref refid="group__crypto__types_1ga808e397a4891c612df4a5b20eebc2fac" kindref="member">PSA_ALG_CATEGORY_KEY_AGREEMENT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2133" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa40ab362ce141ce541d69b2eb1f41438" prot="public" static="no">
        <name>PSA_ALG_IS_RAW_KEY_AGREEMENT</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1ga59753742cb06553bd22751bbef472b6f" kindref="member">PSA_ALG_IS_KEY_AGREEMENT</ref>(alg) &amp;&amp;                                   \
     <ref refid="group__crypto__types_1ga56c1189add62b59e8e6a28a809b57037" kindref="member">PSA_ALG_KEY_AGREEMENT_GET_KDF</ref>(alg) == <ref refid="group__crypto__types_1gac185b2274dd4e5f0b97c43334c2e478f" kindref="member">PSA_ALG_CATEGORY_KEY_DERIVATION</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a raw key agreement algorithm.</para>
<para>A raw key agreement algorithm is one that does not specify a key derivation function. Usually, raw key agreement algorithms are constructed directly with a <computeroutput>PSA_ALG_xxx</computeroutput> macro while non-raw key agreement algorithms are constructed with <ref refid="group__crypto__types_1ga78bb81cffb87a635c247725eeb2a2682" kindref="member">PSA_ALG_KEY_AGREEMENT()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a raw key agreement algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2150" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga14529588c008091de0ad2716170dbd48" prot="public" static="no">
        <name>PSA_ALG_IS_KEY_DERIVATION_OR_AGREEMENT</name>
        <param><defname>alg</defname></param>
        <initializer>((<ref refid="group__crypto__types_1gaf8b90c648aa53dbd06c236695e300cd0" kindref="member">PSA_ALG_IS_KEY_DERIVATION</ref>(alg) || <ref refid="group__crypto__types_1ga59753742cb06553bd22751bbef472b6f" kindref="member">PSA_ALG_IS_KEY_AGREEMENT</ref>(alg)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2154" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga0ebbb6f93a05b6511e6f108ffd2d1eb4" prot="public" static="no">
        <name>PSA_ALG_FFDH</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x09010000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The finite-field Diffie-Hellman (DH) key agreement algorithm.</para>
<para>The shared secret produced by key agreement is <computeroutput>g^{ab}</computeroutput> in big-endian format. It is <computeroutput>ceiling(m / 8)</computeroutput> bytes long where <computeroutput>m</computeroutput> is the size of the prime <computeroutput>p</computeroutput> in bits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2164" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gaa3cf76164cd9375af4fb8a291078a19e" prot="public" static="no">
        <name>PSA_ALG_IS_FFDH</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gaf837c55ba698b488b6e63300e3470abf" kindref="member">PSA_ALG_KEY_AGREEMENT_GET_BASE</ref>(alg) == <ref refid="group__crypto__types_1ga0ebbb6f93a05b6511e6f108ffd2d1eb4" kindref="member">PSA_ALG_FFDH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is a finite field Diffie-Hellman algorithm.</para>
<para>This includes the raw finite field Diffie-Hellman algorithm as well as finite-field Diffie-Hellman followed by any supporter key derivation algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a finite field Diffie-Hellman algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key agreement algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2178" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gab2dbcf71b63785e7dd7b54a100edee43" prot="public" static="no">
        <name>PSA_ALG_ECDH</name>
        <initializer>((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0x09020000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elliptic curve Diffie-Hellman (ECDH) key agreement algorithm.</para>
<para>The shared secret produced by key agreement is the x-coordinate of the shared secret point. It is always <computeroutput>ceiling(m / 8)</computeroutput> bytes long where <computeroutput>m</computeroutput> is the bit size associated with the curve, i.e. the bit size of the order of the curve&apos;s coordinate field. When <computeroutput>m</computeroutput> is not a multiple of 8, the byte containing the most significant bit of the shared secret is padded with zero bits. The byte order is either little-endian or big-endian depending on the curve type.</para>
<para><itemizedlist>
<listitem><para>For Montgomery curves (curve types <computeroutput>PSA_ECC_FAMILY_CURVEXXX</computeroutput>), the shared secret is the x-coordinate of <computeroutput>d_A Q_B = d_B Q_A</computeroutput> in little-endian byte order. The bit size is 448 for Curve448 and 255 for Curve25519.</para>
</listitem><listitem><para>For Weierstrass curves over prime fields (curve types <computeroutput>PSA_ECC_FAMILY_SECPXXX</computeroutput> and <computeroutput>PSA_ECC_FAMILY_BRAINPOOL_PXXX</computeroutput>), the shared secret is the x-coordinate of <computeroutput>d_A Q_B = d_B Q_A</computeroutput> in big-endian byte order. The bit size is <computeroutput>m = ceiling(log_2(p))</computeroutput> for the field <computeroutput>F_p</computeroutput>.</para>
</listitem><listitem><para>For Weierstrass curves over binary fields (curve types <computeroutput>PSA_ECC_FAMILY_SECTXXX</computeroutput>), the shared secret is the x-coordinate of <computeroutput>d_A Q_B = d_B Q_A</computeroutput> in big-endian byte order. The bit size is <computeroutput>m</computeroutput> for the field <computeroutput>F_{2^m}</computeroutput>. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2206" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga9d9b6533d2a6bea7bac7ae01facb820d" prot="public" static="no">
        <name>PSA_ALG_IS_ECDH</name>
        <param><defname>alg</defname></param>
        <initializer>(<ref refid="group__crypto__types_1gaf837c55ba698b488b6e63300e3470abf" kindref="member">PSA_ALG_KEY_AGREEMENT_GET_BASE</ref>(alg) == <ref refid="group__crypto__types_1gab2dbcf71b63785e7dd7b54a100edee43" kindref="member">PSA_ALG_ECDH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm is an elliptic curve Diffie-Hellman algorithm.</para>
<para>This includes the raw elliptic curve Diffie-Hellman algorithm as well as elliptic curve Diffie-Hellman followed by any supporter key derivation algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is an elliptic curve Diffie-Hellman algorithm, 0 otherwise. This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported key agreement algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2222" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1gacf83d7430e82b97cecb8b26ca6fa1426" prot="public" static="no">
        <name>PSA_ALG_IS_WILDCARD</name>
        <param><defname>alg</defname></param>
        <initializer>    (<ref refid="group__crypto__types_1gad8a8ea0536975363b66410cdeafe38b6" kindref="member">PSA_ALG_IS_HASH_AND_SIGN</ref>(alg) ?                        \
     <ref refid="group__crypto__types_1ga24cf6d7bcd2b9aeeeff86f07b6c674e3" kindref="member">PSA_ALG_SIGN_GET_HASH</ref>(alg) == <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref> :       \
     <ref refid="group__crypto__types_1gaca7aee4c9dde316b3b1a150a26eab776" kindref="member">PSA_ALG_IS_MAC</ref>(alg) ?                                  \
     (alg &amp; <ref refid="group__crypto__types_1gac71bcf7b2280412cfaaf463588a52ec5" kindref="member">PSA_ALG_MAC_AT_LEAST_THIS_LENGTH_FLAG</ref>) != 0 :   \
     <ref refid="group__crypto__types_1ga1d44829d60065eaa4ac9a703e7d6abc8" kindref="member">PSA_ALG_IS_AEAD</ref>(alg) ?                                 \
     (alg &amp; <ref refid="group__crypto__types_1gaee189802f40c881b887a71d2e5ec53e1" kindref="member">PSA_ALG_AEAD_AT_LEAST_THIS_LENGTH_FLAG</ref>) != 0 :  \
     (alg) == <ref refid="group__crypto__types_1gaa1288ea8bd397a8a3f5e19e94110f2e4" kindref="member">PSA_ALG_ANY_HASH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the specified algorithm encoding is a wildcard.</para>
<para>Wildcard values may only be used to set the usage algorithm field in a policy, not to perform an operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>alg</computeroutput> is a wildcard algorithm encoding. </para>
</simplesect>
<simplesect kind="return"><para>0 if <computeroutput>alg</computeroutput> is a non-wildcard algorithm encoding (suitable for an operation). </para>
</simplesect>
<simplesect kind="return"><para>This macro may return either 0 or 1 if <computeroutput>alg</computeroutput> is not a supported algorithm identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2238" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__crypto__types_1ga181b0fe4619c1a70c5ef82f28eea09f5" prot="public" static="no">
        <name>PSA_ALG_GET_HASH</name>
        <param><defname>alg</defname></param>
        <initializer>(((alg) &amp; 0x000000ff) == 0 ? ((<ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>) 0) : 0x02000000 | ((alg) &amp; 0x000000ff))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the hash used by a composite algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>An algorithm identifier (value of type <ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The underlying hash algorithm if alg is a composite algorithm that uses a hash algorithm.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if alg is not a composite algorithm that uses a hash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" line="2256" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/psa/crypto_values.h" bodystart="2256" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
