<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="chacha20_8h" kind="file" language="C++">
    <compoundname>chacha20.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includedby refid="chachapoly_8h" local="yes">chachapoly.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="1">
        <label>chacha20.h</label>
        <link refid="chacha20_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="19">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="13">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="6">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="5">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="7">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="20">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="11">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="4">
        <label>crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>chachapoly.h</label>
        <link refid="chachapoly_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>chacha20.h</label>
        <link refid="chacha20_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__chacha20__context" prot="public">mbedtls_chacha20_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="chacha20_8h_1add9385eb9ba8c8807eb53b5e043bc37d" prot="public" static="no">
        <name>MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA</name>
        <initializer>-0x0051</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid input parameter(s). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="30" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="chacha20_8h_1aeefe11be51740da4570307c5fda88f90" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref></type>
        <definition>typedef struct mbedtls_chacha20_context mbedtls_chacha20_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_chacha20_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="43" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="chacha20_8h_1a9fd9d27c5daefc11c29c88c334174181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_chacha20_init</definition>
        <argsstring>(mbedtls_chacha20_context *ctx)</argsstring>
        <name>mbedtls_chacha20_init</name>
        <param>
          <type><ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function initializes the specified ChaCha20 context. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             It must be the first API called before using
             the context.

             It is usually followed by calls to
             \c mbedtls_chacha20_setkey() and
             \c mbedtls_chacha20_starts(), then one or more calls to
             to \c mbedtls_chacha20_update(), and finally to
             \c mbedtls_chacha20_free().
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The ChaCha20 context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="64" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="chacha20_8h_1a490d580af4dcc86b407f195d7853e811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_chacha20_free</definition>
        <argsstring>(mbedtls_chacha20_context *ctx)</argsstring>
        <name>mbedtls_chacha20_free</name>
        <param>
          <type><ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function releases and clears the specified ChaCha20 context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The ChaCha20 context to clear. This may be <computeroutput>NULL</computeroutput>, in which case this function is a no-op. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="75" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="chacha20_8h_1a6545ad682d3bb5495554a81f839fe5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_chacha20_setkey</definition>
        <argsstring>(mbedtls_chacha20_context *ctx, const unsigned char key[32])</argsstring>
        <name>mbedtls_chacha20_setkey</name>
        <param>
          <type><ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>key</declname>
          <array>[32]</array>
        </param>
        <briefdescription>
<para>This function sets the encryption/decryption key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>After using this function, you must also call <computeroutput><ref refid="chacha20_8h_1ae101dbef191baa8c785ac75862e2d094" kindref="member">mbedtls_chacha20_starts()</ref></computeroutput> to set a nonce before you start encrypting/decrypting data with <computeroutput>mbedtls_chacha_update()</computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The ChaCha20 context to which the key should be bound. It must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The encryption/decryption key. This must be <computeroutput>32</computeroutput> Bytes in length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="chacha20_8h_1add9385eb9ba8c8807eb53b5e043bc37d" kindref="member">MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA</ref> if ctx or key is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="93" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="chacha20_8h_1ae101dbef191baa8c785ac75862e2d094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_chacha20_starts</definition>
        <argsstring>(mbedtls_chacha20_context *ctx, const unsigned char nonce[12], uint32_t counter)</argsstring>
        <name>mbedtls_chacha20_starts</name>
        <param>
          <type><ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>nonce</declname>
          <array>[12]</array>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>counter</declname>
        </param>
        <briefdescription>
<para>This function sets the nonce and initial counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A ChaCha20 context can be re-used with the same key by calling this function to change the nonce.</para>
</simplesect>
<simplesect kind="warning"><para>You must never use the same nonce twice with the same key. This would void any confidentiality guarantees for the messages encrypted with the same nonce and key.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The ChaCha20 context to which the nonce should be bound. It must be initialized and bound to a key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce. This must be <computeroutput>12</computeroutput> Bytes in size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counter</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial counter value. This is usually <computeroutput>0</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="chacha20_8h_1add9385eb9ba8c8807eb53b5e043bc37d" kindref="member">MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA</ref> if ctx or nonce is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="115" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" declline="115" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="chacha20_8h_1afdc3d51bfaf82786b5d24ea15542b167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_chacha20_update</definition>
        <argsstring>(mbedtls_chacha20_context *ctx, size_t size, const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_chacha20_update</name>
        <param>
          <type><ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function encrypts or decrypts data. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             Since ChaCha20 is a stream cipher, the same operation is
             used for encrypting and decrypting data.
</verbatim></para>
<para><simplesect kind="note"><para>The <computeroutput>input</computeroutput> and <computeroutput>output</computeroutput> pointers must either be equal or point to non-overlapping buffers.</para>
</simplesect>
<simplesect kind="note"><para><computeroutput><ref refid="chacha20_8h_1a6545ad682d3bb5495554a81f839fe5d3" kindref="member">mbedtls_chacha20_setkey()</ref></computeroutput> and <computeroutput><ref refid="chacha20_8h_1ae101dbef191baa8c785ac75862e2d094" kindref="member">mbedtls_chacha20_starts()</ref></computeroutput> must be called at least once to setup the context before this function can be called.</para>
</simplesect>
<simplesect kind="note"><para>This function can be called multiple times in a row in order to encrypt of decrypt data piecewise with the same key and nonce.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The ChaCha20 context to use for encryption or decryption. It must be initialized and bound to a key and nonce. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This pointer can be <computeroutput>NULL</computeroutput> if <computeroutput>size == 0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data. This must be able to hold <computeroutput>size</computeroutput> Bytes. This pointer can be <computeroutput>NULL</computeroutput> if <computeroutput>size == 0</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="148" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" declline="148" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="chacha20_8h_1a63dbf3a4bbd5ee265567ead622bc3841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_chacha20_crypt</definition>
        <argsstring>(const unsigned char key[32], const unsigned char nonce[12], uint32_t counter, size_t size, const unsigned char *input, unsigned char *output)</argsstring>
        <name>mbedtls_chacha20_crypt</name>
        <param>
          <type>const unsigned char</type>
          <declname>key</declname>
          <array>[32]</array>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>nonce</declname>
          <array>[12]</array>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function encrypts or decrypts data with ChaCha20 and the given key and nonce. </para>
        </briefdescription>
        <detaileddescription>
<para>Since ChaCha20 is a stream cipher, the same operation is used for encrypting and decrypting data.</para>
<para><simplesect kind="warning"><para>You must never use the same (key, nonce) pair more than once. This would void any confidentiality guarantees for the messages encrypted with the same nonce and key.</para>
</simplesect>
<simplesect kind="note"><para>The <computeroutput>input</computeroutput> and <computeroutput>output</computeroutput> pointers must either be equal or point to non-overlapping buffers.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The encryption/decryption key. This must be <computeroutput>32</computeroutput> Bytes in length. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce. This must be <computeroutput>12</computeroutput> Bytes in size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counter</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial counter value. This is usually <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input data in Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the input data. This pointer can be <computeroutput>NULL</computeroutput> if <computeroutput>size == 0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer holding the output data. This must be able to hold <computeroutput>size</computeroutput> Bytes. This pointer can be <computeroutput>NULL</computeroutput> if <computeroutput>size == 0</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="181" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" declline="181" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="chacha20_8h_1ae261930254bd08d0c7c4340d896de6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_chacha20_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_chacha20_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>The ChaCha20 checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" line="195" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h" declline="195" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains ChaCha20 definitions and functions. </para>
    </briefdescription>
    <detaileddescription>
<para><verbatim>     ChaCha20 is a stream cipher that can encrypt and decrypt
     information. ChaCha was created by Daniel Bernstein as a variant of
     its Salsa cipher https://cr.yp.to/chacha/chacha-20080128.pdf
     ChaCha20 is the variant with 20 rounds, that was also standardized
     in RFC 7539.
</verbatim></para>
<para><simplesect kind="author"><para>Daniel King <ulink url="mailto:damaki.gh@gmail.com">damaki.gh@gmail.com</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_CHACHA20_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_CHACHA20_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="chacha20_8h_1add9385eb9ba8c8807eb53b5e043bc37d" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x0051</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_CHACHA20_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structmbedtls__chacha20__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="structmbedtls__chacha20__context_1aae2ff5448fa2881d88ccc42f3d78549a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(state)[16];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40" refid="structmbedtls__chacha20__context_1a6a313c131f29c84c179b3ee88cd13b8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(keystream8)[64];<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="structmbedtls__chacha20__context_1a8afa65eb9d5b0fb785063f7838a88e5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(keystream_bytes_used);<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="chacha20_8h_1aeefe11be51740da4570307c5fda88f90" kindref="member">mbedtls_chacha20_context</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CHACHA20_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chacha20_alt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CHACHA20_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="chacha20_8h_1a9fd9d27c5daefc11c29c88c334174181" kindref="member">mbedtls_chacha20_init</ref>(<ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="chacha20_8h_1a490d580af4dcc86b407f195d7853e811" kindref="member">mbedtls_chacha20_free</ref>(<ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="chacha20_8h_1a6545ad682d3bb5495554a81f839fe5d3" kindref="member">mbedtls_chacha20_setkey</ref>(<ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[32]);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="chacha20_8h_1ae101dbef191baa8c785ac75862e2d094" kindref="member">mbedtls_chacha20_starts</ref>(<ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nonce[12],</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>counter);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="chacha20_8h_1afdc3d51bfaf82786b5d24ea15542b167" kindref="member">mbedtls_chacha20_update</ref>(<ref refid="structmbedtls__chacha20__context" kindref="compound">mbedtls_chacha20_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="chacha20_8h_1a63dbf3a4bbd5ee265567ead622bc3841" kindref="member">mbedtls_chacha20_crypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[32],</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nonce[12],</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>counter,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SELF_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="chacha20_8h_1ae261930254bd08d0c7c4340d896de6b4" kindref="member">mbedtls_chacha20_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SELF_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_CHACHA20_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/chacha20.h"/>
  </compounddef>
</doxygen>
