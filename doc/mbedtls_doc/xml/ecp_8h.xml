<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ecp_8h" kind="file" language="C++">
    <compoundname>ecp.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="bignum_8h" local="yes">mbedtls/bignum.h</includes>
    <includedby refid="ssl_8h" local="yes">ssl.h</includedby>
    <includedby refid="pk_8h" local="yes">pk.h</includedby>
    <includedby refid="ecdsa_8h" local="yes">ecdsa.h</includedby>
    <includedby refid="ecjpake_8h" local="yes">ecjpake.h</includedby>
    <includedby refid="crypto__extra_8h" local="no">crypto_extra.h</includedby>
    <includedby refid="ecdh_8h" local="yes">ecdh.h</includedby>
    <includedby refid="debug_8h" local="yes">debug.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="1">
        <label>ecp.h</label>
        <link refid="ecp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="20">
        <label>mbedtls/bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="17">
        <label>crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="1">
        <label>ecp.h</label>
        <link refid="ecp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="22">
        <label>crypto_extra.h</label>
        <link refid="crypto__extra_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="10">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="19">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="8">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="15">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="4">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="21">
        <label>ecjpake.h</label>
        <link refid="ecjpake_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ecdh.h</label>
        <link refid="ecdh_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__ecp__curve__info" prot="public">mbedtls_ecp_curve_info</innerclass>
    <innerclass refid="structmbedtls__ecp__point" prot="public">mbedtls_ecp_point</innerclass>
    <innerclass refid="structmbedtls__ecp__group" prot="public">mbedtls_ecp_group</innerclass>
    <innerclass refid="structmbedtls__ecp__restart__ctx" prot="public">mbedtls_ecp_restart_ctx</innerclass>
    <innerclass refid="structmbedtls__ecp__keypair" prot="public">mbedtls_ecp_keypair</innerclass>
      <sectiondef kind="user-defined">
      <header>SECTION: Module settings</header>
      <description><para>The configuration options you can set for this module are in this section. Either change them in <ref refid="mbedtls__config_8h" kindref="compound">mbedtls_config.h</ref>, or define them using the compiler command line. </para>
</description>
      <memberdef kind="define" id="ecp_8h_1a0e14e10966cfd209e80d66a16b6c94ec" prot="public" static="no">
        <name>MBEDTLS_ECP_WINDOW_SIZE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum window size used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="290" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1ab5f2493612bbc9538cb749e85c5e46af" prot="public" static="no">
        <name>MBEDTLS_ECP_FIXED_POINT_OPTIM</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable fixed-point speed-up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="306" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name>
        <initializer>-0x4F80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad input parameters to function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="34" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a40adc3b18cac6225a491c07829a49b7c" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name>
        <initializer>-0x4F00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The buffer is too small to write to. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="36" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</name>
        <initializer>-0x4E80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested feature is not available, for example, the requested curve is not supported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="38" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a3d19895998e4ac7b4744c2407cec1917" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_VERIFY_FAILED</name>
        <initializer>-0x4E00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The signature is not valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="40" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a048bea0521e7928f75a6259a8fcbfecb" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_ALLOC_FAILED</name>
        <initializer>-0x4D80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory allocation failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="42" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a484c796d0d97513809f6042e51b42957" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_RANDOM_FAILED</name>
        <initializer>-0x4D00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generation of random value, such as ephemeral key, failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="44" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_INVALID_KEY</name>
        <initializer>-0x4C80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid private or public key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="46" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a49d1dece5c167d28f22702cfc11b9aa1" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH</name>
        <initializer>-0x4C00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The buffer contains a valid signature followed by more data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="48" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" prot="public" static="no">
        <name>MBEDTLS_ERR_ECP_IN_PROGRESS</name>
        <initializer>-0x4B00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operation in progress, call again with the same parameters to continue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="50" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1ae8b221867529119548186abdf56d5238" prot="public" static="no">
        <name>MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="65" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a981b049370e6acaa650ad200f2470892" prot="public" static="no">
        <name>MBEDTLS_ECP_MONTGOMERY_ENABLED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="69" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1afef3986789abe96859bafe73485adb80" prot="public" static="no">
        <name>MBEDTLS_ECP_DP_MAX</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of supported curves, plus one for <ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da677d15aba64be1606e0f63ebff096840" kindref="member">MBEDTLS_ECP_DP_NONE</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="121" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a98099ce7241e89e42ba34b79e770a0ab" prot="public" static="no">
        <name>MBEDTLS_ECP_MAX_BITS</name>
        <initializer>521</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum size of the groups, that is, of <computeroutput>N</computeroutput> and <computeroutput>P</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="324" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1aba9fdfc8a8dd423182616e5708abf607" prot="public" static="no">
        <name>MBEDTLS_ECP_MAX_BYTES</name>
        <initializer>((<ref refid="ecp_8h_1a98099ce7241e89e42ba34b79e770a0ab" kindref="member">MBEDTLS_ECP_MAX_BITS</ref> + 7) / 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="353" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a281e8aba9ecf97bbd2e4b6b72eb04b87" prot="public" static="no">
        <name>MBEDTLS_ECP_MAX_PT_LEN</name>
        <initializer>(2 * <ref refid="ecp_8h_1aba9fdfc8a8dd423182616e5708abf607" kindref="member">MBEDTLS_ECP_MAX_BYTES</ref> + 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="354" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1aff8c4641ff8e32e89af70e49d30492f8" prot="public" static="no">
        <name>MBEDTLS_ECP_OPS_CHK</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>basic ops count for ecp_check_pubkey() <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="385" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a7789adbc0d8873f4e480d1c6219e2b0c" prot="public" static="no">
        <name>MBEDTLS_ECP_OPS_DBL</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>basic ops count for ecp_double_jac() <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="386" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a3d6513974ac1741f29cd98d7fe59d470" prot="public" static="no">
        <name>MBEDTLS_ECP_OPS_ADD</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>basic ops count for see ecp_add_mixed() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="387" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1abf9fc59728c3ec8023917faf2c5090d0" prot="public" static="no">
        <name>MBEDTLS_ECP_OPS_INV</name>
        <initializer>120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>empirical equivalent for mpi_mod_inv() <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="388" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a0ef02be26c018ca7095579b1826a2b99" prot="public" static="no">
        <name>MBEDTLS_ECP_BUDGET</name>
        <param><defname>ops</defname></param>
        <initializer>    <ref refid="bignum_8h_1ab0a21d28acd6b59cc60a45547e2412af" kindref="member">MBEDTLS_MPI_CHK</ref>(<ref refid="ecp_8h_1a577ebe217027433601c67ebf2ae525b6" kindref="member">mbedtls_ecp_check_budget</ref>(grp, rs_ctx, \
                                             (unsigned) (ops)));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="406" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a076e0db0a53f09d424b8650390632bb3" prot="public" static="no">
        <name>MBEDTLS_ECP_PF_UNCOMPRESSED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The uncompressed point format for Short Weierstrass curves (MBEDTLS_ECP_DP_SECP_XXX and MBEDTLS_ECP_DP_BP_XXX). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="438" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a300814dc5a3ef878a5fb34cc2f185e7a" prot="public" static="no">
        <name>MBEDTLS_ECP_PF_COMPRESSED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The compressed point format for Short Weierstrass curves (MBEDTLS_ECP_DP_SECP_XXX and MBEDTLS_ECP_DP_BP_XXX).</para>
<para><simplesect kind="warning"><para>While this format is supported for all concerned curves for writing, when it comes to parsing, it is not supported for all curves. Specifically, parsing compressed points on MBEDTLS_ECP_DP_SECP224R1 and MBEDTLS_ECP_DP_SECP224K1 is not supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="449" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecp_8h_1a5bfe061b705a8695d730dfca7d265407" prot="public" static="no">
        <name>MBEDTLS_ECP_TLS_NAMED_CURVE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The named_curve of ECCurveType. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="454" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_ecp_group_id</name>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da677d15aba64be1606e0f63ebff096840" prot="public">
          <name>MBEDTLS_ECP_DP_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Curve not defined. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dae5fcc335b9a458a68542c5b0e2a60971" prot="public">
          <name>MBEDTLS_ECP_DP_SECP192R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for the 192-bit curve defined by FIPS 186-4 and SEC1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da89c8d4502fa02eecd44f8de4831b38c8" prot="public">
          <name>MBEDTLS_ECP_DP_SECP224R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for the 224-bit curve defined by FIPS 186-4 and SEC1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daf73bbf7b29d26a0bc77dcff47cd6b276" prot="public">
          <name>MBEDTLS_ECP_DP_SECP256R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for the 256-bit curve defined by FIPS 186-4 and SEC1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da08d0615820297b8c90f8ec7cbd88f641" prot="public">
          <name>MBEDTLS_ECP_DP_SECP384R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for the 384-bit curve defined by FIPS 186-4 and SEC1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daaa2d9d42df56aab024ef760ee9dffca2" prot="public">
          <name>MBEDTLS_ECP_DP_SECP521R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for the 521-bit curve defined by FIPS 186-4 and SEC1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dade9d3762e81c6e1d6e499d21e8190be5" prot="public">
          <name>MBEDTLS_ECP_DP_BP256R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for 256-bit Brainpool curve. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daaf562eeec4368f2c501c163b4707900a" prot="public">
          <name>MBEDTLS_ECP_DP_BP384R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for 384-bit Brainpool curve. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da803c5f7c0d68be4556a688746be1c9e1" prot="public">
          <name>MBEDTLS_ECP_DP_BP512R1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for 512-bit Brainpool curve. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da675f95c8d8550edd7eb85828d2f22b9f" prot="public">
          <name>MBEDTLS_ECP_DP_CURVE25519</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for Curve25519. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da0414bf86d7efb0e211214d9dddfb69d4" prot="public">
          <name>MBEDTLS_ECP_DP_SECP192K1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for 192-bit &quot;Koblitz&quot; curve. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dabae9bc9de43957062495162e603c0943" prot="public">
          <name>MBEDTLS_ECP_DP_SECP224K1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for 224-bit &quot;Koblitz&quot; curve. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da6de9f87d43d7c29c7f91e9986ccfc25f" prot="public">
          <name>MBEDTLS_ECP_DP_SECP256K1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for 256-bit &quot;Koblitz&quot; curve. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da5e3ead153c6fa1de5057dc69290a897d" prot="public">
          <name>MBEDTLS_ECP_DP_CURVE448</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Domain parameters for Curve448. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Domain-parameter identifiers: curve, subgroup, and generator.</para>
<para><simplesect kind="note"><para>Only curves over prime fields are supported.</para>
</simplesect>
<simplesect kind="warning"><para>This library does not support validation of arbitrary domain parameters. Therefore, only standardized domain parameters from trusted sources should be used. See <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="101" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="101" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="ecp_8h_1a4d10693ac81232058a30b3bab028dc29" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_ecp_curve_type</name>
        <enumvalue id="ecp_8h_1a4d10693ac81232058a30b3bab028dc29aa4fba66b27a6f12392d784a5b8949bcc" prot="public">
          <name>MBEDTLS_ECP_TYPE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1a4d10693ac81232058a30b3bab028dc29a9a3584691cdede7956643cc00f6e8371" prot="public">
          <name>MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ecp_8h_1a4d10693ac81232058a30b3bab028dc29af83887f93ddc6edbc949fe0188d476a4" prot="public">
          <name>MBEDTLS_ECP_TYPE_MONTGOMERY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="126" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="126" bodyend="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ecp_8h_1ac4c1ef10c806f58dc3ce83073424e190" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref></type>
        <definition>typedef struct mbedtls_ecp_curve_info mbedtls_ecp_curve_info</definition>
        <argsstring></argsstring>
        <name>mbedtls_ecp_curve_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Curve information, for use by other modules.</para>
<para>The fields of this structure are part of the public API and can be accessed directly by applications. Future versions of the library may add extra fields or reorder existing fields. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="144" column="24"/>
      </memberdef>
      <memberdef kind="typedef" id="ecp_8h_1acb88d11e5876842d950eecf6cbf4b6a8" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref></type>
        <definition>typedef struct mbedtls_ecp_point mbedtls_ecp_point</definition>
        <argsstring></argsstring>
        <name>mbedtls_ecp_point</name>
        <briefdescription>
<para>The ECP point structure, in Jacobian coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>All functions expect and return points satisfying the following condition: <computeroutput>Z == 0</computeroutput> or <computeroutput>Z == 1</computeroutput>. Other values of <computeroutput>Z</computeroutput> are used only by internal functions. The point is zero, or &quot;at infinity&quot;, if <computeroutput>Z == 0</computeroutput>. Otherwise, <computeroutput>X</computeroutput> and <computeroutput>Y</computeroutput> are its standard (affine) coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="162" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="ecp_8h_1a53bebe4475131f36ed8c770eaba9197a" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref></type>
        <definition>typedef struct mbedtls_ecp_group mbedtls_ecp_group</definition>
        <argsstring></argsstring>
        <name>mbedtls_ecp_group</name>
        <briefdescription>
<para>The ECP group structure. </para>
        </briefdescription>
        <detaileddescription>
<para>We consider two types of curve equations: <itemizedlist>
<listitem>
<para>Short Weierstrass: <computeroutput>y^2 = x^3 + A x + B mod P</computeroutput> (SEC1 + RFC-4492) </para>
</listitem>
<listitem>
<para>Montgomery: <computeroutput>y^2 = x^3 + A x^2 + x mod P</computeroutput> (Curve25519, Curve448)</para>
</listitem>
</itemizedlist>
In both cases, the generator (<computeroutput>G</computeroutput>) for a prime-order subgroup is fixed.</para>
<para>For Short Weierstrass, this subgroup is the whole curve, and its cardinality is denoted by <computeroutput>N</computeroutput>. Our code requires that <computeroutput>N</computeroutput> is an odd prime as <ref refid="ecp_8h_1a4d005045c302e100c78bdc587e8f0e6a" kindref="member">mbedtls_ecp_mul()</ref> requires an odd number, and <ref refid="ecdsa_8h_1af10f6fda2169862871d0ac07555c8641" kindref="member">mbedtls_ecdsa_sign()</ref> requires that it is prime for blinding purposes.</para>
<para>The default implementation only initializes <computeroutput>A</computeroutput> without setting it to the authentic value for curves with <computeroutput>A = -3</computeroutput>(SECP256R1, etc), in which case you need to load <computeroutput>A</computeroutput> by yourself when using domain parameters directly, for example: <programlisting><codeline><highlight class="normal">mbedtls_mpi_init(&amp;A);</highlight></codeline>
<codeline><highlight class="normal">mbedtls_ecp_group_init(&amp;grp);</highlight></codeline>
<codeline><highlight class="normal">CHECK_RETURN(mbedtls_ecp_group_load(&amp;grp,<sp/>grp_id));</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(mbedtls_ecp_group_a_is_minus_3(&amp;grp))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_RETURN(mbedtls_mpi_sub_int(&amp;A,<sp/>&amp;grp.P,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_RETURN(mbedtls_mpi_copy(&amp;A,<sp/>&amp;grp.A));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">do_something_with_a(&amp;A);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cleanup:</highlight></codeline>
<codeline><highlight class="normal">mbedtls_mpi_free(&amp;A);</highlight></codeline>
<codeline><highlight class="normal">mbedtls_ecp_group_free(&amp;grp);</highlight></codeline>
</programlisting></para>
<para>For Montgomery curves, we do not store <computeroutput>A</computeroutput>, but <computeroutput>(A + 2) / 4</computeroutput>, which is the quantity used in the formulas. Additionally, <computeroutput>nbits</computeroutput> is not the size of <computeroutput>N</computeroutput> but the required size for private keys.</para>
<para>If <computeroutput>modp</computeroutput> is NULL, reduction modulo <computeroutput>P</computeroutput> is done using a generic algorithm. Otherwise, <computeroutput>modp</computeroutput> must point to a function that takes an <computeroutput><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref></computeroutput> in the range of <computeroutput>0..2^(2*pbits)-1</computeroutput>, and transforms it in-place to an integer which is congruent mod <computeroutput>P</computeroutput> to the given MPI, and is close enough to <computeroutput>pbits</computeroutput> in size, so that it may be efficiently brought in the 0..P-1 range by a few additions or subtractions. Therefore, it is only an approximative modular reduction. It must return 0 on success and non-zero on failure.</para>
<para><simplesect kind="note"><para>Alternative implementations of the ECP module must obey the following constraints.<itemizedlist>
<listitem><para>Group IDs must be distinct: if two group structures have the same ID, then they must be identical.</para>
</listitem><listitem><para>The fields <computeroutput>id</computeroutput>, <computeroutput>P</computeroutput>, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, <computeroutput>G</computeroutput>, <computeroutput>N</computeroutput>, <computeroutput>pbits</computeroutput> and <computeroutput>nbits</computeroutput> must have the same type and semantics as in the built-in implementation. They must be available for reading, but direct modification of these fields does not need to be supported. They do not need to be at the same offset in the structure. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="259" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="ecp_8h_1a6c48a6ff767949b5a0125c0abd4b835b" prot="public" static="no">
        <type>struct mbedtls_ecp_restart_mul</type>
        <definition>typedef struct mbedtls_ecp_restart_mul mbedtls_ecp_restart_mul_ctx</definition>
        <argsstring></argsstring>
        <name>mbedtls_ecp_restart_mul_ctx</name>
        <briefdescription>
<para>Internal restart context for multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Opaque struct </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ecp_8h_1ac85016006fafa6fcb131678705e91596" prot="public" static="no">
        <type>struct mbedtls_ecp_restart_muladd</type>
        <definition>typedef struct mbedtls_ecp_restart_muladd mbedtls_ecp_restart_muladd_ctx</definition>
        <argsstring></argsstring>
        <name>mbedtls_ecp_restart_muladd_ctx</name>
        <briefdescription>
<para>Internal restart context for ecp_muladd() </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Opaque struct </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ecp_8h_1a5b4924f9798d04f47817b361764c4a72" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref></type>
        <definition>typedef struct mbedtls_ecp_keypair mbedtls_ecp_keypair</definition>
        <argsstring></argsstring>
        <name>mbedtls_ecp_keypair</name>
        <briefdescription>
<para>The ECP key-pair structure. </para>
        </briefdescription>
        <detaileddescription>
<para>A generic key-pair that may be used for ECDSA and fixed ECDH, for example.</para>
<para><simplesect kind="note"><para>Members are deliberately in the same order as in the <ref refid="ecdsa_8h_1a86ad4c743272c83310c20585ec7a182f" kindref="member">mbedtls_ecdsa_context</ref> structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="432" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ecp_8h_1a577ebe217027433601c67ebf2ae525b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_check_budget</definition>
        <argsstring>(const mbedtls_ecp_group *grp, mbedtls_ecp_restart_ctx *rs_ctx, unsigned ops)</argsstring>
        <name>mbedtls_ecp_check_budget</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref> *</type>
          <declname>rs_ctx</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>Internal; for restartable functions in other modules. Check and update basic ops budget. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>Group structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rs_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Restart context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of basic ops to do</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if doing <computeroutput>ops</computeroutput> basic ops is still allowed, </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" kindref="member">MBEDTLS_ERR_ECP_IN_PROGRESS</ref> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="401" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="401" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a4116275f34714de2218e8969611b6f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_set_max_ops</definition>
        <argsstring>(unsigned max_ops)</argsstring>
        <name>mbedtls_ecp_set_max_ops</name>
        <param>
          <type>unsigned</type>
          <declname>max_ops</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of basic operations done in a row. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>             If more operations are needed to complete a computation,
             #MBEDTLS_ERR_ECP_IN_PROGRESS will be returned by the
             function performing the computation. It is then the
             caller&apos;s responsibility to either call again with the same
             parameters until it returns 0 or an error code; or to free
             the restart context if the operation is to be aborted.

             It is strictly required that all input parameters and the
             restart context be the same on successive calls for the
             same operation, but output parameters need not be the
             same; they must not be used until the function finally
             returns 0.

             This only applies to functions whose documentation
             mentions they may return #MBEDTLS_ERR_ECP_IN_PROGRESS (or
             #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS for functions in the
             SSL module). For functions that accept a &quot;restart context&quot;
             argument, passing NULL disables restart and makes the
             function equivalent to the function with the same name
             with \c _restartable removed. For functions in the ECDH
             module, restart is disabled unless the function accepts
             an &quot;ECDH context&quot; argument and
             mbedtls_ecdh_enable_restart() was previously called on
             that context. For function in the SSL module, restart is
             only enabled for specific sides and key exchanges
             (currently only for clients and ECDHE-ECDSA).
</verbatim></para>
<para><simplesect kind="warning"><para>Using the PSA interruptible interfaces with keys in local storage and no accelerator driver will also call this function to set the values specified via those interfaces, overwriting values previously set. Care should be taken if mixing these two interfaces.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_ops</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of basic operations done in a row. Default: 0 (unlimited). Lower (non-zero) values mean ECC functions will block for a lesser maximum amount of time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>A &quot;basic operation&quot; is defined as a rough equivalent of a multiplication in GF(p) for the NIST P-256 curve. As an indication, with default settings, a scalar multiplication (full run of <computeroutput><ref refid="ecp_8h_1a4d005045c302e100c78bdc587e8f0e6a" kindref="member">mbedtls_ecp_mul()</ref></computeroutput>) is:<itemizedlist>
<listitem><para>about 3300 basic operations for P-256</para>
</listitem><listitem><para>about 9400 basic operations for P-384</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>Very low values are not always respected: sometimes functions need to block for a minimum number of operations, and will do so even if max_ops is set to a lower value. That minimum depends on the curve size, and can be made lower by decreasing the value of <computeroutput>MBEDTLS_ECP_WINDOW_SIZE</computeroutput>. As an indication, here is the lowest effective value for various curves and values of that parameter (w for short): w=6 w=5 w=4 w=3 w=2 P-256 208 208 160 136 124 P-384 682 416 320 272 248 P-521 1364 832 640 544 496</para>
</simplesect>
<simplesect kind="note"><para>This setting is currently ignored by Curve25519. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="520" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="520" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a2200d49552f66129e59dc1da410dd16e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_restart_is_enabled</definition>
        <argsstring>(void)</argsstring>
        <name>mbedtls_ecp_restart_is_enabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if restart is enabled (max_ops != 0) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> if <computeroutput>max_ops</computeroutput> == 0 (restart disabled) </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> otherwise (restart enabled) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="528" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="528" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a32a141894d4243dd15e1a20a11e95db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29" kindref="member">mbedtls_ecp_curve_type</ref></type>
        <definition>mbedtls_ecp_curve_type mbedtls_ecp_get_type</definition>
        <argsstring>(const mbedtls_ecp_group *grp)</argsstring>
        <name>mbedtls_ecp_get_type</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="534" column="24" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="534" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1aee4af7c7ad70564c44ba750cd96ae989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref> *</type>
        <definition>const mbedtls_ecp_curve_info* mbedtls_ecp_curve_list</definition>
        <argsstring>(void)</argsstring>
        <name>mbedtls_ecp_curve_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function retrieves the information defined in <ref refid="ecp_8h_1ac4c1ef10c806f58dc3ce83073424e190" kindref="member">mbedtls_ecp_curve_info()</ref> for all supported curves. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function returns information about all curves supported by the library. Some curves may not be supported for all algorithms. Call <ref refid="ecdh_8h_1a7601b043149f7171a47248b7244a4857" kindref="member">mbedtls_ecdh_can_do()</ref> or <ref refid="ecdsa_8h_1ab994434cd9bdfdef8353571c8a6fcbc1" kindref="member">mbedtls_ecdsa_can_do()</ref> to check if a curve is supported for ECDH or ECDSA.</para>
</simplesect>
<simplesect kind="return"><para>A statically allocated array. The last entry is 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="548" column="30" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="548" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a84d2fed0c0cdde5201451bb5461aa275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref> *</type>
        <definition>const mbedtls_ecp_group_id* mbedtls_ecp_grp_id_list</definition>
        <argsstring>(void)</argsstring>
        <name>mbedtls_ecp_grp_id_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function retrieves the list of internal group identifiers of all supported curves in the order of preference. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function returns information about all curves supported by the library. Some curves may not be supported for all algorithms. Call <ref refid="ecdh_8h_1a7601b043149f7171a47248b7244a4857" kindref="member">mbedtls_ecdh_can_do()</ref> or <ref refid="ecdsa_8h_1ab994434cd9bdfdef8353571c8a6fcbc1" kindref="member">mbedtls_ecdsa_can_do()</ref> to check if a curve is supported for ECDH or ECDSA.</para>
</simplesect>
<simplesect kind="return"><para>A statically allocated array, terminated with MBEDTLS_ECP_DP_NONE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="564" column="28" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="564" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a6234c72d1af65d804da31a2706ef522e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref> *</type>
        <definition>const mbedtls_ecp_curve_info* mbedtls_ecp_curve_info_from_grp_id</definition>
        <argsstring>(mbedtls_ecp_group_id grp_id)</argsstring>
        <name>mbedtls_ecp_curve_info_from_grp_id</name>
        <param>
          <type><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref></type>
          <declname>grp_id</declname>
        </param>
        <briefdescription>
<para>This function retrieves curve information from an internal group identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp_id</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>MBEDTLS_ECP_DP_XXX</computeroutput> value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The associated curve information on success. </para>
</simplesect>
<simplesect kind="return"><para>NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="575" column="30" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="575" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1aac1e9b4f0112b88fbbc26776c5268c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref> *</type>
        <definition>const mbedtls_ecp_curve_info* mbedtls_ecp_curve_info_from_tls_id</definition>
        <argsstring>(uint16_t tls_id)</argsstring>
        <name>mbedtls_ecp_curve_info_from_tls_id</name>
        <param>
          <type>uint16_t</type>
          <declname>tls_id</declname>
        </param>
        <briefdescription>
<para>This function retrieves curve information from a TLS NamedCurve value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tls_id</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>MBEDTLS_ECP_DP_XXX</computeroutput> value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The associated curve information on success. </para>
</simplesect>
<simplesect kind="return"><para>NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="586" column="30" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="586" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a961d3dd5f6c4938054c8f931f2a4ecdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref> *</type>
        <definition>const mbedtls_ecp_curve_info* mbedtls_ecp_curve_info_from_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>mbedtls_ecp_curve_info_from_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>This function retrieves curve information from a human-readable name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The human-readable name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The associated curve information on success. </para>
</simplesect>
<simplesect kind="return"><para>NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="597" column="30" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="597" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1ae069f80bc2f9cf2215c34430a9ccd924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_point_init</definition>
        <argsstring>(mbedtls_ecp_point *pt)</argsstring>
        <name>mbedtls_ecp_point_init</name>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>This function initializes a point as zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to initialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="604" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="604" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a5102f6d44d9f16aece7b2e685c31e5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_group_init</definition>
        <argsstring>(mbedtls_ecp_group *grp)</argsstring>
        <name>mbedtls_ecp_group_init</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <briefdescription>
<para>This function initializes an ECP group context without loading any domain parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>After this function is called, domain parameters for various ECP groups can be loaded through the <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref> or <ref refid="ecp_8h_1acfd0cdb926358713b31c48b2e4dd9e58" kindref="member">mbedtls_ecp_tls_read_group()</ref> functions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="615" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="615" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a770d9e33e938f2033fd3f77e6fa2a697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_keypair_init</definition>
        <argsstring>(mbedtls_ecp_keypair *key)</argsstring>
        <name>mbedtls_ecp_keypair_init</name>
        <param>
          <type><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>This function initializes a key pair as an invalid one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key pair to initialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="622" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="622" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a87004f74814cc59a9ef757aea444098d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_point_free</definition>
        <argsstring>(mbedtls_ecp_point *pt)</argsstring>
        <name>mbedtls_ecp_point_free</name>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>This function frees the components of a point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="629" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="629" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a97b130596caa2844282181082f66cb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_group_free</definition>
        <argsstring>(mbedtls_ecp_group *grp)</argsstring>
        <name>mbedtls_ecp_group_free</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <briefdescription>
<para>This function frees the components of an ECP group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The group to free. This may be <computeroutput>NULL</computeroutput>, in which case this function returns immediately. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized ECP group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="638" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="638" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a04ea689d8d97b423a5d646cd9c53f400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_keypair_free</definition>
        <argsstring>(mbedtls_ecp_keypair *key)</argsstring>
        <name>mbedtls_ecp_keypair_free</name>
        <param>
          <type><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>This function frees the components of a key pair. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key pair to free. This may be <computeroutput>NULL</computeroutput>, in which case this function returns immediately. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized ECP key pair. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="647" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="647" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a42c8171cba4e5830e73f94ddaaa764cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_restart_init</definition>
        <argsstring>(mbedtls_ecp_restart_ctx *ctx)</argsstring>
        <name>mbedtls_ecp_restart_init</name>
        <param>
          <type><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize a restart context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The restart context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="656" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="656" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a7ddcf6b16437a1037ef9db56bdb20f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_ecp_restart_free</definition>
        <argsstring>(mbedtls_ecp_restart_ctx *ctx)</argsstring>
        <name>mbedtls_ecp_restart_free</name>
        <param>
          <type><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free the components of a restart context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The restart context to free. This may be <computeroutput>NULL</computeroutput>, in which case this function returns immediately. If it is not <computeroutput>NULL</computeroutput>, it must point to an initialized restart context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="665" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="665" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a97cfab220125dd40d96344e441656142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_copy</definition>
        <argsstring>(mbedtls_ecp_point *P, const mbedtls_ecp_point *Q)</argsstring>
        <name>mbedtls_ecp_copy</name>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>This function copies the contents of point <computeroutput>Q</computeroutput> into point <computeroutput>P</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination point. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The source point. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code for other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="679" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="679" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a2b6e780826b5d6ba4fd5dd5911e490dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_group_copy</definition>
        <argsstring>(mbedtls_ecp_group *dst, const mbedtls_ecp_group *src)</argsstring>
        <name>mbedtls_ecp_group_copy</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>This function copies the contents of group <computeroutput>src</computeroutput> into group <computeroutput>dst</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination group. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source group. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="692" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="692" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1ac18b1dfe4223ac6dc6c637b2edc4a481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_set_zero</definition>
        <argsstring>(mbedtls_ecp_point *pt)</argsstring>
        <name>mbedtls_ecp_set_zero</name>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>This function sets a point to the point at infinity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to set. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="704" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="704" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a17c7d8f0ee985c2ea5713659eccfd955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_is_zero</definition>
        <argsstring>(mbedtls_ecp_point *pt)</argsstring>
        <name>mbedtls_ecp_is_zero</name>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>This function checks if a point is the point at infinity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to test. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if the point is zero. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the point is non-zero. </para>
</simplesect>
<simplesect kind="return"><para>A negative error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="715" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="715" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a5e7676ea5e822494f5208751766daa32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_point_cmp</definition>
        <argsstring>(const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q)</argsstring>
        <name>mbedtls_ecp_point_cmp</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>This function compares two points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This assumes that the points are normalized. Otherwise, they may compare as &quot;not equal&quot; even if they are.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point to compare. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point to compare. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the points are equal. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" kindref="member">MBEDTLS_ERR_ECP_BAD_INPUT_DATA</ref> if the points are not equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="729" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="729" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a63bfda35c538b840a78371be788675dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_point_read_string</definition>
        <argsstring>(mbedtls_ecp_point *P, int radix, const char *x, const char *y)</argsstring>
        <name>mbedtls_ecp_point_read_string</name>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>This function imports a non-zero point from two ASCII strings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination point. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric base of the input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first affine coordinate, as a null-terminated string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second affine coordinate, as a null-terminated string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_MPI_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="744" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="744" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1af7d35a6631f662cc279eed8c4f0f7ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_point_write_binary</definition>
        <argsstring>(const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P, int format, size_t *olen, unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_ecp_point_write_binary</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>This function exports a point into unsigned binary data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The group to which the point should belong. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to export. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The point format. This must be either <ref refid="ecp_8h_1a300814dc5a3ef878a5fb34cc2f185e7a" kindref="member">MBEDTLS_ECP_PF_COMPRESSED</ref> or <ref refid="ecp_8h_1a076e0db0a53f09d424b8650390632bb3" kindref="member">MBEDTLS_ECP_PF_UNCOMPRESSED</ref>. (For groups without these formats, this parameter is ignored. But it still has to be either of the above values.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the length of the output in Bytes. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer. This must be a writable buffer of length <computeroutput>buflen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the output buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a40adc3b18cac6225a491c07829a49b7c" kindref="member">MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</ref> if the output buffer is too small to hold the point. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if the point format or the export for the given group is not implemented. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="772" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="772" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a08eb064f95d4ebd2d7822234f7b64b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_point_read_binary</definition>
        <argsstring>(const mbedtls_ecp_group *grp, mbedtls_ecp_point *P, const unsigned char *buf, size_t ilen)</argsstring>
        <name>mbedtls_ecp_point_read_binary</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
<para>This function imports a point from unsigned binary data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function does not check that the point actually belongs to the given group, see <ref refid="ecp_8h_1ae8768744c65fc71137b496f10cc02370" kindref="member">mbedtls_ecp_check_pubkey()</ref> for that.</para>
</simplesect>
<simplesect kind="note"><para>For compressed points, see <ref refid="ecp_8h_1a300814dc5a3ef878a5fb34cc2f185e7a" kindref="member">MBEDTLS_ECP_PF_COMPRESSED</ref> for limitations.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The group to which the point should belong. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination context to import the point to. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer. This must be a readable buffer of length <computeroutput>ilen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" kindref="member">MBEDTLS_ERR_ECP_BAD_INPUT_DATA</ref> if the input is invalid. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if the import for the given group is not implemented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="802" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="802" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a883eb26a1be64c491ea0354189ae2604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_tls_read_point</definition>
        <argsstring>(const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt, const unsigned char **buf, size_t len)</argsstring>
        <name>mbedtls_ecp_tls_read_point</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>This function imports a point from a TLS ECPoint record. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>On function return, <computeroutput>*buf</computeroutput> is updated to point immediately after the ECPoint record.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to use. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the pointer to the start of the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_MPI_XXX</computeroutput> error code on initialization failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" kindref="member">MBEDTLS_ERR_ECP_BAD_INPUT_DATA</ref> if input is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="824" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="824" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1aa98adfe68b926724607d8fcab61397a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_tls_write_point</definition>
        <argsstring>(const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt, int format, size_t *olen, unsigned char *buf, size_t blen)</argsstring>
        <name>mbedtls_ecp_tls_write_point</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blen</declname>
        </param>
        <briefdescription>
<para>This function exports a point as a TLS ECPoint record defined in RFC 4492, Section 5.4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to use. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to be exported. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The point format to use. This must be either <ref refid="ecp_8h_1a300814dc5a3ef878a5fb34cc2f185e7a" kindref="member">MBEDTLS_ECP_PF_COMPRESSED</ref> or <ref refid="ecp_8h_1a076e0db0a53f09d424b8650390632bb3" kindref="member">MBEDTLS_ECP_PF_UNCOMPRESSED</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the length in Bytes of the data written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The target buffer. This must be a writable buffer of length <computeroutput>blen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the target buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" kindref="member">MBEDTLS_ERR_ECP_BAD_INPUT_DATA</ref> if the input is invalid. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a40adc3b18cac6225a491c07829a49b7c" kindref="member">MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</ref> if the target buffer is too small to hold the exported point. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="850" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="850" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_group_load</definition>
        <argsstring>(mbedtls_ecp_group *grp, mbedtls_ecp_group_id id)</argsstring>
        <name>mbedtls_ecp_group_load</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>This function sets up an ECP group context from a standardized set of domain parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The index should be a value of the NamedCurve enum, as defined in <emphasis>RFC-4492: Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</emphasis>, usually in the form of an <computeroutput>MBEDTLS_ECP_DP_XXX</computeroutput> macro.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The group context to setup. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the domain parameter set to load.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if <computeroutput>id</computeroutput> doesn&apos;t correspond to a known group. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="872" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="872" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1acfd0cdb926358713b31c48b2e4dd9e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_tls_read_group</definition>
        <argsstring>(mbedtls_ecp_group *grp, const unsigned char **buf, size_t len)</argsstring>
        <name>mbedtls_ecp_tls_read_group</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>This function sets up an ECP group context from a TLS ECParameters record as defined in RFC 4492, Section 5.4. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The read pointer <computeroutput>buf</computeroutput> is updated to point right after the ECParameters record on exit.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The group context to setup. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the pointer to the start of the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input buffer <computeroutput>*buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" kindref="member">MBEDTLS_ERR_ECP_BAD_INPUT_DATA</ref> if input is invalid. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if the group is not recognized. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="891" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="891" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a7d972ece52ac542b664d87561e22445a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_tls_read_group_id</definition>
        <argsstring>(mbedtls_ecp_group_id *grp, const unsigned char **buf, size_t len)</argsstring>
        <name>mbedtls_ecp_tls_read_group_id</name>
        <param>
          <type><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>const unsigned char **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>This function extracts an elliptic curve group ID from a TLS ECParameters record as defined in RFC 4492, Section 5.4. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The read pointer <computeroutput>buf</computeroutput> is updated to point right after the ECParameters record on exit.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the group id. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the pointer to the start of the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input buffer <computeroutput>*buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" kindref="member">MBEDTLS_ERR_ECP_BAD_INPUT_DATA</ref> if input is invalid. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if the group is not recognized. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="912" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="912" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a2ae23f66900fe6f3ef50eb30af4143d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_tls_write_group</definition>
        <argsstring>(const mbedtls_ecp_group *grp, size_t *olen, unsigned char *buf, size_t blen)</argsstring>
        <name>mbedtls_ecp_tls_write_group</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blen</declname>
        </param>
        <briefdescription>
<para>This function exports an elliptic curve as a TLS ECParameters record as defined in RFC 4492, Section 5.4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to be exported. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>The address at which to store the number of Bytes written. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to. This must be a writable buffer of length <computeroutput>blen</computeroutput> Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the output buffer <computeroutput>buf</computeroutput> in Bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a40adc3b18cac6225a491c07829a49b7c" kindref="member">MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</ref> if the output buffer is too small to hold the exported group. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="933" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="933" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a4d005045c302e100c78bdc587e8f0e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_mul</definition>
        <argsstring>(mbedtls_ecp_group *grp, mbedtls_ecp_point *R, const mbedtls_mpi *m, const mbedtls_ecp_point *P, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_ecp_mul</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>This function performs a scalar multiplication of a point by an integer: <computeroutput>R</computeroutput> = <computeroutput>m</computeroutput> * <computeroutput>P</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is not thread-safe to use same group in multiple threads.</para>
<para><simplesect kind="note"><para>To prevent timing attacks, this function executes the exact same sequence of base-field operations for any valid <computeroutput>m</computeroutput>. It avoids any if-branch or array index depending on the value of <computeroutput>m</computeroutput>. It also uses <computeroutput>f_rng</computeroutput> to randomize some intermediate results.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to use. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in which to store the result of the calculation. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer by which to multiply. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to multiply. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" kindref="member">MBEDTLS_ERR_ECP_INVALID_KEY</ref> if <computeroutput>m</computeroutput> is not a valid private key, or <computeroutput>P</computeroutput> is not a valid public key. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="966" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="966" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a5d5aab3f25e0c77d56d569fdf1daefd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_mul_restartable</definition>
        <argsstring>(mbedtls_ecp_group *grp, mbedtls_ecp_point *R, const mbedtls_mpi *m, const mbedtls_ecp_point *P, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_ecp_restart_ctx *rs_ctx)</argsstring>
        <name>mbedtls_ecp_mul_restartable</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref> *</type>
          <declname>rs_ctx</declname>
        </param>
        <briefdescription>
<para>This function performs multiplication of a point by an integer: <computeroutput>R</computeroutput> = <computeroutput>m</computeroutput> * <computeroutput>P</computeroutput> in a restartable way. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="ecp_8h_1a4d005045c302e100c78bdc587e8f0e6a" kindref="member">mbedtls_ecp_mul()</ref></para>
</simplesect>
<simplesect kind="note"><para>This function does the same as <computeroutput><ref refid="ecp_8h_1a4d005045c302e100c78bdc587e8f0e6a" kindref="member">mbedtls_ecp_mul()</ref></computeroutput>, but it can return early and restart according to the limit set with <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput> to reduce blocking.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to use. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in which to store the result of the calculation. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer by which to multiply. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to multiply. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rs_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The restart context (NULL disables restart).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" kindref="member">MBEDTLS_ERR_ECP_INVALID_KEY</ref> if <computeroutput>m</computeroutput> is not a valid private key, or <computeroutput>P</computeroutput> is not a valid public key. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" kindref="member">MBEDTLS_ERR_ECP_IN_PROGRESS</ref> if maximum number of operations was reached: see <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1000" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1000" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1afe02d9e7640018bce1bf70a8e5928e8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mbedtls_ecp_group_a_is_minus_3</definition>
        <argsstring>(const mbedtls_ecp_group *grp)</argsstring>
        <name>mbedtls_ecp_group_a_is_minus_3</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <briefdescription>
<para>This function checks if domain parameter A of the curve is <computeroutput>-3</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is only defined for short Weierstrass curves. It may not be included in builds without any short Weierstrass curve.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to use. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>1</computeroutput> if <computeroutput>A = -3</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> Otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1021" column="19" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" bodystart="1021" bodyend="1024"/>
        <references refid="structmbedtls__ecp__group_1af6ab87eb277c78f786ca58ed3fd78825" compoundref="ecp_8h" startline="235">mbedtls_ecp_group::A</references>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a09d306c628dccf6256d59f71f30be39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_muladd</definition>
        <argsstring>(mbedtls_ecp_group *grp, mbedtls_ecp_point *R, const mbedtls_mpi *m, const mbedtls_ecp_point *P, const mbedtls_mpi *n, const mbedtls_ecp_point *Q)</argsstring>
        <name>mbedtls_ecp_muladd</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>This function performs multiplication and addition of two points by integers: <computeroutput>R</computeroutput> = <computeroutput>m</computeroutput> * <computeroutput>P</computeroutput> + <computeroutput>n</computeroutput> * <computeroutput>Q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is not thread-safe to use same group in multiple threads.</para>
<para><simplesect kind="note"><para>In contrast to <ref refid="ecp_8h_1a4d005045c302e100c78bdc587e8f0e6a" kindref="member">mbedtls_ecp_mul()</ref>, this function does not guarantee a constant execution flow and timing.</para>
</simplesect>
<simplesect kind="note"><para>This function is only defined for short Weierstrass curves. It may not be included in builds without any short Weierstrass curve.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to use. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in which to store the result of the calculation. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer by which to multiply <computeroutput>P</computeroutput>. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to multiply by <computeroutput>m</computeroutput>. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer by which to multiply <computeroutput>Q</computeroutput>. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to be multiplied by <computeroutput>n</computeroutput>. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" kindref="member">MBEDTLS_ERR_ECP_INVALID_KEY</ref> if <computeroutput>m</computeroutput> or <computeroutput>n</computeroutput> are not valid private keys, or <computeroutput>P</computeroutput> or <computeroutput>Q</computeroutput> are not valid public keys. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if <computeroutput>grp</computeroutput> does not designate a short Weierstrass curve. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1061" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1061" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a99eef5c2d93ccc968e1aca503bd091d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_muladd_restartable</definition>
        <argsstring>(mbedtls_ecp_group *grp, mbedtls_ecp_point *R, const mbedtls_mpi *m, const mbedtls_ecp_point *P, const mbedtls_mpi *n, const mbedtls_ecp_point *Q, mbedtls_ecp_restart_ctx *rs_ctx)</argsstring>
        <name>mbedtls_ecp_muladd_restartable</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref> *</type>
          <declname>rs_ctx</declname>
        </param>
        <briefdescription>
<para>This function performs multiplication and addition of two points by integers: <computeroutput>R</computeroutput> = <computeroutput>m</computeroutput> * <computeroutput>P</computeroutput> + <computeroutput>n</computeroutput> * <computeroutput>Q</computeroutput> in a restartable way. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="ecp_8h_1a09d306c628dccf6256d59f71f30be39c" kindref="member">mbedtls_ecp_muladd()</ref></computeroutput> </para>
</simplesect>
<simplesect kind="note"><para>This function works the same as <computeroutput><ref refid="ecp_8h_1a09d306c628dccf6256d59f71f30be39c" kindref="member">mbedtls_ecp_muladd()</ref></computeroutput>, but it can return early and restart according to the limit set with <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput> to reduce blocking.</para>
</simplesect>
<simplesect kind="note"><para>This function is only defined for short Weierstrass curves. It may not be included in builds without any short Weierstrass curve.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to use. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in which to store the result of the calculation. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer by which to multiply <computeroutput>P</computeroutput>. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to multiply by <computeroutput>m</computeroutput>. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer by which to multiply <computeroutput>Q</computeroutput>. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to be multiplied by <computeroutput>n</computeroutput>. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rs_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The restart context (NULL disables restart).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" kindref="member">MBEDTLS_ERR_ECP_INVALID_KEY</ref> if <computeroutput>m</computeroutput> or <computeroutput>n</computeroutput> are not valid private keys, or <computeroutput>P</computeroutput> or <computeroutput>Q</computeroutput> are not valid public keys. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if <computeroutput>grp</computeroutput> does not designate a short Weierstrass curve. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" kindref="member">MBEDTLS_ERR_ECP_IN_PROGRESS</ref> if maximum number of operations was reached: see <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1105" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1105" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1ae8768744c65fc71137b496f10cc02370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_check_pubkey</definition>
        <argsstring>(const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt)</argsstring>
        <name>mbedtls_ecp_check_pubkey</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>This function checks that a point is a valid public key on this curve. </para>
        </briefdescription>
        <detaileddescription>
<para>It only checks that the point is non-zero, has valid coordinates and lies on the curve. It does not verify that it is indeed a multiple of <computeroutput>G</computeroutput>. This additional check is computationally more expensive, is not required by standards, and should not be necessary if the group used has a small cofactor. In particular, it is useless for the NIST groups which all have a cofactor of 1.</para>
<para><simplesect kind="note"><para>This function uses bare components rather than an <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> structure, to ease use with other structures, such as <ref refid="structmbedtls__ecdh__context" kindref="compound">mbedtls_ecdh_context</ref> or <ref refid="ecdsa_8h_1a86ad4c743272c83310c20585ec7a182f" kindref="member">mbedtls_ecdsa_context</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group the point should belong to. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to check. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the point is a valid public key. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" kindref="member">MBEDTLS_ERR_ECP_INVALID_KEY</ref> if the point is not a valid public key for the given curve. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1139" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1139" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a5eefe5e5381076f95dbc8c6779f4da4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_check_privkey</definition>
        <argsstring>(const mbedtls_ecp_group *grp, const mbedtls_mpi *d)</argsstring>
        <name>mbedtls_ecp_check_privkey</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>This function checks that an <computeroutput><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref></computeroutput> is a valid private key for this curve. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses bare components rather than an <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> structure to ease use with other structures, such as <ref refid="structmbedtls__ecdh__context" kindref="compound">mbedtls_ecdh_context</ref> or <ref refid="ecdsa_8h_1a86ad4c743272c83310c20585ec7a182f" kindref="member">mbedtls_ecdsa_context</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group the private key should belong to. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer to check. This must be initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if the point is a valid private key. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" kindref="member">MBEDTLS_ERR_ECP_INVALID_KEY</ref> if the point is not a valid private key for the given curve. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1161" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1161" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a9d6eb960e62748d3ac0d8d4576c1f037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_gen_privkey</definition>
        <argsstring>(const mbedtls_ecp_group *grp, mbedtls_mpi *d, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_ecp_gen_privkey</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>This function generates a private key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to generate a private key for. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI (secret part). This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG parameter to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_ECP_XXX</computeroutput> or <computeroutput>MBEDTLS_MPI_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1179" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1179" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a521967f0d966bd98e7e76a8fd43829ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_gen_keypair_base</definition>
        <argsstring>(mbedtls_ecp_group *grp, const mbedtls_ecp_point *G, mbedtls_mpi *d, mbedtls_ecp_point *Q, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_ecp_gen_keypair_base</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>G</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>This function generates a keypair with a configurable base point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses bare components rather than an <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> structure to ease use with other structures, such as <ref refid="structmbedtls__ecdh__context" kindref="compound">mbedtls_ecdh_context</ref> or <ref refid="ecdsa_8h_1a86ad4c743272c83310c20585ec7a182f" kindref="member">mbedtls_ecdsa_context</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to generate a key pair for. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para>The base point to use. This must be initialized and belong to <computeroutput>grp</computeroutput>. It replaces the default base point <computeroutput>grp-&gt;G</computeroutput> used by <ref refid="ecp_8h_1aa7d8987918be4f337102afacf7203d0d" kindref="member">mbedtls_ecp_gen_keypair()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI (secret part). This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination point (public part). This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_ECP_XXX</computeroutput> or <computeroutput>MBEDTLS_MPI_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1211" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1211" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1aa7d8987918be4f337102afacf7203d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_gen_keypair</definition>
        <argsstring>(mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_ecp_gen_keypair</name>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>This function generates an ECP keypair. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses bare components rather than an <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> structure to ease use with other structures, such as <ref refid="structmbedtls__ecdh__context" kindref="compound">mbedtls_ecdh_context</ref> or <ref refid="ecdsa_8h_1a86ad4c743272c83310c20585ec7a182f" kindref="member">mbedtls_ecdsa_context</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group to generate a key pair for. This must be initialized and have group parameters set, for example through <ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination MPI (secret part). This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination point (public part). This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_ECP_XXX</computeroutput> or <computeroutput>MBEDTLS_MPI_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1240" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1240" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a0c9a407214f019493ba5d7bc27fa57dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_gen_key</definition>
        <argsstring>(mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_ecp_gen_key</name>
        <param>
          <type><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref></type>
          <declname>grp_id</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>This function generates an ECP key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination key. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function to use. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_ECP_XXX</computeroutput> or <computeroutput>MBEDTLS_MPI_XXX</computeroutput> error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1258" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1258" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a96b5b8907920eaff7bf67d854d15c440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_read_key</definition>
        <argsstring>(mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key, const unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_ecp_read_key</name>
        <param>
          <type><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref></type>
          <declname>grp_id</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>This function reads an elliptic curve private key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grp_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ECP group identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer containing the binary representation of the key. (Big endian integer for Weierstrass curves, byte string for Montgomery curves.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" kindref="member">MBEDTLS_ERR_ECP_INVALID_KEY</ref> error if the key is invalid. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> if memory allocation failed. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if the operation for the group is not implemented. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1280" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1280" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a1c5542ad40867a6e8256135cc0a4ba6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_write_key</definition>
        <argsstring>(mbedtls_ecp_keypair *key, unsigned char *buf, size_t buflen)</argsstring>
        <name>mbedtls_ecp_write_key</name>
        <param>
          <type><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>This function exports an elliptic curve private key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The output buffer for containing the binary representation of the key. (Big endian integer for Weierstrass curves, byte string for Montgomery curves.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>The total length of the buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a40adc3b18cac6225a491c07829a49b7c" kindref="member">MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</ref> if the <computeroutput>key</computeroutput> representation is larger than the available space in <computeroutput>buf</computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if the operation for the group is not implemented. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on different kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1299" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1299" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1aa852c0c71eb2ae1c30c52dec6d3c989f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_check_pub_priv</definition>
        <argsstring>(const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_ecp_check_pub_priv</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>prv</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>This function checks that the keypair objects <computeroutput>pub</computeroutput> and <computeroutput>prv</computeroutput> have the same group and the same public point, and that the private key in <computeroutput>prv</computeroutput> is consistent with the public key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The keypair structure holding the public key. This must be initialized. If it contains a private key, that part is ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prv</parametername>
</parameternamelist>
<parameterdescription>
<para>The keypair structure holding the full keypair. This must be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG function. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNG context to be passed to <computeroutput>f_rng</computeroutput>. This may be <computeroutput>NULL</computeroutput> if <computeroutput>f_rng</computeroutput> doesn&apos;t need a context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success, meaning that the keys are valid and match. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" kindref="member">MBEDTLS_ERR_ECP_BAD_INPUT_DATA</ref> if the keys are invalid or do not match. </para>
</simplesect>
<simplesect kind="return"><para>An <computeroutput>MBEDTLS_ERR_ECP_XXX</computeroutput> or an <computeroutput>MBEDTLS_ERR_MPI_XXX</computeroutput> error code on calculation failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1322" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1322" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1a4158f32508da80671b74cacbb646ca9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_export</definition>
        <argsstring>(const mbedtls_ecp_keypair *key, mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q)</argsstring>
        <name>mbedtls_ecp_export</name>
        <param>
          <type>const <ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref> *</type>
          <declname>grp</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref> *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>This function exports generic key-pair parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key pair to export from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grp</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot for exported ECP group. It must point to an initialized ECP group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot for the exported secret value. It must point to an initialized mpi. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>Slot for the exported public value. It must point to an initialized ECP point.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success, </para>
</simplesect>
<simplesect kind="return"><para><ref refid="bignum_8h_1a9bb66b22357ba30dedfe856efeab5544" kindref="member">MBEDTLS_ERR_MPI_ALLOC_FAILED</ref> on memory-allocation failure. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" kindref="member">MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</ref> if key id doesn&apos;t correspond to a known group. </para>
</simplesect>
<simplesect kind="return"><para>Another negative error code on other kinds of failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1343" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1343" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ecp_8h_1af869b14c9dcd0d4314151caee7d7e50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_ecp_self_test</definition>
        <argsstring>(int verbose)</argsstring>
        <name>mbedtls_ecp_self_test</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
<para>The ECP checkup routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>1</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" line="1354" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h" declline="1354" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides an API for Elliptic Curves over GF(P) (ECP). </para>
    </briefdescription>
    <detaileddescription>
<para>The use of ECP in cryptography and TLS is defined in <emphasis>Standards for Efficient Cryptography Group (SECG): SEC1 Elliptic Curve Cryptography</emphasis> and <emphasis>RFC-4492: Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</emphasis>.</para>
<para><emphasis>RFC-2409: The Internet Key Exchange (IKE)</emphasis> defines ECP group types. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="17"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_ECP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bignum_8h" kindref="compound">mbedtls/bignum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>ECP<sp/>error<sp/>codes</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="34" refid="ecp_8h_1abcd6ff5c88f83a731383d344b56131f3" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4F80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="ecp_8h_1a40adc3b18cac6225a491c07829a49b7c" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4F00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="ecp_8h_1aa5a0e1548717d603ba5782c8ab6f5c24" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4E80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="ecp_8h_1a3d19895998e4ac7b4744c2407cec1917" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_VERIFY_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4E00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="ecp_8h_1a048bea0521e7928f75a6259a8fcbfecb" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_ALLOC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4D80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="ecp_8h_1a484c796d0d97513809f6042e51b42957" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_RANDOM_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4D00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="ecp_8h_1a20464525ea74ab8fcca9f59a12f5dc4b" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_INVALID_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4C80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="ecp_8h_1a49d1dece5c167d28f22702cfc11b9aa1" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4C00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_ECP_IN_PROGRESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x4B00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>indicating<sp/>whether<sp/>to<sp/>include<sp/>code<sp/>that<sp/>is<sp/>specific<sp/>to<sp/>certain</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>types<sp/>of<sp/>curves.<sp/>These<sp/>flags<sp/>are<sp/>for<sp/>internal<sp/>library<sp/>use<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="ecp_8h_1ae8b221867529119548186abdf56d5238" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="ecp_8h_1a981b049370e6acaa650ad200f2470892" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MONTGOMERY_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/*<sp/>Note:<sp/>when<sp/>adding<sp/>a<sp/>new<sp/>curve:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>it<sp/>at<sp/>the<sp/>end<sp/>of<sp/>this<sp/>enum,<sp/>otherwise<sp/>you&apos;ll<sp/>break<sp/>the<sp/>ABI<sp/>by</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/><sp/>changing<sp/>the<sp/>numerical<sp/>value<sp/>for<sp/>existing<sp/>curves.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>-<sp/>Increment<sp/>MBEDTLS_ECP_DP_MAX<sp/>below<sp/>if<sp/>needed.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>-<sp/>Update<sp/>the<sp/>calculation<sp/>of<sp/>MBEDTLS_ECP_MAX_BITS<sp/>below.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>the<sp/>corresponding<sp/>MBEDTLS_ECP_DP_xxx_ENABLED<sp/>macro<sp/>definition<sp/>to</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/>mbedtls_config.h.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>-<sp/>List<sp/>the<sp/>curve<sp/>as<sp/>a<sp/>dependency<sp/>of<sp/>MBEDTLS_ECP_C<sp/>and</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MBEDTLS_ECDSA_C<sp/>if<sp/>supported<sp/>in<sp/>check_config.h.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>the<sp/>curve<sp/>to<sp/>the<sp/>appropriate<sp/>curve<sp/>type<sp/>macro</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MBEDTLS_ECP_yyy_ENABLED<sp/>above.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>the<sp/>necessary<sp/>definitions<sp/>to<sp/>ecp_curves.c.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>the<sp/>curve<sp/>to<sp/>the<sp/>ecp_supported_curves<sp/>array<sp/>in<sp/>ecp.c.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>the<sp/>curve<sp/>to<sp/>applicable<sp/>profiles<sp/>in<sp/>x509_crt.c.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>-<sp/>Add<sp/>the<sp/>curve<sp/>to<sp/>applicable<sp/>presets<sp/>in<sp/>ssl_tls.c.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="102" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da677d15aba64be1606e0f63ebff096840" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da677d15aba64be1606e0f63ebff096840" kindref="member">MBEDTLS_ECP_DP_NONE</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dae5fcc335b9a458a68542c5b0e2a60971" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dae5fcc335b9a458a68542c5b0e2a60971" kindref="member">MBEDTLS_ECP_DP_SECP192R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da89c8d4502fa02eecd44f8de4831b38c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da89c8d4502fa02eecd44f8de4831b38c8" kindref="member">MBEDTLS_ECP_DP_SECP224R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daf73bbf7b29d26a0bc77dcff47cd6b276" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daf73bbf7b29d26a0bc77dcff47cd6b276" kindref="member">MBEDTLS_ECP_DP_SECP256R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da08d0615820297b8c90f8ec7cbd88f641" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da08d0615820297b8c90f8ec7cbd88f641" kindref="member">MBEDTLS_ECP_DP_SECP384R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daaa2d9d42df56aab024ef760ee9dffca2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daaa2d9d42df56aab024ef760ee9dffca2" kindref="member">MBEDTLS_ECP_DP_SECP521R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dade9d3762e81c6e1d6e499d21e8190be5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dade9d3762e81c6e1d6e499d21e8190be5" kindref="member">MBEDTLS_ECP_DP_BP256R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daaf562eeec4368f2c501c163b4707900a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2daaf562eeec4368f2c501c163b4707900a" kindref="member">MBEDTLS_ECP_DP_BP384R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da803c5f7c0d68be4556a688746be1c9e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da803c5f7c0d68be4556a688746be1c9e1" kindref="member">MBEDTLS_ECP_DP_BP512R1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da675f95c8d8550edd7eb85828d2f22b9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da675f95c8d8550edd7eb85828d2f22b9f" kindref="member">MBEDTLS_ECP_DP_CURVE25519</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da0414bf86d7efb0e211214d9dddfb69d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da0414bf86d7efb0e211214d9dddfb69d4" kindref="member">MBEDTLS_ECP_DP_SECP192K1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dabae9bc9de43957062495162e603c0943" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2dabae9bc9de43957062495162e603c0943" kindref="member">MBEDTLS_ECP_DP_SECP224K1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da6de9f87d43d7c29c7f91e9986ccfc25f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da6de9f87d43d7c29c7f91e9986ccfc25f" kindref="member">MBEDTLS_ECP_DP_SECP256K1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115" refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da5e3ead153c6fa1de5057dc69290a897d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2da5e3ead153c6fa1de5057dc69290a897d" kindref="member">MBEDTLS_ECP_DP_CURVE448</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal">}<sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="ecp_8h_1afef3986789abe96859bafe73485adb80" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_DP_MAX<sp/><sp/><sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>Curve<sp/>types</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="127" refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29aa4fba66b27a6f12392d784a5b8949bcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29aa4fba66b27a6f12392d784a5b8949bcc" kindref="member">MBEDTLS_ECP_TYPE_NONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="128" refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29a9a3584691cdede7956643cc00f6e8371" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29a9a3584691cdede7956643cc00f6e8371" kindref="member">MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y^2<sp/>=<sp/>x^3<sp/>+<sp/>a<sp/>x<sp/>+<sp/>b<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29af83887f93ddc6edbc949fe0188d476a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29af83887f93ddc6edbc949fe0188d476a4" kindref="member">MBEDTLS_ECP_TYPE_MONTGOMERY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y^2<sp/>=<sp/>x^3<sp/>+<sp/>a<sp/>x^2<sp/>+<sp/>x<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/><ref refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29" kindref="member">mbedtls_ecp_curve_type</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="structmbedtls__ecp__curve__info" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref><sp/>{</highlight></codeline>
<codeline lineno="140" refid="structmbedtls__ecp__curve__info_1a1fdb81fb58ed6039b5c9fe1a3c82852b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/><ref refid="structmbedtls__ecp__curve__info_1a1fdb81fb58ed6039b5c9fe1a3c82852b" kindref="member">grp_id</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141" refid="structmbedtls__ecp__curve__info_1ac2754d3ed70b7cc54ba3567372763551" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structmbedtls__ecp__curve__info_1ac2754d3ed70b7cc54ba3567372763551" kindref="member">tls_id</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142" refid="structmbedtls__ecp__curve__info_1a893162d86716513661ccb05b4a450af1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structmbedtls__ecp__curve__info_1a893162d86716513661ccb05b4a450af1" kindref="member">bit_size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143" refid="structmbedtls__ecp__curve__info_1a123ba197ecf3a5573e28030393f7b1dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structmbedtls__ecp__curve__info_1a123ba197ecf3a5573e28030393f7b1dd" kindref="member">name</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}<sp/><ref refid="ecp_8h_1ac4c1ef10c806f58dc3ce83073424e190" kindref="member">mbedtls_ecp_curve_info</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="structmbedtls__ecp__point" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>{</highlight></codeline>
<codeline lineno="158" refid="structmbedtls__ecp__point_1a8e09e0041dec3d6e5de0ce88f5fa6fa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(X);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159" refid="structmbedtls__ecp__point_1a382473f06d020a4d7ebe7cd9db2251ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(Y);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160" refid="structmbedtls__ecp__point_1ac65f1d31bad85e349b5bdeab718e5b3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(Z);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="ecp_8h_1acb88d11e5876842d950eecf6cbf4b6a8" kindref="member">mbedtls_ecp_point</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_ECP_ALT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>default<sp/>Mbed<sp/>TLS<sp/>elliptic<sp/>curve<sp/>arithmetic<sp/>implementation</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>(in<sp/>case<sp/>MBEDTLS_ECP_ALT<sp/>is<sp/>defined<sp/>then<sp/>the<sp/>developer<sp/>has<sp/>to<sp/>provide<sp/>an</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>alternative<sp/>implementation<sp/>for<sp/>the<sp/>whole<sp/>module<sp/>and<sp/>it<sp/>will<sp/>replace<sp/>this</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>one.)</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="structmbedtls__ecp__group" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>{</highlight></codeline>
<codeline lineno="233" refid="structmbedtls__ecp__group_1a3e572cd2e40e1c23fc9a7a6aef7122d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/><ref refid="structmbedtls__ecp__group_1a3e572cd2e40e1c23fc9a7a6aef7122d6" kindref="member">id</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234" refid="structmbedtls__ecp__group_1ae049e9c949bf5d30e71b4b31819f6007" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="structmbedtls__ecp__group_1ae049e9c949bf5d30e71b4b31819f6007" kindref="member">P</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235" refid="structmbedtls__ecp__group_1af6ab87eb277c78f786ca58ed3fd78825" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="structmbedtls__ecp__group_1af6ab87eb277c78f786ca58ed3fd78825" kindref="member">A</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240" refid="structmbedtls__ecp__group_1ab54c9e6b1807d5c10db76f7ebedd55f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="structmbedtls__ecp__group_1ab54c9e6b1807d5c10db76f7ebedd55f4" kindref="member">B</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242" refid="structmbedtls__ecp__group_1a7e0aca0789ca8f5c38d3a0c98b2f9809" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/><ref refid="structmbedtls__ecp__group_1a7e0aca0789ca8f5c38d3a0c98b2f9809" kindref="member">G</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243" refid="structmbedtls__ecp__group_1a7104724a939b7eef2ae3627db410e1e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="structmbedtls__ecp__group_1a7104724a939b7eef2ae3627db410e1e8" kindref="member">N</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244" refid="structmbedtls__ecp__group_1a039ad9e51dc52e46a422e74051b2b837" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group_1a039ad9e51dc52e46a422e74051b2b837" kindref="member">pbits</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245" refid="structmbedtls__ecp__group_1aee5ef1a30d9a5e34810c7a9a7120a10b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group_1aee5ef1a30d9a5e34810c7a9a7120a10b" kindref="member">nbits</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>public<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="structmbedtls__ecp__group_1a636430ac22decc2c2c6d66a158dcd63e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(h);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251" refid="structmbedtls__ecp__group_1a50f06946fa5ba962041d2f91334f8a36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(modp))(<ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*);<sp/><sp/></highlight></codeline>
<codeline lineno="253" refid="structmbedtls__ecp__group_1a8ae36958f53b75b69cd2f926750c2cfb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(t_pre))(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254" refid="structmbedtls__ecp__group_1a40acc844c68655ff4247535c21e061aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int(*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(t_post))(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/><sp/></highlight></codeline>
<codeline lineno="255" refid="structmbedtls__ecp__group_1a4b258ea8a28b79a8cc5ed136038c0b41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(t_data);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256" refid="structmbedtls__ecp__group_1aee9bca7c36cfaf5bacf8530f359df8fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(T);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257" refid="structmbedtls__ecp__group_1ad4e6e5a100ef1ab995e23f7bbdd1f937" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(T_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><ref refid="ecp_8h_1a53bebe4475131f36ed8c770eaba9197a" kindref="member">mbedtls_ecp_group</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_ECP_WINDOW_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>&quot;window&quot;<sp/>size<sp/>used<sp/>for<sp/>point<sp/>multiplication.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>Default:<sp/>a<sp/>point<sp/>where<sp/>higher<sp/>memory<sp/>usage<sp/>yields<sp/>diminishing<sp/>performance</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returns.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>Minimum<sp/>value:<sp/>2.<sp/>Maximum<sp/>value:<sp/>7.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>Result<sp/>is<sp/>an<sp/>array<sp/>of<sp/>at<sp/>most<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>(<sp/>MBEDTLS_ECP_WINDOW_SIZE<sp/>-<sp/>1<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>points<sp/>used<sp/>for<sp/>point<sp/>multiplication.<sp/>This<sp/>value<sp/>is<sp/>directly<sp/>tied<sp/>to<sp/>EC</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>peak<sp/>memory<sp/>usage,<sp/>so<sp/>decreasing<sp/>it<sp/>by<sp/>one<sp/>should<sp/>roughly<sp/>cut<sp/>memory<sp/>usage</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>by<sp/>two<sp/>(if<sp/>large<sp/>curves<sp/>are<sp/>in<sp/>use).</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>Reduction<sp/>in<sp/>size<sp/>may<sp/>reduce<sp/>speed,<sp/>but<sp/>larger<sp/>curves<sp/>are<sp/>impacted<sp/>first.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>Sample<sp/>performances<sp/>(in<sp/>ECDHE<sp/>handshakes/s,<sp/>with<sp/>FIXED_POINT_OPTIM<sp/>=<sp/>1):</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>w-size:<sp/><sp/><sp/><sp/><sp/>6<sp/><sp/><sp/><sp/><sp/><sp/><sp/>5<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>521<sp/><sp/><sp/><sp/><sp/><sp/><sp/>145<sp/><sp/><sp/><sp/><sp/>141<sp/><sp/><sp/><sp/><sp/>135<sp/><sp/><sp/><sp/><sp/>120<sp/><sp/><sp/><sp/><sp/><sp/>97</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>384<sp/><sp/><sp/><sp/><sp/><sp/><sp/>214<sp/><sp/><sp/><sp/><sp/>209<sp/><sp/><sp/><sp/><sp/>198<sp/><sp/><sp/><sp/><sp/>177<sp/><sp/><sp/><sp/><sp/>146</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>256<sp/><sp/><sp/><sp/><sp/><sp/><sp/>320<sp/><sp/><sp/><sp/><sp/>320<sp/><sp/><sp/><sp/><sp/>303<sp/><sp/><sp/><sp/><sp/>262<sp/><sp/><sp/><sp/><sp/>226</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>224<sp/><sp/><sp/><sp/><sp/><sp/><sp/>475<sp/><sp/><sp/><sp/><sp/>475<sp/><sp/><sp/><sp/><sp/>453<sp/><sp/><sp/><sp/><sp/>398<sp/><sp/><sp/><sp/><sp/>342</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>192<sp/><sp/><sp/><sp/><sp/><sp/><sp/>640<sp/><sp/><sp/><sp/><sp/>640<sp/><sp/><sp/><sp/><sp/>633<sp/><sp/><sp/><sp/><sp/>587<sp/><sp/><sp/><sp/><sp/>476</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="ecp_8h_1a0e14e10966cfd209e80d66a16b6c94ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_WINDOW_SIZE<sp/><sp/><sp/><sp/>4<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_WINDOW_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_ECP_FIXED_POINT_OPTIM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>Trade<sp/>code<sp/>size<sp/>for<sp/>speed<sp/>on<sp/>fixed-point<sp/>multiplication.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>This<sp/>speeds<sp/>up<sp/>repeated<sp/>multiplication<sp/>of<sp/>the<sp/>generator<sp/>(that<sp/>is,<sp/>the</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>multiplication<sp/>in<sp/>ECDSA<sp/>signatures,<sp/>and<sp/>half<sp/>of<sp/>the<sp/>multiplications<sp/>in</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>ECDSA<sp/>verification<sp/>and<sp/>ECDHE)<sp/>by<sp/>a<sp/>factor<sp/>roughly<sp/>3<sp/>to<sp/>4.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>For<sp/>each<sp/>n-bit<sp/>Short<sp/>Weierstrass<sp/>curve<sp/>that<sp/>is<sp/>enabled,<sp/>this<sp/>adds<sp/>4n<sp/>bytes</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>of<sp/>code<sp/>size<sp/>if<sp/>n<sp/>&lt;<sp/>384<sp/>and<sp/>8n<sp/>otherwise.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>Change<sp/>this<sp/>value<sp/>to<sp/>0<sp/>to<sp/>reduce<sp/>code<sp/>size.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="ecp_8h_1ab5f2493612bbc9538cb749e85c5e46af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_FIXED_POINT_OPTIM<sp/><sp/>1<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_FIXED_POINT_OPTIM<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ecp_alt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_ALT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor">#if<sp/>!defined(MBEDTLS_ECP_LIGHT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Dummy<sp/>definition<sp/>to<sp/>help<sp/>code<sp/>that<sp/>has<sp/>optional<sp/>ECP<sp/>support<sp/>and</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>defines<sp/>an<sp/>MBEDTLS_ECP_MAX_BYTES-sized<sp/>array<sp/>unconditionally.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>the<sp/>curves<sp/>must<sp/>be<sp/>listed<sp/>in<sp/>DECREASING<sp/>size!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="ecp_8h_1a98099ce7241e89e42ba34b79e770a0ab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>521</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>448</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>384</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>384</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>225<sp/>//<sp/>n<sp/>is<sp/>slightly<sp/>above<sp/>2^224</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>224</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>192</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BITS<sp/>192</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_ECP_LIGHT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Missing<sp/>definition<sp/>of<sp/>MBEDTLS_ECP_MAX_BITS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!MBEDTLS_ECP_LIGHT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="ecp_8h_1aba9fdfc8a8dd423182616e5708abf607" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_BYTES<sp/><sp/><sp/><sp/>((MBEDTLS_ECP_MAX_BITS<sp/>+<sp/>7)<sp/>/<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="ecp_8h_1a281e8aba9ecf97bbd2e4b6b72eb04b87" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_MAX_PT_LEN<sp/><sp/><sp/>(2<sp/>*<sp/>MBEDTLS_ECP_MAX_BYTES<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_RESTARTABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="ecp_8h_1a6c48a6ff767949b5a0125c0abd4b835b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mbedtls_ecp_restart_mul<sp/><ref refid="ecp_8h_1a6c48a6ff767949b5a0125c0abd4b835b" kindref="member">mbedtls_ecp_restart_mul_ctx</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="ecp_8h_1ac85016006fafa6fcb131678705e91596" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mbedtls_ecp_restart_muladd<sp/><ref refid="ecp_8h_1ac85016006fafa6fcb131678705e91596" kindref="member">mbedtls_ecp_restart_muladd_ctx</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="structmbedtls__ecp__restart__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="376" refid="structmbedtls__ecp__restart__ctx_1a566140adab178897eeeb3af74394fcb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ops_done);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377" refid="structmbedtls__ecp__restart__ctx_1a562fc42fc943e349bf9f21c6bdf391e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(depth);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378" refid="structmbedtls__ecp__restart__ctx_1a90f2223b26d96da60b7ae867b93c6f74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1a6c48a6ff767949b5a0125c0abd4b835b" kindref="member">mbedtls_ecp_restart_mul_ctx</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(rsm);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379" refid="structmbedtls__ecp__restart__ctx_1aeda449fcbcd4b20e4f3b1d6622549333" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ecp_8h_1ac85016006fafa6fcb131678705e91596" kindref="member">mbedtls_ecp_restart_muladd_ctx</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ma);<sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal">}<sp/><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/>Operation<sp/>counts<sp/>for<sp/>restartable<sp/>functions</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="ecp_8h_1aff8c4641ff8e32e89af70e49d30492f8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_OPS_CHK<sp/><sp/><sp/>3<sp/></highlight></codeline>
<codeline lineno="386" refid="ecp_8h_1a7789adbc0d8873f4e480d1c6219e2b0c" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_OPS_DBL<sp/><sp/><sp/>8<sp/></highlight></codeline>
<codeline lineno="387" refid="ecp_8h_1a3d6513974ac1741f29cd98d7fe59d470" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_OPS_ADD<sp/><sp/>11<sp/></highlight></codeline>
<codeline lineno="388" refid="ecp_8h_1abf9fc59728c3ec8023917faf2c5090d0" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_OPS_INV<sp/>120<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor">int<sp/>mbedtls_ecp_check_budget(const<sp/>mbedtls_ecp_group<sp/>*grp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref><sp/>*rs_ctx,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ops);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Utility<sp/>macro<sp/>for<sp/>checking<sp/>and<sp/>updating<sp/>ops<sp/>budget<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="ecp_8h_1a0ef02be26c018ca7095579b1826a2b99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_BUDGET(ops)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MBEDTLS_MPI_CHK(mbedtls_ecp_check_budget(grp,<sp/>rs_ctx,<sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)<sp/>(ops)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_RESTARTABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_BUDGET(ops)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no-op;<sp/>for<sp/>compatibility<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>want<sp/>to<sp/>declare<sp/>restartable<sp/>versions<sp/>of<sp/>existing<sp/>functions<sp/>anyway<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_RESTARTABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="structmbedtls__ecp__keypair" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>{</highlight></codeline>
<codeline lineno="428" refid="structmbedtls__ecp__keypair_1a9049ce7c5d31e4b1712d95d67adaedc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(grp);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429" refid="structmbedtls__ecp__keypair_1aed3bf98355908ceb3e67b8636bb6bd8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(d);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="430" refid="structmbedtls__ecp__keypair_1a1a8d6c22ea5e8d177bd328d6c84b898c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(Q);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><ref refid="ecp_8h_1a5b4924f9798d04f47817b361764c4a72" kindref="member">mbedtls_ecp_keypair</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="ecp_8h_1a076e0db0a53f09d424b8650390632bb3" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_PF_UNCOMPRESSED<sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="ecp_8h_1a300814dc5a3ef878a5fb34cc2f185e7a" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_PF_COMPRESSED<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>Some<sp/>other<sp/>constants<sp/>from<sp/>RFC<sp/>4492</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="ecp_8h_1a5bfe061b705a8695d730dfca7d265407" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_ECP_TLS_NAMED_CURVE<sp/><sp/><sp/><sp/>3<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_RESTARTABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_ops);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a2200d49552f66129e59dc1da410dd16e" kindref="member">mbedtls_ecp_restart_is_enabled</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_RESTARTABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>a<sp/>curve</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><ref refid="ecp_8h_1a4d10693ac81232058a30b3bab028dc29" kindref="member">mbedtls_ecp_curve_type</ref><sp/><ref refid="ecp_8h_1a32a141894d4243dd15e1a20a11e95db3" kindref="member">mbedtls_ecp_get_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref><sp/>*<ref refid="ecp_8h_1aee4af7c7ad70564c44ba750cd96ae989" kindref="member">mbedtls_ecp_curve_list</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>*<ref refid="ecp_8h_1a84d2fed0c0cdde5201451bb5461aa275" kindref="member">mbedtls_ecp_grp_id_list</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref><sp/>*<ref refid="ecp_8h_1a6234c72d1af65d804da31a2706ef522e" kindref="member">mbedtls_ecp_curve_info_from_grp_id</ref>(<ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>grp_id);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref><sp/>*<ref refid="ecp_8h_1aac1e9b4f0112b88fbbc26776c5268c19" kindref="member">mbedtls_ecp_curve_info_from_tls_id</ref>(uint16_t<sp/>tls_id);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__curve__info" kindref="compound">mbedtls_ecp_curve_info</ref><sp/>*<ref refid="ecp_8h_1a961d3dd5f6c4938054c8f931f2a4ecdc" kindref="member">mbedtls_ecp_curve_info_from_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1ae069f80bc2f9cf2215c34430a9ccd924" kindref="member">mbedtls_ecp_point_init</ref>(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*pt);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a5102f6d44d9f16aece7b2e685c31e5da" kindref="member">mbedtls_ecp_group_init</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a770d9e33e938f2033fd3f77e6fa2a697" kindref="member">mbedtls_ecp_keypair_init</ref>(<ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*key);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a87004f74814cc59a9ef757aea444098d" kindref="member">mbedtls_ecp_point_free</ref>(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*pt);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a97b130596caa2844282181082f66cb90" kindref="member">mbedtls_ecp_group_free</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a04ea689d8d97b423a5d646cd9c53f400" kindref="member">mbedtls_ecp_keypair_free</ref>(<ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*key);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_RESTARTABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a42c8171cba4e5830e73f94ddaaa764cc" kindref="member">mbedtls_ecp_restart_init</ref>(<ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a7ddcf6b16437a1037ef9db56bdb20f57" kindref="member">mbedtls_ecp_restart_free</ref>(<ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_RESTARTABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a97cfab220125dd40d96344e441656142" kindref="member">mbedtls_ecp_copy</ref>(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*Q);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a2b6e780826b5d6ba4fd5dd5911e490dc" kindref="member">mbedtls_ecp_group_copy</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*src);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1ac18b1dfe4223ac6dc6c637b2edc4a481" kindref="member">mbedtls_ecp_set_zero</ref>(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*pt);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a17c7d8f0ee985c2ea5713659eccfd955" kindref="member">mbedtls_ecp_is_zero</ref>(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*pt);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a5e7676ea5e822494f5208751766daa32" kindref="member">mbedtls_ecp_point_cmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*Q);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a63bfda35c538b840a78371be788675dd" kindref="member">mbedtls_ecp_point_read_string</ref>(<ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radix,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*y);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1af7d35a6631f662cc279eed8c4f0f7ba6" kindref="member">mbedtls_ecp_point_write_binary</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a08eb064f95d4ebd2d7822234f7b64b4d" kindref="member">mbedtls_ecp_point_read_binary</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a883eb26a1be64c491ea0354189ae2604" kindref="member">mbedtls_ecp_tls_read_point</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*pt,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1aa98adfe68b926724607d8fcab61397a9" kindref="member">mbedtls_ecp_tls_write_point</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*pt,</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blen);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a64439a12deff8bd1ef92eeab7ebbcf93" kindref="member">mbedtls_ecp_group_load</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,<sp/><ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1acfd0cdb926358713b31c48b2e4dd9e58" kindref="member">mbedtls_ecp_tls_read_group</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a7d972ece52ac542b664d87561e22445a" kindref="member">mbedtls_ecp_tls_read_group_id</ref>(<ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**buf,</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="933"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a2ae23f66900fe6f3ef50eb30af4143d0" kindref="member">mbedtls_ecp_tls_write_group</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blen);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a4d005045c302e100c78bdc587e8f0e6a" kindref="member">mbedtls_ecp_mul</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,<sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*R,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a5d5aab3f25e0c77d56d569fdf1daefd8" kindref="member">mbedtls_ecp_mul_restartable</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,<sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*R,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref><sp/>*rs_ctx);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021" refid="ecp_8h_1afe02d9e7640018bce1bf70a8e5928e8f" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1afe02d9e7640018bce1bf70a8e5928e8f" kindref="member">mbedtls_ecp_group_a_is_minus_3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grp-&gt;<ref refid="structmbedtls__ecp__group_1af6ab87eb277c78f786ca58ed3fd78825" kindref="member">A</ref>.MBEDTLS_PRIVATE(p)<sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a09d306c628dccf6256d59f71f30be39c" kindref="member">mbedtls_ecp_muladd</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,<sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*R,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*Q);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a99eef5c2d93ccc968e1aca503bd091d8" kindref="member">mbedtls_ecp_muladd_restartable</ref>(</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,<sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*R,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*P,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*Q,</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__restart__ctx" kindref="compound">mbedtls_ecp_restart_ctx</ref><sp/>*rs_ctx);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1ae8768744c65fc71137b496f10cc02370" kindref="member">mbedtls_ecp_check_pubkey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*pt);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a5eefe5e5381076f95dbc8c6779f4da4e" kindref="member">mbedtls_ecp_check_privkey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*d);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a9d6eb960e62748d3ac0d8d4576c1f037" kindref="member">mbedtls_ecp_gen_privkey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*d,</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a521967f0d966bd98e7e76a8fd43829ed" kindref="member">mbedtls_ecp_gen_keypair_base</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*G,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*d,<sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*Q,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1aa7d8987918be4f337102afacf7203d0d" kindref="member">mbedtls_ecp_gen_keypair</ref>(<ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,<sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*d,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*Q,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a0c9a407214f019493ba5d7bc27fa57dc" kindref="member">mbedtls_ecp_gen_key</ref>(<ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>grp_id,<sp/><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*key,</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a96b5b8907920eaff7bf67d854d15c440" kindref="member">mbedtls_ecp_read_key</ref>(<ref refid="ecp_8h_1af79e530ea8f8416480f805baa20b1a2d" kindref="member">mbedtls_ecp_group_id</ref><sp/>grp_id,<sp/><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*key,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a1c5542ad40867a6e8256135cc0a4ba6e" kindref="member">mbedtls_ecp_write_key</ref>(<ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*key,</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1aa852c0c71eb2ae1c30c52dec6d3c989f" kindref="member">mbedtls_ecp_check_pub_priv</ref>(</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*pub,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*prv,</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1a4158f32508da80671b74cacbb646ca9b" kindref="member">mbedtls_ecp_export</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*key,<sp/><ref refid="structmbedtls__ecp__group" kindref="compound">mbedtls_ecp_group</ref><sp/>*grp,</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__mpi" kindref="compound">mbedtls_mpi</ref><sp/>*d,<sp/><ref refid="structmbedtls__ecp__point" kindref="compound">mbedtls_ecp_point</ref><sp/>*Q);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_SELF_TEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ecp_8h_1af869b14c9dcd0d4314151caee7d7e50e" kindref="member">mbedtls_ecp_self_test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_SELF_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ecp.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/ecp.h"/>
  </compounddef>
</doxygen>
