<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pk_8h" kind="file" language="C++">
    <compoundname>pk.h</compoundname>
    <includes refid="private__access_8h" local="yes">mbedtls/private_access.h</includes>
    <includes refid="mbedtls_2build__info_8h" local="yes">mbedtls/build_info.h</includes>
    <includes refid="md_8h" local="yes">mbedtls/md.h</includes>
    <includes refid="rsa_8h" local="yes">mbedtls/rsa.h</includes>
    <includes refid="ecp_8h" local="yes">mbedtls/ecp.h</includes>
    <includes refid="ecdsa_8h" local="yes">mbedtls/ecdsa.h</includes>
    <includes refid="crypto_8h" local="yes">psa/crypto.h</includes>
    <includedby refid="ssl__ciphersuites_8h" local="yes">ssl_ciphersuites.h</includedby>
    <includedby refid="x509_8h" local="yes">x509.h</includedby>
    <includedby refid="oid_8h" local="yes">oid.h</includedby>
    <incdepgraph>
      <node id="47">
        <label>mbedtls/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>mbedtls/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>psa/crypto_adjust_auto_enabled.h</label>
        <link refid="crypto__adjust__auto__enabled_8h"/>
      </node>
      <node id="15">
        <label>mbedtls/config_adjust_x509.h</label>
        <link refid="config__adjust__x509_8h"/>
      </node>
      <node id="16">
        <label>mbedtls/config_adjust_ssl.h</label>
        <link refid="config__adjust__ssl_8h"/>
      </node>
      <node id="52">
        <label>psa/crypto_builtin_composites.h</label>
        <link refid="crypto__builtin__composites_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>mbedtls/ecp.h</label>
        <link refid="ecp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stdint.h</label>
      </node>
      <node id="30">
        <label>stdlib.h</label>
      </node>
      <node id="29">
        <label>mbedtls/threading.h</label>
        <link refid="threading_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>psa/crypto_adjust_config_key_pair_types.h</label>
        <link refid="crypto__adjust__config__key__pair__types_8h"/>
      </node>
      <node id="23">
        <label>mbedtls/platform_time.h</label>
        <link refid="platform__time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>crypto_extra.h</label>
        <link refid="crypto__extra_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>psa/crypto.h</label>
        <link refid="crypto_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mbedtls/config_adjust_psa_from_legacy.h</label>
        <link refid="config__adjust__psa__from__legacy_8h"/>
      </node>
      <node id="37">
        <label>crypto_types.h</label>
        <link refid="crypto__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>mbedtls/bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>mbedtls/gcm.h</label>
        <link refid="gcm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>mbedtls/platform_util.h</label>
        <link refid="platform__util_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>mbedtls/sha512.h</label>
        <link refid="sha512_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="44">
        <label>mbedtls/md5.h</label>
        <link refid="md5_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>mbedtls/build_info.h</label>
        <link refid="mbedtls_2build__info_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>mbedtls/sha3.h</label>
        <link refid="sha3_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>crypto_struct.h</label>
        <link refid="crypto__struct_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>psa/crypto_builtin_primitives.h</label>
        <link refid="crypto__builtin__primitives_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>mbedtls/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>psa/crypto_config.h</label>
        <link refid="crypto__config_8h"/>
      </node>
      <node id="31">
        <label>pthread.h</label>
      </node>
      <node id="14">
        <label>mbedtls/config_adjust_legacy_crypto.h</label>
        <link refid="config__adjust__legacy__crypto_8h"/>
      </node>
      <node id="17">
        <label>mbedtls/check_config.h</label>
        <link refid="check__config_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>psa/crypto_driver_contexts_key_derivation.h</label>
        <link refid="crypto__driver__contexts__key__derivation_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>mbedtls/ccm.h</label>
        <link refid="ccm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>crypto_values.h</label>
        <link refid="crypto__values_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>psa/crypto_driver_contexts_primitives.h</label>
        <link refid="crypto__driver__contexts__primitives_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mbedtls/config_adjust_legacy_from_psa.h</label>
        <link refid="config__adjust__legacy__from__psa_8h"/>
      </node>
      <node id="35">
        <label>crypto_platform.h</label>
        <link refid="crypto__platform_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>crypto_compat.h</label>
        <link refid="crypto__compat_8h"/>
      </node>
      <node id="39">
        <label>crypto_sizes.h</label>
        <link refid="crypto__sizes_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>mbedtls/poly1305.h</label>
        <link refid="poly1305_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>mbedtls/ecjpake.h</label>
        <link refid="ecjpake_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>mbedtls/mbedtls_config.h</label>
        <link refid="mbedtls__config_8h"/>
      </node>
      <node id="6">
        <label>mbedtls/config_psa.h</label>
        <link refid="config__psa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>psa/crypto_driver_common.h</label>
        <link refid="crypto__driver__common_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>psa/crypto_adjust_config_synonyms.h</label>
        <link refid="crypto__adjust__config__synonyms_8h"/>
      </node>
      <node id="24">
        <label>time.h</label>
      </node>
      <node id="51">
        <label>psa/crypto_driver_contexts_composites.h</label>
        <link refid="crypto__driver__contexts__composites_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mbedtls/private_access.h</label>
        <link refid="private__access_8h"/>
      </node>
      <node id="36">
        <label>psa/build_info.h</label>
        <link refid="psa_2build__info_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>mbedtls/cmac.h</label>
        <link refid="cmac_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>psa/crypto_builtin_key_derivation.h</label>
        <link refid="crypto__builtin__key__derivation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>mbedtls/cipher.h</label>
        <link refid="cipher_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>mbedtls/md.h</label>
        <link refid="md_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>mbedtls/chachapoly.h</label>
        <link refid="chachapoly_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mbedtls/config_adjust_psa_superset_legacy.h</label>
        <link refid="config__adjust__psa__superset__legacy_8h"/>
      </node>
      <node id="7">
        <label>psa/crypto_legacy.h</label>
        <link refid="crypto__legacy_8h"/>
      </node>
      <node id="26">
        <label>mbedtls/rsa.h</label>
        <link refid="rsa_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>mbedtls/chacha20.h</label>
        <link refid="chacha20_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stdio.h</label>
      </node>
      <node id="46">
        <label>mbedtls/sha1.h</label>
        <link refid="sha1_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>ssl_ciphersuites.h</label>
        <link refid="ssl__ciphersuites_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="13">
        <label>x509_csr.h</label>
        <link refid="x509__csr_8h"/>
      </node>
      <node id="7">
        <label>ssl_cookie.h</label>
        <link refid="ssl__cookie_8h"/>
      </node>
      <node id="9">
        <label>x509.h</label>
        <link refid="x509_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ssl.h</label>
        <link refid="ssl_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ssl_ticket.h</label>
        <link refid="ssl__ticket_8h"/>
      </node>
      <node id="6">
        <label>ssl_cache.h</label>
        <link refid="ssl__cache_8h"/>
      </node>
      <node id="1">
        <label>pk.h</label>
        <link refid="pk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pkcs7.h</label>
        <link refid="pkcs7_8h"/>
      </node>
      <node id="14">
        <label>oid.h</label>
        <link refid="oid_8h"/>
      </node>
      <node id="5">
        <label>net_sockets.h</label>
        <link refid="net__sockets_8h"/>
      </node>
      <node id="12">
        <label>x509_crl.h</label>
        <link refid="x509__crl_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>x509_crt.h</label>
        <link refid="x509__crt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmbedtls__pk__rsassa__pss__options" prot="public">mbedtls_pk_rsassa_pss_options</innerclass>
    <innerclass refid="structmbedtls__pk__debug__item" prot="public">mbedtls_pk_debug_item</innerclass>
    <innerclass refid="structmbedtls__pk__context" prot="public">mbedtls_pk_context</innerclass>
    <innerclass refid="structmbedtls__pk__restart__ctx" prot="public">mbedtls_pk_restart_ctx</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pk_8h_1acf55308a7cac0363ea25de294c8b633d" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_ALLOC_FAILED</name>
        <initializer>-0x3F80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory allocation failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="36" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a7a7fb7cb156476722c09de42368156dc" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name>
        <initializer>-0x3F00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type mismatch, eg attempt to encrypt with an ECDSA key </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="38" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1aab119ef4dc86ea6546472299a259bfe8" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name>
        <initializer>-0x3E80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bad input parameters to function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="40" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a334a28580efaab3c749fdf1dde28feb8" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_FILE_IO_ERROR</name>
        <initializer>-0x3E00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read/write of file failed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="42" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a9b589f81143439f8580b3004dc8ecaf1" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_KEY_INVALID_VERSION</name>
        <initializer>-0x3D80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unsupported key version </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="44" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a291c7d21aa2cd94b2100703e8e3a1d06" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_KEY_INVALID_FORMAT</name>
        <initializer>-0x3D00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid key tag or value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="46" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a877b66447bfa2cd49c1b99f1dc887568" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_UNKNOWN_PK_ALG</name>
        <initializer>-0x3C80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key algorithm is unsupported (only RSA and EC are supported). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="48" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a9c1de7ccb4e18a3ea74b35c4e2cb7527" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_PASSWORD_REQUIRED</name>
        <initializer>-0x3C00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Private key password can&apos;t be empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="50" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a24723299c688b1ca6cfa613c19cef6f5" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_PASSWORD_MISMATCH</name>
        <initializer>-0x3B80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given private key password does not allow for correct decryption. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="52" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a0fdf1044cce5beb387d76d19bf4ef0a2" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_INVALID_PUBKEY</name>
        <initializer>-0x3B00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pubkey tag or value is invalid (only RSA and EC are supported). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="54" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a5d71f30a40d67d5d205a20b69303a341" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_INVALID_ALG</name>
        <initializer>-0x3A80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The algorithm tag or value is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="56" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a802d8b95e9b6a517d597dc92cb591e99" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE</name>
        <initializer>-0x3A00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Elliptic curve is unsupported (only NIST curves are supported). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="58" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1af4a79b15d48bd86c96767db4b9ce2caf" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</name>
        <initializer>-0x3980</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unavailable feature, e.g. RSA disabled for RSA key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="60" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1abce78b0c7f04018824b70b816e091dc0" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_SIG_LEN_MISMATCH</name>
        <initializer>-0x3900</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The buffer contains a valid signature followed by more data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="62" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a8458402f93f01d9de63126ecfed78c4d" prot="public" static="no">
        <name>MBEDTLS_ERR_PK_BUFFER_TOO_SMALL</name>
        <initializer>-0x3880</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The output buffer is too small. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="64" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1af0c8fb77b9ca1c22927cd4b449bad0df" prot="public" static="no">
        <name>MBEDTLS_PK_SIGNATURE_MAX_SIZE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Maximum size of a signature made by <ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="122" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1af0c8fb77b9ca1c22927cd4b449bad0df" prot="public" static="no">
        <name>MBEDTLS_PK_SIGNATURE_MAX_SIZE</name>
        <initializer><ref refid="bignum_8h_1a02bfffc46b7b2e10c0080d29bb56e6b0" kindref="member">MBEDTLS_MPI_MAX_SIZE</ref></initializer>
        <briefdescription>
<para>Maximum size of a signature made by <ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="131" column="10" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1afac63e00977f054b227dd7715bcd4181" prot="public" static="no">
        <name>MBEDTLS_PK_HAVE_ECC_KEYS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="188" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1a73c1247ff4513b853b61b0dc36b69892" prot="public" static="no">
        <name>MBEDTLS_PK_DEBUG_MAX_ITEMS</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of item send for debugging, plus 1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="211" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pk_8h_1abb8f1e65f079e1e5af4e0e24639bad8b" prot="public" static="no">
        <name>MBEDTLS_PK_MAX_EC_PUBKEY_RAW_LEN</name>
        <initializer><ref refid="crypto__sizes_8h_1a221b29f08b4e5e0509a1c7cc11b623d0" kindref="member">PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE</ref>(<ref refid="crypto__sizes_8h_1a81080a6cbbab87f35b114cb991e3f550" kindref="member">PSA_VENDOR_ECC_MAX_CURVE_BITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="222" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_pk_type_t</name>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a075b125b18a238567d2000c9433b9c79" prot="public">
          <name>MBEDTLS_PK_NONE</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac4fd7ca431c2e748df4ed0a324dd58c5" prot="public">
          <name>MBEDTLS_PK_RSA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020acc363effd0a7c9d6ac0c0660e25b258c" prot="public">
          <name>MBEDTLS_PK_ECKEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac589ed0db52ed62be7e4f378bd04e3bf" prot="public">
          <name>MBEDTLS_PK_ECKEY_DH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a665615a1098e56bbe747a477ee00ad61" prot="public">
          <name>MBEDTLS_PK_ECDSA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020abc435530cb0e61d0fdde8e1a8278e38f" prot="public">
          <name>MBEDTLS_PK_RSA_ALT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a8b1bc181a5ea81a49b141925a68d8a92" prot="public">
          <name>MBEDTLS_PK_RSASSA_PSS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a21d8fcc83bd421d8171f8e978608c075" prot="public">
          <name>MBEDTLS_PK_OPAQUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Public key types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="73" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="enum" id="pk_8h_1a959c5419b3dd34df5420ee83bbc54002" prot="public" static="no" strong="no">
        <type></type>
        <name>mbedtls_pk_debug_type</name>
        <enumvalue id="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a67f12e5586337f88ab7a314a454df8a6" prot="public">
          <name>MBEDTLS_PK_DEBUG_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a0dac32d7751890a7f2b548de57eb560d" prot="public">
          <name>MBEDTLS_PK_DEBUG_MPI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a53aa0f43ed7f0958c1347755b288c57f" prot="public">
          <name>MBEDTLS_PK_DEBUG_ECP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a98969d05627293036a8df8406670b14a" prot="public">
          <name>MBEDTLS_PK_DEBUG_PSA_EC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types for interfacing with the debug module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="194" column="14" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="194" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pk_8h_1a91e6f2c5f9aa8ee6d14a26e24305921f" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__pk__rsassa__pss__options" kindref="compound">mbedtls_pk_rsassa_pss_options</ref></type>
        <definition>typedef struct mbedtls_pk_rsassa_pss_options mbedtls_pk_rsassa_pss_options</definition>
        <argsstring></argsstring>
        <name>mbedtls_pk_rsassa_pss_options</name>
        <briefdescription>
<para>Options for RSASSA-PSS signature verification. See <computeroutput><ref refid="rsa_8h_1a17fd9fadff17a5a69c6f2469e3ecda92" kindref="member">mbedtls_rsa_rsassa_pss_verify_ext()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="108" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="pk_8h_1ab601bc5645136fa1f0ebb2a72ddf2f64" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__pk__debug__item" kindref="compound">mbedtls_pk_debug_item</ref></type>
        <definition>typedef struct mbedtls_pk_debug_item mbedtls_pk_debug_item</definition>
        <argsstring></argsstring>
        <name>mbedtls_pk_debug_item</name>
        <briefdescription>
<para>Item to send to the debug module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="208" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" prot="public" static="no">
        <type>struct <ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref></type>
        <definition>typedef struct mbedtls_pk_info_t mbedtls_pk_info_t</definition>
        <argsstring></argsstring>
        <name>mbedtls_pk_info_t</name>
        <briefdescription>
<para>Public key information and operations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The library does not support custom pk info structures, only built-in structures returned by <ref refid="cipher_8h_1a8bc2809cbd7c2357f41be8cf76eeed92" kindref="member">mbedtls_cipher_info_from_type()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="1" column="0" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pk_8h_1a84eac035dbf3072de341ccbfd126a955" prot="public" static="no">
        <type>struct <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref></type>
        <definition>typedef struct mbedtls_pk_context mbedtls_pk_context</definition>
        <argsstring></argsstring>
        <name>mbedtls_pk_context</name>
        <briefdescription>
<para>Public key container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="275" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="pk_8h_1a3ec15739d093d55bf5a02f9c3952c047" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* mbedtls_pk_rsa_alt_decrypt_func) (void *ctx, size_t *olen, const unsigned char *input, unsigned char *output, size_t output_max_len)</definition>
        <argsstring>)(void *ctx, size_t *olen, const unsigned char *input, unsigned char *output, size_t output_max_len)</argsstring>
        <name>mbedtls_pk_rsa_alt_decrypt_func</name>
        <briefdescription>
<para>Types for RSA-alt abstraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="294" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pk_8h_1a324f36b1629873d7a32c7cd18b27759d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* mbedtls_pk_rsa_alt_sign_func) (void *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, unsigned char *sig)</definition>
        <argsstring>)(void *ctx, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_md_type_t md_alg, unsigned int hashlen, const unsigned char *hash, unsigned char *sig)</argsstring>
        <name>mbedtls_pk_rsa_alt_sign_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="297" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pk_8h_1ac1688b04ad105ba002dc47b79ded2e29" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* mbedtls_pk_rsa_alt_key_len_func) (void *ctx)</definition>
        <argsstring>)(void *ctx)</argsstring>
        <name>mbedtls_pk_rsa_alt_key_len_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="302" column="9" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pk_8h_1a05eb3e96499280b250cb71e2ef2d270b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref> *</type>
        <definition>const mbedtls_pk_info_t* mbedtls_pk_info_from_type</definition>
        <argsstring>(mbedtls_pk_type_t pk_type)</argsstring>
        <name>mbedtls_pk_info_from_type</name>
        <param>
          <type><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref></type>
          <declname>pk_type</declname>
        </param>
        <briefdescription>
<para>Return information associated with the given PK type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pk_type</parametername>
</parameternamelist>
<parameterdescription>
<para>PK type to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PK info associated with the type or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="312" column="25" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="312" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a999d1160bb30c03d0c4382c3a9b0aa89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_pk_init</definition>
        <argsstring>(mbedtls_pk_context *ctx)</argsstring>
        <name>mbedtls_pk_init</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> (as NONE). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="320" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="320" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_pk_free</definition>
        <argsstring>(mbedtls_pk_context *ctx)</argsstring>
        <name>mbedtls_pk_free</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free the components of a <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to clear. It must have been initialized. If this is <computeroutput>NULL</computeroutput>, this function does nothing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>For contexts that have been set up with <ref refid="pk_8h_1a4c04ac22ab9c1ae09cc29438c308bf05" kindref="member">mbedtls_pk_setup_opaque()</ref>, this does not free the underlying PSA key and you still need to call <ref refid="group__key__management_1ga5f52644312291335682fbc0292c43cd2" kindref="member">psa_destroy_key()</ref> independently if you want to destroy that key. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="333" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="333" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a68035977bd3664838529bcc0ad95e059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_pk_restart_init</definition>
        <argsstring>(mbedtls_pk_restart_ctx *ctx)</argsstring>
        <name>mbedtls_pk_restart_init</name>
        <param>
          <type><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize a restart context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to initialize. This must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="342" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="342" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1ab82d0dc78b3262f16087fa4814eeca9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_pk_restart_free</definition>
        <argsstring>(mbedtls_pk_restart_ctx *ctx)</argsstring>
        <name>mbedtls_pk_restart_free</name>
        <param>
          <type><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free the components of a restart context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to clear. It must have been initialized. If this is <computeroutput>NULL</computeroutput>, this function does nothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="350" column="6" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="350" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a7d6cc2c1768cc6db883b08c3c0f10889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_setup</definition>
        <argsstring>(mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info)</argsstring>
        <name>mbedtls_pk_setup</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Initialize a PK context with the information given and allocates the type-specific PK subcontext. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to initialize. It must not have been set up yet (type <ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a075b125b18a238567d2000c9433b9c79" kindref="member">MBEDTLS_PK_NONE</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information to use</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, MBEDTLS_ERR_PK_BAD_INPUT_DATA on invalid input, MBEDTLS_ERR_PK_ALLOC_FAILED on allocation failure.</para>
</simplesect>
<simplesect kind="note"><para>For contexts holding an RSA-alt key, use <computeroutput><ref refid="pk_8h_1ab719d0b89ef0a49fef2bc8ba20e4726b" kindref="member">mbedtls_pk_setup_rsa_alt()</ref></computeroutput> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="368" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="368" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a4c04ac22ab9c1ae09cc29438c308bf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_setup_opaque</definition>
        <argsstring>(mbedtls_pk_context *ctx, const mbedtls_svc_key_id_t key)</argsstring>
        <name>mbedtls_pk_setup_opaque</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Initialize a PK context to wrap a PSA key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function replaces <ref refid="pk_8h_1a7d6cc2c1768cc6db883b08c3c0f10889" kindref="member">mbedtls_pk_setup()</ref> for contexts that wrap a (possibly opaque) PSA key instead of storing and manipulating the key material directly.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to initialize. It must be empty (type NONE). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The PSA key to wrap, which must hold an ECC or RSA key pair (see notes below).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The wrapped key must remain valid as long as the wrapping PK context is in use, that is at least between the point this function is called and the point <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref> is called on this context. The wrapped key might then be independently used or destroyed.</para>
</simplesect>
<simplesect kind="note"><para>This function is currently only available for ECC or RSA key pairs (that is, keys containing private key material). Support for other key types may be added later.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="pk_8h_1aab119ef4dc86ea6546472299a259bfe8" kindref="member">MBEDTLS_ERR_PK_BAD_INPUT_DATA</ref> on invalid input (context already used, invalid key identifier). </para>
</simplesect>
<simplesect kind="return"><para><ref refid="pk_8h_1af4a79b15d48bd86c96767db4b9ce2caf" kindref="member">MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</ref> if the key is not an ECC key pair. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="pk_8h_1acf55308a7cac0363ea25de294c8b633d" kindref="member">MBEDTLS_ERR_PK_ALLOC_FAILED</ref> on allocation failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="399" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="399" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1ab719d0b89ef0a49fef2bc8ba20e4726b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_setup_rsa_alt</definition>
        <argsstring>(mbedtls_pk_context *ctx, void *key, mbedtls_pk_rsa_alt_decrypt_func decrypt_func, mbedtls_pk_rsa_alt_sign_func sign_func, mbedtls_pk_rsa_alt_key_len_func key_len_func)</argsstring>
        <name>mbedtls_pk_setup_rsa_alt</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="pk_8h_1a3ec15739d093d55bf5a02f9c3952c047" kindref="member">mbedtls_pk_rsa_alt_decrypt_func</ref></type>
          <declname>decrypt_func</declname>
        </param>
        <param>
          <type><ref refid="pk_8h_1a324f36b1629873d7a32c7cd18b27759d" kindref="member">mbedtls_pk_rsa_alt_sign_func</ref></type>
          <declname>sign_func</declname>
        </param>
        <param>
          <type><ref refid="pk_8h_1ac1688b04ad105ba002dc47b79ded2e29" kindref="member">mbedtls_pk_rsa_alt_key_len_func</ref></type>
          <declname>key_len_func</declname>
        </param>
        <briefdescription>
<para>Initialize an RSA-alt context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to initialize. It must not have been set up yet (type <ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a075b125b18a238567d2000c9433b9c79" kindref="member">MBEDTLS_PK_NONE</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA key pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decrypt_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Decryption function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Signing function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_len_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function returning key length in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or MBEDTLS_ERR_PK_BAD_INPUT_DATA if the context wasn&apos;t already initialized as RSA_ALT.</para>
</simplesect>
<simplesect kind="note"><para>This function replaces <computeroutput><ref refid="pk_8h_1a7d6cc2c1768cc6db883b08c3c0f10889" kindref="member">mbedtls_pk_setup()</ref></computeroutput> for RSA-alt. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="419" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="419" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a4a31083a590b155dd54d22cf618eefcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mbedtls_pk_get_bitlen</definition>
        <argsstring>(const mbedtls_pk_context *ctx)</argsstring>
        <name>mbedtls_pk_get_bitlen</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the size in bits of the underlying key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to query. It must have been initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Key size in bits, or 0 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="432" column="8" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="432" declcolumn="8"/>
        <referencedby refid="pk_8h_1a10b85028a74324c9c581650dfee9dd4d" compoundref="pk_8h" startline="441" endline="444">mbedtls_pk_get_len</referencedby>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a10b85028a74324c9c581650dfee9dd4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t mbedtls_pk_get_len</definition>
        <argsstring>(const mbedtls_pk_context *ctx)</argsstring>
        <name>mbedtls_pk_get_len</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the length in bytes of the underlying key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to query. It must have been initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Key length in bytes, or 0 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="441" column="22" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="441" bodyend="444"/>
        <references refid="pk_8h_1a4a31083a590b155dd54d22cf618eefcc">mbedtls_pk_get_bitlen</references>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a2d72c66f5e78abe153bdf08874aaabf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_can_do</definition>
        <argsstring>(const mbedtls_pk_context *ctx, mbedtls_pk_type_t type)</argsstring>
        <name>mbedtls_pk_can_do</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Tell if a context can do the operation given by type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to query. It must have been initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the context can do operations on the given type. </para>
</simplesect>
<simplesect kind="return"><para>0 if the context cannot do the operations on the given type. This is always the case for a context that has been initialized but not set up, or that has been cleared with <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="458" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="458" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a256d3e8d4323a45aafa7d2b6c59a36f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_can_do_ext</definition>
        <argsstring>(const mbedtls_pk_context *ctx, psa_algorithm_t alg, psa_key_usage_t usage)</argsstring>
        <name>mbedtls_pk_can_do_ext</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref></type>
          <declname>usage</declname>
        </param>
        <briefdescription>
<para>Tell if context can do the operation given by PSA algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The context to query. It must have been initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>PSA algorithm to check against, the following are allowed: <ref refid="group__crypto__types_1ga702ff75385a6ae7d4247033f479439af" kindref="member">PSA_ALG_RSA_PKCS1V15_SIGN(hash)</ref>, <ref refid="group__crypto__types_1ga62152bf4cb4bf6aace5e1be8f143564d" kindref="member">PSA_ALG_RSA_PSS(hash)</ref>, PSA_ALG_RSA_PKCS1V15_CRYPT, <ref refid="group__crypto__types_1ga7e3ce9f514a227d5ba5d8318870452e3" kindref="member">PSA_ALG_ECDSA(hash)</ref>, PSA_ALG_ECDH, where hash is a specific hash. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para>PSA usage flag to check against, must be composed of: PSA_KEY_USAGE_SIGN_HASH PSA_KEY_USAGE_DECRYPT PSA_KEY_USAGE_DERIVE. Context key must match all passed usage flags.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Since the set of allowed algorithms and usage flags may be expanded in the future, the return value <computeroutput>0</computeroutput> should not be taken in account for non-allowed algorithms and usage flags.</para>
</simplesect>
<simplesect kind="return"><para>1 if the context can do operations on the given type. </para>
</simplesect>
<simplesect kind="return"><para>0 if the context cannot do the operations on the given type, for non-allowed algorithms and usage flags, or for a context that has been initialized but not set up or that has been cleared with <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="488" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="488" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1abf1939cc1d89f6b9fd341b67d5241914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_verify</definition>
        <argsstring>(mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len, const unsigned char *sig, size_t sig_len)</argsstring>
        <name>mbedtls_pk_verify</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_len</declname>
        </param>
        <briefdescription>
<para>Verify signature (including padding if relevant). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash algorithm used. This can be <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref> if the signature algorithm does not rely on a hash algorithm (non-deterministic ECDSA, RSA PKCS#1 v1.5). For PKCS#1 v1.5, if <computeroutput>md_alg</computeroutput> is <ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296a564288006d735f75738021342ca5f9d1" kindref="member">MBEDTLS_MD_NONE</ref>, then <computeroutput>hash</computeroutput> is the DigestInfo structure used by RFC 8017 <sect/>9.2 steps 3<ndash/>6. If <computeroutput>md_alg</computeroutput> is a valid hash algorithm then <computeroutput>hash</computeroutput> is the digest itself, and this function calculates the DigestInfo encoding internally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash of the message to sign </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature to verify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature length</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success (signature is valid), <ref refid="pk_8h_1abce78b0c7f04018824b70b816e091dc0" kindref="member">MBEDTLS_ERR_PK_SIG_LEN_MISMATCH</ref> if there is a valid signature in <computeroutput>sig</computeroutput> but its length is less than <computeroutput>sig_len</computeroutput>, or a specific error code.</para>
</simplesect>
<simplesect kind="note"><para>For RSA keys, the default padding type is PKCS#1 v1.5. Use <computeroutput>mbedtls_pk_verify_ext( MBEDTLS_PK_RSASSA_PSS, ... )</computeroutput> to verify RSASSA_PSS signatures. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="519" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="519" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1aa3a4baeaab34a94ba0985d4daf41b9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_verify_restartable</definition>
        <argsstring>(mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len, const unsigned char *sig, size_t sig_len, mbedtls_pk_restart_ctx *rs_ctx)</argsstring>
        <name>mbedtls_pk_verify_restartable</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_len</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref> *</type>
          <declname>rs_ctx</declname>
        </param>
        <briefdescription>
<para>Restartable version of <computeroutput><ref refid="pk_8h_1abf1939cc1d89f6b9fd341b67d5241914" kindref="member">mbedtls_pk_verify()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Performs the same job as <computeroutput><ref refid="pk_8h_1abf1939cc1d89f6b9fd341b67d5241914" kindref="member">mbedtls_pk_verify()</ref></computeroutput>, but can return early and restart according to the limit set with <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput> to reduce blocking for ECC operations. For RSA, same as <computeroutput><ref refid="pk_8h_1abf1939cc1d89f6b9fd341b67d5241914" kindref="member">mbedtls_pk_verify()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash algorithm used (see notes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash of the message to sign </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash length or 0 (see notes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature to verify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rs_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Restart context (NULL to disable restart)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See <computeroutput><ref refid="pk_8h_1abf1939cc1d89f6b9fd341b67d5241914" kindref="member">mbedtls_pk_verify()</ref></computeroutput>, or </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" kindref="member">MBEDTLS_ERR_ECP_IN_PROGRESS</ref> if maximum number of operations was reached: see <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="543" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="543" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a81f0c5e40b839f5eca676c2c2752036f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_verify_ext</definition>
        <argsstring>(mbedtls_pk_type_t type, const void *options, mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len, const unsigned char *sig, size_t sig_len)</argsstring>
        <name>mbedtls_pk_verify_ext</name>
        <param>
          <type><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_len</declname>
        </param>
        <briefdescription>
<para>Verify signature, with options. (Includes verification of the padding depending on type.) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type (inc. possible padding type) to verify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to type-specific options, or NULL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash algorithm used (see notes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash of the message to sign </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash length or 0 (see notes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature to verify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature length</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success (signature is valid), <ref refid="pk_8h_1a7a7fb7cb156476722c09de42368156dc" kindref="member">MBEDTLS_ERR_PK_TYPE_MISMATCH</ref> if the PK context can&apos;t be used for this type of signatures, <ref refid="pk_8h_1abce78b0c7f04018824b70b816e091dc0" kindref="member">MBEDTLS_ERR_PK_SIG_LEN_MISMATCH</ref> if there is a valid signature in <computeroutput>sig</computeroutput> but its length is less than <computeroutput>sig_len</computeroutput>, or a specific error code.</para>
</simplesect>
<simplesect kind="note"><para>If hash_len is 0, then the length associated with md_alg is used instead, or an error returned if it is invalid.</para>
</simplesect>
<simplesect kind="note"><para>md_alg may be MBEDTLS_MD_NONE, only if hash_len != 0</para>
</simplesect>
<simplesect kind="note"><para>If type is MBEDTLS_PK_RSASSA_PSS, then options must point to a <ref refid="structmbedtls__pk__rsassa__pss__options" kindref="compound">mbedtls_pk_rsassa_pss_options</ref> structure, otherwise it must be NULL. Note that if <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is defined, the salt length is not verified as PSA_ALG_RSA_PSS_ANY_SALT is used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="580" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="580" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1aecfb6c2065979141a220022f1a48dccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_sign</definition>
        <argsstring>(mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len, unsigned char *sig, size_t sig_size, size_t *sig_len, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_pk_sign</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sig_len</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Make signature, including padding if relevant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up with a private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash algorithm used (see notes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash of the message to sign </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>Place to write the signature. It must have enough room for the signature. <ref refid="pk_8h_1af0c8fb77b9ca1c22927cd4b449bad0df" kindref="member">MBEDTLS_PK_SIGNATURE_MAX_SIZE</ref> is always enough. You may use a smaller buffer if it is large enough given the key type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>sig</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>On successful return, the number of bytes written to <computeroutput>sig</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or a specific error code.</para>
</simplesect>
<simplesect kind="note"><para>For RSA keys, the default padding type is PKCS#1 v1.5. There is no interface in the PK module to make RSASSA-PSS signatures yet.</para>
</simplesect>
<simplesect kind="note"><para>For RSA, md_alg may be MBEDTLS_MD_NONE if hash_len != 0. For ECDSA, md_alg may never be MBEDTLS_MD_NONE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="613" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="613" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a86ee1d794a78e198bc59bb761f6735bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_sign_ext</definition>
        <argsstring>(mbedtls_pk_type_t pk_type, mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len, unsigned char *sig, size_t sig_size, size_t *sig_len, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_pk_sign_ext</name>
        <param>
          <type><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref></type>
          <declname>pk_type</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sig_len</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Make signature given a signature type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pk_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up with a private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash algorithm used (see notes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash of the message to sign </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>Place to write the signature. It must have enough room for the signature. <ref refid="pk_8h_1af0c8fb77b9ca1c22927cd4b449bad0df" kindref="member">MBEDTLS_PK_SIGNATURE_MAX_SIZE</ref> is always enough. You may use a smaller buffer if it is large enough given the key type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>sig</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>On successful return, the number of bytes written to <computeroutput>sig</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or a specific error code.</para>
</simplesect>
<simplesect kind="note"><para>When <computeroutput>pk_type</computeroutput> is <ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a8b1bc181a5ea81a49b141925a68d8a92" kindref="member">MBEDTLS_PK_RSASSA_PSS</ref>, see <ref refid="group__crypto__types_1ga62152bf4cb4bf6aace5e1be8f143564d" kindref="member">PSA_ALG_RSA_PSS</ref> for a description of PSS options used.</para>
</simplesect>
<simplesect kind="note"><para>For RSA, md_alg may be MBEDTLS_MD_NONE if hash_len != 0. For ECDSA, md_alg may never be MBEDTLS_MD_NONE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="648" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="648" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a8b1d8b23b5a21f097d3651fee0c89708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_sign_restartable</definition>
        <argsstring>(mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg, const unsigned char *hash, size_t hash_len, unsigned char *sig, size_t sig_size, size_t *sig_len, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng, mbedtls_pk_restart_ctx *rs_ctx)</argsstring>
        <name>mbedtls_pk_sign_restartable</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref></type>
          <declname>md_alg</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sig_len</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref> *</type>
          <declname>rs_ctx</declname>
        </param>
        <briefdescription>
<para>Restartable version of <computeroutput><ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Performs the same job as <computeroutput><ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign()</ref></computeroutput>, but can return early and restart according to the limit set with <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput> to reduce blocking for ECC operations. For RSA, same as <computeroutput><ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign()</ref></computeroutput>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up with a private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_alg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash algorithm used (see notes for <ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash of the message to sign </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>Place to write the signature. It must have enough room for the signature. <ref refid="pk_8h_1af0c8fb77b9ca1c22927cd4b449bad0df" kindref="member">MBEDTLS_PK_SIGNATURE_MAX_SIZE</ref> is always enough. You may use a smaller buffer if it is large enough given the key type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>sig</computeroutput> buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_len</parametername>
</parameternamelist>
<parameterdescription>
<para>On successful return, the number of bytes written to <computeroutput>sig</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rs_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Restart context (NULL to disable restart)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>See <computeroutput><ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign()</ref></computeroutput>. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="ecp_8h_1a6d549348fe93c843c19bfcd102b6e94f" kindref="member">MBEDTLS_ERR_ECP_IN_PROGRESS</ref> if maximum number of operations was reached: see <computeroutput><ref refid="ecp_8h_1a4116275f34714de2218e8969611b6f42" kindref="member">mbedtls_ecp_set_max_ops()</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="686" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="686" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a428e2ffa53bb9bb6cf000452881682c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_decrypt</definition>
        <argsstring>(mbedtls_pk_context *ctx, const unsigned char *input, size_t ilen, unsigned char *output, size_t *olen, size_t osize, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_pk_decrypt</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>osize</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Decrypt message (including padding if relevant). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up with a private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input to decrypt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>Input size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Decrypted output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>Decrypted message length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>osize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the output buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>For RSA keys, the default padding type is PKCS#1 v1.5.</para>
</simplesect>
<simplesect kind="return"><para>0 on success, or a specific error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="710" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="710" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1ae543fd58f365e84cdfe3689ee2f10113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_encrypt</definition>
        <argsstring>(mbedtls_pk_context *ctx, const unsigned char *input, size_t ilen, unsigned char *output, size_t *olen, size_t osize, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_pk_encrypt</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ilen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>osize</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Encrypt message (including padding if relevant). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to encrypt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilen</parametername>
</parameternamelist>
<parameterdescription>
<para>Message size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Encrypted output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>olen</parametername>
</parameternamelist>
<parameterdescription>
<para>Encrypted output length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>osize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the output buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>f_rng</computeroutput> is used for padding generation.</para>
</simplesect>
<simplesect kind="note"><para>For RSA keys, the default padding type is PKCS#1 v1.5.</para>
</simplesect>
<simplesect kind="return"><para>0 on success, or a specific error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="733" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="733" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a1296db060fd790f713a73a6cb23197e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_check_pair</definition>
        <argsstring>(const mbedtls_pk_context *pub, const mbedtls_pk_context *prv, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_pk_check_pair</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>prv</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Check if a public-private pair of keys matches. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Context holding a public key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prv</parametername>
</parameternamelist>
<parameterdescription>
<para>Context holding a private (and public) key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> on success (keys were checked and match each other). </para>
</simplesect>
<simplesect kind="return"><para><ref refid="pk_8h_1af4a79b15d48bd86c96767db4b9ce2caf" kindref="member">MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</ref> if the keys could not be checked - in that case they may or may not match. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="pk_8h_1aab119ef4dc86ea6546472299a259bfe8" kindref="member">MBEDTLS_ERR_PK_BAD_INPUT_DATA</ref> if a context is invalid. </para>
</simplesect>
<simplesect kind="return"><para>Another non-zero value if the keys do not match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="752" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="752" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a0fb685e5a303eb149db2a61296986e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_debug</definition>
        <argsstring>(const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items)</argsstring>
        <name>mbedtls_pk_debug</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__debug__item" kindref="compound">mbedtls_pk_debug_item</ref> *</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Export debug information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>Place to write debug items</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success or MBEDTLS_ERR_PK_BAD_INPUT_DATA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="765" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="765" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a1b0fb8d16905ec72515dd574b77a4518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mbedtls_pk_get_name</definition>
        <argsstring>(const mbedtls_pk_context *ctx)</argsstring>
        <name>mbedtls_pk_get_name</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Access the type name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type name on success, or &quot;invalid PK&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="774" column="12" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="774" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref></type>
        <definition>mbedtls_pk_type_t mbedtls_pk_get_type</definition>
        <argsstring>(const mbedtls_pk_context *ctx)</argsstring>
        <name>mbedtls_pk_get_type</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the key type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to use. It must have been initialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type on success. </para>
</simplesect>
<simplesect kind="return"><para><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a075b125b18a238567d2000c9433b9c79" kindref="member">MBEDTLS_PK_NONE</ref> for a context that has not been set up. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="784" column="19" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="784" declcolumn="19"/>
        <referencedby refid="pk_8h_1a4b9c1b47e90acc7c01800edbfb8cff56" compoundref="pk_8h" startline="820" endline="830">mbedtls_pk_ec</referencedby>
        <referencedby refid="pk_8h_1aadc2f32c8894f421712812d5f1f59568" compoundref="pk_8h" startline="797" endline="805">mbedtls_pk_rsa</referencedby>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1aadc2f32c8894f421712812d5f1f59568" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref> *</type>
        <definition>static mbedtls_rsa_context* mbedtls_pk_rsa</definition>
        <argsstring>(const mbedtls_pk_context pk)</argsstring>
        <name>mbedtls_pk_rsa</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref></type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quick access to an RSA context inside a PK context.</para>
<para><simplesect kind="warning"><para>This function can only be used when the type of the context, as returned by <ref refid="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55" kindref="member">mbedtls_pk_get_type()</ref>, is <ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac4fd7ca431c2e748df4ed0a324dd58c5" kindref="member">MBEDTLS_PK_RSA</ref>. Ensuring that is the caller&apos;s responsibility. Alternatively, you can check whether this function returns NULL.</para>
</simplesect>
<simplesect kind="return"><para>The internal RSA context held by the PK context, or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="797" column="35" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="797" bodyend="805"/>
        <references refid="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55">mbedtls_pk_get_type</references>
        <references refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac4fd7ca431c2e748df4ed0a324dd58c5" compoundref="pk_8h" startline="75">MBEDTLS_PK_RSA</references>
        <references refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" compoundref="private__access_8h" startline="15">MBEDTLS_PRIVATE</references>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a4b9c1b47e90acc7c01800edbfb8cff56" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref> *</type>
        <definition>static mbedtls_ecp_keypair* mbedtls_pk_ec</definition>
        <argsstring>(const mbedtls_pk_context pk)</argsstring>
        <name>mbedtls_pk_ec</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref></type>
          <declname>pk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quick access to an EC context inside a PK context.</para>
<para><simplesect kind="warning"><para>This function can only be used when the type of the context, as returned by <ref refid="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55" kindref="member">mbedtls_pk_get_type()</ref>, is <ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020acc363effd0a7c9d6ac0c0660e25b258c" kindref="member">MBEDTLS_PK_ECKEY</ref>, <ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac589ed0db52ed62be7e4f378bd04e3bf" kindref="member">MBEDTLS_PK_ECKEY_DH</ref>, or <ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a665615a1098e56bbe747a477ee00ad61" kindref="member">MBEDTLS_PK_ECDSA</ref>. Ensuring that is the caller&apos;s responsibility. Alternatively, you can check whether this function returns NULL.</para>
</simplesect>
<simplesect kind="return"><para>The internal EC context held by the PK context, or NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="820" column="35" bodyfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" bodystart="820" bodyend="830"/>
        <references refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a665615a1098e56bbe747a477ee00ad61" compoundref="pk_8h" startline="78">MBEDTLS_PK_ECDSA</references>
        <references refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020acc363effd0a7c9d6ac0c0660e25b258c" compoundref="pk_8h" startline="76">MBEDTLS_PK_ECKEY</references>
        <references refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac589ed0db52ed62be7e4f378bd04e3bf" compoundref="pk_8h" startline="77">MBEDTLS_PK_ECKEY_DH</references>
        <references refid="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55">mbedtls_pk_get_type</references>
        <references refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" compoundref="private__access_8h" startline="15">MBEDTLS_PRIVATE</references>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1aad02107b63f2a47020e6e1ef328e4393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_parse_key</definition>
        <argsstring>(mbedtls_pk_context *ctx, const unsigned char *key, size_t keylen, const unsigned char *pwd, size_t pwdlen, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_pk_parse_key</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>keylen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>pwd</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pwdlen</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Parse a private key in PEM or DER format. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to fill. It must have been initialized but not set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Input buffer to parse. The buffer must contain the input exactly, with no extra trailing material. For PEM, the buffer must contain a null-terminated string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keylen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <bold>key</bold> in bytes. For PEM data, this includes the terminating null byte, so <computeroutput>keylen</computeroutput> must be equal to <computeroutput>strlen(key) + 1</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwd</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional password for decryption. Pass <computeroutput>NULL</computeroutput> if expecting a non-encrypted key. Pass a string of <computeroutput>pwdlen</computeroutput> bytes if expecting an encrypted key; a non-encrypted key will also be accepted. The empty password is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwdlen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the password in bytes. Ignored if <computeroutput>pwd</computeroutput> is <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. Used for blinding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>On entry, ctx must be empty, either freshly initialised with <ref refid="pk_8h_1a999d1160bb30c03d0c4382c3a9b0aa89" kindref="member">mbedtls_pk_init()</ref> or reset with <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref>. If you need a specific key type, check the result with <ref refid="pk_8h_1a2d72c66f5e78abe153bdf08874aaabf6" kindref="member">mbedtls_pk_can_do()</ref>.</para>
</simplesect>
<simplesect kind="note"><para>The key is also checked for correctness.</para>
</simplesect>
<simplesect kind="return"><para>0 if successful, or a specific PK or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="869" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="869" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1ade680bf8e87df7ccc3bb36b52e43972b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_parse_public_key</definition>
        <argsstring>(mbedtls_pk_context *ctx, const unsigned char *key, size_t keylen)</argsstring>
        <name>mbedtls_pk_parse_public_key</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>keylen</declname>
        </param>
        <briefdescription>
<para>Parse a public key in PEM or DER format. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to fill. It must have been initialized but not set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Input buffer to parse. The buffer must contain the input exactly, with no extra trailing material. For PEM, the buffer must contain a null-terminated string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keylen</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <bold>key</bold> in bytes. For PEM data, this includes the terminating null byte, so <computeroutput>keylen</computeroutput> must be equal to <computeroutput>strlen(key) + 1</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>On entry, ctx must be empty, either freshly initialised with <ref refid="pk_8h_1a999d1160bb30c03d0c4382c3a9b0aa89" kindref="member">mbedtls_pk_init()</ref> or reset with <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref>. If you need a specific key type, check the result with <ref refid="pk_8h_1a2d72c66f5e78abe153bdf08874aaabf6" kindref="member">mbedtls_pk_can_do()</ref>.</para>
</simplesect>
<simplesect kind="note"><para>For compressed points, see <ref refid="ecp_8h_1a300814dc5a3ef878a5fb34cc2f185e7a" kindref="member">MBEDTLS_ECP_PF_COMPRESSED</ref> for limitations.</para>
</simplesect>
<simplesect kind="note"><para>The key is also checked for correctness.</para>
</simplesect>
<simplesect kind="return"><para>0 if successful, or a specific PK or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="903" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="903" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a6e850bb7959616cc47a4b5911eeef3ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_parse_keyfile</definition>
        <argsstring>(mbedtls_pk_context *ctx, const char *path, const char *password, int(*f_rng)(void *, unsigned char *, size_t), void *p_rng)</argsstring>
        <name>mbedtls_pk_parse_keyfile</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <param>
          <type>int(*)(void *, unsigned char *, size_t)</type>
          <declname>f_rng</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rng</declname>
        </param>
        <briefdescription>
<para>Load and parse a private key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If <ref refid="mbedtls__config_8h_1a70fd7b97d5f11170546583f2095942a6" kindref="member">MBEDTLS_USE_PSA_CRYPTO</ref> is enabled, the PSA crypto subsystem must have been initialized by calling <ref refid="group__initialization_1ga2de150803fc2f7dc6101d5af7e921dd9" kindref="member">psa_crypto_init()</ref> before calling this function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to fill. It must have been initialized but not set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>filename to read the private key from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional password to decrypt the file. Pass <computeroutput>NULL</computeroutput> if expecting a non-encrypted key. Pass a null-terminated string if expecting an encrypted key; a non-encrypted key will also be accepted. The empty password is not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG function, must not be <computeroutput>NULL</computeroutput>. Used for blinding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>On entry, ctx must be empty, either freshly initialised with <ref refid="pk_8h_1a999d1160bb30c03d0c4382c3a9b0aa89" kindref="member">mbedtls_pk_init()</ref> or reset with <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref>. If you need a specific key type, check the result with <ref refid="pk_8h_1a2d72c66f5e78abe153bdf08874aaabf6" kindref="member">mbedtls_pk_can_do()</ref>.</para>
</simplesect>
<simplesect kind="note"><para>The key is also checked for correctness.</para>
</simplesect>
<simplesect kind="return"><para>0 if successful, or a specific PK or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="934" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="934" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1af5a0ae67100c005638bb74f575ee4ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_parse_public_keyfile</definition>
        <argsstring>(mbedtls_pk_context *ctx, const char *path)</argsstring>
        <name>mbedtls_pk_parse_public_keyfile</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load and parse a public key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to fill. It must have been initialized but not set up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>filename to read the public key from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>On entry, ctx must be empty, either freshly initialised with <ref refid="pk_8h_1a999d1160bb30c03d0c4382c3a9b0aa89" kindref="member">mbedtls_pk_init()</ref> or reset with <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref>. If you need a specific key type, check the result with <ref refid="pk_8h_1a2d72c66f5e78abe153bdf08874aaabf6" kindref="member">mbedtls_pk_can_do()</ref>.</para>
</simplesect>
<simplesect kind="note"><para>The key is also checked for correctness.</para>
</simplesect>
<simplesect kind="return"><para>0 if successful, or a specific PK or PEM error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="955" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="955" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a2cf4ebaa430cc90954c9556ace2d4dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_write_key_der</definition>
        <argsstring>(const mbedtls_pk_context *ctx, unsigned char *buf, size_t size)</argsstring>
        <name>mbedtls_pk_write_key_der</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write a private key to a PKCS#1 or SEC1 DER structure Note: data is written at the end of the buffer! Use the return value to determine where you should start using the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>PK context which must contain a valid private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of data written if successful, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="973" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="973" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a7316929f00feaecc18c1384d3fa05751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_write_pubkey_der</definition>
        <argsstring>(const mbedtls_pk_context *ctx, unsigned char *buf, size_t size)</argsstring>
        <name>mbedtls_pk_write_pubkey_der</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write a public key to a SubjectPublicKeyInfo DER structure Note: data is written at the end of the buffer! Use the return value to determine where you should start using the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>PK context which must contain a valid public or private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of data written if successful, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="988" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="988" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a0c8dbff82fd97c02e2f534548d6db8af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_write_pubkey_pem</definition>
        <argsstring>(const mbedtls_pk_context *ctx, unsigned char *buf, size_t size)</argsstring>
        <name>mbedtls_pk_write_pubkey_pem</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write a public key to a PEM string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>PK context which must contain a valid public or private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to. The output includes a terminating null byte. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="1001" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="1001" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1afccb22770b6089de9c7ecbb90dc8847e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_write_key_pem</definition>
        <argsstring>(const mbedtls_pk_context *ctx, unsigned char *buf, size_t size)</argsstring>
        <name>mbedtls_pk_write_key_pem</name>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write a private key to a PKCS#1 or SEC1 PEM string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>PK context which must contain a valid private key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write to. The output includes a terminating null byte. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="1013" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="1013" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a261a06b48443981316e19bd1c2c377f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_parse_subpubkey</definition>
        <argsstring>(unsigned char **p, const unsigned char *end, mbedtls_pk_context *pk)</argsstring>
        <name>mbedtls_pk_parse_subpubkey</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>Parse a SubjectPublicKeyInfo DER structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the position in the ASN.1 data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>The PK context to fill. It must have been initialized but not set up.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, or a specific PK error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="1033" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="1033" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1accf9dd8e63389e467a59a04f791efc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_write_pubkey</definition>
        <argsstring>(unsigned char **p, unsigned char *start, const mbedtls_pk_context *key)</argsstring>
        <name>mbedtls_pk_write_pubkey</name>
        <param>
          <type>unsigned char **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Write a subjectPublicKey to ASN.1 data Note: function works backwards in data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to current position pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>start of the buffer (for bounds-checking) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>PK context which must contain a valid public or private key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length written or a negative error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="1048" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="1048" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a769bf6ab8da6168d83652b59f3d25802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_load_file</definition>
        <argsstring>(const char *path, unsigned char **buf, size_t *n)</argsstring>
        <name>mbedtls_pk_load_file</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="1057" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="1057" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="pk_8h_1a25880c8fed48fdbb957a11e78c8af7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbedtls_pk_wrap_as_opaque</definition>
        <argsstring>(mbedtls_pk_context *pk, mbedtls_svc_key_id_t *key, psa_algorithm_t alg, psa_key_usage_t usage, psa_algorithm_t alg2)</argsstring>
        <name>mbedtls_pk_wrap_as_opaque</name>
        <param>
          <type><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref></type>
          <declname>usage</declname>
        </param>
        <param>
          <type><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref></type>
          <declname>alg2</declname>
        </param>
        <briefdescription>
<para>Turn an EC or RSA key into an opaque one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is a temporary utility function for tests. It might change or be removed at any time without notice.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>Input: the EC or RSA key to import to a PSA key. Output: a PK context wrapping that PSA key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: a PSA key identifier. It&apos;s the caller&apos;s responsibility to call <ref refid="group__key__management_1ga5f52644312291335682fbc0292c43cd2" kindref="member">psa_destroy_key()</ref> on that key identifier after calling <ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free()</ref> on the PK context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The algorithm to allow for use with that key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para>The usage to allow for use with that key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg2</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary algorithm to allow for use with that key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if successful. </para>
</simplesect>
<simplesect kind="return"><para>An Mbed TLS error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" line="1080" column="5" declfile="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h" declline="1080" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public Key abstraction layer. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>The<sp/>Mbed<sp/>TLS<sp/>Contributors</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>Apache-2.0<sp/>OR<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MBEDTLS_PK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="private__access_8h" kindref="compound">mbedtls/private_access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mbedtls_2build__info_8h" kindref="compound">mbedtls/build_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="md_8h" kindref="compound">mbedtls/md.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_RSA_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rsa_8h" kindref="compound">mbedtls/rsa.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecp_8h" kindref="compound">mbedtls/ecp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECDSA_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecdsa_8h" kindref="compound">mbedtls/ecdsa.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)<sp/>||<sp/>defined(MBEDTLS_PSA_CRYPTO_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypto_8h" kindref="compound">psa/crypto.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="pk_8h_1acf55308a7cac0363ea25de294c8b633d" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_ALLOC_FAILED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x3F80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="pk_8h_1a7a7fb7cb156476722c09de42368156dc" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_TYPE_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x3F00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="pk_8h_1aab119ef4dc86ea6546472299a259bfe8" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_BAD_INPUT_DATA<sp/><sp/><sp/><sp/><sp/><sp/>-0x3E80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="pk_8h_1a334a28580efaab3c749fdf1dde28feb8" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_FILE_IO_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x3E00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="pk_8h_1a9b589f81143439f8580b3004dc8ecaf1" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_KEY_INVALID_VERSION<sp/>-0x3D80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="pk_8h_1a291c7d21aa2cd94b2100703e8e3a1d06" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_KEY_INVALID_FORMAT<sp/><sp/>-0x3D00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="pk_8h_1a877b66447bfa2cd49c1b99f1dc887568" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_UNKNOWN_PK_ALG<sp/><sp/><sp/><sp/><sp/><sp/>-0x3C80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="pk_8h_1a9c1de7ccb4e18a3ea74b35c4e2cb7527" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_PASSWORD_REQUIRED<sp/><sp/><sp/>-0x3C00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="pk_8h_1a24723299c688b1ca6cfa613c19cef6f5" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_PASSWORD_MISMATCH<sp/><sp/><sp/>-0x3B80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="pk_8h_1a0fdf1044cce5beb387d76d19bf4ef0a2" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_INVALID_PUBKEY<sp/><sp/><sp/><sp/><sp/><sp/>-0x3B00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="pk_8h_1a5d71f30a40d67d5d205a20b69303a341" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_INVALID_ALG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0x3A80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="pk_8h_1a802d8b95e9b6a517d597dc92cb591e99" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE<sp/>-0x3A00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="pk_8h_1af4a79b15d48bd86c96767db4b9ce2caf" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE<sp/>-0x3980</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="pk_8h_1abce78b0c7f04018824b70b816e091dc0" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_SIG_LEN_MISMATCH<sp/><sp/><sp/><sp/>-0x3900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="pk_8h_1a8458402f93f01d9de63126ecfed78c4d" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_ERR_PK_BUFFER_TOO_SMALL<sp/><sp/><sp/><sp/>-0x3880</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a075b125b18a238567d2000c9433b9c79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a075b125b18a238567d2000c9433b9c79" kindref="member">MBEDTLS_PK_NONE</ref>=0,</highlight></codeline>
<codeline lineno="75" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac4fd7ca431c2e748df4ed0a324dd58c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac4fd7ca431c2e748df4ed0a324dd58c5" kindref="member">MBEDTLS_PK_RSA</ref>,</highlight></codeline>
<codeline lineno="76" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020acc363effd0a7c9d6ac0c0660e25b258c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020acc363effd0a7c9d6ac0c0660e25b258c" kindref="member">MBEDTLS_PK_ECKEY</ref>,</highlight></codeline>
<codeline lineno="77" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac589ed0db52ed62be7e4f378bd04e3bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac589ed0db52ed62be7e4f378bd04e3bf" kindref="member">MBEDTLS_PK_ECKEY_DH</ref>,</highlight></codeline>
<codeline lineno="78" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a665615a1098e56bbe747a477ee00ad61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a665615a1098e56bbe747a477ee00ad61" kindref="member">MBEDTLS_PK_ECDSA</ref>,</highlight></codeline>
<codeline lineno="79" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020abc435530cb0e61d0fdde8e1a8278e38f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020abc435530cb0e61d0fdde8e1a8278e38f" kindref="member">MBEDTLS_PK_RSA_ALT</ref>,</highlight></codeline>
<codeline lineno="80" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a8b1bc181a5ea81a49b141925a68d8a92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a8b1bc181a5ea81a49b141925a68d8a92" kindref="member">MBEDTLS_PK_RSASSA_PSS</ref>,</highlight></codeline>
<codeline lineno="81" refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a21d8fcc83bd421d8171f8e978608c075" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a21d8fcc83bd421d8171f8e978608c075" kindref="member">MBEDTLS_PK_OPAQUE</ref>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}<sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structmbedtls__pk__rsassa__pss__options" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__pk__rsassa__pss__options" kindref="compound">mbedtls_pk_rsassa_pss_options</ref><sp/>{</highlight></codeline>
<codeline lineno="97" refid="structmbedtls__pk__rsassa__pss__options_1ab5ca5b88636ad6db1af4a67ddf748606" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/><ref refid="structmbedtls__pk__rsassa__pss__options_1ab5ca5b88636ad6db1af4a67ddf748606" kindref="member">mgf1_hash_id</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structmbedtls__pk__rsassa__pss__options_1a7d820886502754155458ba3d846f577d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__rsassa__pss__options_1a7d820886502754155458ba3d846f577d" kindref="member">expected_salt_len</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}<sp/><ref refid="pk_8h_1a91e6f2c5f9aa8ee6d14a26e24305921f" kindref="member">mbedtls_pk_rsassa_pss_options</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>set<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE<sp/>to<sp/>the<sp/>maximum<sp/>signature</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>size<sp/>among<sp/>the<sp/>supported<sp/>signature<sp/>types.<sp/>Do<sp/>it<sp/>by<sp/>starting<sp/>at<sp/>0,</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>then<sp/>incrementally<sp/>increasing<sp/>to<sp/>be<sp/>large<sp/>enough<sp/>for<sp/>each<sp/>supported</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>signature<sp/>mechanism.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>The<sp/>resulting<sp/>value<sp/>can<sp/>be<sp/>0,<sp/>for<sp/>example<sp/>if<sp/>MBEDTLS_ECDH_C<sp/>is<sp/>enabled</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>(which<sp/>allows<sp/>the<sp/>pk<sp/>module<sp/>to<sp/>be<sp/>included)<sp/>but<sp/>neither<sp/>MBEDTLS_ECDSA_C</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>nor<sp/>MBEDTLS_RSA_C<sp/>nor<sp/>any<sp/>opaque<sp/>signature<sp/>mechanism<sp/>(PSA<sp/>or<sp/>RSA_ALT).</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(MBEDTLS_RSA_C)<sp/>||<sp/>defined(MBEDTLS_PK_RSA_ALT_SUPPORT))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MBEDTLS_MPI_MAX_SIZE<sp/>&gt;<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>RSA,<sp/>the<sp/>signature<sp/>can<sp/>be<sp/>as<sp/>large<sp/>as<sp/>the<sp/>bignum<sp/>module<sp/>allows.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>For<sp/>RSA_ALT,<sp/>the<sp/>signature<sp/>size<sp/>is<sp/>not<sp/>necessarily<sp/>tied<sp/>to<sp/>what<sp/>the</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>bignum<sp/>module<sp/>can<sp/>do,<sp/>but<sp/>in<sp/>the<sp/>absence<sp/>of<sp/>any<sp/>specific<sp/>setting,</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>we<sp/>use<sp/>that<sp/>(rsa_alt_sign_wrap<sp/>in<sp/>library/pk_wrap.h<sp/>will<sp/>check).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="pk_8h_1af0c8fb77b9ca1c22927cd4b449bad0df" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE<sp/>MBEDTLS_MPI_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECDSA_C)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MBEDTLS_ECDSA_MAX_LEN<sp/>&gt;<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>ECDSA,<sp/>the<sp/>ecdsa<sp/>module<sp/>exports<sp/>a<sp/>constant<sp/>for<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>signature<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE<sp/>MBEDTLS_ECDSA_MAX_LEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PSA_SIGNATURE_MAX_SIZE<sp/>&gt;<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PSA_SIGNATURE_MAX_SIZE<sp/>is<sp/>the<sp/>maximum<sp/>size<sp/>of<sp/>a<sp/>signature<sp/>made</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>through<sp/>the<sp/>PSA<sp/>API<sp/>in<sp/>the<sp/>PSA<sp/>representation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE<sp/>PSA_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PSA_VENDOR_ECDSA_SIGNATURE_MAX_SIZE<sp/>+<sp/>11<sp/>&gt;<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>Mbed<sp/>TLS<sp/>representation<sp/>is<sp/>different<sp/>for<sp/>ECDSA<sp/>signatures:</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>PSA<sp/>uses<sp/>the<sp/>raw<sp/>concatenation<sp/>of<sp/>r<sp/>and<sp/>s,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>whereas<sp/>Mbed<sp/>TLS<sp/>uses<sp/>the<sp/>ASN.1<sp/>representation<sp/>(SEQUENCE<sp/>of<sp/>two<sp/>INTEGERs).</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>Add<sp/>the<sp/>overhead<sp/>of<sp/>ASN.1:<sp/>up<sp/>to<sp/>(1+2)<sp/>+<sp/>2<sp/>*<sp/>(1+2+1)<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>types,<sp/>lengths<sp/>(represented<sp/>by<sp/>up<sp/>to<sp/>2<sp/>bytes),<sp/>and<sp/>potential<sp/>leading</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>zeros<sp/>of<sp/>the<sp/>INTEGERs<sp/>and<sp/>the<sp/>SEQUENCE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_SIGNATURE_MAX_SIZE<sp/>(PSA_VENDOR_ECDSA_SIGNATURE_MAX_SIZE<sp/>+<sp/>11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>helper<sp/>to<sp/>define<sp/>which<sp/>fields<sp/>in<sp/>the<sp/>pk_context<sp/>structure<sp/>below</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>should<sp/>be<sp/>used<sp/>for<sp/>EC<sp/>keys:<sp/>legacy<sp/>ecp_keypair<sp/>or<sp/>the<sp/>raw<sp/>(PSA<sp/>friendly)</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>format.<sp/>It<sp/>should<sp/>be<sp/>noted<sp/>that<sp/>this<sp/>only<sp/>affects<sp/>how<sp/>data<sp/>is<sp/>stored,<sp/>not</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>which<sp/>functions<sp/>are<sp/>used<sp/>for<sp/>various<sp/>operations.<sp/>The<sp/>overall<sp/>picture<sp/>looks</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>-<sp/>if<sp/>USE_PSA<sp/>is<sp/>not<sp/>defined<sp/>and<sp/>ECP_C<sp/>is<sp/>defined<sp/>then<sp/>use<sp/>ecp_keypair<sp/>data</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/>structure<sp/>and<sp/>legacy<sp/>functions</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>-<sp/>if<sp/>USE_PSA<sp/>is<sp/>defined<sp/>and</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>if<sp/>ECP_C<sp/>then<sp/>use<sp/>ecp_keypair<sp/>structure,<sp/>convert<sp/>data<sp/>to<sp/>a<sp/>PSA<sp/>friendly</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>and<sp/>use<sp/>PSA<sp/>functions</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>if<sp/>!ECP_C<sp/>then<sp/>use<sp/>new<sp/>raw<sp/>data<sp/>and<sp/>PSA<sp/>functions<sp/>directly.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>The<sp/>main<sp/>reason<sp/>for<sp/>the<sp/>&quot;intermediate&quot;<sp/>(USE_PSA<sp/>+<sp/>ECP_C)<sp/>above<sp/>is<sp/>that<sp/>as<sp/>long</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>as<sp/>ECP_C<sp/>is<sp/>defined<sp/>mbedtls_pk_ec()<sp/>gives<sp/>the<sp/>user<sp/>a<sp/>read/write<sp/>access<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>ecp_keypair<sp/>structure<sp/>inside<sp/>the<sp/>pk_context<sp/>so<sp/>they<sp/>can<sp/>modify<sp/>it<sp/>using</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>ECP<sp/>functions<sp/>which<sp/>are<sp/>not<sp/>under<sp/>PK<sp/>module&apos;s<sp/>control.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)<sp/>&amp;&amp;<sp/>defined(PSA_WANT_KEY_TYPE_ECC_PUBLIC_KEY)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(MBEDTLS_ECP_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_USE_PSA_EC_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>symbol<sp/>to<sp/>state<sp/>that<sp/>the<sp/>PK<sp/>module<sp/>has<sp/>support<sp/>for<sp/>EC<sp/>keys.<sp/>This</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>can<sp/>either<sp/>be<sp/>provided<sp/>through<sp/>the<sp/>legacy<sp/>ECP<sp/>solution<sp/>or<sp/>through<sp/>the</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>PSA<sp/>friendly<sp/>MBEDTLS_PK_USE_PSA_EC_DATA.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_USE_PSA_EC_DATA)<sp/>||<sp/>defined(MBEDTLS_ECP_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="pk_8h_1afac63e00977f054b227dd7715bcd4181" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_HAVE_ECC_KEYS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_USE_PSA_EC_DATA<sp/>||<sp/>MBEDTLS_ECP_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="195" refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a67f12e5586337f88ab7a314a454df8a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a67f12e5586337f88ab7a314a454df8a6" kindref="member">MBEDTLS_PK_DEBUG_NONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="196" refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a0dac32d7751890a7f2b548de57eb560d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a0dac32d7751890a7f2b548de57eb560d" kindref="member">MBEDTLS_PK_DEBUG_MPI</ref>,</highlight></codeline>
<codeline lineno="197" refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a53aa0f43ed7f0958c1347755b288c57f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a53aa0f43ed7f0958c1347755b288c57f" kindref="member">MBEDTLS_PK_DEBUG_ECP</ref>,</highlight></codeline>
<codeline lineno="198" refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a98969d05627293036a8df8406670b14a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002a98969d05627293036a8df8406670b14a" kindref="member">MBEDTLS_PK_DEBUG_PSA_EC</ref>,</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}<sp/><ref refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002" kindref="member">mbedtls_pk_debug_type</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="structmbedtls__pk__debug__item" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__pk__debug__item" kindref="compound">mbedtls_pk_debug_item</ref><sp/>{</highlight></codeline>
<codeline lineno="205" refid="structmbedtls__pk__debug__item_1abbc62b0243f5a95ef00a31c628e9ba9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a959c5419b3dd34df5420ee83bbc54002" kindref="member">mbedtls_pk_debug_type</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(type);</highlight></codeline>
<codeline lineno="206" refid="structmbedtls__pk__debug__item_1a61526629e6a8d8cf3022cbb807fbdf81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(name);</highlight></codeline>
<codeline lineno="207" refid="structmbedtls__pk__debug__item_1ac98796c5070310dc875303a8b18cf88a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(value);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}<sp/><ref refid="pk_8h_1ab601bc5645136fa1f0ebb2a72ddf2f64" kindref="member">mbedtls_pk_debug_item</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="pk_8h_1a73c1247ff4513b853b61b0dc36b69892" refkind="member"><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_DEBUG_MAX_ITEMS<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref><sp/><ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="pk_8h_1abb8f1e65f079e1e5af4e0e24639bad8b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MBEDTLS_PK_MAX_EC_PUBKEY_RAW_LEN<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PSA_KEY_EXPORT_ECC_PUBLIC_KEY_MAX_SIZE(PSA_VENDOR_ECC_MAX_CURVE_BITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="structmbedtls__pk__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>{</highlight></codeline>
<codeline lineno="228" refid="structmbedtls__pk__context_1ac98791e4426f0fa1e97e8de8375a9a65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(pk_info);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229" refid="structmbedtls__pk__context_1a583694625dbdb8a313975705872b78d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(pk_ctx);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>field<sp/>is<sp/>used<sp/>to<sp/>store<sp/>the<sp/>ID<sp/>of<sp/>a<sp/>private<sp/>key<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>following<sp/>cases:</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>opaque<sp/>key<sp/>when<sp/>MBEDTLS_PSA_CRYPTO_C<sp/>is<sp/>defined</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>normal<sp/>key<sp/>when<sp/>MBEDTLS_PK_USE_PSA_EC_DATA<sp/>is<sp/>defined.<sp/>In<sp/>this<sp/>case:</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>-<sp/>the<sp/>pk_ctx<sp/>above<sp/>is<sp/>not<sp/>not<sp/>used<sp/>to<sp/>store<sp/>the<sp/>private<sp/>key<sp/>anymore.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Actually<sp/>that<sp/>field<sp/>not<sp/>populated<sp/>at<sp/>all<sp/>in<sp/>this<sp/>case<sp/>because<sp/>also</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>public<sp/>key<sp/>will<sp/>be<sp/>stored<sp/>in<sp/>raw<sp/>format<sp/>as<sp/>explained<sp/>below</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>-<sp/>this<sp/>ID<sp/>is<sp/>used<sp/>for<sp/>all<sp/>private<sp/>key<sp/>operations<sp/>(ex:<sp/>sign,<sp/>check</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>pair,<sp/>key<sp/>write,<sp/>etc)<sp/>using<sp/>PSA<sp/>functions</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>this<sp/>private<sp/>key<sp/>storing<sp/>solution<sp/>only<sp/>affects<sp/>EC<sp/>keys,<sp/>not<sp/>the</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>ones.<sp/>The<sp/>latters<sp/>still<sp/>use<sp/>the<sp/>pk_ctx<sp/>to<sp/>store<sp/>their<sp/>own</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>this<sp/>priv_id<sp/>is<sp/>guarded<sp/>by<sp/>MBEDTLS_PSA_CRYPTO_C<sp/>and<sp/>not<sp/>by</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBEDTLS_PK_USE_PSA_EC_DATA<sp/>(as<sp/>the<sp/>public<sp/>counterpart<sp/>below)<sp/>because,</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>working<sp/>with<sp/>opaque<sp/>keys,<sp/>it<sp/>can<sp/>be<sp/>used<sp/>also<sp/>in</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbedtls_pk_sign_ext<sp/>for<sp/>RSA<sp/>keys.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="structmbedtls__pk__context_1ae8c1a362ef3e9b69b1da56f16eb9c6d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(priv_id);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>fields<sp/>are<sp/>meant<sp/>for<sp/>storing<sp/>the<sp/>public<sp/>key<sp/>in<sp/>raw<sp/>format</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>which<sp/>is<sp/>handy<sp/>for:</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>easily<sp/>importing<sp/>it<sp/>into<sp/>the<sp/>PSA<sp/>context</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>reducing<sp/>the<sp/>ECP<sp/>module<sp/>dependencies<sp/>in<sp/>the<sp/>PK<sp/>one.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>When<sp/>MBEDTLS_PK_USE_PSA_EC_DATA<sp/>is<sp/>enabled:</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>the<sp/>pk_ctx<sp/>above<sp/>is<sp/>not<sp/>used<sp/>anymore<sp/>for<sp/>storing<sp/>the<sp/>public<sp/>key</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>inside<sp/>the<sp/>ecp_keypair<sp/>structure</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>the<sp/>following<sp/>fields<sp/>are<sp/>used<sp/>for<sp/>all<sp/>public<sp/>key<sp/>operations:<sp/>signature</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>verify,<sp/>key<sp/>pair<sp/>check<sp/>and<sp/>key<sp/>write.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Of<sp/>course,<sp/>when<sp/>MBEDTLS_PK_USE_PSA_EC_DATA<sp/>is<sp/>not<sp/>enabled,<sp/>the<sp/>legacy</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>ecp_keypair<sp/>structure<sp/>is<sp/>used<sp/>for<sp/>storing<sp/>the<sp/>public<sp/>key<sp/>and<sp/>performing</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>the<sp/>operations.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>This<sp/>new<sp/>public<sp/>key<sp/>storing<sp/>solution<sp/>only<sp/>works<sp/>for<sp/>EC<sp/>keys,<sp/>not</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>ones.<sp/>The<sp/>latters<sp/>still<sp/>use<sp/>pk_ctx<sp/>to<sp/>store<sp/>their<sp/>own</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_USE_PSA_EC_DATA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(pub_raw)[<ref refid="pk_8h_1abb8f1e65f079e1e5af4e0e24639bad8b" kindref="member">MBEDTLS_PK_MAX_EC_PUBKEY_RAW_LEN</ref>];<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(pub_raw_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gae7ad3569cb9c91b1ebe59a056edb2fc6" kindref="member">psa_ecc_family_t</ref><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ec_family);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(ec_bits);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_USE_PSA_EC_DATA<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}<sp/><ref refid="pk_8h_1a84eac035dbf3072de341ccbfd126a955" kindref="member">mbedtls_pk_context</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECDSA_C)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_ECP_RESTARTABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="structmbedtls__pk__restart__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="282" refid="structmbedtls__pk__restart__ctx_1ab65d7dd4398e7ca5da60e10d45146fe6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(pk_info);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283" refid="structmbedtls__pk__restart__ctx_1a2a747fdb8e6f65cf650675145f13a6c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(rs_ctx);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal">}<sp/><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECDSA_C<sp/>&amp;&amp;<sp/>MBEDTLS_ECP_RESTARTABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>can<sp/>declare<sp/>functions<sp/>that<sp/>take<sp/>a<sp/>pointer<sp/>to<sp/>that<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECDSA_C<sp/>&amp;&amp;<sp/>MBEDTLS_ECP_RESTARTABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_RSA_ALT_SUPPORT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="pk_8h_1a3ec15739d093d55bf5a02f9c3952c047" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="pk_8h_1a3ec15739d093d55bf5a02f9c3952c047" kindref="member">mbedtls_pk_rsa_alt_decrypt_func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_max_len);</highlight></codeline>
<codeline lineno="297" refid="pk_8h_1a324f36b1629873d7a32c7cd18b27759d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="pk_8h_1a324f36b1629873d7a32c7cd18b27759d" kindref="member">mbedtls_pk_rsa_alt_sign_func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t),</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashlen,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="302" refid="pk_8h_1ac1688b04ad105ba002dc47b79ded2e29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="pk_8h_1ac1688b04ad105ba002dc47b79ded2e29" kindref="member">mbedtls_pk_rsa_alt_key_len_func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_RSA_ALT_SUPPORT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref><sp/>*<ref refid="pk_8h_1a05eb3e96499280b250cb71e2ef2d270b" kindref="member">mbedtls_pk_info_from_type</ref>(<ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref><sp/>pk_type);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a999d1160bb30c03d0c4382c3a9b0aa89" kindref="member">mbedtls_pk_init</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1ac6a9786d96abfd73c4dff6814238feb9" kindref="member">mbedtls_pk_free</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECDSA_C)<sp/>&amp;&amp;<sp/>defined(MBEDTLS_ECP_RESTARTABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a68035977bd3664838529bcc0ad95e059" kindref="member">mbedtls_pk_restart_init</ref>(<ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1ab82d0dc78b3262f16087fa4814eeca9c" kindref="member">mbedtls_pk_restart_free</ref>(<ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECDSA_C<sp/>&amp;&amp;<sp/>MBEDTLS_ECP_RESTARTABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a7d6cc2c1768cc6db883b08c3c0f10889" kindref="member">mbedtls_pk_setup</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a5929d902e6b2dad79458c8583ca5c42d" kindref="member">mbedtls_pk_info_t</ref><sp/>*info);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a4c04ac22ab9c1ae09cc29438c308bf05" kindref="member">mbedtls_pk_setup_opaque</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>key);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_RSA_ALT_SUPPORT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1ab719d0b89ef0a49fef2bc8ba20e4726b" kindref="member">mbedtls_pk_setup_rsa_alt</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a3ec15739d093d55bf5a02f9c3952c047" kindref="member">mbedtls_pk_rsa_alt_decrypt_func</ref><sp/>decrypt_func,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pk_8h_1a324f36b1629873d7a32c7cd18b27759d" kindref="member">mbedtls_pk_rsa_alt_sign_func</ref><sp/>sign_func,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pk_8h_1ac1688b04ad105ba002dc47b79ded2e29" kindref="member">mbedtls_pk_rsa_alt_key_len_func</ref><sp/>key_len_func);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_RSA_ALT_SUPPORT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a4a31083a590b155dd54d22cf618eefcc" kindref="member">mbedtls_pk_get_bitlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="pk_8h_1a10b85028a74324c9c581650dfee9dd4d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a10b85028a74324c9c581650dfee9dd4d" kindref="member">mbedtls_pk_get_len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="pk_8h_1a4a31083a590b155dd54d22cf618eefcc" kindref="member">mbedtls_pk_get_bitlen</ref>(ctx)<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a2d72c66f5e78abe153bdf08874aaabf6" kindref="member">mbedtls_pk_can_do</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a256d3e8d4323a45aafa7d2b6c59a36f6" kindref="member">mbedtls_pk_can_do_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/>alg,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref><sp/>usage);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1abf1939cc1d89f6b9fd341b67d5241914" kindref="member">mbedtls_pk_verify</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_len);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1aa3a4baeaab34a94ba0985d4daf41b9ca" kindref="member">mbedtls_pk_verify_restartable</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_len,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref><sp/>*rs_ctx);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a81f0c5e40b839f5eca676c2c2752036f" kindref="member">mbedtls_pk_verify_ext</ref>(<ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*options,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_len);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1aecfb6c2065979141a220022f1a48dccf" kindref="member">mbedtls_pk_sign</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sig_len,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PSA_CRYPTO_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a86ee1d794a78e198bc59bb761f6735bd" kindref="member">mbedtls_pk_sign_ext</ref>(<ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref><sp/>pk_type,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sig_len,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PSA_CRYPTO_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a8b1d8b23b5a21f097d3651fee0c89708" kindref="member">mbedtls_pk_sign_restartable</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="md_8h_1a219313cb40503ec3e34a857ab98b2296" kindref="member">mbedtls_md_type_t</ref><sp/>md_alg,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sig_len,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__pk__restart__ctx" kindref="compound">mbedtls_pk_restart_ctx</ref><sp/>*rs_ctx);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a428e2ffa53bb9bb6cf000452881682c1" kindref="member">mbedtls_pk_decrypt</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>osize,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1ae543fd58f365e84cdfe3689ee2f10113" kindref="member">mbedtls_pk_encrypt</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*olen,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>osize,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a1296db060fd790f713a73a6cb23197e8" kindref="member">mbedtls_pk_check_pair</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*pub,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*prv,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a0fb685e5a303eb149db2a61296986e14" kindref="member">mbedtls_pk_debug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/><ref refid="structmbedtls__pk__debug__item" kindref="compound">mbedtls_pk_debug_item</ref><sp/>*items);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="pk_8h_1a1b0fb8d16905ec72515dd574b77a4518" kindref="member">mbedtls_pk_get_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020" kindref="member">mbedtls_pk_type_t</ref><sp/><ref refid="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55" kindref="member">mbedtls_pk_get_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_RSA_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="pk_8h_1aadc2f32c8894f421712812d5f1f59568" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*<ref refid="pk_8h_1aadc2f32c8894f421712812d5f1f59568" kindref="member">mbedtls_pk_rsa</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>pk)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55" kindref="member">mbedtls_pk_get_type</ref>(&amp;pk))<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac4fd7ca431c2e748df4ed0a324dd58c5" kindref="member">MBEDTLS_PK_RSA</ref>:</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structmbedtls__rsa__context" kindref="compound">mbedtls_rsa_context</ref><sp/>*)<sp/>(pk).<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(pk_ctx);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_RSA_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_ECP_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="820" refid="pk_8h_1a4b9c1b47e90acc7c01800edbfb8cff56" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*<ref refid="pk_8h_1a4b9c1b47e90acc7c01800edbfb8cff56" kindref="member">mbedtls_pk_ec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>pk)</highlight></codeline>
<codeline lineno="821"><highlight class="normal">{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="pk_8h_1ab568e6594c1c4cffaa5046e1e0cada55" kindref="member">mbedtls_pk_get_type</ref>(&amp;pk))<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020acc363effd0a7c9d6ac0c0660e25b258c" kindref="member">MBEDTLS_PK_ECKEY</ref>:</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020ac589ed0db52ed62be7e4f378bd04e3bf" kindref="member">MBEDTLS_PK_ECKEY_DH</ref>:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a3fe41eff5605ae727eb9d28dad297020a665615a1098e56bbe747a477ee00ad61" kindref="member">MBEDTLS_PK_ECDSA</ref>:</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structmbedtls__ecp__keypair" kindref="compound">mbedtls_ecp_keypair</ref><sp/>*)<sp/>(pk).<ref refid="private__access_8h_1a86c7c64c999531bacf3c31619ff9de8d" kindref="member">MBEDTLS_PRIVATE</ref>(pk_ctx);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_ECP_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1aad02107b63f2a47020e6e1ef328e4393" kindref="member">mbedtls_pk_parse_key</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>keylen,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pwd,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pwdlen,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1ade680bf8e87df7ccc3bb36b52e43972b" kindref="member">mbedtls_pk_parse_public_key</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>keylen);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_FS_IO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a6e850bb7959616cc47a4b5911eeef3ef" kindref="member">mbedtls_pk_parse_keyfile</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*password,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f_rng)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p_rng);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1af5a0ae67100c005638bb74f575ee4ad6" kindref="member">mbedtls_pk_parse_public_keyfile</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_FS_IO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_WRITE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a2cf4ebaa430cc90954c9556ace2d4dc0" kindref="member">mbedtls_pk_write_key_der</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a7316929f00feaecc18c1384d3fa05751" kindref="member">mbedtls_pk_write_pubkey_der</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PEM_WRITE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a0c8dbff82fd97c02e2f534548d6db8af" kindref="member">mbedtls_pk_write_pubkey_pem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1afccb22770b6089de9c7ecbb90dc8847e" kindref="member">mbedtls_pk_write_key_pem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PEM_WRITE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_WRITE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/>*<sp/>WARNING:<sp/>Low-level<sp/>functions.<sp/>You<sp/>probably<sp/>do<sp/>not<sp/>want<sp/>to<sp/>use<sp/>these<sp/>unless</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>you<sp/>are<sp/>certain<sp/>you<sp/>do<sp/>;)</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_PARSE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a261a06b48443981316e19bd1c2c377f9" kindref="member">mbedtls_pk_parse_subpubkey</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_PARSE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_PK_WRITE_C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1accf9dd8e63389e467a59a04f791efc0f" kindref="member">mbedtls_pk_write_pubkey</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*key);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_WRITE_C<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/>*<sp/>Internal<sp/>module<sp/>functions.<sp/>You<sp/>probably<sp/>do<sp/>not<sp/>want<sp/>to<sp/>use<sp/>these<sp/>unless<sp/>you</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*<sp/>know<sp/>you<sp/>do.</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_FS_IO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a769bf6ab8da6168d83652b59f3d25802" kindref="member">mbedtls_pk_load_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*n);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MBEDTLS_USE_PSA_CRYPTO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pk_8h_1a25880c8fed48fdbb957a11e78c8af7c0" kindref="member">mbedtls_pk_wrap_as_opaque</ref>(<ref refid="structmbedtls__pk__context" kindref="compound">mbedtls_pk_context</ref><sp/>*pk,</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__key__lifetimes_1ga9a5375bd0cb9694f3a2694adc0a6ae13" kindref="member">mbedtls_svc_key_id_t</ref><sp/>*key,</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/>alg,</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__policy_1ga7bb9de71337e0e98de843aa7f9b55f25" kindref="member">psa_key_usage_t</ref><sp/>usage,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__crypto__types_1gac2e4d47f1300d73c2f829a6d99252d69" kindref="member">psa_algorithm_t</ref><sp/>alg2);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_USE_PSA_CRYPTO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MBEDTLS_PK_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/mnt/e/document/demo/v2/pocketvpn/mbedtls/include/mbedtls/pk.h"/>
  </compounddef>
</doxygen>
